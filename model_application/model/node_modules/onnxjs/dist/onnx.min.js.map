{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./lib/util.ts","webpack:///./lib/tensor.ts","webpack:///./lib/backends/webgl/glsl-source.ts","webpack:///./lib/instrument.ts","webpack:///./lib/wasm-binding.ts","webpack:///./lib/backends/webgl/glsl-definitions.ts","webpack:///./node_modules/protobufjs/src/util/minimal.js","webpack:///./lib/operators.ts","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/onnx-proto/dist/onnx.js","webpack:///./lib/backends/webgl/ops/reshape.ts","webpack:///./lib/opset.ts","webpack:///./node_modules/buffer/index.js","webpack:///./node_modules/long/src/long.js","webpack:///./lib/ops/batch-normalization.ts","webpack:///./lib/ops/binary-op.ts","webpack:///./lib/ops/conv.ts","webpack:///./lib/backends/cpu/ops/matmul.ts","webpack:///./lib/ops/matmul.ts","webpack:///./lib/ops/gemm.ts","webpack:///./lib/ops/pool.ts","webpack:///./lib/ops/softmax.ts","webpack:///./lib/ops/sum.ts","webpack:///./node_modules/process/browser.js","webpack:///./lib/env.ts","webpack:///./lib/api/index.ts","webpack:///./lib/backends/cpu/op-resolve-rules.ts","webpack:///./node_modules/protobufjs/src/writer.js","webpack:///./node_modules/protobufjs/src/reader.js","webpack:///./lib/ops/concat.ts","webpack:///./lib/ops/dropout.ts","webpack:///./lib/ops/flatten.ts","webpack:///./lib/ops/gather.ts","webpack:///./lib/ops/image-scaler.ts","webpack:///./lib/ops/instance-normalization.ts","webpack:///./lib/ops/reduce-op.ts","webpack:///./lib/ops/reshape.ts","webpack:///./lib/ops/slice.ts","webpack:///./lib/ops/squeeze.ts","webpack:///./lib/ops/tile.ts","webpack:///./lib/ops/transpose.ts","webpack:///./lib/backends/cpu/ops/unary-op.ts","webpack:///./lib/ops/unary-op.ts","webpack:///./lib/ops/unsqueeze.ts","webpack:///./lib/ops/clip.ts","webpack:///./lib/backends/webgl/utils.ts","webpack:///./lib/api/tensor-impl.ts","webpack:///./lib/api/tensor-impl-utils.ts","webpack:///./lib/api/onnx-impl.ts","webpack:///./lib/backends/backend-cpu.ts","webpack:///./lib/backends/cpu/session-handler.ts","webpack:///./lib/backends/cpu/inference-handler.ts","webpack:///./lib/backends/cpu/ops/argMax.ts","webpack:///./lib/ops/argMax.ts","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/protobufjs/minimal.js","webpack:///./node_modules/protobufjs/src/index-minimal.js","webpack:///./node_modules/@protobufjs/aspromise/index.js","webpack:///./node_modules/@protobufjs/base64/index.js","webpack:///./node_modules/@protobufjs/eventemitter/index.js","webpack:///./node_modules/@protobufjs/float/index.js","webpack:///./node_modules/@protobufjs/inquire/index.js","webpack:///./node_modules/@protobufjs/utf8/index.js","webpack:///./node_modules/@protobufjs/pool/index.js","webpack:///./node_modules/protobufjs/src/util/longbits.js","webpack:///./node_modules/protobufjs/src/writer_buffer.js","webpack:///./node_modules/protobufjs/src/reader_buffer.js","webpack:///./node_modules/protobufjs/src/rpc.js","webpack:///./node_modules/protobufjs/src/rpc/service.js","webpack:///./node_modules/protobufjs/src/roots.js","webpack:///./lib/backends/cpu/ops/batch-normalization.ts","webpack:///./lib/backends/cpu/ops/binary-op.ts","webpack:///./lib/backends/cpu/ops/concat.ts","webpack:///./lib/backends/cpu/ops/conv.ts","webpack:///./lib/backends/cpu/ops/dropout.ts","webpack:///./lib/backends/cpu/ops/flatten.ts","webpack:///./lib/backends/cpu/ops/gather.ts","webpack:///./lib/backends/cpu/ops/gemm.ts","webpack:///./lib/backends/cpu/ops/image-scaler.ts","webpack:///./lib/backends/cpu/ops/instance-normalization.ts","webpack:///./lib/backends/cpu/ops/lrn.ts","webpack:///./lib/ops/lrn.ts","webpack:///./lib/backends/cpu/ops/pool.ts","webpack:///./lib/backends/cpu/ops/reduce.ts","webpack:///./lib/backends/cpu/ops/reshape.ts","webpack:///./lib/backends/cpu/ops/slice.ts","webpack:///./lib/backends/cpu/ops/softmax.ts","webpack:///./lib/backends/cpu/ops/squeeze.ts","webpack:///./lib/backends/cpu/ops/sum.ts","webpack:///./lib/backends/cpu/ops/tile.ts","webpack:///./lib/backends/cpu/ops/transpose.ts","webpack:///./lib/backends/cpu/ops/unsqueeze.ts","webpack:///./lib/backends/backend-wasm.ts","webpack:///./lib/wasm-binding-core.ts","webpack:///./dist/onnx-wasm.js","webpack:///./node_modules/path-browserify/index.js","webpack:///./lib/worker/worker-main.ts","webpack:///./lib/backends/wasm/session-handler.ts","webpack:///./lib/backends/wasm/inference-handler.ts","webpack:///./lib/backends/wasm/op-resolve-rules.ts","webpack:///./lib/backends/wasm/ops/batch-normalization.ts","webpack:///./lib/backends/wasm/ops/binary-op.ts","webpack:///./lib/backends/wasm/ops/clip.ts","webpack:///./lib/backends/wasm/ops/conv.ts","webpack:///./lib/backends/wasm/ops/gemm.ts","webpack:///./lib/backends/wasm/ops/instance-normalization.ts","webpack:///./lib/backends/wasm/ops/matmul.ts","webpack:///./lib/backends/wasm/ops/pool.ts","webpack:///./lib/backends/wasm/ops/softmax.ts","webpack:///./lib/backends/wasm/ops/sum.ts","webpack:///./lib/backends/backend-webgl.ts","webpack:///./lib/backends/webgl/session-handler.ts","webpack:///./lib/backends/webgl/inference-handler.ts","webpack:///./lib/backends/webgl/ops/uint8-encode.ts","webpack:///./lib/backends/webgl/op-resolve-rules.ts","webpack:///./lib/backends/webgl/ops/batch-normalization.ts","webpack:///./lib/backends/webgl/ops/binary-op.ts","webpack:///./lib/backends/webgl/ops/clip.ts","webpack:///./lib/backends/webgl/ops/concat.ts","webpack:///./lib/backends/webgl/ops/conv.ts","webpack:///./lib/backends/webgl/ops/dropout.ts","webpack:///./lib/backends/webgl/ops/elu.ts","webpack:///./lib/ops/elu.ts","webpack:///./lib/backends/webgl/ops/flatten.ts","webpack:///./lib/backends/webgl/ops/gather.ts","webpack:///./lib/backends/webgl/ops/gemm.ts","webpack:///./lib/backends/webgl/ops/image-scaler.ts","webpack:///./lib/backends/webgl/ops/leaky-relu.ts","webpack:///./lib/ops/leaky-relu.ts","webpack:///./lib/backends/webgl/ops/matmul.ts","webpack:///./lib/backends/webgl/ops/pad.ts","webpack:///./lib/ops/pad.ts","webpack:///./lib/backends/webgl/ops/pool.ts","webpack:///./lib/backends/webgl/ops/reduce.ts","webpack:///./lib/backends/webgl/ops/slice.ts","webpack:///./lib/backends/webgl/ops/softmax.ts","webpack:///./lib/backends/webgl/ops/split.ts","webpack:///./lib/ops/split.ts","webpack:///./lib/backends/webgl/ops/squeeze.ts","webpack:///./lib/backends/webgl/ops/sum.ts","webpack:///./lib/backends/webgl/ops/tile.ts","webpack:///./lib/backends/webgl/ops/transpose.ts","webpack:///./lib/backends/webgl/ops/unary-op.ts","webpack:///./lib/backends/webgl/ops/unsqueeze.ts","webpack:///./lib/backends/webgl/program-manager.ts","webpack:///./node_modules/platform/platform.js","webpack:///(webpack)/buildin/module.js","webpack:///./lib/backends/webgl/glsl-preprocessor.ts","webpack:///./lib/backends/webgl/glsl-function-inliner.ts","webpack:///./lib/backends/webgl/glsl-registered-libs.ts","webpack:///./lib/backends/webgl/glsl-coordinate-lib.ts","webpack:///./lib/backends/webgl/glsl-encoding-lib..ts","webpack:///./lib/backends/webgl/glsl-fragcolor-lib.ts","webpack:///./lib/backends/webgl/glsl-shape-utils-lib.ts","webpack:///./lib/backends/webgl/glsl-vec-lib.ts","webpack:///./lib/backends/webgl/texture-layout-strategy.ts","webpack:///./lib/backends/webgl/texture-manager.ts","webpack:///./lib/backends/webgl/webgl-context-factory.ts","webpack:///./lib/backends/webgl/webgl-context.ts","webpack:///./lib/backends/webgl/texture-data-encoder.ts","webpack:///./lib/api/env-impl.ts","webpack:///./lib/api/tensor.ts","webpack:///./lib/api/inference-session.ts","webpack:///./lib/api/inference-session-impl.ts","webpack:///./lib/session.ts","webpack:///./node_modules/node-libs-browser/node_modules/util/util.js","webpack:///./node_modules/node-libs-browser/node_modules/util/support/isBufferBrowser.js","webpack:///./node_modules/inherits/inherits_browser.js","webpack:///./lib/backend.ts","webpack:///./lib/execution-plan.ts","webpack:///./lib/model.ts","webpack:///./lib/graph.ts","webpack:///./lib/attribute.ts"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","long_1","__importDefault","onnx_proto_1","tensor_1","checkInputsShape","inputs","expectedDimensions","_i","arguments","length","dims","MatMulUtil","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","outputShape","aRank","bRank","splice","pop","calcMatMulShape","b","undefined","BroadcastUtil","calcShape","adims","bdims","isMatMul","arank","brank","crank","Math","max","cdims","Array","cShapeMatMul","_a","__read","aLen","bLen","index","broadcastedIndices","originalShape","originalIndices","fillIndex","dimOffset","calc","op","inplace","resultType","ShapeUtil","areEqual","size","Tensor","type","set","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","j","floor","isValidBroadcast","shape","finalShape","inputRank","finalRank","arrayCopyHelper","target","source","targetIndex","sourceIndex","blockSize","Error","offset","GemmUtil","getShapeOfGemmResult","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","ProtoUtil","tensorDataTypeFromProto","typeProto","onnx","TensorProto","DataType","INT8","UINT8","BOOL","INT16","UINT16","INT32","UINT32","FLOAT","DOUBLE","STRING","INT64","UINT64","tensorDimsFromProto","map","default","isLong","toNumber","tensorValueTypeFromProto","valueType","tensorType","elemType","dim","dimValue","LongUtil","longToNumber","getSizeFromDimensionRange","sizeFromDimension","axis","sizeToDimension","start","end","computeStrides","rank","strides","transpose","slice","reverse","indicesToOffset","indices","offsetToIndices","parseAxis","tensorRank","incrementIndex","axisToIncrementOn","k","calculateReshapedDims","originalDims","shapeHints","nDims","reshapedDims","unknownDimension","newTensorSize","oldTensorSize","sortBasedOnPerm","perm","v","padShape","pad","shape1","shape2","every","validateDimsAndCalcSize","TypeError","dims_1","__values","dims_1_1","next","done","Number","isInteger","flattenShape","total","reduce","x","y","right","squeezeShape","axes","outputDims","some","inSqueezeList","indexOf","push","unsqueezeShape","fill","inputDimsIterator","MathUtil","sqr","pow","axpy","alpha","powx","mul","SplitUtil","splitShape","split","numOutputs","determineSplit","shapes","offsets","numElementsAlongAxis","ReduceUtil","calcReduce","keepdims","op1","op2","forEach","ind","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","numberData","data","dataId","input","curAxisInd","pos","res","step","keepDims","filter","PoolConvUtil","adjustPoolAttributes","isGlobalOperator","inputDims","kernelShape","pads","adjustPadsBasedOnAutoPad","dilations","autoPad","adjustPadAndReturnShape","computePoolOutputShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","stride","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","util_1","dataProvider","asyncDataProvider","cache","this","empty","RangeError","isArray","constructor","dataviewConstructor","buf","ArrayBuffer","sizeof","dataBuffer","createView","getData","_b","sent","_strides","fromProto","tensorProto","dataType","stringData","str","Buffer","from","buffer","byteOffset","byteLength","toString","rawData","dataDest","dataSource","DataView","elementSize","sizeofProto","length_1","readProto","array","floatData","int32Data","int64Data","doubleData","uint64Data","element","fromData","Uint8Array","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","greaterThanOrEqual","lessThan","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","GLSL_ES_2_0","version","attribute","varyingVertex","varyingFrag","texture2D","output","outputDeclaration","GLSL_ES_3_0","getGlsl","getVertexShaderSource","glsl","getFragShaderPreamble","getDefaultFragShaderMain","outputShapeLength","NoOpLoggerProvider","log","severity","content","category","ConsoleLoggerProvider","console","color","SEVERITY_VALUE","verbose","info","warning","error","LOGGER_PROVIDER_MAP","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","stack","config","Date","toISOString","reset","previousConfig","Logger","Event","startTime","endCallback","EventRecord","endTime","Profiler","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","event","func","begin","isPromise","res_1","then","Promise","resolve","reject","reason","_this","flush","e","toFixed","currentTime","previousPointer","performance","workers","WORKER_NUMBER","completeCallbacks","instrument_1","bindingCore","__importStar","initialized","initializing","init","numWorkers","initTimeout","waitForBindingInitTimeoutId","clearWaitForBindingInit","clearTimeout","onFulfilled","bindingInitTask","rejectAfterTimeOutPromise","setTimeout","Worker","workerInitTasks","workerId","workerInitTask","resolveWorkerInit","rejectWorkerInit","worker","onerror","onmessage","perfData","shift","race","all","err","WasmBinding","_super","__extends","getInstance","instance","ccallRemote","functionName","params","calculateOffsets","ccallSerialize","postMessage","perf","startTimeWorker","endTimeWorker","ccallDeserialize","FunctionType","GlslContext","glContext","programInfo","GlslLib","context","GlslLibRoutine","routineBody","dependencies","GlslLibRoutineNode","addDependency","node","TopologicalSortGlslRoutines","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","result","createOrderedNodes","graphNodes","dfsTraverse","has","add","delete","global","util","merge","dst","src","ifNotSet","keys","newError","CustomError","message","properties","captureStackTrace","asPromise","base64","EventEmitter","float","inquire","utf8","pool","LongBits","self","emptyArray","freeze","emptyObject","isNode","Boolean","process","versions","isFinite","isString","String","isObject","isset","isSet","obj","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","Long","dcodeIO","key2Re","key32Re","key64Re","longToHash","toHash","zeroHash","longFromHash","hash","unsigned","bits","fromHash","lo","hi","lcFirst","charAt","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","bytes","json","_configure","encoding","allocUnsafe","NUMBER_TYPES","INT_TYPES","FLOAT_TYPES","g","Function","$protobuf","$Reader","Reader","$Writer","Writer","$util","$root","roots","valuesById","values","Version","AttributeProto","floats","ints","strings","tensors","graphs","refAttrName","docString","f","encode","writer","uint32","string","int64","fork","ldelim","GraphProto","int32","encodeDelimited","decode","reader","len","tag","end2","skipType","decodeDelimited","verify","low","high","fromObject","fromValue","parseInt","toObject","options","arrays","defaults","long","AttributeType","toJSON","ValueInfoProto","TypeProto","NodeProto","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","Dimension","$oneOfFields","dimParam","denotation","oneofs","reshape_1","utils_1","WebGLReshape","run","inferenceHandler","integerData","reshape","Reshape","inputTD","getOrCreateTextureData","packedShape","channels","getPackedShape","newTextureLayout","height","width","unpackedShape","createSharedTextureData","texture","tensor","matchSelector","selector","endsWith","rangeStart","isNaN","pair","rangeEnd","resolveOperator","opsets","rules","rules_1","rules_1_1","rule","versionSelector","opConstructor","opsets_1","e_2","opsets_1_1","opset","join","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","__proto__","arg","encodingOrOffset","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","isBuffer","checked","copy","val","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","substr","blitBuffer","asciiWrite","byteArray","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","min","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","configurable","allocUnsafeSlow","_isBuffer","compare","concat","list","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","match","thisStart","thisEnd","thisCopy","targetCopy","includes","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","wasm","WebAssembly","Instance","Module","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","other","notEquals","neq","ne","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","gte","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","ceil","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","BatchNormalization","initialize","attributes","epsilon","getFloat","momentum","spatial","getInt","checkInputs","checkInputTypes","X","scale","B","mean","var_","BinaryOp","typeConstraint","Conv","getString","getInts","group","spatialRank","matmul_1","CpuMatMul","matMul","MatMul","mat2dShape","num2dMatrices","offsetY","indicesA","indicesB","offsetA","offsetB","matMul2d","A","C","transA","transB","beta","offsetC","mm","nn","sum","kk","matMul2d_tAtB","matMul2d_tA","matMul2d_tB","matMul2d_","Gemm","PoolBase","AveragePool","countIncludePad","ceilMode","GlobalAveragePool","MaxPool","storageOrder","GlobalMaxPool","Softmax","Sum","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","marker","runClearTimeout","Item","noop","nextTick","args","title","browser","env","argv","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask","platform","EnvironmentImpl","backend","debug","onnxImpl","operators_1","argMax_1","batch_normalization_1","binary_op_1","concat_1","conv_1","dropout_1","flatten_1","gather_1","gemm_1","image_scaler_1","instance_normalization_1","lrn_1","pool_1","cpuReduce","slice_1","softmax_1","squeeze_1","sum_1","tile_1","transpose_1","unaryOps","unary_op_1","unsqueeze_1","CPU_OP_RESOLVE_RULES","CpuUnaryOp","abs","acos","acosh","CpuBinaryOp","e1","e2","CpuArgMax","asin","asinh","atan","atanh","CpuAveragePool","CpuBatchNormalization","clip","clipInitializer","CpuConcat","CpuConv","cos","cosh","CpuDropout","elu","eluInitializer","exp","CpuFlatten","CpuGather","CpuGemm","CpuGlobalAveragePool","CpuGlobalMaxPool","CpuImageScaler","CpuInstanceNormalization","isNan","leakyRelu","leakyReluInitializer","CpuLrn","CpuMaxPool","reciprocal","CpuReduceLogSum","CpuReduceMax","CpuReduceMean","CpuReduceMin","CpuReduceProd","CpuReduceSum","CpuReduceSumSquare","relu","CpuReshape","sigmoid","sign","sin","sinh","CpuSliceV10","CpuSlice","CpuSoftmax","sqrt","CpuSqueeze","CpuSum","tan","tanh","CpuTile","CpuTranspose","CpuUnsqueeze","BufferWriter","Op","fn","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","sint32","sint64","zzEncode","bool","fixed32","sfixed32","fixed64","sfixed64","writeBytes","finish","BufferWriter_","BufferReader","indexOutOfRange","writeLength","create_array","readLongVarint","readFixed32_end","readFixed64","_slice","skip","wireType","BufferReader_","zzDecode","Concat","inputType","inputDimensionality","inputs_1","inputs_1_1","Dropout","ratio","testMode","Flatten","Gather","ImageScaler","bias","getFloats","InstanceNormalization","ReduceBase","Slice","starts","ends","SliceV10","Squeeze","Tile","Transpose","attributesInitializer","unaryOp","UnaryOp","Unsqueeze","Clip","Utils","inferredDims","internalTensor","indexArray","__spread","validateIndices","idx","matchElementType","tensor_impl_1","fromInternalTensor","toInternalTensor","indices_1","indices_1_1","backend_cpu_1","backend_wasm_1","backend_webgl_1","env_impl_1","__export","cpu","CpuBackend","WasmBackend","webgl","WebGLBackend","ENV","envImpl","session_handler_1","createSessionHandler","CpuSessionHandler","dispose","opset_1","inference_handler_1","op_resolve_rules_1","createInferenceHandler","CpuInferenceHandler","profiler","session","argMax","ArgMax","Y","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","protobuf","configure","build","rpc","ctx","pending","s64","chunk","test","_listeners","evt","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloat_ieee754","writeUint","round","exponent","readFloat_ieee754","readUint","uint","mantissa","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDouble_ieee754","off0","off1","readDouble_ieee754","moduleName","eval","c1","c2","SIZE","MAX","slab","zero","toLong","mask","part0","part1","part2","writeBytesBuffer","writeStringBuffer","Service","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","callback","response","endedByRPC","batchNormalization","variance","inputDimensions","channelSize","scaleData","bData","meanData","varianceData","nc","opLambda","binaryOp","Util","input0","inputShape","concatAxisSize","dataNShape","dataN","axisIndex","axisPitch","outputBase","inputIndex","inputAxisPitch","inputData","inputSize","outputOffset","w","wDims","conv2d","W","input_num","input_channels","input_height","input_width","filter_num","filter_channels","filter_height","filter_width","filter_size","kernel_shape","output_num","output_channels","output_height","output_width","output_image_size","X_offset","Y_offset","W_offset","kernel_dim","col_buffer_data","image_id","X_image_offset","Y_image_offset","group_id","im2col","biasData","outputData","batchSize","outputChannels","dataSize","batch","channel","data_im","data_col","kernel_h","kernel_w","dilation_h","dilation_w","pad_t","pad_l","pad_b","pad_r","stride_h","stride_w","output_h","output_w","height_col","width_col","channels_col","w_offset","h_offset","c_im","h","h_pad","w_pad","nip","kh","kw","dst_offset","src_offset","iy","ix","dropout","isTestMode","flatten","gather","newDims","indicesData","dimsStrides","newDimsStrides","newLogicalIndex","oldLogicalIndex","oldOffset","gemm","imageScaler","H","hw","instanceNormalization","temp","physicalOffset","iterEnd","currentChannel","lrn","Lrn","tensorDataSize","paddedSquareData","alphaOverSize","prePad","scaleSliceStart","averagePool","globalAveragePool","maxPool","globalMaxPool","MIN_SAFE_INTEGER","startVal","processOp","finalOp","kernelSize","kernelStrides","stridesRank","outputSize","outputStride","curInd","startInd","isPad","reduce_op_1","reduceSum","reduceSumSquare","reduceLogSum","reduceMax","reduceMin","reduceMean","reduceProd","numItems","adjustedStarts","newDimsStride","oldDimsStride","softmax","axisCorrected","D","squeeze","tile","repeats","finalPerm","inpDim","numElementsInBlock","numAxesInPrefix","suffixBlocksize","prefixBlocksize","isSuffix","inpAxis","numAxes","targetDims","numBlocks","startTargetIndex","sourceOffset","doTransposeEltWise","sizeOffset","doTranspose","unsqueeze","wasmBinding","cpuFallback","checkIfNumWorkersIsValid","isWasmSupported","WasmSessionHandler","e_1","ptr8","numBytesAllocated","ccall","expandMemory","HEAPU8","startTimeFunc","endTimeFunc","ccallRaw","param","paramData","paramType","paramPass","heapU8","heap32","heapU32","heapF32","offset8","offset32","boolArray","int32Array","float32Array","minBytesRequired","_free","_malloc","_scriptDir","document","currentScript","moduleOverrides","status","toThrow","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","importScripts","nodeFS","nodePath","scriptDirectory","__dirname","filename","binary","assert","ex","ExitStatus","abort","readbuffer","scriptArgs","quit","location","href","url","xhr","XMLHttpRequest","open","send","responseText","responseType","onload","print","printErr","warn","asm2wasmImports","f64-rem","debugger","wasmMemory","tempRet0","setTempRet0","ABORT","condition","text","HEAP8","HEAP32","UTF8Decoder","TextDecoder","UTF8ArrayToString","u8Array","maxBytesToRead","endIdx","endPtr","u0","u1","u2","ch","UTF8ToString","ptr","alignUp","multiple","updateGlobalBufferViews","DYNAMICTOP_PTR","INITIAL_TOTAL_MEMORY","callRuntimeCallbacks","callbacks","Memory","initial","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATEXIT__","__ATPOSTRUN__","runtimeInitialized","runDependencies","runDependencyWatcher","dependenciesFulfilled","dataURIPrefix","isDataURI","startsWith","path","wasmBinaryFile","getBinary","createWasm","global.Math","asm2wasm","receiveInstance","id","clearInterval","removeRunDependency","receiveInstantiatedSource","instantiateArrayBuffer","receiver","fetch","credentials","catch","instantiate","instantiateStreaming","__ZSt18uncaught_exceptionv","uncaught_exception","___cxa_free_exception","providedBuffer","Table","maximum","EXCEPTIONS","last","caught","infos","deAdjust","adjusted","adj","addRef","refcount","decRef","rethrown","destructor","clearRef","SYSCALLS","buffers","printChar","stream","curr","varargs","getStr","get64","getZero","flush_NO_FILESYSTEM","fflush","_emscripten_get_heap_size","emscripten_realloc_buffer","oldSize","grow","_emscripten_resize_heap","requestedSize","newSize","replacement","asmLibraryArg","getTempRet0","___assert_fail","line","___cxa_allocate_exception","___cxa_find_matching_catch","thrown","throwntype","typeArray","___cxa_throw","___gxx_personality_v0","___lock","___resumeException","___setErrNo","___syscall140","which","getStreamFromFD","offset_low","whence","FS","llseek","position","getdents","ErrnoError","errno","___syscall146","iov","iovcnt","___syscall54","___syscall6","close","___unlock","_abort","_emscripten_memcpy_big","dest","_llvm_trap","abortOnCannotGrowMemory","tempDoublePtr","asm","doRun","cb","unshift","postRun","preRun","what","JSON","stringify","old","runCaller","normalizeArray","allowAboveRoot","up","splitPathRe","splitPath","exec","xs","resolvedPath","resolvedAbsolute","normalize","isAbsolute","trailingSlash","paths","relative","to","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dirname","basename","extname","op_resolve_rules_2","fallbackToCpuOps","opResolveRules","WASM_OP_RESOLVE_RULES","WasmInferenceHandler","clip_1","WasmBinaryOp","WasmAveragePool","WasmBatchNormalization","WasmClip","WasmConv","WasmGemm","WasmGlobalAveragePool","WasmGlobalMaxPool","WasmInstanceNormalization","WasmMatMul","WasmMaxPool","WasmSoftmax","WasmSum","wasm_binding_1","binaryOpType","numThreads","numFilterMaps","numWebWorkers","determineNumThreads","workerNumber","wDimsSp","wSizeSp","wDimsFinal","yDimsSp","ySizeSp","yDimsFinal","wArray","yArray","bArray","workerTasks","resultData","poolType","poolFunc","numChannels","xDimsSp","xSizeSp","xDimsFinal","webgl_context_factory_1","createWebGLContext","contextId","matmulMaxBatchSize","textureCacheMode","WebGLSessionHandler","program_manager_1","texture_layout_strategy_1","texture_manager_1","programManager","ProgramManager","layoutStrategy","AlwaysKeepOriginalSizeStrategy","maxTextureSize","textureManager","TextureManager","reuseTextures","textureDataCache","Map","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","isInitializer","tensorId","getTextureData","setTextureData","textureData","clearActiveTextures","td","releaseTexture","WEBGL_OP_RESOLVE_RULES","uint8_encode_1","artifact","getArtifact","createProgramInfo","setArtifact","runData","createRunData","outputTextureData","layout","createTextureLayoutFromShape","createTextureData","createTextureDataFromLayout","createTextureDataFromLayoutBindTensor","usage","createTextureFromLayout","createTextureDataFromTexture","__assign","readTexture","getOrCreateTextureLayout","prefs","computeTextureWH","isFloat32DownloadSupported","uint8TD","WebGLUint8Encode","runInternal","readUint8TextureAsFloat","glsl_source_1","outputLayout","inputLayouts","samplers","shaderSource","hasMain","encoder","getEncoder","allocateTexture","inputTextureDatas","uniformData","binaryOps","elu_1","leaky_relu_1","pad_1","reduceOps","split_1","WebGLUnaryOp","glslAbs","glslAcos","WebGLBinaryOp","glslAdd","glslAnd","glslAsin","glslAtan","WebGLAveragePool","WebGLBatchNormalization","glslCeil","WebGLClip","WebGLConcat","WebGLConv","glslCos","glslDiv","WebGLDropout","glslEqual","WebGLElu","glslExp","WebGLFlatten","glslFloor","WebGLGather","WebGLGemm","WebGLGlobalAveragePool","WebGLGlobalMaxPool","glslGreater","glslIdentity","WebGLImageScaler","WebGLLeakyRelu","glslLess","glslLog","WebGLMatMul","WebGLMaxPool","glslMul","glslNeg","glslNot","glslOr","WebGLPad","glslPow","glslPRelu","WebGLReduceLogSum","WebGLReduceMax","WebGLReduceMean","WebGLReduceMin","WebGLReduceProd","WebGLReduceSum","WebGLReduceSumSquare","glslRelu","glslSigmoid","glslSin","WebGLSliceV10","WebGLSlice","WebGLSoftmax","WebGLSplit","outputs","glslSqrt","WebGLSqueeze","glslSub","WebGLSum","glslTan","glslTanh","WebGLTile","WebGLTranspose","WebGLUnsqueeze","glslXor","handler","inputTDs","outputTD","glsl_definitions_1","glslFunc","outputRank","aBcast","bBcast","shaderSource_1","body","ValueBased","fname","glslBuiltinBinary","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getValueFromArrayIndexMethod","variables","arrayLength","sizeInConcatAxis","previousSum","numberOfTensors","codeLines","arrayRank","readSize","artifacts","programInfos","createProgramInfos","runDatas","createRunDatas","xshape","kshape","calcOutputShape","im2colProgramInfo","createIm2ColProgramInfo","createDotProductProgramInfo","kTD","newKernelData","prepKernelForDotProduct","runtDataIm2Col","draw","gl","sharedDim","sharedDimReadSize","sharedDimOffsetLocation","uniformLocations","find","blend","k_1","enable","BLEND","checkError","blendEquation","FUNC_ADD","blendFunc","uniform1i","disable","im2colDims","calcIm2ColDims","breakAxis","im2colLayout","bLayout","adjustedKernelShape","kLayout","initValue","isBlendSupported","calcSharedDimReadSize","oldRowSize","newRowSize","rowbuf","newOffset","adjustPads","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","preferredBatchSize","calcBlockSize","toExponential","Elu","indexDataShape","indexCopyOps","aShape","bShape","cShape","oShape","createGetBiasMethod","LeakyRelu","alayout","getPadFunction","Pad","inputLayout","block","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","GeneratePoolingCode","createMaxPoolProgramInfo","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","sh","phStart","phEnd","dimH","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","cur","arrayName","WebGLGenericReduce","iRank","idxCopy","ops","getOps","idxZero","sliceOps","pi","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","textureWidth","textureHeight","createComputScaleProgramInfo","xlayout","createComputeMaxProgramInfo","computeMaxProgramInfo","computeScaleProgramInfo","count","getProgramCount","results","rundata","Split","sumLine","tileOps","getOutputShape","inputShapes","getAdjustedPerm","unpackedOutputShape","getPermFunctionBody","getPositionalFunction","Positional","reverseFunc","glslBuiltinUnary","env_1","glsl_preprocessor_1","repo","attributesBound","buildArtifact","program","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","doDraw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","preprocess","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","compileShader","VERTEX_SHADER","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","uniformLocations_1","uniformLocations_1_1","name_1","location_1","bindTexture","uniform1fv","uniform1f","uniform1iv","uniformHandle","bindTextureToUniform","getAttribLocation","samplers_1","samplers_1_1","sampler","getUniformLocation","variables_1","variables_1_1","variable","reference","__WEBPACK_AMD_DEFINE_RESULT__","objectTypes","function","freeExports","freeModule","nodeType","freeGlobal","maxSafeInteger","reOpera","objectProto","capitalize","toUpperCase","format","forOwn","getClassOf","qualify","accumulator","each","parse","ua","isCustomContext","nav","navigator","userAgent","isSpecialCasedOS","likeChrome","airRuntimeClass","enviroClass","javaClass","java","phantomClass","rhino","environment","doc","opera","operamini","operaClass","arch","description","prerelease","useFeatures","label","pattern","guess","RegExp","guesses","getName","product","getProduct","manufacturer","getManufacturer","Apple","iPad","iPhone","iPod","Archos","Amazon","Kindle","Kindle Fire","Asus","Transformer","Barnes & Noble","Nook","BlackBerry","PlayBook","Google","Google TV","Nexus","HP","TouchPad","HTC","LG","Microsoft","Xbox","Xbox One","Motorola","Xoom","Nintendo","Wii U","Wii","Nokia","Lumia","Samsung","Galaxy S","Galaxy S2","Galaxy S3","Galaxy S4","Sony","PlayStation","PlayStation Vita","os","10.0","6.4","6.3","6.2","6.1","6.0","5.2","5.1","5.01","5.0","4.0","4.90","cleanupOS","getOS","parseFloat","runtime","flash","system","Capabilities","phantom","major","minor","patch","documentMode","lang","System","getProperty","require","electron","nw","appMinorVersion","external","architecture","family","cpuClass","webpackPolyfill","deprecate","children","glsl_function_inliner_1","glsl_registered_libs_1","libs","glslLibRoutineDependencyGraph","glslRegistry","lib","libName","routinesInLib","getFunctions","routine","currentNode","replaceInlines","getUniforms","getImports","script","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","uniformLines","INLINE_FUNC_DEF_REGEX","FUNC_CALL_REGEX","inlineDefs","tokens","regexString","regex","declLine","newBody","paramRedecLine","glsl_coordinate_lib_1","glsl_encoding_lib_1","glsl_fragcolor_lib_1","glsl_shape_utils_lib_1","glsl_vec_lib_1","EncodingGlslLib","fragcolor","FragColorGlslLib","vec","VecGlslLib","shapeUtils","ShapeUtilsGlslLib","coordinates","CoordsGlslLib","offsetToCoords","coordsToOffset","toVec","valueFrom","getCustomTypes","xScale","yScale","stridesBlock","funcName","getValueFromSingle","varName","encodeFloat32","decodeFloat32","encodeUint8","endianness","isLittleEndian","decodeUint8","setFragColor","getColorAsFloat","bcastIndex","bcastMatmulIndex","incrementIndices","i_1","i_2","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","i_3","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","assignmentBlock","wsize","hsize","totalSize","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","internalFormat","textureType","texture_1","updateTexture","toTextureData","toTensorData","deleteTexture","webgl_context_1","createNewWebGLContext","canvas","createElement","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","DEPTH_TEST","STENCIL_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","SCISSOR_TEST","CULL_FACE","cullFace","BACK","DataEncoders","frameBufferBound","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","allocate","readPixels","RGBA","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","textureFloatExtension","RGBA32F","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","R32F","RED","textureSize","ALPHA","UNSIGNED_BYTE","TensorImpl","InferenceSessionImpl","InferenceSession","session_1","tensorUtils","Session","loadModel","Blob","URL","createObjectURL","inputFeed","modelInputFeed_1","modelInputFeed_2","modelInputFeed","convertedOutput","startProfiling","endProfiling","fs_1","backend_1","execution_plan_1","model_1","_initialized","backendHint","graphInputTypes","graphInputDims","__awaiter","Backend","sessionHandler","_model","Model","promisify","readFile","arrayBuffer","modelProtoBlob","graphInitializer","transformGraph","load","initializeOps","_executionPlan","ExecutionPlan","_ops","inputTensors","normalizeAndValidateInputs","execute","outputTensors","createOutput","modelInputNames","getInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","getInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","getOutputNames","getNodes","getOwnPropertyDescriptors","descriptors","getOwnPropertyDescriptor","formatRegExp","objects","_","isNull","msg","noDeprecation","warned","throwDeprecation","traceDeprecation","trace","debugEnviron","debugs","opts","seen","stylize","stylizeNoColor","colors","isBoolean","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","style","styles","recurseTimes","isFunction","primitive","simple","isNumber","formatPrimitive","visibleKeys","arrayToHash","getOwnPropertyNames","isError","formatError","isRegExp","isDate","base","braces","toUTCString","formatProperty","formatArray","prev","numLinesEst","reduceToSingleString","desc","ar","re","objectToString","debuglog","NODE_DEBUG","pid","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","null","date","regexp","isNullOrUndefined","isSymbol","isPrimitive","months","time","getHours","getMinutes","getSeconds","getDate","getMonth","inherits","origin","kCustomPromisifiedSymbol","callbackifyOnRejected","newReason","original","writable","promiseResolve","promiseReject","promise","setPrototypeOf","getPrototypeOf","defineProperties","custom","callbackify","callbackified","maybeCb","rej","ctor","superCtor","super_","TempCtor","backendsCache","tryLoadBackend","backendObj","isBackend","disabled","hint","hints","hints_1","hints_1_1","KernelOp","_starter","resolved","_c","_values","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","this_1","inputList","outputList","downstreamNodes","_d","currentDownstreamNodeIndex","currentDownstreamNode","_e","e_3","_f","getOutputIndices","outputIndex","thisValue","graph_1","modelProto","_opsets","_graph","Graph","attribute_1","graphProto","GraphImpl","Value","_from","_to","Node","_nodeProto","Attribute","executeNode","buildGraph","checkIsAcyclic","_allInputIndices","_allInputNames","_allOutputIndices","_allOutputNames","_allData","_nodes","dataIndices","nodesIndices","inputValueNames","_g","_h","currentIndex","_j","_k","_l","_m","_o","_p","nodeProto","pick","_q","e_5","_r","dataIndex","_s","e_6","_t","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","finalizeGraph","this_2","out_i_1","this_3","ind_1","out_i_2","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","nodesConsumingOutput_1","nodesConsumingOutput_1_1","nodeIndex_1","replaceIndex","_attributes","attributes_1","attributes_1_1","attr","getValue","getType","defaultValue","getTensor","getStrings","getTensors","valueAndType","INT","TENSOR","FLOATS","INTS","STRINGS","TENSORS","GRAPH","GRAPHS","getValueNoCheck","numberValue","maybeLong","utf8String"],"mappings":"CAAA,SAAAA,EAAAC,GACA,oBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,SACA,sBAAAG,eAAAC,IACAD,OAAA,GAAAH,OACA,CACA,IAAAK,EAAAL,IACA,QAAAM,KAAAD,GAAA,iBAAAJ,gBAAAF,GAAAO,GAAAD,EAAAC,IAPA,CASCC,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAT,QAGA,IAAAC,EAAAM,EAAAE,GAAA,CACAJ,EAAAI,EACAC,GAAA,EACAV,QAAA,IAUA,OANAW,EAAAF,GAAAG,KAAAX,EAAAD,QAAAC,IAAAD,QAAAQ,GAGAP,EAAAS,GAAA,EAGAT,EAAAD,QA0DA,OArDAQ,EAAAK,EAAAF,EAGAH,EAAAM,EAAAP,EAGAC,EAAAO,EAAA,SAAAf,EAAAgB,EAAAC,GACAT,EAAAU,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CT,EAAAe,EAAA,SAAAvB,GACA,oBAAAwB,eAAAC,aACAN,OAAAC,eAAApB,EAAAwB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAApB,EAAA,cAAiD0B,OAAA,KAQjDlB,EAAAmB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAlB,EAAAkB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAvB,EAAAe,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAlB,EAAAO,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAtB,EAAA0B,EAAA,SAAAjC,GACA,IAAAgB,EAAAhB,KAAA4B,WACA,WAA2B,OAAA5B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAO,EAAAO,EAAAE,EAAA,IAAAA,GACAA,GAIAT,EAAAU,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD5B,EAAA+B,EAAA,GAIA/B,IAAAgC,EAAA,mpBC/EA,IAAAC,EAAAC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,GAGAoC,EAAApC,EAAA,GAMAR,EAAA6C,iBAAA,SAAiCC,OAAkB,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,GACjD,IAAKF,GAAUA,EAAOI,SAAWH,EAAmBG,OAClD,OAAO,EAET,IAAK,IAAI7C,EAAI,EAAGA,EAAIyC,EAAOI,OAAQ7C,IACjC,IAAKyC,EAAOzC,GAAG8C,MAAQL,EAAOzC,GAAG8C,KAAKD,SAAWH,EAAmB1C,GAClE,OAAO,EAGX,OAAO,GAGT,IAAA+C,EAAA,oBAAAA,KAkDA,OA3CSA,EAAAC,sBAAP,SAA6BC,EAA8BC,GAYzD,MAAO,CAPqB,IAAjBD,EAAMJ,OAAgB,CAAC,EAAGI,EAAM,IAAMA,EAKrB,IAAjBC,EAAML,OAAgB,CAACK,EAAM,GAAI,GAAKA,IAY5CH,EAAAI,uBAAP,SAA8BC,EAAuBC,EAAeC,GAEpD,IAAVD,GAEFD,EAAYG,OAAOH,EAAYP,OAAS,EAAG,GAG/B,IAAVS,GACFF,EAAYI,OAUTT,EAAAU,gBAAP,SAAuB1D,EAAqB2D,GAC1C,OAAQ3D,EAAE,KAAO2D,EAAE,QAAMC,EAAY,CAAC5D,EAAE,GAAI2D,EAAE,KAElDX,EAlDA,GAAapD,EAAAoD,aAoDb,IAAAa,EAAA,oBAAAA,KA4KA,OApKSA,EAAAC,UAAP,SAAiBC,EAA8BC,EAA8BC,cAAA,IAAAA,OAAA,GAE3E,IAAMC,EAAQH,EAAMjB,OACdqB,EAAQH,EAAMlB,OACpB,GAAc,IAAVoB,EACF,OAAOF,EAET,GAAc,IAAVG,EACF,OAAOJ,EAET,IAAMK,EAAQC,KAAKC,IAAIP,EAAMjB,OAAQkB,EAAMlB,QACrCyB,EAAQ,IAAIC,MAAcJ,GAGhC,GAAIH,EAAU,CACZ,GAAIC,EAAQ,GAAKC,EAAQ,EACvB,OAEF,IAAMM,EACFzB,EAAWU,gBAAgB,CAACK,EAAMG,EAAQ,GAAIH,EAAMG,EAAQ,IAAK,CAACF,EAAMG,EAAQ,GAAIH,EAAMG,EAAQ,KACtG,QAAqBP,IAAjBa,EACF,OAEFC,EAAAC,EAAAF,EAAA,GAACF,EAAAH,EAAA,GAAAM,EAAA,GAAkBH,EAAAH,EAAA,GAAAM,EAAA,GAGrB,IAAK,IAAIzE,EAAIgE,EAAW,EAAI,EAAGhE,GAAKmE,EAAOnE,IAAK,CAC9C,IAAM2E,EAAOV,EAAQjE,EAAI,EAAI,EAAI8D,EAAMG,EAAQjE,GACzC4E,EAAOV,EAAQlE,EAAI,EAAI,EAAI+D,EAAMG,EAAQlE,GAE/C,GAAI2E,IAASC,GAAQD,EAAO,GAAKC,EAAO,EACtC,OAEFN,EAAMH,EAAQnE,GAAKoE,KAAKC,IAAIM,EAAMC,GAGpC,OAAON,GASFV,EAAAiB,MAAP,SAAaC,EAA2CC,GAItD,IAAMC,EAAkB,IAAIT,MAAMQ,EAAclC,QAEhD,OADAe,EAAcqB,UAAUH,EAAoBC,EAAeC,GACpDA,GAUFpB,EAAAqB,UAAP,SACIH,EAA2CC,EAAsCC,GAKnF,IADA,IAAME,EAAYJ,EAAmBjC,OAASkC,EAAclC,OACnD7C,EAAI,EAAGA,EAAI+E,EAAclC,OAAQ7C,IACxCgF,EAAgBhF,GAAK8E,EAAmBI,EAAYlF,GAAK+E,EAAc/E,IAYpE4D,EAAAuB,KAAP,SACIpF,EAAW2D,EAAW0B,EAA+DC,EACrFC,GACF,IAAMlC,EAAcQ,EAAcC,UAAU9D,EAAE+C,KAAMY,EAAEZ,MAEtD,GAAIM,EAAa,CACf,GAAIiC,IAAYE,EAAUC,SAASpC,EAAarD,EAAE+C,MAEhD,OAGF,IAAM2C,EAAOF,EAAUE,KAAKrC,GACtB3C,EAAI4E,EAAUtF,EAAI,IAAIwC,EAAAmD,OAAOtC,EAAakC,GAAcvF,EAAE4F,MAGhE,GAA2B,IAAvBvC,EAAYP,OACdpC,EAAEmF,IAAI,GAAIR,EAAGrF,EAAEkB,IAAI,IAAKyC,EAAEzC,IAAI,UAI3B,CACH,IAAM4E,EAAgB,IAAItB,MAAcnB,EAAYP,QAC9CiD,EAAmB,IAAIvB,MAAMxE,EAAE+C,KAAKD,QACpCkD,EAAmB,IAAIxB,MAAMb,EAAEZ,KAAKD,QACtCmD,EAAsB,EACtBC,EAAsB,EACtBC,GAAY,EACZC,GAAY,EACM,IAAlBpG,EAAE+C,KAAKD,SACTmD,EAAOjG,EAAEkB,IAAI,IACbiF,GAAY,GAEQ,IAAlBxC,EAAEZ,KAAKD,SACToD,EAAOvC,EAAEzC,IAAI,IACbkF,GAAY,GAGd,IADA,IAAIC,OAAI,EACCpG,EAAI,EAAGA,EAAIyF,EAAMzF,IAAK,CAE7BoG,EAAOpG,EACP,IAAK,IAAIqG,EAAIjD,EAAYP,OAAS,EAAGwD,GAAK,EAAGA,IAC3CR,EAAcQ,GAAKD,EAAOhD,EAAYiD,GACtCD,EAAOhC,KAAKkC,MAAMF,EAAOhD,EAAYiD,IAGlCH,IAEHtC,EAAcqB,UAAUY,EAAe9F,EAAE+C,KAAMgD,GAC/CE,EAAOjG,EAAEkB,IAAI6E,IAEVK,IACHvC,EAAcqB,UAAUY,EAAenC,EAAEZ,KAAMiD,GAC/CE,EAAOvC,EAAEzC,IAAI8E,IAGftF,EAAEmF,IAAIC,EAAeT,EAAGY,EAAMC,KAIlC,OAAOxF,IAWJmD,EAAA2C,iBAAP,SAAwBC,EAA8BC,GAEpD,IAAMC,EAAYF,EAAM3D,OAClB8D,EAAYF,EAAW5D,OAC7B,GAAI6D,EAAYC,EACd,OAAO,EAET,IAAK,IAAI3G,EAAI,EAAGA,GAAK0G,EAAW1G,IAC9B,GAA6B,IAAzBwG,EAAME,EAAY1G,IAAYwG,EAAME,EAAY1G,KAAOyG,EAAWE,EAAY3G,GAChF,OAAO,EAGX,OAAO,GAEX4D,EA5KA,GAAajE,EAAAiE,gBAgLbjE,EAAAiH,gBAAA,SACIC,EAAoCC,EAAoCC,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAeF,EAAOjE,OAC3C,MAAM,IAAIqE,MAAM,6BAElB,GAAIH,EAAc,GAAKA,GAAeF,EAAOhE,OAC3C,MAAM,IAAIqE,MAAM,6BAElB,GAAIF,EAAcC,EAAYH,EAAOjE,OACnC,MAAM,IAAIqE,MAAM,kDAElB,GAAIH,EAAcE,EAAYJ,EAAOhE,OACnC,MAAM,IAAIqE,MAAM,4CAGlB,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAWE,IACvCN,EAAOE,EAAcI,GAAUL,EAAOE,EAAcG,IAIxD,IAAAC,EAAA,oBAAAA,KA+CA,OA3CSA,EAAAC,qBAAP,SACIC,EAAkCC,EAAoBC,EAAmCC,EACzFC,GACF,GAAyB,IAArBJ,EAAUzE,QAAsC,IAAtB2E,EAAW3E,OACvC,MAAM,IAAIqE,MAAM,8BAGlB,IAAIS,EACAC,EACAC,EAEAN,GACFI,EAAIL,EAAU,GACdM,EAAIN,EAAU,KAEdK,EAAIL,EAAU,GACdM,EAAIN,EAAU,IAGhB,IAAIQ,GAAQ,EAUZ,GARIL,GACFI,EAAIL,EAAW,GACfM,EAAO,IAEPD,EAAIL,EAAW,GACfM,EAAO,GAGLN,EAAWM,KAAUF,EACvB,MAAM,IAAIV,MAAM,sBAGlB,GAAIS,GAAK,GAAKE,GAAK,GAAKD,GAAK,EAC3B,MAAM,IAAIV,MAAM,2BAGlB,IAAKtD,EAAc2C,iBAAiBmB,EAAW,CAACC,EAAGE,IACjD,MAAM,IAAIX,MAAM,0CAGlB,MAAO,CAACS,EAAGE,EAAGD,IAElBR,EA/CA,GAAazH,EAAAyH,WAiDb,IAAAW,EAAA,oBAAAA,KA+CA,OA9CSA,EAAAC,wBAAP,SAA+BC,GAC7B,OAAQA,GACN,KAAK3F,EAAA4F,KAAKC,YAAYC,SAASC,KAC7B,MAAO,OACT,KAAK/F,EAAA4F,KAAKC,YAAYC,SAASE,MAC7B,MAAO,QACT,KAAKhG,EAAA4F,KAAKC,YAAYC,SAASG,KAC7B,MAAO,OACT,KAAKjG,EAAA4F,KAAKC,YAAYC,SAASI,MAC7B,MAAO,QACT,KAAKlG,EAAA4F,KAAKC,YAAYC,SAASK,OAC7B,MAAO,SACT,KAAKnG,EAAA4F,KAAKC,YAAYC,SAASM,MAC7B,MAAO,QACT,KAAKpG,EAAA4F,KAAKC,YAAYC,SAASO,OAC7B,MAAO,SACT,KAAKrG,EAAA4F,KAAKC,YAAYC,SAASQ,MAC7B,MAAO,UACT,KAAKtG,EAAA4F,KAAKC,YAAYC,SAASS,OAC7B,MAAO,UACT,KAAKvG,EAAA4F,KAAKC,YAAYC,SAASU,OAC7B,MAAO,SAIT,KAAKxG,EAAA4F,KAAKC,YAAYC,SAASW,MAC7B,MAAO,QACT,KAAKzG,EAAA4F,KAAKC,YAAYC,SAASY,OAC7B,MAAO,SAET,QACE,MAAM,IAAI9B,MAAM,0BAA0B5E,EAAA4F,KAAKC,YAAYC,SAASH,MAInEF,EAAAkB,oBAAP,SAA2BnG,GAEzB,OAAOA,EAAKoG,IAAI,SAAAxI,GAAK,OAAA0B,EAAA+G,QAAKC,OAAO1I,GAAMA,EAAW2I,WAAa3I,KAG1DqH,EAAAuB,yBAAP,SAAgCC,GAC9B,MAAO,CACLC,WAAYzB,EAAUC,wBAAwBuB,EAAUE,UACxDjD,MAAO,CAAC1D,KAAMiF,EAAUkB,oBAAoBM,EAAU/C,MAAOkD,IAAKR,IAAI,SAAAxI,GAAK,OAAAA,EAAEiJ,eAGnF5B,EA/CA,GAAapI,EAAAoI,YAiDb,IAAA6B,EAAA,oBAAAA,KAOA,OANSA,EAAAC,aAAP,SAAoBhI,GAClB,OAAIO,EAAA+G,QAAKC,OAAOvH,GACNA,EAAWwH,WAEdxH,GAEX+H,EAPA,GAAajK,EAAAiK,WASb,IAAArE,EAAA,oBAAAA,KAoUA,OAnUSA,EAAAE,KAAP,SAAY3C,GACV,OAAOyC,EAAUuE,0BAA0BhH,EAAM,EAAGA,EAAKD,SAIpD0C,EAAAwE,kBAAP,SAAyBjH,EAA6BkH,GACpD,GAAIA,EAAO,GAAKA,EAAOlH,EAAKD,OAC1B,MAAM,IAAIqE,MAAM,wBAAwB8C,EAAI,wCAAwClH,EAAKD,OAAM,gBAEjG,OAAO0C,EAAUuE,0BAA0BhH,EAAMkH,EAAMlH,EAAKD,SAIvD0C,EAAA0E,gBAAP,SAAuBnH,EAA6BkH,GAClD,GAAIA,EAAO,GAAKA,EAAOlH,EAAKD,OAC1B,MAAM,IAAIqE,MAAM,wBAAwB8C,EAAI,sCAAsClH,EAAKD,OAAM,gBAE/F,OAAO0C,EAAUuE,0BAA0BhH,EAAM,EAAGkH,IAG/CzE,EAAAuE,0BAAP,SAAiChH,EAA6BoH,EAAeC,GAE3E,IADA,IAAI1E,EAAO,EACFzF,EAAIkK,EAAOlK,EAAImK,EAAKnK,IAAK,CAGhC,GAAI8C,EAAK9C,IAAM,EACb,MAAM,IAAIkH,MAEN,sHAENzB,GAAQ3C,EAAK9C,GAEf,OAAOyF,GAGFF,EAAA6E,eAAP,SAAsBtH,GACpB,IAAMuH,EAAOvH,EAAKD,OAClB,GAAa,IAATwH,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAAC,GAEV,IAAMC,EAAU,IAAI/F,MAAM8F,GAC1BC,EAAQD,EAAO,GAAK,EACpBC,EAAQD,EAAO,GAAKvH,EAAKuH,EAAO,GAChC,IAAK,IAAIrK,EAAIqK,EAAO,EAAGrK,GAAK,IAAKA,EAC/BsK,EAAQtK,GAAKsK,EAAQtK,EAAI,GAAK8C,EAAK9C,EAAI,GAEzC,OAAOsK,GAGF/E,EAAAgF,UAAP,SAAiBzH,GAEf,OADaA,EAAK0H,QACNC,WAGPlF,EAAAmF,gBAAP,SAAuBC,EAAgCL,EAAgCN,QACxErG,IAATqG,IACFA,EAAOW,EAAQ9H,QAGjB,IADA,IAAIsE,EAAS,EACJnH,EAAI,EAAGA,EAAIgK,IAAQhK,EAC1BmH,GAAUmD,EAAQtK,GAAK2K,EAAQ3K,GAEjC,OAAOmH,GAGF5B,EAAAqF,gBAAP,SAAuBzD,EAAgBmD,GACrC,IAAMD,EAAOC,EAAQzH,OACrB,GAAa,IAATwH,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAAClD,EAASmD,EAAQ,IAG3B,IADA,IAAMK,EAAoB,IAAIpG,MAAM+F,EAAQzH,QACnC7C,EAAI,EAAGA,EAAI2K,EAAQ9H,OAAS,IAAK7C,EACxC2K,EAAQ3K,GAAKoE,KAAKkC,MAAMa,EAASmD,EAAQtK,IACzCmH,GAAUwD,EAAQ3K,GAAKsK,EAAQtK,GAGjC,OADA2K,EAAQA,EAAQ9H,OAAS,GAAKsE,EACvBwD,GAGFpF,EAAAsF,UAAP,SAAiBb,EAAcc,GAC7B,GAAId,GAAQc,GAAcd,GAAQc,EAChC,MAAM,IAAI5D,MAAM,wCAElB,OAAO8C,EAAO,EAAIA,EAAOc,EAAad,GAWjCzE,EAAAwF,eAAP,SAAsBlG,EAAiB/B,EAA6BkI,GAClE,GAAoB,IAAhBlI,EAAKD,QAAiC,IAAjBgC,EAAMhC,OAC7B,MAAM,IAAIqE,MAAM,oDAElB,QAA0BvD,IAAtBqH,EACFA,EAAoBlI,EAAKD,YAEzB,GAAImI,GAAqB,GAAKA,EAAoBlI,EAAKD,OACrD,MAAM,IAAIqE,MAAM,kCAIpB,IAAK,IAAI+D,EAAID,EAAoB,EAAGC,GAAK,IACvCpG,EAAMoG,OACFpG,EAAMoG,GAAKnI,EAAKmI,OAFwBA,EAK5CpG,EAAMoG,GAAK,GAgBR1F,EAAA2F,sBAAP,SACIC,EACAC,GAEF,GAA0B,IAAtBA,EAAWvI,OAAc,CAC3B,GAA4B,IAAxBsI,EAAatI,QAAiD,IAAjC0C,EAAUE,KAAK0F,GAC9C,MAAO,GAEP,MAAM,IAAIjE,MAAM,qCAQpB,IAJA,IAAMmE,EAAQD,EAAWvI,OACnByI,EAAe,IAAI/G,MAAc8G,GACnCE,GAAoB,EACpBC,EAAgB,EACXxL,EAAI,EAAGA,EAAIqL,EAAOrL,IAAK,CAC9B,GAAIoL,EAAWpL,IAAM,EACnB,MAAM,IAAIkH,MAAM,qDAElB,IAAuB,IAAnBkE,EAAWpL,GAAW,CACxB,IAA0B,IAAtBuL,EACF,MAAM,IAAIrE,MAAM,kDAElBqE,EAAmBvL,MACd,CACL,GAAsB,IAAlBoL,EAAWpL,GAAU,CACvB,GAAIA,GAAKmL,EAAatI,OACpB,MAAM,IAAIqE,MAAM,gFAElBoE,EAAatL,GAAKmL,EAAanL,QAE/BsL,EAAatL,GAAKoL,EAAWpL,GAE/BwL,GAAiBF,EAAatL,IAIlC,IAAMyL,EAAgBlG,EAAUE,KAAK0F,GACrC,IAA0B,IAAtBI,EAAyB,CAC3B,GAAIE,EAAgBD,GAAkB,EACpC,MAAM,IAAItE,MAAM,6EACZiE,EAAY,oBAAoBC,EAAU,KAEhDE,EAAaC,GAAoBE,EAAgBD,OAIjD,GAAIA,IAAkBC,EACpB,MAAM,IAAIvE,MAAM,2DAGpB,OAAOoE,GASF/F,EAAAmG,gBAAP,SAAuB3L,EAA0B4L,GAC/C,OAAIA,EACKA,EAAKzC,IAAI,SAAC0C,GAAM,OAAA7L,EAAE6L,KAElB7L,EAAEyK,QAAQC,WASdlF,EAAAsG,SAAP,SAAgB/I,EAA6BgJ,GAC3C,IAAMzB,EAAOvH,EAAKD,OAClB,OAAOC,EAAKoG,IAAI,SAAC0C,EAAG5L,GAAM,OAAA4L,EAAIE,EAAI9L,GAAK8L,EAAI9L,EAAIqK,MAQ1C9E,EAAAC,SAAP,SAAgBuG,EAA+BC,GAC7C,OAAID,EAAOlJ,SAAWmJ,EAAOnJ,QAGtBkJ,EAAOE,MAAM,SAACL,EAAG5L,GAAM,OAAA4L,IAAMI,EAAOhM,MAOtCuF,EAAA2G,wBAAP,SAA+BpJ,WAC7B,GAAIA,EAAKD,OAAS,EAChB,MAAM,IAAIsJ,UAAU,mDAEtB,IAAI1G,EAAO,MACX,IAAgB,IAAA2G,EAAAC,EAAAvJ,GAAIwJ,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAE,CAAjB,IAAM1K,EAACyK,EAAAjL,MACV,IAAKoL,OAAOC,UAAU7K,GACpB,MAAM,IAAIsK,UAAU,kBAAkBtK,EAAC,sBAEzC,GAAIA,GAAK,GAAKA,EAAI,WAChB,MAAM,IAAIsK,UAAU,yBAAyBtK,EAAC,mBAEhD4D,GAAQ5D,oGAEV,OAAO4D,GAQFF,EAAAoH,aAAP,SAAoB7J,EAA6BkH,GAC/C,IAAM4C,EAAQ9J,EAAK+J,OAAO,SAACC,EAAGC,GAAM,OAAAD,EAAIC,GAAG,GACrCC,EAAQlK,EAAK0H,MAAMR,GAAM6C,OAAO,SAACC,EAAGC,GAAM,OAAAD,EAAIC,GAAG,GAGvD,MAFmB,CAACH,EAAQI,EAAOA,IAU9BzH,EAAA0H,aAAP,SAAoBnK,EAA6BoK,GAC/C,IAAMC,EAAa,IAAI5I,MAGvB,GAAI2I,EAAKE,KAAK,SAAApD,GAAQ,OAAAA,GAAQlH,EAAKD,QAAUmH,EAAO,IAClD,MAAM,IAAI9C,MAAM,mCAGlB,IAAK,IAAIlH,EAAI,EAAGA,EAAI8C,EAAKD,OAAQ7C,IAAK,CACpC,IAAMqN,EAAgBH,EAAKI,QAAQtN,IAAM,EACzC,GAAIqN,GAA6B,IAAZvK,EAAK9C,GACxB,MAAM,IAAIkH,MAAM,6CAGG,IAAhBgG,EAAKrK,QAAgBC,EAAK9C,GAAK,GAAOkN,EAAKrK,OAAS,IAAMwK,IAC7DF,EAAWI,KAAKzK,EAAK9C,IAIzB,OAAOmN,GAQF5H,EAAAiI,eAAP,SAAsB1K,EAA6BoK,GACjD,IAAMC,EAAa,IAAI5I,MAAczB,EAAKD,OAASqK,EAAKrK,QAGxDsK,EAAWM,KAAK,GAGhB,IAAK,IAAIzN,EAAI,EAAGA,EAAIkN,EAAKrK,OAAQ7C,IAAK,CACpC,IAAMgK,EAAOkD,EAAKlN,GAClB,GAAIgK,GAAQmD,EAAWtK,OACrB,MAAM,IAAIqE,MAAM,mCAElB,GAAyB,IAArBiG,EAAWnD,GACb,MAAM,IAAI9C,MAAM,+BAGlBiG,EAAWnD,GAAQ,EAIrB,IAAI0D,EAAoB,EACxB,IAAS1N,EAAI,EAAGA,EAAImN,EAAWtK,OAAQ7C,IACf,IAAlBmN,EAAWnN,KACbmN,EAAWnN,GAAK8C,EAAK4K,MAMzB,GAAIA,IAAsB5K,EAAKD,OAC7B,MAAM,IAAIqE,MAAM,qDAGlB,OAAOiG,GAEX5H,EApUA,GAAa5F,EAAA4F,YAuUb,IAAAoI,EAAA,oBAAAA,KAwFA,OAtFSA,EAAAC,IAAP,SACI/G,EAAoCC,EAAoCC,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAeF,EAAOjE,OAC3C,MAAM,IAAIqE,MAAM,6BAElB,GAAIH,EAAc,GAAKA,GAAeF,EAAOhE,OAC3C,MAAM,IAAIqE,MAAM,6BAElB,GAAIF,EAAcC,EAAYH,EAAOjE,OACnC,MAAM,IAAIqE,MAAM,kDAElB,GAAIH,EAAcE,EAAYJ,EAAOhE,OACnC,MAAM,IAAIqE,MAAM,4CAGlB,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAWE,IACvCN,EAAOE,EAAcI,IAAW/C,KAAKyJ,IAAI/G,EAAOE,EAAcG,GAAS,IAKpEwG,EAAAG,KAAP,SACIjH,EAAoCC,EAAoCC,EAAqBC,EAC7FC,EAAmB8G,GACrB,GAAI/G,EAAc,GAAKA,GAAeF,EAAOjE,OAC3C,MAAM,IAAIqE,MAAM,6BAElB,GAAIH,EAAc,GAAKA,GAAeF,EAAOhE,OAC3C,MAAM,IAAIqE,MAAM,6BAElB,GAAIF,EAAcC,EAAYH,EAAOjE,OACnC,MAAM,IAAIqE,MAAM,kDAElB,GAAIH,EAAcE,EAAYJ,EAAOhE,OACnC,MAAM,IAAIqE,MAAM,4CAGlB,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAWE,IACvCN,EAAOE,EAAcI,IAAY4G,EAAQjH,EAAOE,EAAcG,IAK3DwG,EAAAK,KAAP,SACInH,EAAoCC,EAAoCC,EAAqBC,EAC7FC,EAAmBvD,GACrB,GAAIsD,EAAc,GAAKA,GAAeF,EAAOjE,OAC3C,MAAM,IAAIqE,MAAM,6BAElB,GAAIH,EAAc,GAAKA,GAAeF,EAAOhE,OAC3C,MAAM,IAAIqE,MAAM,6BAElB,GAAIF,EAAcC,EAAYH,EAAOjE,OACnC,MAAM,IAAIqE,MAAM,kDAElB,GAAIH,EAAcE,EAAYJ,EAAOhE,OACnC,MAAM,IAAIqE,MAAM,4CAGlB,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAWE,IACvCN,EAAOE,EAAcI,GAAU/C,KAAKyJ,IAAI/G,EAAOE,EAAcG,GAASzD,IAKnEiK,EAAAM,IAAP,SACIpH,EAAoCC,EAAoCC,EAAqBC,EAC7FC,GACF,GAAID,EAAc,GAAKA,GAAeF,EAAOjE,OAC3C,MAAM,IAAIqE,MAAM,6BAElB,GAAIH,EAAc,GAAKA,GAAeF,EAAOhE,OAC3C,MAAM,IAAIqE,MAAM,6BAElB,GAAIF,EAAcC,EAAYH,EAAOjE,OACnC,MAAM,IAAIqE,MAAM,kDAElB,GAAIH,EAAcE,EAAYJ,EAAOhE,OACnC,MAAM,IAAIqE,MAAM,4CAGlB,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAWE,IACvCN,EAAOE,EAAcI,GAAWL,EAAOE,EAAcG,GAAUN,EAAOE,EAAcI,IAG1FwG,EAxFA,GAAahO,EAAAgO,WA0Fb,IAAAO,EAAA,oBAAAA,KAsCA,OA/BSA,EAAAC,WAAP,SAAkBrL,EAA6BkH,EAAcoE,EAAiBC,GAE5E,GAAqB,IAAjBD,EAAMvL,OAAc,CACtB,IAAKwL,EACH,MAAM,IAAInH,MAAM,8EAElBgH,EAAUI,eAAexL,EAAKkH,GAAOqE,EAAYD,GAKnD,IAFA,IAAMG,EAAqB,GACrBC,EAAU,CAAC,GACRxO,EAAI,EAAGA,EAAIoO,EAAMvL,SAAU7C,EAAG,CAC3B,IAANA,GACFwO,EAAQjB,KAAKiB,EAAQxO,EAAI,GAAKoO,EAAMpO,EAAI,IAE1C,IAAMwG,EAAQ1D,EAAK0H,QACnBhE,EAAMwD,GAAQoE,EAAMpO,GACpBuO,EAAOhB,KAAK/G,GAEd,MAAO,CAAC+H,EAAQC,IAGXN,EAAAI,eAAP,SAAsBG,EAA8BJ,EAAoBD,GAEtE,GAAIK,EAAuBJ,GAAe,EACxC,MAAM,IAAInH,MAAM,4CAElB,IAAK,IAAIlH,EAAI,EAAGA,EAAIqO,IAAcrO,EAChCoO,EAAMb,KAAKkB,EAAuBJ,IAGxCH,EAtCA,GAAavO,EAAAuO,YAwCb,IAAAQ,EAAA,oBAAAA,KA4FA,OAlFSA,EAAAC,WAAP,SACI5O,EAAWmN,EAAgB0B,EAAmBC,EAC9CC,GACF,IAAMhM,EAAO/C,EAAE+C,KAAK0H,MAAM,GAEN,IAAhB0C,EAAKrK,QACPC,EAAKiM,QAAQ,SAACrO,EAAGsO,GAAQ,OAAA9B,EAAKK,KAAKyB,KAWrC,IARA,IAAM7B,EAAauB,EAAWO,gBAAgBnM,EAAMoK,GAAM,GAGpDzH,EAAOF,EAAUE,KAAK0H,GACtBJ,EAAI,IAAIxK,EAAAmD,OAAOyH,EAAYpN,EAAE4F,MAC7B2E,EAAU/E,EAAU6E,eAAe+C,GACnC+B,EAAe3J,EAAU6E,eAAetH,GACxCqM,EAAW,IAAI5K,MAAMzB,EAAKD,QACvB7C,EAAI,EAAGA,EAAIyF,EAAMzF,IAAK,CAC7B,IAAM2K,EAAUpF,EAAUqF,gBAAgB5K,EAAGsK,GAE7C1G,EAAcqB,UAAU0F,EAAS7H,EAAMqM,GACvCpC,EAAEnH,IACE+E,EACA+D,EAAWU,iBACPrP,EAAEsP,WAAYnC,EAAMpK,EAAM,EAAGyC,EAAUmF,gBAAgByE,EAAUD,GAAeL,EAAKC,IAG/F,OAAIF,EACK7B,EAGA,IAAIxK,EAAAmD,OACPgJ,EAAWO,gBAAgBnM,EAAMoK,EAAM0B,GAAW7B,EAAEpH,UAAMhC,OAAWA,EAAWoJ,EAAEuC,KAAMvC,EAAEwC,SAe3Fb,EAAAU,iBAAP,SACII,EAA0BtC,EAAgBpK,EAAgB2M,EAAoBC,EAC9Eb,EAA4BC,GAC9B,IAAIa,EAAM,EACV,GAAIF,GAAcvC,EAAKrK,OACrB,OAAOgM,EAAIW,EAAME,IAInB,IAFA,IAAM1F,EAAOkD,EAAKuC,GACZG,EAAO5F,GAAQlH,EAAKD,OAAS,EAAI0C,EAAUE,KAAK3C,EAAK0H,MAAMR,EAAO,IAC/DhK,EAAI,EAAGA,EAAI8C,EAAKkH,GAAOhK,IAC9B2P,EAAY,IAAN3P,EAAU0O,EAAWU,iBAAiBI,EAAOtC,EAAMpK,EAAM2M,EAAa,EAAGC,EAAKb,EAAKC,GACzEA,EAAIa,EAAKjB,EAAWU,iBAAiBI,EAAOtC,EAAMpK,EAAM2M,EAAa,EAAGC,EAAKb,EAAKC,IAClGY,GAAOE,EAET,OAAOD,GAUFjB,EAAAO,gBAAP,SAAuBnM,EAA6BoK,EAA6B2C,GAE/E,IADA,IAAM1C,EAAarK,EAAK0H,QACfxK,EAAI,EAAGA,EAAIkN,EAAKrK,OAAQ7C,IAE7BmN,EAAWD,EAAKlN,IADd6P,EACoB,EAEA,EAG1B,OAAO1C,EAAW2C,OAAO,SAAApG,GAAO,OAAQ,IAARA,KAEpCgF,EA5FA,GAAa/O,EAAA+O,aA8Fb,IAAAqB,EAAA,oBAAAA,KA4LA,OAnLSA,EAAAC,qBAAP,SACIC,EAA2BC,EAAkCC,EAAuB7F,EACpF8F,GACF,IAAKH,GAAoBE,EAAYtN,SAAWqN,EAAUrN,OAAS,EACjE,MAAM,IAAIqE,MAAM,sFAGlB,GAAI+I,EAEF,IAAK,IAAIvG,EAAM,EAAGA,EAAMwG,EAAUrN,OAAS,EAAG6G,IACxCA,GAAOyG,EAAYtN,OACrBsN,EAAY5C,KAAK2C,EAAUxG,EAAM,IAEjCyG,EAAYzG,GAAOwG,EAAUxG,EAAM,GAMzC,IAASA,EAAM,EAAGA,EAAMyG,EAAYtN,OAAQ6G,IAC1C,GAAIA,EAAMY,EAAQzH,QAChB,GAAIyH,EAAQZ,GAAO,EACjB,MAAM,IAAIxC,MAAM,qDAGlBoD,EAAQiD,KAAK,GAKjB,IAAS7D,EAAM,EAAGA,EAA2B,EAArByG,EAAYtN,OAAY6G,IAC9C,GAAIA,EAAM0G,EAAKvN,QACb,GAAIuN,EAAK1G,GAAO,EACd,MAAM,IAAIxC,MAAM,iDAGlBkJ,EAAK7C,KAAK,GAKd,IAAS7D,EAAM,EAAGA,EAAMyG,EAAYtN,OAAQ6G,IAAO,CACjD,GAAIyG,EAAYzG,IAAQ,EACtB,MAAM,IAAIxC,MAAM,2CAGlB,GAAIkJ,EAAK1G,IAAQyG,EAAYzG,IAAQ0G,EAAK1G,EAAMyG,EAAYtN,SAAWsN,EAAYzG,GACjF,MAAM,IAAIxC,MAAM,wCAMf6I,EAAAM,yBAAP,SACIH,EAAkC5F,EAAmBgG,EAAqBH,EAAuBC,EACjGG,GACF,GAAKA,EAAL,CAIA,GAAIH,EAAKvN,SAAW,GAAKqN,EAAUrN,OAAS,GAC1C,MAAM,IAAIqE,MAAM,gEAGlB,GAAIoD,EAAQzH,SAAYqN,EAAUrN,OAAS,EACzC,MAAM,IAAIqE,MAAM,6DAGlB,GAAIiJ,EAAYtN,SAAYqN,EAAUrN,OAAS,EAC7C,MAAM,IAAIqE,MAAM,mEAGlB,IAAK,IAAIwC,EAAM,EAAGA,EAAMwG,EAAUrN,OAAS,EAAG6G,IAC5CqG,EAAaS,wBACTN,EAAUxG,EAAM,GAAIY,EAAQZ,GAAM4G,EAAU5G,GAAMyG,EAAYzG,GAAM0G,EAAM1G,EAAKA,EAAMwG,EAAUrN,OAAS,EACxG0N,KAcDR,EAAAU,uBAAP,SACIR,EAA2BC,EAAkC5F,EAAmB6F,EAChFC,EAAgBG,GAClB,GAAIL,EAAUrN,QAAU,EACtB,MAAM,IAAIqE,MAAM,8CAIlB,IAAMiG,EAAa,CAAC+C,EAAU,GAAIA,EAAU,IAGtCI,EAAY,IAAI/L,MAAc4L,EAAYtN,QAAQ4K,KAAK,GAI7D,OAFAsC,EAAaW,mBACTT,EAAkBC,EAAW/C,EAAY7C,EAASgG,EAAWH,EAAaC,EAAMG,GAC7EpD,GAaF4C,EAAAY,uBAAP,SACIT,EAAkCU,EAAmCtG,EAAmBgG,EACxFH,EAAuBC,EAAgBG,GACzC,GAAIL,EAAUrN,QAAU,GAAK+N,EAAW/N,QAAU,EAChD,MAAM,IAAIqE,MAAM,2DAIlB,IAAMiG,EAAa,CAAC+C,EAAU,GAAIU,EAAW,IAG7C,OADAb,EAAaW,oBAAmB,EAAOR,EAAW/C,EAAY7C,EAASgG,EAAWH,EAAaC,EAAMG,GAC9FpD,GAMM4C,EAAAW,mBAAf,SACIT,EAA2BC,EAAkC/C,EAAsB7C,EACnFgG,EAAkCH,EAAoCC,EAAgBG,GACxF,GAAIN,EACF,IAAK,IAAIvG,EAAM,EAAGA,EAAMwG,EAAUrN,OAAS,EAAG6G,IAC5CyD,EAAWI,KAAK,QAGlB,IAAS7D,EAAM,EAAGA,EAAMwG,EAAUrN,OAAS,EAAG6G,IAC5CyD,EAAWI,KAAKwC,EAAaS,wBACzBN,EAAUxG,EAAM,GAAIY,EAAQZ,GAAM4G,EAAU5G,GAAMyG,EAAYzG,GAAM0G,EAAM1G,EAAKA,EAAMwG,EAAUrN,OAAS,EACxG0N,KAOKR,EAAAS,wBAAf,SACIK,EAAgBC,EAAgBC,EAAkBC,EAAgBZ,EAAgBa,EAClFC,EAAsBX,GACxB,IAAMY,EAAUJ,GAAYC,EAAS,GAAK,EAC1C,IAAIT,GAAuB,WAAZA,EAoBb,OAAOnM,KAAKkC,OAAQuK,EAAST,EAAKa,GAAgBb,EAAKc,GAAgBC,GAAWL,EAAU,GAnB5F,OAAQP,GACN,IAAK,QAGH,OAFAH,EAAKa,GAAgB,EACrBb,EAAKc,GAAgB,EACd9M,KAAKkC,OAAQuK,EAASM,GAAWL,EAAU,GACpD,IAAK,aACL,IAAK,aACH,GAAiB,IAAbC,EACF,MAAM,IAAI7J,MAAM,uDAElB,IACMkK,IADoBP,EAASC,EAAS,GAAKA,EACX,GAAKA,EAASE,EAASH,EAG7D,OAFAT,EAAKa,GAA6B,eAAZV,EAA4BnM,KAAKkC,OAAO8K,EAAY,GAAK,GAAKhN,KAAKkC,MAAM8K,EAAY,GAC3GhB,EAAKc,GAAgBE,EAAYhB,EAAKa,GAC/B7M,KAAKkC,OAAQuK,EAASO,EAAYJ,GAAUF,EAAU,GAC/D,QACE,MAAM,IAAI5J,MAAM,8BAM1B6I,EA5LA,GAAapQ,EAAAoQ,yhDCj6Bb,IAAA3N,EAAAC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,GAEAkR,EAAAlR,EAAA,GAoCAuF,EAAA,WAkHE,SAAAA,EAIoB5C,EAIA6C,EAA+B2L,EACvCC,EAA+CC,EAIvCjC,QAAA,IAAAA,MAAA,IATAkC,KAAA3O,OAIA2O,KAAA9L,OAA+B8L,KAAAH,eACvCG,KAAAF,oBAA+CE,KAAAD,QAIvCC,KAAAlC,SAClBkC,KAAKhM,KAAO4L,EAAA9L,UAAU2G,wBAAwBpJ,GAC9C,IAAM2C,EAAOgM,KAAKhM,KACZiM,OAA0B/N,IAAjB2N,QAAoD3N,IAAtB4N,QAA6C5N,IAAV6N,EAEhF,QAAc7N,IAAV6N,GACEA,EAAM3O,SAAW4C,EACnB,MAAM,IAAIkM,WAAW,yCAIzB,GAAa,WAAThM,EAAmB,CACrB,UAAchC,IAAV6N,GAAyBjN,MAAMqN,QAAQJ,IAAWA,EAAMvF,MAAM,SAAAjM,GAAK,MAAa,iBAANA,KAC5E,MAAM,IAAImM,UAAU,kCAGlBuF,IACFF,EAAQ,IAAIjN,MAAckB,QAEvB,CACL,QAAc9B,IAAV6N,EAAqB,CACvB,IAAMK,EAAcC,EAAoBnM,GACxC,KAAM6L,aAAiBK,GACrB,MAAM,IAAI1F,UAAU,wBAAwB0F,EAAYlR,MAI5D,GAAI+Q,EAAO,CACT,IAAMK,EAAM,IAAIC,YAAYvM,EAkHpC,SAAgBE,GACd,OAAQA,GACN,IAAK,OACL,IAAK,OACL,IAAK,QACH,OAAO,EACT,IAAK,QACL,IAAK,SACH,OAAO,EACT,IAAK,QACL,IAAK,SACL,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,QACE,MAAM,IAAIuB,MAAM,qCAAqCvB,IAlIhBsM,CAAOtM,IAC1C8L,KAAKD,MA2Jb,SAAoBU,EAAyBvM,GAC3C,OAAO,IAAKmM,EAAoBnM,GAAzB,CAAgCuM,GA5JpBC,CAAWJ,EAAKpM,KA+GrC,OAvQE7E,OAAAC,eAAI2E,EAAA1D,UAAA,OAAI,KAAR,WACE,QAAmB2B,IAAf8N,KAAKD,MAAqB,CAC5B,IAAMlC,EAAOmC,KAAKH,aAAcG,KAAKlC,QACrC,GAAID,EAAKzM,SAAW4O,KAAKhM,KACvB,MAAM,IAAIyB,MAAM,8FAElBuK,KAAKD,MAAQlC,EAEf,OAAOmC,KAAKD,uCAMd1Q,OAAAC,eAAI2E,EAAA1D,UAAA,aAAU,KAAd,WACE,GAAkB,WAAdyP,KAAK9L,KACP,MAAM,IAAIwG,UAAU,2BAGtB,OAAOsF,KAAKnC,sCAOdxO,OAAAC,eAAI2E,EAAA1D,UAAA,cAAW,KAAf,WACE,OAAQyP,KAAK9L,MACX,IAAK,QACL,IAAK,OACL,IAAK,SACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,OACH,OAAO8L,KAAKnC,KAEd,QACE,MAAM,IAAInD,UAAU,gHAO1BrL,OAAAC,eAAI2E,EAAA1D,UAAA,YAAS,KAAb,WACE,OAAQyP,KAAK9L,MACX,IAAK,UACL,IAAK,UACH,OAAO8L,KAAKnC,KAEd,QACE,MAAM,IAAInD,UAAU,+EAQ1BrL,OAAAC,eAAI2E,EAAA1D,UAAA,aAAU,KAAd,WACE,GAAkB,WAAdyP,KAAK9L,KACP,OAAO8L,KAAKnC,KAEd,MAAM,IAAInD,UAAU,uEAMtBzG,EAAA1D,UAAAf,IAAA,SAAI0J,GACF,OAAO8G,KAAKnC,KAAK+B,EAAA9L,UAAUmF,gBAAgBC,EAAS8G,KAAKnH,WAM3D5E,EAAA1D,UAAA4D,IAAA,SAAI+E,EAAgCtJ,GAClCoQ,KAAKnC,KAAK+B,EAAA9L,UAAUmF,gBAAgBC,EAAS8G,KAAKnH,UAAYjJ,GAM1DqE,EAAA1D,UAAAoQ,QAAN,qHAIqBzO,IAAf8N,KAAKD,MAAL,OACF/M,EAAAgN,KAAa,GAAMA,KAAKF,kBAAmBE,KAAKlC,iBAAhD9K,EAAK+M,MAAQa,EAAAC,wBAEf,SAAOb,KAAKD,aAYd1Q,OAAAC,eAAI2E,EAAA1D,UAAA,UAAO,KAAX,WAIE,OAHKyP,KAAKc,WACRd,KAAKc,SAAWlB,EAAA9L,UAAU6E,eAAeqH,KAAK3O,OAEzC2O,KAAKc,0CAsDP7M,EAAA8M,UAAP,SAAiBC,GACf,IAAKA,EACH,MAAM,IAAIvL,MAAM,+CAElB,IAAMvB,EAAO0L,EAAAtJ,UAAUC,wBAAwByK,EAAYC,UAGrDrR,EAAQ,IAAIqE,EAFL2L,EAAAtJ,UAAUkB,oBAAoBwJ,EAAY3P,MAExB6C,GAE/B,GAAa,WAATA,EAGF8M,EAAYE,WAAY5D,QAAQ,SAAC6D,EAAK5S,GACpC,IAAM+R,EAAMc,EAAOC,KAAKF,EAAIG,OAAQH,EAAII,WAAYJ,EAAIK,YACxD5R,EAAMiO,KAAKtP,GAAK+R,EAAImB,kBAGjB,GACHT,EAAYU,SAAqD,iBAAnCV,EAAYU,QAAQF,YAClDR,EAAYU,QAAQF,WAAa,EAAG,CAItC,IAAMG,EAAW/R,EAAMiO,KACjB+D,EACF,IAAIC,SAASb,EAAYU,QAAQJ,OAAQN,EAAYU,QAAQH,WAAYP,EAAYU,QAAQF,YAC3FM,EAkGZ,SAAqB5N,GACnB,OAAQA,GACN,KAAKrD,EAAA4F,KAAKC,YAAYC,SAASE,MAC/B,KAAKhG,EAAA4F,KAAKC,YAAYC,SAASC,KAC/B,KAAK/F,EAAA4F,KAAKC,YAAYC,SAASG,KAC7B,OAAO,EACT,KAAKjG,EAAA4F,KAAKC,YAAYC,SAASK,OAC/B,KAAKnG,EAAA4F,KAAKC,YAAYC,SAASI,MAC7B,OAAO,EACT,KAAKlG,EAAA4F,KAAKC,YAAYC,SAASQ,MAC/B,KAAKtG,EAAA4F,KAAKC,YAAYC,SAASM,MAC/B,KAAKpG,EAAA4F,KAAKC,YAAYC,SAASO,OAC7B,OAAO,EACT,KAAKrG,EAAA4F,KAAKC,YAAYC,SAASW,MAC/B,KAAKzG,EAAA4F,KAAKC,YAAYC,SAASS,OAC/B,KAAKvG,EAAA4F,KAAKC,YAAYC,SAASY,OAC7B,OAAO,EACT,QACE,MAAM,IAAI9B,MAAM,qCAAqC5E,EAAA4F,KAAKC,YAAYC,SAASzC,KApH3D6N,CAAYf,EAAYC,UACtCe,EAAShB,EAAYU,QAAQF,WAAaM,EAEhD,GAAId,EAAYU,QAAQF,WAAaM,GAAgB,EACnD,MAAM,IAAIrM,MAAM,yBAElB,GAAIkM,EAASvQ,SAAW4Q,EACtB,MAAM,IAAIvM,MAAM,0BAGlB,IAAK,IAAIlH,EAAI,EAAGA,EAAIyT,EAAQzT,IAAK,CAC/B,IAAM6B,EAAI6R,EAAUL,EAAYZ,EAAYC,SAAW1S,EAAIuT,GAC3DH,EAASpT,GAAK6B,OAEX,CAEL,IAAI8R,OAAK,EACT,OAAQlB,EAAYC,UAClB,KAAKpQ,EAAA4F,KAAKC,YAAYC,SAASQ,MAC7B+K,EAAQlB,EAAYmB,UACpB,MACF,KAAKtR,EAAA4F,KAAKC,YAAYC,SAASM,MAC/B,KAAKpG,EAAA4F,KAAKC,YAAYC,SAASI,MAC/B,KAAKlG,EAAA4F,KAAKC,YAAYC,SAASK,OAC/B,KAAKnG,EAAA4F,KAAKC,YAAYC,SAASC,KAC/B,KAAK/F,EAAA4F,KAAKC,YAAYC,SAASE,MAC/B,KAAKhG,EAAA4F,KAAKC,YAAYC,SAASG,KAC7BoL,EAAQlB,EAAYoB,UACpB,MACF,KAAKvR,EAAA4F,KAAKC,YAAYC,SAASW,MAC7B4K,EAAQlB,EAAYqB,UACpB,MACF,KAAKxR,EAAA4F,KAAKC,YAAYC,SAASS,OAC7B8K,EAAQlB,EAAYsB,WACpB,MACF,KAAKzR,EAAA4F,KAAKC,YAAYC,SAASO,OAC/B,KAAKrG,EAAA4F,KAAKC,YAAYC,SAASY,OAC7B2K,EAAQlB,EAAYuB,WACpB,MACF,QAEE,MAAM,IAAI9M,MAAM,oBAGpB,GAAIyM,QACF,MAAM,IAAIzM,MAAM,oDAGlB,IAAMoI,EAAOjO,EAAMiO,KACnB,GAAIA,EAAKzM,SAAW8Q,EAAM9Q,OACxB,MAAM,IAAIqE,MAAM,yBAGlB,IAASlH,EAAI,EAAGA,EAAI2T,EAAM9Q,OAAQ7C,IAAK,CACrC,IAAMiU,EAAUN,EAAM3T,GAClBoC,EAAA+G,QAAKC,OAAO6K,GACd3E,EAAKtP,GAAK6J,EAAaoK,EAAiBxB,EAAYC,UAEpDpD,EAAKtP,GAAKiU,GAKhB,OAAO5S,GAUFqE,EAAAwO,SAAP,SAAgB5E,EAA2CxM,EAA6B6C,GACtF,OAAO,IAAID,EAAO5C,EAAM6C,OAAMhC,OAAWA,EAAW2L,IAExD5J,EA3QA,GA2TA,SAASoM,EAAoBnM,GAC3B,OAAQA,GACN,IAAK,OACL,IAAK,QACH,OAAOwO,WACT,IAAK,OACH,OAAOC,UACT,IAAK,QACH,OAAOC,WACT,IAAK,SACH,OAAOC,YACT,IAAK,QACH,OAAOC,WACT,IAAK,SACH,OAAOC,YACT,IAAK,UACH,OAAOC,aACT,IAAK,UACH,OAAOC,aACT,QAEE,MAAM,IAAIxN,MAAM,sBAKtB,SAAS2C,EAAa7J,EAAS2F,GAE7B,GAAIA,IAASrD,EAAA4F,KAAKC,YAAYC,SAASW,OACrC,GAAI/I,EAAE2U,mBAAmB,aAAe3U,EAAE4U,UAAU,YAClD,MAAM,IAAIzI,UAAU,8BAEjB,IAAIxG,IAASrD,EAAA4F,KAAKC,YAAYC,SAASO,QAAUhD,IAASrD,EAAA4F,KAAKC,YAAYC,SAASY,OAKzF,MAAM,IAAImD,UAAU,oBAAoB7J,EAAA4F,KAAKC,YAAYC,SAASzC,IAJlE,GAAI3F,EAAE2U,mBAAmB,aAAe3U,EAAE4U,SAAS,GACjD,MAAM,IAAIzI,UAAU,2BAMxB,OAAOnM,EAAEqJ,WAIX,SAASqK,EAAUmB,EAAgBlP,EAAiCqN,GAClE,OAAQrN,GACN,KAAKrD,EAAA4F,KAAKC,YAAYC,SAASG,KAC/B,KAAKjG,EAAA4F,KAAKC,YAAYC,SAASE,MAC7B,OAAOuM,EAAKC,SAAS9B,GACvB,KAAK1Q,EAAA4F,KAAKC,YAAYC,SAASC,KAC7B,OAAOwM,EAAKE,QAAQ/B,GACtB,KAAK1Q,EAAA4F,KAAKC,YAAYC,SAASK,OAC7B,OAAOoM,EAAKG,UAAUhC,GAAY,GACpC,KAAK1Q,EAAA4F,KAAKC,YAAYC,SAASI,MAC7B,OAAOqM,EAAKI,SAASjC,GAAY,GACnC,KAAK1Q,EAAA4F,KAAKC,YAAYC,SAASQ,MAC7B,OAAOiM,EAAKK,WAAWlC,GAAY,GACrC,KAAK1Q,EAAA4F,KAAKC,YAAYC,SAASM,MAC7B,OAAOmM,EAAKM,SAASnC,GAAY,GACnC,KAAK1Q,EAAA4F,KAAKC,YAAYC,SAASO,OAC7B,OAAOkM,EAAKO,UAAUpC,GAAY,GACpC,KAAK1Q,EAAA4F,KAAKC,YAAYC,SAASW,MAC7B,OAAOc,EACHzH,EAAA+G,QAAKkM,SAASR,EAAKO,UAAUpC,GAAY,GAAO6B,EAAKO,UAAUpC,EAAa,GAAG,IAAO,GAAQrN,GACpG,KAAKrD,EAAA4F,KAAKC,YAAYC,SAASS,OAC7B,OAAOgM,EAAKS,WAAWtC,GAAY,GACrC,KAAK1Q,EAAA4F,KAAKC,YAAYC,SAASY,OAC7B,OAAOa,EACHzH,EAAA+G,QAAKkM,SAASR,EAAKO,UAAUpC,GAAY,GAAO6B,EAAKO,UAAUpC,EAAa,GAAG,IAAO,GAAOrN,GACnG,QACE,MAAM,IAAIuB,MAAM,sCAAsC5E,EAAA4F,KAAKC,YAAYC,SAASzC,KAjYzEhG,EAAA+F,kHC1Bb,IAAM6P,EAAoB,CACxBC,QAAS,GACTC,UAAW,YACXC,cAAe,UACfC,YAAa,UACbC,UAAW,YACXC,OAAQ,eACRC,kBAAmB,IAEfC,EAAoB,CACxBP,QAAS,kBACTC,UAAW,KACXC,cAAe,MACfC,YAAa,KACbC,UAAW,UACXC,OAAQ,cACRC,kBAAmB,yBAGrB,SAAgBE,EAAQR,GACtB,OAAmB,IAAZA,EAAgBD,EAAcQ,EADvCpW,EAAAqW,UAIArW,EAAAsW,sBAAA,SAAsCT,GACpC,IAAMU,EAAOF,EAAQR,GACrB,OAAUU,EAAKV,QAAO,yCAEhBU,EAAKT,UAAS,0BACdS,EAAKT,UAAS,gCAEdS,EAAKR,cAAa,8IAS1B/V,EAAAwW,sBAAA,SAAsCX,GACpC,IAAMU,EAAOF,EAAQR,GACrB,OAAUU,EAAKV,QAAO,+FAIlBU,EAAKP,YAAW,yBAChBO,EAAKJ,kBAAiB,YAK5BnW,EAAAyW,yBAAA,SAAyCZ,EAAca,GAErD,MAAO,sCAESA,EAAiB,sFAHpBL,EAAQR,GAMZK,OAAM,8GCAjB,IAAAS,EAAA,oBAAAA,KAIA,OAHEA,EAAAtU,UAAAuU,IAAA,SAAIC,EAA2BC,EAAiBC,KAGlDJ,EAJA,GAKAK,EAAA,oBAAAA,KAmBA,OAlBEA,EAAA3U,UAAAuU,IAAA,SAAIC,EAA2BC,EAAiBC,GAC9CE,QAAQL,IAAO9E,KAAKoF,MAAML,GAAS,KAAIE,EAAW,QAAaA,EAAW,QAAa,IAAKD,IAGtFE,EAAA3U,UAAA6U,MAAR,SAAcL,GACZ,OAAQA,GACN,IAAK,UACH,MAAO,gBACT,IAAK,OACH,MAAO,aACT,IAAK,UACH,MAAO,gBACT,IAAK,QACH,MAAO,gBACT,QACE,MAAM,IAAItP,MAAM,yBAAyBsP,KAGjDG,EAnBA,GAqBMG,EAAiB,CACrBC,QAAS,IACTC,KAAM,IACNC,QAAS,IACTC,MAAO,KAGHC,IAAmB1S,EAAA,IAChB,KAAG,IAAI6R,EACd7R,EAAU,QAAG,IAAIkS,KAEbS,EAAwB,CAC5BC,SAAU,UACVC,gBAAiB,OACjBC,aAAa,EACbC,mBAAmB,GAEjBC,IAAiBpF,EAAA,IAC2C,IAAK+E,EAAgD/E,GAMrH,SAASkE,EACLmB,EAA8BC,EAAeC,EAAsBC,GACrE,QAAalU,IAATgU,EAEF,OAkB6BjB,EAlBEgB,EAmB1B,CACLX,QAASR,EAAIQ,QAAQnV,KAAK,KAAM8U,GAChCM,KAAMT,EAAIS,KAAKpV,KAAK,KAAM8U,GAC1BO,QAASV,EAAIU,QAAQrV,KAAK,KAAM8U,GAChCQ,MAAOX,EAAIW,MAAMtV,KAAK,KAAM8U,IAtBvB,QAAa/S,IAATiU,EAETE,EAAYJ,EAAyBC,EAAM,QACtC,GAAoB,iBAATC,QAA8BjU,IAATkU,EAErCC,EAAYJ,EAAyBC,EAAMC,QACtC,GAAoB,iBAATA,QAA8BjU,IAATkU,EAErCC,EAAYJ,EAAyBE,EAAM,EAAGD,OACzC,IAAoB,iBAATC,GAAqC,iBAATC,EAI5C,MAAM,IAAI1L,UAAU,kBAFpB2L,EAAYJ,EAAyBE,EAAMC,EAAMF,GAMrD,IAAiCjB,EAYjC,SAASoB,EAAYtB,EAA2BC,EAAiBsB,EAAerB,GAC9E,IAAMsB,EAASP,EAAkBf,GAAY,KAAOe,EAAkB,IAClEX,EAAeN,GAAYM,EAAekB,EAAOV,mBAIjDU,EAAOT,cACTd,GAAa,IAAIwB,MAAOC,cAAa,IAAIzB,GAGvCuB,EAAOR,kBAIXL,EAAoBa,EAAOX,UAAUd,IAAIC,EAAUC,EAASC,KAI9D,SAAUH,GAsBR,SAAgB4B,EAAMH,GACpBP,EAAoB,GAEpB7R,EAAI,GAAIoS,GAAU,IAEpB,SAAgBpS,EAAI8Q,EAAkBsB,GACpC,GAAiB,MAAbtB,EACFyB,EAAMH,OACD,CACL,IAAMI,EAAiBX,EAAkBf,IAAaU,EACtDK,EAAkBf,GAAY,CAC5BW,SAAUW,EAAOX,UAAYe,EAAef,SAC5CC,gBAAiBU,EAAOV,iBAAmBc,EAAed,gBAC1DC,iBAAqC5T,IAAvBqU,EAAOT,YAA6Ba,EAAeb,YAAcS,EAAOT,YACtFC,uBAAiD7T,IAA7BqU,EAAOR,kBAAmCY,EAAeZ,kBACfQ,EAAOR,oBAlC3DjB,EAAAQ,QAAhB,SAAwBW,EAAcC,GACpCpB,EAAI,UAAWmB,EAAMC,IAIPpB,EAAAS,KAAhB,SAAqBU,EAAcC,GACjCpB,EAAI,OAAQmB,EAAMC,IAIJpB,EAAAU,QAAhB,SAAwBS,EAAcC,GACpCpB,EAAI,UAAWmB,EAAMC,IAIPpB,EAAAW,MAAhB,SAAsBQ,EAAcC,GAClCpB,EAAI,QAASmB,EAAMC,IAGLpB,EAAA4B,MAAKA,EAKL5B,EAAA3Q,IAAGA,EA3BrB,CAAU2Q,MAAG,KA8CA5W,EAAA0Y,OAAiB9B,EAgB9B,IAAA+B,EAAA,WACE,SAAAA,EACW5B,EAAyC/V,EAAqB4X,EAC7DC,GADD/G,KAAAiF,WAAyCjF,KAAA9Q,OAAqB8Q,KAAA8G,YAC7D9G,KAAA+G,cAKd,OAHEF,EAAAtW,UAAAmI,IAAA,WACEsH,KAAK+G,YAAY/G,OAErB6G,EARA,GAUAG,EAAA,WAGA,OAFE,SACW/B,EAAyC/V,EAAqB4X,EAA0BG,GAAxFjH,KAAAiF,WAAyCjF,KAAA9Q,OAAqB8Q,KAAA8G,YAA0B9G,KAAAiH,WAFrG,GAKAC,EAAA,WAQE,SAAAA,EAAoBC,EAA0BC,EAAyBC,GA2G/DrH,KAAAsH,UAAW,EASXtH,KAAAuH,cAAgB,EAnHtBvH,KAAKsH,UAAW,EAChBtH,KAAKwH,sBAAuCtV,IAApBiV,EAAgC,IAAQA,EAChEnH,KAAKyH,qBAAqCvV,IAAnBkV,EAA+B,GAAKA,EAC3DpH,KAAK0H,kCAA+DxV,IAAhCmV,EAA4C,IAAOA,EAiH3F,OA5HSH,EAAAjX,OAAP,SAAcsW,GACZ,YAAerU,IAAXqU,EACK,IAAIvG,KAEN,IAAIA,KAAKuG,EAAOY,gBAAiBZ,EAAOa,eAAgBb,EAAOc,8BAWxEH,EAAA3W,UAAAkI,MAAA,WACEuH,KAAKsH,UAAW,EAChBtH,KAAK2H,cAAgB,GACrB3H,KAAK4H,WAAa1Z,EAAA2Z,MAClB7H,KAAKuH,cAAgB,GAIvBL,EAAA3W,UAAAuX,KAAA,WAEE,IADA9H,KAAKsH,UAAW,EACTtH,KAAKuH,cAAgBvH,KAAK2H,cAAcvW,OAAQ4O,KAAKuH,gBAC1DvH,KAAK+H,YAAY/H,KAAK2H,cAAc3H,KAAKuH,iBAQ7CL,EAAA3W,UAAAyX,MAAA,SAAS/C,EAAkC/V,EAAc+Y,GACvD,IAAMD,EAAQhI,KAAKsH,SAAWtH,KAAKkI,MAAMjD,EAAU/V,QAAQgD,EACvDiW,GAAY,EAEhB,IACE,IAAMC,EAAMH,IAGZ,OAAIG,GAA2C,mBAA5BA,EAAmBC,MACpCF,GAAY,EACL,IAAIG,QAAW,SAACC,EAASC,GAC7BJ,EACIC,KACG,SAAAzY,GACE2Y,EAAQ3Y,GACJoY,GACFA,EAAMtP,OAGV,SAAA+P,GACED,EAAOC,GACHT,GACFA,EAAMtP,WAMf0P,WAGFD,GAAaH,GAChBA,EAAMtP,QAMZwO,EAAA3W,UAAA2X,MAAA,SAAMjD,EAAkC/V,GAAxC,IAAAwZ,EAAA1I,KACE,IAAKA,KAAKsH,SACR,MAAM,IAAI7R,MAAM,+BAElB,IAAMqR,EAAY5Y,EAAA2Z,MAElB,OADA7H,KAAK2I,MAAM7B,GACJ,IAAID,EAAM5B,EAAU/V,EAAM4X,EAAW,SAAA8B,GAAK,OAAAF,EAAKhQ,IAAIkQ,MAIpD1B,EAAA3W,UAAAmI,IAAR,SAAYsP,GACV,GAAIhI,KAAK2H,cAAcvW,OAAS4O,KAAKwH,iBAAkB,CACrD,IAAMP,EAAU/Y,EAAA2Z,MAChB7H,KAAK2H,cAAc7L,KAAK,IAAIkL,EAAYgB,EAAM/C,SAAU+C,EAAM9Y,KAAM8Y,EAAMlB,UAAWG,IACrFjH,KAAK2I,MAAM1B,KAIPC,EAAA3W,UAAAwX,YAAR,SAAoBC,GAClB9Z,EAAA0Y,OAAOtB,QACH,YAAY0C,EAAM/C,UACd+C,EAAMf,QAAUe,EAAMlB,WAAW+B,QAAQ,GAAE,gBAAgBb,EAAM9Y,KAAI,QAAQ8Y,EAAMf,QAAQ4B,QAAQ,KAGrG3B,EAAA3W,UAAAoY,MAAR,SAAcG,GACZ,GAAI9I,KAAK2H,cAAcvW,OAAS4O,KAAKuH,eAAiBvH,KAAKyH,iBACvDqB,EAAc9I,KAAK4H,YAAc5H,KAAK0H,6BAA8B,CAGtE,IAAK,IAAMqB,EAAkB/I,KAAKuH,cAAevH,KAAKuH,cAAgBwB,EAAkB/I,KAAKyH,iBACxFzH,KAAKuH,cAAgBvH,KAAK2H,cAAcvW,OACxC4O,KAAKuH,gBACRvH,KAAK+H,YAAY/H,KAAK2H,cAAc3H,KAAKuH,gBAG3CvH,KAAK4H,WAAa1Z,EAAA2Z,QAItBxY,OAAAC,eAAI4X,EAAA3W,UAAA,UAAO,KAAX,WACE,OAAOyP,KAAKsH,0CAYhBJ,EA7HA,GAAahZ,EAAAgZ,WAkIAhZ,EAAA2Z,IAA8B,oBAAhBmB,aAA+BA,YAAYnB,IAAO,WAAM,OAAAmB,YAAYnB,OAAQrB,KAAKqB,4kBC5X5G,IAWIoB,EACAC,EAIAC,EAhBJC,EAAA1a,EAAA,GACA2a,EAAAC,EAAA5a,EAAA,KAiBI6a,GAAc,EACdC,GAAe,EAOnBtb,EAAAub,KAAA,SAAqBC,EAAoBC,GACvC,GAAIJ,EACF,OAAOjB,QAAQC,UAEjB,GAAIiB,EACF,MAAM,IAAI/T,MAAM,wCAIlB,OADA+T,GAAe,EACR,IAAIlB,QAAc,SAACC,EAASC,GAIjC,IAAIoB,EACEC,EAA0B,gBACM3X,IAAhC0X,IAEFE,aAAaF,GACbA,OAA8B1X,IAI5B6X,EAAc,WAClBF,IACAtB,IACAiB,GAAe,EACfD,GAAc,GAQVS,EAAkBX,EAAYI,OAI9BQ,EAA4B,IAAI3B,QAAQ,SAACC,EAASC,GACtDoB,EAA8BM,WAAW,WACvC1B,EAAO,+DACNmB,KAIDD,EAAa,GACfN,EAAAxC,OAAOtB,QAAQ,sBAAuB,sBAAsBoE,EAAU,aA+HpD,oBAAXlb,aAA4D,IAA1BA,OAAe2b,QAxHtDf,EAAAxC,OAAOnB,MAAM,sBAAuB,0EACpCyD,EAAgB,IALhBE,EAAAxC,OAAOtB,QACH,sBAAuB,qDAAqDoE,EAAU,YAC1FR,EAAgBQ,KASlBN,EAAAxC,OAAOtB,QAAQ,sBAAuB,+DACtC4D,EAAgB,GAGlB,IAAMkB,EAAkB,IAAItX,MAAqBoW,GACjDD,EAAU,IAAInW,MAAMoW,GACpBC,EAAoB,IAAIrW,MAAMoW,GAE9B,mBAASmB,GACP,IAAMC,EAAiB,IAAIhC,QAAc,SAACiC,EAAmBC,GAE3D,IAAMC,EAAS/b,EAAQ,GAARA,GACfua,EAAQoB,GAAYI,EACpBtB,EAAkBkB,GAAY,GAC9BI,EAAOC,QAAU,SAAA9B,GACfQ,EAAAxC,OAAOnB,MAAM,sBAAuB,UAAU4E,EAAQ,SAASzB,GAC3DW,GAGFiB,KAGJC,EAAOE,UAAY,SAAA/B,GACjB,KAAIA,GAAKA,EAAE/K,MAAQ+K,EAAE/K,KAAK3J,MAUxB,MAAM,IAAIuB,MAAM,oCAThB,GAAoB,iBAAhBmT,EAAE/K,KAAK3J,KACTqW,QACK,IAAoB,UAAhB3B,EAAE/K,KAAK3J,KAIhB,MAAM,IAAIuB,MAAM,qCAAqCmT,EAAE/K,KAAK3J,MAH5D,IAAM0W,EAAWhC,EAAE/K,KAAK+M,SACxBzB,EAAkBkB,GAAUQ,OAA5B1B,CAAqCP,EAAE/K,KAAKyD,OAAuBsJ,OAS3ER,EAAgBC,GAAYC,GA7BrBD,EAAW,EAAGA,EAAWnB,EAAemB,MAAxCA,GAmCT/B,QAAQwC,KAAK,CAACd,EAAiBC,IAC1B5B,KACG,WAEEC,QAAQyC,IAAIX,GACP/B,KAEG0B,EAGA,WACEX,EAAAxC,OAAOpB,QACH,sBACA,0FAEJ0D,EAAgB,EAChBa,OA3FD,SAACiB,GAClBnB,IACArB,EAAOwC,GACPxB,GAAe,OAiGrB,IAAAyB,EAAA,SAAAC,GAAA,SAAAD,mDAwCA,OAxCiCE,EAAAF,EAAAC,GAExBD,EAAAG,YAAP,WAIE,OAHKH,EAAYI,WACfJ,EAAYI,SAAW,IAAIJ,GAEtBA,EAAYI,UAErBhc,OAAAC,eAAW2b,EAAA,eAAY,KAAvB,WACE,OAAO/B,mCAET+B,EAAA1a,UAAA+a,YAAA,SAAYjB,EAAkBkB,OAAsB,IAAAC,EAAA,GAAAta,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAsa,EAAAta,EAAA,GAAAC,UAAAD,GAClD,IAAKqY,EACH,MAAM,IAAI9T,MAAM,2DAGlB,GAAI4U,EAAW,GAAKA,GAAYnB,EAC9B,MAAM,IAAIzT,MAAM,qBAAqB4U,EAAQ,4BAA4BnB,EAAa,KAGxF,IAAMxT,EAAmB,GACnB1B,EAAOiX,EAAYQ,iBAAiB/V,EAAQ8V,GAC5ClK,EAAS,IAAIf,YAAYvM,GAC/BiX,EAAYS,eAAe,IAAIhJ,WAAWpB,GAAS5L,EAAQ8V,GAE3D,IAAM1E,EAAYuC,EAAYxB,MAG9B,OAFAoB,EAAQoB,GAAUsB,YAAY,CAACzX,KAAM,QAAS+T,KAAMsD,EAAcjK,OAAMA,GAAG,CAACA,IAErE,IAAIgH,QAAyB,SAACC,EAASC,GAC5CW,EAAkBkB,GAAUvO,KAAK,SAACwF,EAAQsK,GACxCA,EAAKC,gBAAkBD,EAAK9E,UAC5B8E,EAAKE,cAAgBF,EAAK3E,QAC1B2E,EAAK9E,UAAYA,EACjB8E,EAAK3E,QAAUoC,EAAYxB,MAE3BoD,EAAYc,iBAAiB,IAAIrJ,WAAWpB,GAAS5L,EAAQ8V,GAC7DjD,EAAQqD,QAIhBX,EAxCA,CAAiC5B,EAAY4B,aAAhC/c,EAAA+c,6FCvJb,SAAYe,GACVA,IAAA,2BACAA,IAAA,2BAFF,CAAY9d,EAAA8d,eAAA9d,EAAA8d,aAAY,KAexB,IAAAC,EAAA,WAEA,OADE,SAAmBC,EAAgCC,GAAhCnM,KAAAkM,YAAgClM,KAAAmM,eADrD,GAAaje,EAAA+d,cAGb,IAAAG,EAAA,WAIA,OAHE,SAAmBC,GAAArM,KAAAqM,WADrB,GAAsBne,EAAAke,UAOtB,IAAAE,EAAA,WAEA,OADE,SAAmBC,EAA4BC,GAA5BxM,KAAAuM,cAA4BvM,KAAAwM,gBADjD,GAAate,EAAAoe,iBAMb,IAAAG,EAAA,WAGE,SAAAA,EAAmBvd,EAAcqd,EAAsBC,GAApCxM,KAAA9Q,OAEf8Q,KAAKwM,aADHA,GAGkB,GAGlBD,IACFvM,KAAKuM,YAAcA,GAQzB,OALEE,EAAAlc,UAAAmc,cAAA,SAAcC,GACRA,GACF3M,KAAKwM,aAAa1Q,KAAK6Q,IAG7BF,EAnBA,GAAave,EAAAue,qBAsBb,IAAAG,EAAA,oBAAAA,KA0DA,OAzDSA,EAAAC,mBAAP,SAA0BC,GACxB,IAAKA,GAA0B,IAAjBA,EAAM1b,OAClB,MAAO,GAGT,GAAqB,IAAjB0b,EAAM1b,OACR,OAAO0b,EAGT,IAAMC,EAAa,IAAIC,IACjBC,EAAmB,IAAID,IACvBE,EAAS,IAAIpa,MAGnB,OADAkN,KAAKmN,mBAAmBL,EAAOC,EAAYE,EAAkBC,GACtDA,GAGMN,EAAAO,mBAAf,SACIC,EAAkCL,EAAyBE,EAC3DC,GACF,IAAK,IAAI3e,EAAI,EAAGA,EAAI6e,EAAWhc,SAAU7C,EACvCyR,KAAKqN,YAAYD,EAAW7e,GAAIwe,EAAYE,EAAkBC,IAInDN,EAAAS,YAAf,SACIrf,EAA0B+e,EAAyBE,EAA+BC,GAEpF,GAAKlf,IAAQif,EAAiBK,IAAItf,EAAKkB,MAAvC,CAKA,GAAI6d,EAAWO,IAAItf,EAAKkB,MACtB,MAAM,IAAIuG,MAAM,oFAIlBsX,EAAWQ,IAAIvf,EAAKkB,MAGpB,IAAMsd,EAAexe,EAAKwe,aAC1B,GAAIA,GAAgBA,EAAapb,OAAS,EACxC,IAAK,IAAI7C,EAAI,EAAGA,EAAIie,EAAapb,SAAU7C,EACzCyR,KAAKqN,YAAYb,EAAaje,GAAIwe,EAAYE,EAAkBC,GAKpEA,EAAOpR,KAAK9N,GAGZif,EAAiBM,IAAIvf,EAAKkB,MAG1B6d,EAAWS,OAAOxf,EAAKkB,QAE3B0d,EA1DA,GAAa1e,EAAA0e,6DC3Db,SAAAa,GACA,IAAAC,EAAAxf,EAoOA,SAAAyf,EAAAC,EAAAC,EAAAC,GACA,QAAAC,EAAA1e,OAAA0e,KAAAF,GAAAtf,EAAA,EAA4CA,EAAAwf,EAAA3c,SAAiB7C,OAC7D2D,IAAA0b,EAAAG,EAAAxf,KAAAuf,IACAF,EAAAG,EAAAxf,IAAAsf,EAAAE,EAAAxf,KACA,OAAAqf,EAoBA,SAAAI,EAAA9e,GAEA,SAAA+e,EAAAC,EAAAC,GAEA,KAAAnO,gBAAAiO,GACA,WAAAA,EAAAC,EAAAC,GAKA9e,OAAAC,eAAA0Q,KAAA,WAAgDxQ,IAAA,WAAkB,OAAA0e,KAGlEzY,MAAA2Y,kBACA3Y,MAAA2Y,kBAAApO,KAAAiO,GAEA5e,OAAAC,eAAA0Q,KAAA,SAAkDpQ,OAAA,IAAA6F,OAAA6Q,OAAA,KAElD6H,GACAR,EAAA3N,KAAAmO,GAWA,OARAF,EAAA1d,UAAAlB,OAAAY,OAAAwF,MAAAlF,YAAA6P,YAAA6N,EAEA5e,OAAAC,eAAA2e,EAAA1d,UAAA,QAA0Df,IAAA,WAAkB,OAAAN,KAE5E+e,EAAA1d,UAAAkR,SAAA,WACA,OAAAzB,KAAA9Q,KAAA,KAAA8Q,KAAAkO,SAGAD,EAvRAP,EAAAW,UAAiB3f,EAAQ,IAGzBgf,EAAAY,OAAc5f,EAAQ,IAGtBgf,EAAAa,aAAoB7f,EAAQ,IAG5Bgf,EAAAc,MAAa9f,EAAQ,IAGrBgf,EAAAe,QAAe/f,EAAQ,IAGvBgf,EAAAgB,KAAYhgB,EAAQ,IAGpBgf,EAAAiB,KAAYjgB,EAAQ,IAGpBgf,EAAAkB,SAAgBlgB,EAAQ,IAGxBgf,EAAAD,OAAA,oBAAAjf,qBACA,IAAAif,MACA,oBAAAoB,YACA7O,KAQA0N,EAAAoB,WAAAzf,OAAA0f,OAAA1f,OAAA0f,OAAA,OAOArB,EAAAsB,YAAA3f,OAAA0f,OAAA1f,OAAA0f,OAAA,IAAmD,GAQnDrB,EAAAuB,OAAAC,QAAAxB,EAAAD,OAAA0B,SAAAzB,EAAAD,OAAA0B,QAAAC,UAAA1B,EAAAD,OAAA0B,QAAAC,SAAAzC,MAQAe,EAAAzS,UAAAD,OAAAC,WAAA,SAAArL,GACA,uBAAAA,GAAAyf,SAAAzf,IAAA+C,KAAAkC,MAAAjF,QAQA8d,EAAA4B,SAAA,SAAA1f,GACA,uBAAAA,gBAAA2f,QAQA7B,EAAA8B,SAAA,SAAA5f,GACA,OAAAA,GAAA,iBAAAA,GAWA8d,EAAA+B,MAQA/B,EAAAgC,MAAA,SAAAC,EAAAC,GACA,IAAAhgB,EAAA+f,EAAAC,GACA,cAAAhgB,IAAA+f,EAAAnf,eAAAof,MACA,iBAAAhgB,IAAAkD,MAAAqN,QAAAvQ,KAAAwB,OAAA/B,OAAA0e,KAAAne,GAAAwB,QAAA,IAeAsc,EAAAtM,OAAA,WACA,IACA,IAAAA,EAAAsM,EAAAe,QAAA,UAAArN,OAEA,OAAAA,EAAA7Q,UAAAsf,UAAAzO,EAAA,KACK,MAAAwH,GAEL,aAPA,GAYA8E,EAAAoC,aAAA,KAGApC,EAAAqC,oBAAA,KAOArC,EAAAsC,UAAA,SAAAC,GAEA,uBAAAA,EACAvC,EAAAtM,OACAsM,EAAAqC,oBAAAE,GACA,IAAAvC,EAAA5a,MAAAmd,GACAvC,EAAAtM,OACAsM,EAAAoC,aAAAG,GACA,oBAAAvN,WACAuN,EACA,IAAAvN,WAAAuN,IAOAvC,EAAA5a,MAAA,oBAAA4P,sBAAA5P,MAeA4a,EAAAwC,KAAAxC,EAAAD,OAAA0C,SAAAzC,EAAAD,OAAA0C,QAAAD,MACAxC,EAAAD,OAAAyC,MACAxC,EAAAe,QAAA,QAOAf,EAAA0C,OAAA,mBAOA1C,EAAA2C,QAAA,wBAOA3C,EAAA4C,QAAA,6CAOA5C,EAAA6C,WAAA,SAAA3gB,GACA,OAAAA,EACA8d,EAAAkB,SAAAvN,KAAAzR,GAAA4gB,SACA9C,EAAAkB,SAAA6B,UASA/C,EAAAgD,aAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAnD,EAAAkB,SAAAkC,SAAAH,GACA,OAAAjD,EAAAwC,KACAxC,EAAAwC,KAAAtM,SAAAiN,EAAAE,GAAAF,EAAAG,GAAAJ,GACAC,EAAAjZ,SAAAsX,QAAA0B,KAkBAlD,EAAAC,QAOAD,EAAAuD,QAAA,SAAA9P,GACA,OAAAA,EAAA+P,OAAA,GAAAC,cAAAhQ,EAAAiQ,UAAA,IA0CA1D,EAAAM,WAmBAN,EAAA2D,cAAArD,EAAA,iBAoBAN,EAAA4D,YAAA,SAAAC,GAEA,IADA,IAAAC,EAAA,GACAjjB,EAAA,EAAmBA,EAAAgjB,EAAAngB,SAAuB7C,EAC1CijB,EAAAD,EAAAhjB,IAAA,EAOA,kBACA,QAAAwf,EAAA1e,OAAA0e,KAAA/N,MAAAzR,EAAAwf,EAAA3c,OAAA,EAA+D7C,GAAA,IAAQA,EACvE,OAAAijB,EAAAzD,EAAAxf,UAAA2D,IAAA8N,KAAA+N,EAAAxf,KAAA,OAAAyR,KAAA+N,EAAAxf,IACA,OAAAwf,EAAAxf,KAiBAmf,EAAA+D,YAAA,SAAAF,GAQA,gBAAAriB,GACA,QAAAX,EAAA,EAAuBA,EAAAgjB,EAAAngB,SAAuB7C,EAC9CgjB,EAAAhjB,KAAAW,UACA8Q,KAAAuR,EAAAhjB,MAoBAmf,EAAAgE,cAAA,CACAC,MAAApC,OACAqC,MAAArC,OACAsC,MAAAtC,OACAuC,MAAA,GAIApE,EAAAqE,WAAA,WACA,IAAA3Q,EAAAsM,EAAAtM,OAEAA,GAMAsM,EAAAoC,aAAA1O,EAAAC,OAAAqB,WAAArB,MAAAD,EAAAC,MAEA,SAAAzR,EAAAoiB,GACA,WAAA5Q,EAAAxR,EAAAoiB,IAEAtE,EAAAqC,oBAAA3O,EAAA6Q,aAEA,SAAAje,GACA,WAAAoN,EAAApN,KAbA0Z,EAAAoC,aAAApC,EAAAqC,oBAAA,uGCjYa7hB,EAAAgkB,aACT,CAAC,UAAW,UAAW,QAAS,QAAS,OAAQ,SAAU,SAAU,SAC5DhkB,EAAAikB,UAA4C,CAAC,QAAS,QAAS,OAAQ,SAAU,SAAU,SAC3FjkB,EAAAkkB,YAA8C,CAAC,UAAW,0BChBvE,IAAAC,EAGAA,EAAA,WACA,OAAArS,KADA,GAIA,IAEAqS,KAAA,IAAAC,SAAA,iBACC,MAAA1J,GAED,iBAAApa,SAAA6jB,EAAA7jB,QAOAL,EAAAD,QAAAmkB,gCChBA,IAAAE,EAAgB7jB,EAAQ,IAGxB8jB,EAAAD,EAAAE,OAAAC,EAAAH,EAAAI,OAAAC,EAAAL,EAAA7E,KAGAmF,EAAAN,EAAAO,MAAA,UAAAP,EAAAO,MAAA,YAEAD,EAAApc,KAAA,WAOA,IAcAsc,EAA2BC,EAd3Bvc,EAAA,GAkwJA,OArvJAA,EAAAwc,SACAF,EAAA,IAA2BC,EAAA3jB,OAAAY,OAAA8iB,IAC3BA,EAAA,uBACAC,EAAAD,EAAA,8BACAC,EAAAD,EAAA,8BACAC,EAAAD,EAAA,6BACAC,EAAAD,EAAA,6BACAC,EAAAD,EAAA,mBACAC,GAGAvc,EAAAyc,eAAA,WA8BA,SAAAA,EAAA/E,GAMA,GALAnO,KAAAmT,OAAA,GACAnT,KAAAoT,KAAA,GACApT,KAAAqT,QAAA,GACArT,KAAAsT,QAAA,GACAtT,KAAAuT,OAAA,GACApF,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAA+DA,EAAAwf,EAAA3c,SAAiB7C,EAChF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KAoqBA,OA3pBA2kB,EAAA3iB,UAAArB,KAAA,GAQAgkB,EAAA3iB,UAAAijB,YAAA,GAQAN,EAAA3iB,UAAAkjB,UAAA,GAQAP,EAAA3iB,UAAA2D,KAAA,EAQAgf,EAAA3iB,UAAAmjB,EAAA,EAQAR,EAAA3iB,UAAAhC,EAAAqkB,EAAA1C,KAAA0C,EAAA1C,KAAAtM,SAAA,UAQAsP,EAAA3iB,UAAAG,EAAAkiB,EAAA5C,UAAA,IAQAkD,EAAA3iB,UAAAV,EAAA,KAQAqjB,EAAA3iB,UAAA8hB,EAAA,KAQAa,EAAA3iB,UAAA4iB,OAAAP,EAAA9D,WAQAoE,EAAA3iB,UAAA6iB,KAAAR,EAAA9D,WAQAoE,EAAA3iB,UAAA8iB,QAAAT,EAAA9D,WAQAoE,EAAA3iB,UAAA+iB,QAAAV,EAAA9D,WAQAoE,EAAA3iB,UAAAgjB,OAAAX,EAAA9D,WAUAoE,EAAAjjB,OAAA,SAAAke,GACA,WAAA+E,EAAA/E,IAYA+E,EAAAS,OAAA,SAAAzF,EAAA0F,GAeA,GAdAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAAhf,MAAAgf,EAAA1d,eAAA,SACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAhf,MACA,MAAAgf,EAAAwF,GAAAxF,EAAA1d,eAAA,MACAojB,EAAAC,OAAA,IAAArF,MAAAN,EAAAwF,GACA,MAAAxF,EAAA3f,GAAA2f,EAAA1d,eAAA,MACAojB,EAAAC,OAAA,IAAAE,MAAA7F,EAAA3f,GACA,MAAA2f,EAAAxd,GAAAwd,EAAA1d,eAAA,MACAojB,EAAAC,OAAA,IAAAhC,MAAA3D,EAAAxd,GACA,MAAAwd,EAAAre,GAAAqe,EAAA1d,eAAA,MACAqiB,EAAApc,KAAAC,YAAAid,OAAAzF,EAAAre,EAAA+jB,EAAAC,OAAA,IAAAG,QAAAC,SACA,MAAA/F,EAAAmE,GAAAnE,EAAA1d,eAAA,MACAqiB,EAAApc,KAAAyd,WAAAP,OAAAzF,EAAAmE,EAAAuB,EAAAC,OAAA,IAAAG,QAAAC,SACA,MAAA/F,EAAAiF,QAAAjF,EAAAiF,OAAA/hB,OAAA,CACAwiB,EAAAC,OAAA,IAAAG,OACA,QAAAzlB,EAAA,EAA+BA,EAAA2f,EAAAiF,OAAA/hB,SAA2B7C,EAC1DqlB,EAAApF,MAAAN,EAAAiF,OAAA5kB,IACAqlB,EAAAK,SAEA,SAAA/F,EAAAkF,MAAAlF,EAAAkF,KAAAhiB,OAAA,CACAwiB,EAAAC,OAAA,IAAAG,OACA,IAAAzlB,EAAA,EAA+BA,EAAA2f,EAAAkF,KAAAhiB,SAAyB7C,EACxDqlB,EAAAG,MAAA7F,EAAAkF,KAAA7kB,IACAqlB,EAAAK,SAEA,SAAA/F,EAAAmF,SAAAnF,EAAAmF,QAAAjiB,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAAmF,QAAAjiB,SAA4B7C,EAC3DqlB,EAAAC,OAAA,IAAAhC,MAAA3D,EAAAmF,QAAA9kB,IACA,SAAA2f,EAAAoF,SAAApF,EAAAoF,QAAAliB,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAAoF,QAAAliB,SAA4B7C,EAC3DskB,EAAApc,KAAAC,YAAAid,OAAAzF,EAAAoF,QAAA/kB,GAAAqlB,EAAAC,OAAA,IAAAG,QAAAC,SACA,SAAA/F,EAAAqF,QAAArF,EAAAqF,OAAAniB,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAAqF,OAAAniB,SAA2B7C,EAC1DskB,EAAApc,KAAAyd,WAAAP,OAAAzF,EAAAqF,OAAAhlB,GAAAqlB,EAAAC,OAAA,IAAAG,QAAAC,SAOA,OANA,MAAA/F,EAAAuF,WAAAvF,EAAA1d,eAAA,cACAojB,EAAAC,OAAA,KAAAC,OAAA5F,EAAAuF,WACA,MAAAvF,EAAAha,MAAAga,EAAA1d,eAAA,SACAojB,EAAAC,OAAA,KAAAM,MAAAjG,EAAAha,MACA,MAAAga,EAAAsF,aAAAtF,EAAA1d,eAAA,gBACAojB,EAAAC,OAAA,KAAAC,OAAA5F,EAAAsF,aACAI,GAYAV,EAAAkB,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcAf,EAAAmB,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAAyc,eACAoB,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAAhf,KAAAolB,EAAAR,SACA,MACA,QACA5F,EAAAsF,YAAAc,EAAAR,SACA,MACA,QACA5F,EAAAuF,UAAAa,EAAAR,SACA,MACA,QACA5F,EAAAha,KAAAogB,EAAAH,QACA,MACA,OACAjG,EAAAwF,EAAAY,EAAA9F,QACA,MACA,OACAN,EAAA3f,EAAA+lB,EAAAP,QACA,MACA,OACA7F,EAAAxd,EAAA4jB,EAAAzC,QACA,MACA,OACA3D,EAAAre,EAAAgjB,EAAApc,KAAAC,YAAA2d,OAAAC,IAAAT,UACA,MACA,OACA3F,EAAAmE,EAAAQ,EAAApc,KAAAyd,WAAAG,OAAAC,IAAAT,UACA,MACA,OAGA,GAFA3F,EAAAiF,QAAAjF,EAAAiF,OAAA/hB,SACA8c,EAAAiF,OAAA,IACA,MAAAqB,GAEA,IADA,IAAAC,EAAAH,EAAAT,SAAAS,EAAArW,IACAqW,EAAArW,IAAAwW,GACAvG,EAAAiF,OAAArX,KAAAwY,EAAA9F,cAEAN,EAAAiF,OAAArX,KAAAwY,EAAA9F,SACA,MACA,OAGA,GAFAN,EAAAkF,MAAAlF,EAAAkF,KAAAhiB,SACA8c,EAAAkF,KAAA,IACA,MAAAoB,GAEA,IADAC,EAAAH,EAAAT,SAAAS,EAAArW,IACAqW,EAAArW,IAAAwW,GACAvG,EAAAkF,KAAAtX,KAAAwY,EAAAP,cAEA7F,EAAAkF,KAAAtX,KAAAwY,EAAAP,SACA,MACA,OACA7F,EAAAmF,SAAAnF,EAAAmF,QAAAjiB,SACA8c,EAAAmF,QAAA,IACAnF,EAAAmF,QAAAvX,KAAAwY,EAAAzC,SACA,MACA,QACA3D,EAAAoF,SAAApF,EAAAoF,QAAAliB,SACA8c,EAAAoF,QAAA,IACApF,EAAAoF,QAAAxX,KAAA+W,EAAApc,KAAAC,YAAA2d,OAAAC,IAAAT,WACA,MACA,QACA3F,EAAAqF,QAAArF,EAAAqF,OAAAniB,SACA8c,EAAAqF,OAAA,IACArF,EAAAqF,OAAAzX,KAAA+W,EAAApc,KAAAyd,WAAAG,OAAAC,IAAAT,WACA,MACA,QACAS,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaAgF,EAAAyB,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWAX,EAAA0B,OAAA,SAAA1G,GACA,oBAAAA,GAAA,OAAAA,EACA,wBACA,SAAAA,EAAAhf,MAAAgf,EAAA1d,eAAA,UACAoiB,EAAAtD,SAAApB,EAAAhf,MACA,8BACA,SAAAgf,EAAAsF,aAAAtF,EAAA1d,eAAA,iBACAoiB,EAAAtD,SAAApB,EAAAsF,aACA,qCACA,SAAAtF,EAAAuF,WAAAvF,EAAA1d,eAAA,eACAoiB,EAAAtD,SAAApB,EAAAuF,WACA,mCACA,SAAAvF,EAAAha,MAAAga,EAAA1d,eAAA,QACA,OAAA0d,EAAAha,MACA,QACA,kCACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,SAGA,SAAAga,EAAAwF,GAAAxF,EAAA1d,eAAA,MACA,iBAAA0d,EAAAwF,EACA,2BACA,SAAAxF,EAAA3f,GAAA2f,EAAA1d,eAAA,QACAoiB,EAAA3X,UAAAiT,EAAA3f,IAAA2f,EAAA3f,GAAAqkB,EAAA3X,UAAAiT,EAAA3f,EAAAsmB,MAAAjC,EAAA3X,UAAAiT,EAAA3f,EAAAumB,OACA,iCACA,SAAA5G,EAAAxd,GAAAwd,EAAA1d,eAAA,QACA0d,EAAAxd,GAAA,iBAAAwd,EAAAxd,EAAAU,QAAAwhB,EAAAtD,SAAApB,EAAAxd,IACA,2BACA,SAAAwd,EAAAre,GAAAqe,EAAA1d,eAAA,OACAiV,EAAAoN,EAAApc,KAAAC,YAAAke,OAAA1G,EAAAre,IAEA,WAAA4V,EAEA,SAAAyI,EAAAmE,GAAAnE,EAAA1d,eAAA,OACAiV,EAAAoN,EAAApc,KAAAyd,WAAAU,OAAA1G,EAAAmE,IAEA,WAAA5M,EAEA,SAAAyI,EAAAiF,QAAAjF,EAAA1d,eAAA,WACA,IAAAsC,MAAAqN,QAAA+N,EAAAiF,QACA,+BACA,QAAA5kB,EAAA,EAA+BA,EAAA2f,EAAAiF,OAAA/hB,SAA2B7C,EAC1D,oBAAA2f,EAAAiF,OAAA5kB,GACA,kCAEA,SAAA2f,EAAAkF,MAAAlF,EAAA1d,eAAA,SACA,IAAAsC,MAAAqN,QAAA+N,EAAAkF,MACA,6BACA,IAAA7kB,EAAA,EAA+BA,EAAA2f,EAAAkF,KAAAhiB,SAAyB7C,EACxD,KAAAqkB,EAAA3X,UAAAiT,EAAAkF,KAAA7kB,KAAA2f,EAAAkF,KAAA7kB,IAAAqkB,EAAA3X,UAAAiT,EAAAkF,KAAA7kB,GAAAsmB,MAAAjC,EAAA3X,UAAAiT,EAAAkF,KAAA7kB,GAAAumB,OACA,sCAEA,SAAA5G,EAAAmF,SAAAnF,EAAA1d,eAAA,YACA,IAAAsC,MAAAqN,QAAA+N,EAAAmF,SACA,gCACA,IAAA9kB,EAAA,EAA+BA,EAAA2f,EAAAmF,QAAAjiB,SAA4B7C,EAC3D,KAAA2f,EAAAmF,QAAA9kB,IAAA,iBAAA2f,EAAAmF,QAAA9kB,GAAA6C,QAAAwhB,EAAAtD,SAAApB,EAAAmF,QAAA9kB,KACA,mCAEA,SAAA2f,EAAAoF,SAAApF,EAAA1d,eAAA,YACA,IAAAsC,MAAAqN,QAAA+N,EAAAoF,SACA,gCACA,IAAA/kB,EAAA,EAA+BA,EAAA2f,EAAAoF,QAAAliB,SAA4B7C,EAAA,CAE3D,GADAkX,EAAAoN,EAAApc,KAAAC,YAAAke,OAAA1G,EAAAoF,QAAA/kB,IAEA,iBAAAkX,GAGA,SAAAyI,EAAAqF,QAAArF,EAAA1d,eAAA,WACA,IAAAsC,MAAAqN,QAAA+N,EAAAqF,QACA,+BACA,IAAAhlB,EAAA,EAA+BA,EAAA2f,EAAAqF,OAAAniB,SAA2B7C,EAAA,CAC1D,IAAAkX,EACA,GADAA,EAAAoN,EAAApc,KAAAyd,WAAAU,OAAA1G,EAAAqF,OAAAhlB,IAEA,gBAAAkX,GAGA,aAWAyN,EAAA6B,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAAyc,eACA,OAAA7iB,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAAyc,eAOA,OANA,MAAA7iB,EAAAnB,OACAgf,EAAAhf,KAAAqgB,OAAAlf,EAAAnB,OACA,MAAAmB,EAAAmjB,cACAtF,EAAAsF,YAAAjE,OAAAlf,EAAAmjB,cACA,MAAAnjB,EAAAojB,YACAvF,EAAAuF,UAAAlE,OAAAlf,EAAAojB,YACApjB,EAAA6D,MACA,gBACA,OACAga,EAAAha,KAAA,EACA,MACA,YACA,OACAga,EAAAha,KAAA,EACA,MACA,UACA,OACAga,EAAAha,KAAA,EACA,MACA,aACA,OACAga,EAAAha,KAAA,EACA,MACA,aACA,OACAga,EAAAha,KAAA,EACA,MACA,YACA,OACAga,EAAAha,KAAA,EACA,MACA,aACA,OACAga,EAAAha,KAAA,EACA,MACA,WACA,OACAga,EAAAha,KAAA,EACA,MACA,cACA,OACAga,EAAAha,KAAA,EACA,MACA,cACA,OACAga,EAAAha,KAAA,EACA,MACA,aACA,QACAga,EAAAha,KAAA,GAmBA,GAhBA,MAAA7D,EAAAqjB,IACAxF,EAAAwF,EAAA1Y,OAAA3K,EAAAqjB,IACA,MAAArjB,EAAA9B,IACAqkB,EAAA1C,MACAhC,EAAA3f,EAAAqkB,EAAA1C,KAAA8E,UAAA3kB,EAAA9B,IAAAqiB,UAAA,EACA,iBAAAvgB,EAAA9B,EACA2f,EAAA3f,EAAA0mB,SAAA5kB,EAAA9B,EAAA,IACA,iBAAA8B,EAAA9B,EACA2f,EAAA3f,EAAA8B,EAAA9B,EACA,iBAAA8B,EAAA9B,IACA2f,EAAA3f,EAAA,IAAAqkB,EAAAhE,SAAAve,EAAA9B,EAAAsmB,MAAA,EAAAxkB,EAAA9B,EAAAumB,OAAA,GAAAld,aACA,MAAAvH,EAAAK,IACA,iBAAAL,EAAAK,EACAkiB,EAAAtE,OAAA+F,OAAAhkB,EAAAK,EAAAwd,EAAAxd,EAAAkiB,EAAA5C,UAAA4C,EAAAtE,OAAAld,OAAAf,EAAAK,IAAA,GACAL,EAAAK,EAAAU,SACA8c,EAAAxd,EAAAL,EAAAK,IACA,MAAAL,EAAAR,EAAA,CACA,oBAAAQ,EAAAR,EACA,MAAA6K,UAAA,2CACAwT,EAAAre,EAAAgjB,EAAApc,KAAAC,YAAAqe,WAAA1kB,EAAAR,GAEA,SAAAQ,EAAAgiB,EAAA,CACA,oBAAAhiB,EAAAgiB,EACA,MAAA3X,UAAA,2CACAwT,EAAAmE,EAAAQ,EAAApc,KAAAyd,WAAAa,WAAA1kB,EAAAgiB,GAEA,GAAAhiB,EAAA8iB,OAAA,CACA,IAAArgB,MAAAqN,QAAA9P,EAAA8iB,QACA,MAAAzY,UAAA,+CACAwT,EAAAiF,OAAA,GACA,QAAA5kB,EAAA,EAA+BA,EAAA8B,EAAA8iB,OAAA/hB,SAA0B7C,EACzD2f,EAAAiF,OAAA5kB,GAAAyM,OAAA3K,EAAA8iB,OAAA5kB,IAEA,GAAA8B,EAAA+iB,KAAA,CACA,IAAAtgB,MAAAqN,QAAA9P,EAAA+iB,MACA,MAAA1Y,UAAA,6CACAwT,EAAAkF,KAAA,GACA,IAAA7kB,EAAA,EAA+BA,EAAA8B,EAAA+iB,KAAAhiB,SAAwB7C,EACvDqkB,EAAA1C,MACAhC,EAAAkF,KAAA7kB,GAAAqkB,EAAA1C,KAAA8E,UAAA3kB,EAAA+iB,KAAA7kB,KAAAqiB,UAAA,EACA,iBAAAvgB,EAAA+iB,KAAA7kB,GACA2f,EAAAkF,KAAA7kB,GAAA0mB,SAAA5kB,EAAA+iB,KAAA7kB,GAAA,IACA,iBAAA8B,EAAA+iB,KAAA7kB,GACA2f,EAAAkF,KAAA7kB,GAAA8B,EAAA+iB,KAAA7kB,GACA,iBAAA8B,EAAA+iB,KAAA7kB,KACA2f,EAAAkF,KAAA7kB,GAAA,IAAAqkB,EAAAhE,SAAAve,EAAA+iB,KAAA7kB,GAAAsmB,MAAA,EAAAxkB,EAAA+iB,KAAA7kB,GAAAumB,OAAA,GAAAld,YAEA,GAAAvH,EAAAgjB,QAAA,CACA,IAAAvgB,MAAAqN,QAAA9P,EAAAgjB,SACA,MAAA3Y,UAAA,gDACAwT,EAAAmF,QAAA,GACA,IAAA9kB,EAAA,EAA+BA,EAAA8B,EAAAgjB,QAAAjiB,SAA2B7C,EAC1D,iBAAA8B,EAAAgjB,QAAA9kB,GACAqkB,EAAAtE,OAAA+F,OAAAhkB,EAAAgjB,QAAA9kB,GAAA2f,EAAAmF,QAAA9kB,GAAAqkB,EAAA5C,UAAA4C,EAAAtE,OAAAld,OAAAf,EAAAgjB,QAAA9kB,KAAA,GACA8B,EAAAgjB,QAAA9kB,GAAA6C,SACA8c,EAAAmF,QAAA9kB,GAAA8B,EAAAgjB,QAAA9kB,IAEA,GAAA8B,EAAAijB,QAAA,CACA,IAAAxgB,MAAAqN,QAAA9P,EAAAijB,SACA,MAAA5Y,UAAA,gDACAwT,EAAAoF,QAAA,GACA,IAAA/kB,EAAA,EAA+BA,EAAA8B,EAAAijB,QAAAliB,SAA2B7C,EAAA,CAC1D,oBAAA8B,EAAAijB,QAAA/kB,GACA,MAAAmM,UAAA,iDACAwT,EAAAoF,QAAA/kB,GAAAskB,EAAApc,KAAAC,YAAAqe,WAAA1kB,EAAAijB,QAAA/kB,KAGA,GAAA8B,EAAAkjB,OAAA,CACA,IAAAzgB,MAAAqN,QAAA9P,EAAAkjB,QACA,MAAA7Y,UAAA,+CACAwT,EAAAqF,OAAA,GACA,IAAAhlB,EAAA,EAA+BA,EAAA8B,EAAAkjB,OAAAniB,SAA0B7C,EAAA,CACzD,oBAAA8B,EAAAkjB,OAAAhlB,GACA,MAAAmM,UAAA,gDACAwT,EAAAqF,OAAAhlB,GAAAskB,EAAApc,KAAAyd,WAAAa,WAAA1kB,EAAAkjB,OAAAhlB,KAGA,OAAA2f,GAYAgF,EAAAgC,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GAQA,IAPA8kB,EAAAC,QAAAD,EAAAE,YACAhlB,EAAA8iB,OAAA,GACA9iB,EAAA+iB,KAAA,GACA/iB,EAAAgjB,QAAA,GACAhjB,EAAAijB,QAAA,GACAjjB,EAAAkjB,OAAA,IAEA4B,EAAAE,SAAA,CAGA,GAFAhlB,EAAAnB,KAAA,GACAmB,EAAAqjB,EAAA,EACAd,EAAA1C,KAAA,CACA,IAAAoF,EAAA,IAAA1C,EAAA1C,KAAA,QACA7f,EAAA9B,EAAA4mB,EAAAxD,QAAApC,OAAA+F,EAAA7T,WAAA0T,EAAAxD,QAAA3W,OAAAsa,EAAA1d,WAAA0d,OAEAjlB,EAAA9B,EAAA4mB,EAAAxD,QAAApC,OAAA,MACA4F,EAAAtD,QAAAtC,OACAlf,EAAAK,EAAA,IAEAL,EAAAK,EAAA,GACAykB,EAAAtD,QAAA/e,QACAzC,EAAAK,EAAAkiB,EAAA5C,UAAA3f,EAAAK,KAEAL,EAAAR,EAAA,KACAQ,EAAAgiB,EAAA,KACAhiB,EAAAojB,UAAA,GACApjB,EAAA6D,KAAAihB,EAAAvD,QAAArC,OAAA,cACAlf,EAAAmjB,YAAA,GAiBA,GAfA,MAAAtF,EAAAhf,MAAAgf,EAAA1d,eAAA,UACAH,EAAAnB,KAAAgf,EAAAhf,MACA,MAAAgf,EAAAwF,GAAAxF,EAAA1d,eAAA,OACAH,EAAAqjB,EAAAyB,EAAArD,OAAAzC,SAAAnB,EAAAwF,GAAAnE,OAAArB,EAAAwF,GAAAxF,EAAAwF,GACA,MAAAxF,EAAA3f,GAAA2f,EAAA1d,eAAA,OACA,iBAAA0d,EAAA3f,EACA8B,EAAA9B,EAAA4mB,EAAAxD,QAAApC,cAAArB,EAAA3f,GAAA2f,EAAA3f,EAEA8B,EAAA9B,EAAA4mB,EAAAxD,QAAApC,OAAAqD,EAAA1C,KAAA3f,UAAAkR,SAAA3S,KAAAof,EAAA3f,GAAA4mB,EAAAxD,QAAA3W,OAAA,IAAA4X,EAAAhE,SAAAV,EAAA3f,EAAAsmB,MAAA,EAAA3G,EAAA3f,EAAAumB,OAAA,GAAAld,WAAAsW,EAAA3f,GACA,MAAA2f,EAAAxd,GAAAwd,EAAA1d,eAAA,OACAH,EAAAK,EAAAykB,EAAAtD,QAAAtC,OAAAqD,EAAAtE,OAAAqF,OAAAzF,EAAAxd,EAAA,EAAAwd,EAAAxd,EAAAU,QAAA+jB,EAAAtD,QAAA/e,YAAAvC,UAAAwI,MAAAjK,KAAAof,EAAAxd,GAAAwd,EAAAxd,GACA,MAAAwd,EAAAre,GAAAqe,EAAA1d,eAAA,OACAH,EAAAR,EAAAgjB,EAAApc,KAAAC,YAAAwe,SAAAhH,EAAAre,EAAAslB,IACA,MAAAjH,EAAAmE,GAAAnE,EAAA1d,eAAA,OACAH,EAAAgiB,EAAAQ,EAAApc,KAAAyd,WAAAgB,SAAAhH,EAAAmE,EAAA8C,IACAjH,EAAAiF,QAAAjF,EAAAiF,OAAA/hB,OAAA,CACAf,EAAA8iB,OAAA,GACA,QAAAve,EAAA,EAA+BA,EAAAsZ,EAAAiF,OAAA/hB,SAA2BwD,EAC1DvE,EAAA8iB,OAAAve,GAAAugB,EAAArD,OAAAzC,SAAAnB,EAAAiF,OAAAve,IAAA2a,OAAArB,EAAAiF,OAAAve,IAAAsZ,EAAAiF,OAAAve,GAEA,GAAAsZ,EAAAkF,MAAAlF,EAAAkF,KAAAhiB,OAAA,CACAf,EAAA+iB,KAAA,GACA,IAAAxe,EAAA,EAA+BA,EAAAsZ,EAAAkF,KAAAhiB,SAAyBwD,EACxD,iBAAAsZ,EAAAkF,KAAAxe,GACAvE,EAAA+iB,KAAAxe,GAAAugB,EAAAxD,QAAApC,cAAArB,EAAAkF,KAAAxe,IAAAsZ,EAAAkF,KAAAxe,GAEAvE,EAAA+iB,KAAAxe,GAAAugB,EAAAxD,QAAApC,OAAAqD,EAAA1C,KAAA3f,UAAAkR,SAAA3S,KAAAof,EAAAkF,KAAAxe,IAAAugB,EAAAxD,QAAA3W,OAAA,IAAA4X,EAAAhE,SAAAV,EAAAkF,KAAAxe,GAAAigB,MAAA,EAAA3G,EAAAkF,KAAAxe,GAAAkgB,OAAA,GAAAld,WAAAsW,EAAAkF,KAAAxe,GAEA,GAAAsZ,EAAAmF,SAAAnF,EAAAmF,QAAAjiB,OAAA,CACAf,EAAAgjB,QAAA,GACA,IAAAze,EAAA,EAA+BA,EAAAsZ,EAAAmF,QAAAjiB,SAA4BwD,EAC3DvE,EAAAgjB,QAAAze,GAAAugB,EAAAtD,QAAAtC,OAAAqD,EAAAtE,OAAAqF,OAAAzF,EAAAmF,QAAAze,GAAA,EAAAsZ,EAAAmF,QAAAze,GAAAxD,QAAA+jB,EAAAtD,QAAA/e,YAAAvC,UAAAwI,MAAAjK,KAAAof,EAAAmF,QAAAze,IAAAsZ,EAAAmF,QAAAze,GAEA,GAAAsZ,EAAAoF,SAAApF,EAAAoF,QAAAliB,OAAA,CACAf,EAAAijB,QAAA,GACA,IAAA1e,EAAA,EAA+BA,EAAAsZ,EAAAoF,QAAAliB,SAA4BwD,EAC3DvE,EAAAijB,QAAA1e,GAAAie,EAAApc,KAAAC,YAAAwe,SAAAhH,EAAAoF,QAAA1e,GAAAugB,GAEA,GAAAjH,EAAAqF,QAAArF,EAAAqF,OAAAniB,OAAA,CACAf,EAAAkjB,OAAA,GACA,IAAA3e,EAAA,EAA+BA,EAAAsZ,EAAAqF,OAAAniB,SAA2BwD,EAC1DvE,EAAAkjB,OAAA3e,GAAAie,EAAApc,KAAAyd,WAAAgB,SAAAhH,EAAAqF,OAAA3e,GAAAugB,GAQA,OANA,MAAAjH,EAAAuF,WAAAvF,EAAA1d,eAAA,eACAH,EAAAojB,UAAAvF,EAAAuF,WACA,MAAAvF,EAAAha,MAAAga,EAAA1d,eAAA,UACAH,EAAA6D,KAAAihB,EAAAvD,QAAArC,OAAAsD,EAAApc,KAAAyc,eAAAqC,cAAArH,EAAAha,MAAAga,EAAAha,MACA,MAAAga,EAAAsF,aAAAtF,EAAA1d,eAAA,iBACAH,EAAAmjB,YAAAtF,EAAAsF,aACAnjB,GAUA6iB,EAAA3iB,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAmBAwB,EAAAqC,cAAA,WACA,IAAAxC,EAAA,GAA+BC,EAAA3jB,OAAAY,OAAA8iB,GAY/B,OAXAC,EAAAD,EAAA,kBACAC,EAAAD,EAAA,cACAC,EAAAD,EAAA,YACAC,EAAAD,EAAA,eACAC,EAAAD,EAAA,eACAC,EAAAD,EAAA,cACAC,EAAAD,EAAA,eACAC,EAAAD,EAAA,aACAC,EAAAD,EAAA,gBACAC,EAAAD,EAAA,gBACAC,EAAAD,EAAA,iBACAC,EAbA,GAgBAE,EA3sBA,GA8sBAzc,EAAAgf,eAAA,WAmBA,SAAAA,EAAAtH,GACA,GAAAA,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAA+DA,EAAAwf,EAAA3c,SAAiB7C,EAChF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KAmNA,OA1MAknB,EAAAllB,UAAArB,KAAA,GAQAumB,EAAAllB,UAAA2D,KAAA,KAQAuhB,EAAAllB,UAAAkjB,UAAA,GAUAgC,EAAAxlB,OAAA,SAAAke,GACA,WAAAsH,EAAAtH,IAYAsH,EAAA9B,OAAA,SAAAzF,EAAA0F,GASA,OARAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAAhf,MAAAgf,EAAA1d,eAAA,SACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAhf,MACA,MAAAgf,EAAAha,MAAAga,EAAA1d,eAAA,SACAqiB,EAAApc,KAAAif,UAAA/B,OAAAzF,EAAAha,KAAA0f,EAAAC,OAAA,IAAAG,QAAAC,SACA,MAAA/F,EAAAuF,WAAAvF,EAAA1d,eAAA,cACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAuF,WACAG,GAYA6B,EAAArB,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcAwB,EAAApB,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAAgf,eACAnB,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAAhf,KAAAolB,EAAAR,SACA,MACA,OACA5F,EAAAha,KAAA2e,EAAApc,KAAAif,UAAArB,OAAAC,IAAAT,UACA,MACA,OACA3F,EAAAuF,UAAAa,EAAAR,SACA,MACA,QACAQ,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaAuH,EAAAd,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWA4B,EAAAb,OAAA,SAAA1G,GACA,oBAAAA,GAAA,OAAAA,EACA,wBACA,SAAAA,EAAAhf,MAAAgf,EAAA1d,eAAA,UACAoiB,EAAAtD,SAAApB,EAAAhf,MACA,8BACA,SAAAgf,EAAAha,MAAAga,EAAA1d,eAAA,SACA,IAAAiV,EAAAoN,EAAApc,KAAAif,UAAAd,OAAA1G,EAAAha,MACA,GAAAuR,EACA,cAAAA,EAEA,aAAAyI,EAAAuF,WAAAvF,EAAA1d,eAAA,eACAoiB,EAAAtD,SAAApB,EAAAuF,WACA,6BACA,MAWAgC,EAAAV,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAAgf,eACA,OAAAplB,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAAgf,eAGA,GAFA,MAAAplB,EAAAnB,OACAgf,EAAAhf,KAAAqgB,OAAAlf,EAAAnB,OACA,MAAAmB,EAAA6D,KAAA,CACA,oBAAA7D,EAAA6D,KACA,MAAAwG,UAAA,8CACAwT,EAAAha,KAAA2e,EAAApc,KAAAif,UAAAX,WAAA1kB,EAAA6D,MAIA,OAFA,MAAA7D,EAAAojB,YACAvF,EAAAuF,UAAAlE,OAAAlf,EAAAojB,YACAvF,GAYAuH,EAAAP,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GAYA,OAXA8kB,EAAAE,WACAhlB,EAAAnB,KAAA,GACAmB,EAAA6D,KAAA,KACA7D,EAAAojB,UAAA,IAEA,MAAAvF,EAAAhf,MAAAgf,EAAA1d,eAAA,UACAH,EAAAnB,KAAAgf,EAAAhf,MACA,MAAAgf,EAAAha,MAAAga,EAAA1d,eAAA,UACAH,EAAA6D,KAAA2e,EAAApc,KAAAif,UAAAR,SAAAhH,EAAAha,KAAAihB,IACA,MAAAjH,EAAAuF,WAAAvF,EAAA1d,eAAA,eACAH,EAAAojB,UAAAvF,EAAAuF,WACApjB,GAUAolB,EAAAllB,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAGA+D,EA1OA,GA6OAhf,EAAAkf,UAAA,WAuBA,SAAAA,EAAAxH,GAIA,GAHAnO,KAAAjC,MAAA,GACAiC,KAAAoE,OAAA,GACApE,KAAAgE,UAAA,GACAmK,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAA+DA,EAAAwf,EAAA3c,SAAiB7C,EAChF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KAsVA,OA7UAonB,EAAAplB,UAAAwN,MAAA6U,EAAA9D,WAQA6G,EAAAplB,UAAA6T,OAAAwO,EAAA9D,WAQA6G,EAAAplB,UAAArB,KAAA,GAQAymB,EAAAplB,UAAAqlB,OAAA,GAQAD,EAAAplB,UAAAslB,OAAA,GAQAF,EAAAplB,UAAAyT,UAAA4O,EAAA9D,WAQA6G,EAAAplB,UAAAkjB,UAAA,GAUAkC,EAAA1lB,OAAA,SAAAke,GACA,WAAAwH,EAAAxH,IAYAwH,EAAAhC,OAAA,SAAAzF,EAAA0F,GAGA,GAFAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAAnQ,OAAAmQ,EAAAnQ,MAAA3M,OACA,QAAA7C,EAAA,EAA+BA,EAAA2f,EAAAnQ,MAAA3M,SAA0B7C,EACzDqlB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAnQ,MAAAxP,IACA,SAAA2f,EAAA9J,QAAA8J,EAAA9J,OAAAhT,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAA9J,OAAAhT,SAA2B7C,EAC1DqlB,EAAAC,OAAA,IAAAC,OAAA5F,EAAA9J,OAAA7V,IAKA,GAJA,MAAA2f,EAAAhf,MAAAgf,EAAA1d,eAAA,SACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAhf,MACA,MAAAgf,EAAA0H,QAAA1H,EAAA1d,eAAA,WACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAA0H,QACA,MAAA1H,EAAAlK,WAAAkK,EAAAlK,UAAA5S,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAAlK,UAAA5S,SAA8B7C,EAC7DskB,EAAApc,KAAAyc,eAAAS,OAAAzF,EAAAlK,UAAAzV,GAAAqlB,EAAAC,OAAA,IAAAG,QAAAC,SAKA,OAJA,MAAA/F,EAAAuF,WAAAvF,EAAA1d,eAAA,cACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAuF,WACA,MAAAvF,EAAA2H,QAAA3H,EAAA1d,eAAA,WACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAA2H,QACAjC,GAYA+B,EAAAvB,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcA0B,EAAAtB,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAAkf,UACArB,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAAnQ,OAAAmQ,EAAAnQ,MAAA3M,SACA8c,EAAAnQ,MAAA,IACAmQ,EAAAnQ,MAAAjC,KAAAwY,EAAAR,UACA,MACA,OACA5F,EAAA9J,QAAA8J,EAAA9J,OAAAhT,SACA8c,EAAA9J,OAAA,IACA8J,EAAA9J,OAAAtI,KAAAwY,EAAAR,UACA,MACA,OACA5F,EAAAhf,KAAAolB,EAAAR,SACA,MACA,OACA5F,EAAA0H,OAAAtB,EAAAR,SACA,MACA,OACA5F,EAAA2H,OAAAvB,EAAAR,SACA,MACA,OACA5F,EAAAlK,WAAAkK,EAAAlK,UAAA5S,SACA8c,EAAAlK,UAAA,IACAkK,EAAAlK,UAAAlI,KAAA+W,EAAApc,KAAAyc,eAAAmB,OAAAC,IAAAT,WACA,MACA,OACA3F,EAAAuF,UAAAa,EAAAR,SACA,MACA,QACAQ,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaAyH,EAAAhB,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWA8B,EAAAf,OAAA,SAAA1G,GACA,oBAAAA,GAAA,OAAAA,EACA,wBACA,SAAAA,EAAAnQ,OAAAmQ,EAAA1d,eAAA,UACA,IAAAsC,MAAAqN,QAAA+N,EAAAnQ,OACA,8BACA,QAAAxP,EAAA,EAA+BA,EAAA2f,EAAAnQ,MAAA3M,SAA0B7C,EACzD,IAAAqkB,EAAAtD,SAAApB,EAAAnQ,MAAAxP,IACA,iCAEA,SAAA2f,EAAA9J,QAAA8J,EAAA1d,eAAA,WACA,IAAAsC,MAAAqN,QAAA+N,EAAA9J,QACA,+BACA,IAAA7V,EAAA,EAA+BA,EAAA2f,EAAA9J,OAAAhT,SAA2B7C,EAC1D,IAAAqkB,EAAAtD,SAAApB,EAAA9J,OAAA7V,IACA,kCAEA,SAAA2f,EAAAhf,MAAAgf,EAAA1d,eAAA,UACAoiB,EAAAtD,SAAApB,EAAAhf,MACA,8BACA,SAAAgf,EAAA0H,QAAA1H,EAAA1d,eAAA,YACAoiB,EAAAtD,SAAApB,EAAA0H,QACA,gCACA,SAAA1H,EAAA2H,QAAA3H,EAAA1d,eAAA,YACAoiB,EAAAtD,SAAApB,EAAA2H,QACA,gCACA,SAAA3H,EAAAlK,WAAAkK,EAAA1d,eAAA,cACA,IAAAsC,MAAAqN,QAAA+N,EAAAlK,WACA,kCACA,IAAAzV,EAAA,EAA+BA,EAAA2f,EAAAlK,UAAA5S,SAA8B7C,EAAA,CAC7D,IAAAkX,EAAAoN,EAAApc,KAAAyc,eAAA0B,OAAA1G,EAAAlK,UAAAzV,IACA,GAAAkX,EACA,mBAAAA,GAGA,aAAAyI,EAAAuF,WAAAvF,EAAA1d,eAAA,eACAoiB,EAAAtD,SAAApB,EAAAuF,WACA,6BACA,MAWAkC,EAAAZ,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAAkf,UACA,OAAAtlB,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAAkf,UACA,GAAAtlB,EAAA0N,MAAA,CACA,IAAAjL,MAAAqN,QAAA9P,EAAA0N,OACA,MAAArD,UAAA,yCACAwT,EAAAnQ,MAAA,GACA,QAAAxP,EAAA,EAA+BA,EAAA8B,EAAA0N,MAAA3M,SAAyB7C,EACxD2f,EAAAnQ,MAAAxP,GAAAghB,OAAAlf,EAAA0N,MAAAxP,IAEA,GAAA8B,EAAA+T,OAAA,CACA,IAAAtR,MAAAqN,QAAA9P,EAAA+T,QACA,MAAA1J,UAAA,0CACAwT,EAAA9J,OAAA,GACA,IAAA7V,EAAA,EAA+BA,EAAA8B,EAAA+T,OAAAhT,SAA0B7C,EACzD2f,EAAA9J,OAAA7V,GAAAghB,OAAAlf,EAAA+T,OAAA7V,IAQA,GANA,MAAA8B,EAAAnB,OACAgf,EAAAhf,KAAAqgB,OAAAlf,EAAAnB,OACA,MAAAmB,EAAAulB,SACA1H,EAAA0H,OAAArG,OAAAlf,EAAAulB,SACA,MAAAvlB,EAAAwlB,SACA3H,EAAA2H,OAAAtG,OAAAlf,EAAAwlB,SACAxlB,EAAA2T,UAAA,CACA,IAAAlR,MAAAqN,QAAA9P,EAAA2T,WACA,MAAAtJ,UAAA,6CACAwT,EAAAlK,UAAA,GACA,IAAAzV,EAAA,EAA+BA,EAAA8B,EAAA2T,UAAA5S,SAA6B7C,EAAA,CAC5D,oBAAA8B,EAAA2T,UAAAzV,GACA,MAAAmM,UAAA,8CACAwT,EAAAlK,UAAAzV,GAAAskB,EAAApc,KAAAyc,eAAA6B,WAAA1kB,EAAA2T,UAAAzV,KAKA,OAFA,MAAA8B,EAAAojB,YACAvF,EAAAuF,UAAAlE,OAAAlf,EAAAojB,YACAvF,GAYAyH,EAAAT,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GAYA,IAXA8kB,EAAAC,QAAAD,EAAAE,YACAhlB,EAAA0N,MAAA,GACA1N,EAAA+T,OAAA,GACA/T,EAAA2T,UAAA,IAEAmR,EAAAE,WACAhlB,EAAAnB,KAAA,GACAmB,EAAAulB,OAAA,GACAvlB,EAAAojB,UAAA,GACApjB,EAAAwlB,OAAA,IAEA3H,EAAAnQ,OAAAmQ,EAAAnQ,MAAA3M,OAAA,CACAf,EAAA0N,MAAA,GACA,QAAAnJ,EAAA,EAA+BA,EAAAsZ,EAAAnQ,MAAA3M,SAA0BwD,EACzDvE,EAAA0N,MAAAnJ,GAAAsZ,EAAAnQ,MAAAnJ,GAEA,GAAAsZ,EAAA9J,QAAA8J,EAAA9J,OAAAhT,OAAA,CACAf,EAAA+T,OAAA,GACA,IAAAxP,EAAA,EAA+BA,EAAAsZ,EAAA9J,OAAAhT,SAA2BwD,EAC1DvE,EAAA+T,OAAAxP,GAAAsZ,EAAA9J,OAAAxP,GAMA,GAJA,MAAAsZ,EAAAhf,MAAAgf,EAAA1d,eAAA,UACAH,EAAAnB,KAAAgf,EAAAhf,MACA,MAAAgf,EAAA0H,QAAA1H,EAAA1d,eAAA,YACAH,EAAAulB,OAAA1H,EAAA0H,QACA1H,EAAAlK,WAAAkK,EAAAlK,UAAA5S,OAAA,CACAf,EAAA2T,UAAA,GACA,IAAApP,EAAA,EAA+BA,EAAAsZ,EAAAlK,UAAA5S,SAA8BwD,EAC7DvE,EAAA2T,UAAApP,GAAAie,EAAApc,KAAAyc,eAAAgC,SAAAhH,EAAAlK,UAAApP,GAAAugB,GAMA,OAJA,MAAAjH,EAAAuF,WAAAvF,EAAA1d,eAAA,eACAH,EAAAojB,UAAAvF,EAAAuF,WACA,MAAAvF,EAAA2H,QAAA3H,EAAA1d,eAAA,YACAH,EAAAwlB,OAAA3H,EAAA2H,QACAxlB,GAUAslB,EAAAplB,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAGAiE,EApXA,GAuXAlf,EAAAqf,WAAA,WAyBA,SAAAA,EAAA3H,GAGA,GAFAnO,KAAA+V,YAAA,GACA/V,KAAAgW,cAAA,GACA7H,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAA+DA,EAAAwf,EAAA3c,SAAiB7C,EAChF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KAuZA,OA9YAunB,EAAAvlB,UAAA0lB,UAAArD,EAAA1C,KAAA0C,EAAA1C,KAAAtM,SAAA,UAQAkS,EAAAvlB,UAAAwlB,YAAAnD,EAAA9D,WAQAgH,EAAAvlB,UAAA2lB,aAAA,GAQAJ,EAAAvlB,UAAA4lB,gBAAA,GAQAL,EAAAvlB,UAAAslB,OAAA,GAQAC,EAAAvlB,UAAA6lB,aAAAxD,EAAA1C,KAAA0C,EAAA1C,KAAAtM,SAAA,UAQAkS,EAAAvlB,UAAAkjB,UAAA,GAQAqC,EAAAvlB,UAAA8lB,MAAA,KAQAP,EAAAvlB,UAAAylB,cAAApD,EAAA9D,WAUAgH,EAAA7lB,OAAA,SAAAke,GACA,WAAA2H,EAAA3H,IAYA2H,EAAAnC,OAAA,SAAAzF,EAAA0F,GAiBA,GAhBAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAA+H,WAAA/H,EAAA1d,eAAA,cACAojB,EAAAC,OAAA,GAAAE,MAAA7F,EAAA+H,WACA,MAAA/H,EAAAgI,cAAAhI,EAAA1d,eAAA,iBACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAgI,cACA,MAAAhI,EAAAiI,iBAAAjI,EAAA1d,eAAA,oBACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAiI,iBACA,MAAAjI,EAAA2H,QAAA3H,EAAA1d,eAAA,WACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAA2H,QACA,MAAA3H,EAAAkI,cAAAlI,EAAA1d,eAAA,iBACAojB,EAAAC,OAAA,IAAAE,MAAA7F,EAAAkI,cACA,MAAAlI,EAAAuF,WAAAvF,EAAA1d,eAAA,cACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAuF,WACA,MAAAvF,EAAAmI,OAAAnI,EAAA1d,eAAA,UACAqiB,EAAApc,KAAAyd,WAAAP,OAAAzF,EAAAmI,MAAAzC,EAAAC,OAAA,IAAAG,QAAAC,SACA,MAAA/F,EAAA6H,aAAA7H,EAAA6H,YAAA3kB,OACA,QAAA7C,EAAA,EAA+BA,EAAA2f,EAAA6H,YAAA3kB,SAAgC7C,EAC/DskB,EAAApc,KAAA6f,mBAAA3C,OAAAzF,EAAA6H,YAAAxnB,GAAAqlB,EAAAC,OAAA,IAAAG,QAAAC,SACA,SAAA/F,EAAA8H,eAAA9H,EAAA8H,cAAA5kB,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAA8H,cAAA5kB,SAAkC7C,EACjEskB,EAAApc,KAAA8f,uBAAA5C,OAAAzF,EAAA8H,cAAAznB,GAAAqlB,EAAAC,OAAA,KAAAG,QAAAC,SACA,OAAAL,GAYAkC,EAAA1B,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcA6B,EAAAzB,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAAqf,WACAxB,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAA+H,UAAA3B,EAAAP,QACA,MACA,OACA7F,EAAA6H,aAAA7H,EAAA6H,YAAA3kB,SACA8c,EAAA6H,YAAA,IACA7H,EAAA6H,YAAAja,KAAA+W,EAAApc,KAAA6f,mBAAAjC,OAAAC,IAAAT,WACA,MACA,OACA3F,EAAAgI,aAAA5B,EAAAR,SACA,MACA,OACA5F,EAAAiI,gBAAA7B,EAAAR,SACA,MACA,OACA5F,EAAA2H,OAAAvB,EAAAR,SACA,MACA,OACA5F,EAAAkI,aAAA9B,EAAAP,QACA,MACA,OACA7F,EAAAuF,UAAAa,EAAAR,SACA,MACA,OACA5F,EAAAmI,MAAAxD,EAAApc,KAAAyd,WAAAG,OAAAC,IAAAT,UACA,MACA,QACA3F,EAAA8H,eAAA9H,EAAA8H,cAAA5kB,SACA8c,EAAA8H,cAAA,IACA9H,EAAA8H,cAAAla,KAAA+W,EAAApc,KAAA8f,uBAAAlC,OAAAC,IAAAT,WACA,MACA,QACAS,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaA4H,EAAAnB,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWAiC,EAAAlB,OAAA,SAAA1G,GACA,oBAAAA,GAAA,OAAAA,EACA,wBACA,SAAAA,EAAA+H,WAAA/H,EAAA1d,eAAA,gBACAoiB,EAAA3X,UAAAiT,EAAA+H,YAAA/H,EAAA+H,WAAArD,EAAA3X,UAAAiT,EAAA+H,UAAApB,MAAAjC,EAAA3X,UAAAiT,EAAA+H,UAAAnB,OACA,yCACA,SAAA5G,EAAA6H,aAAA7H,EAAA1d,eAAA,gBACA,IAAAsC,MAAAqN,QAAA+N,EAAA6H,aACA,oCACA,QAAAxnB,EAAA,EAA+BA,EAAA2f,EAAA6H,YAAA3kB,SAAgC7C,EAAA,CAE/D,GADAkX,EAAAoN,EAAApc,KAAA6f,mBAAA1B,OAAA1G,EAAA6H,YAAAxnB,IAEA,qBAAAkX,GAGA,SAAAyI,EAAAgI,cAAAhI,EAAA1d,eAAA,kBACAoiB,EAAAtD,SAAApB,EAAAgI,cACA,sCACA,SAAAhI,EAAAiI,iBAAAjI,EAAA1d,eAAA,qBACAoiB,EAAAtD,SAAApB,EAAAiI,iBACA,yCACA,SAAAjI,EAAA2H,QAAA3H,EAAA1d,eAAA,YACAoiB,EAAAtD,SAAApB,EAAA2H,QACA,gCACA,SAAA3H,EAAAkI,cAAAlI,EAAA1d,eAAA,mBACAoiB,EAAA3X,UAAAiT,EAAAkI,eAAAlI,EAAAkI,cAAAxD,EAAA3X,UAAAiT,EAAAkI,aAAAvB,MAAAjC,EAAA3X,UAAAiT,EAAAkI,aAAAtB,OACA,4CACA,SAAA5G,EAAAuF,WAAAvF,EAAA1d,eAAA,eACAoiB,EAAAtD,SAAApB,EAAAuF,WACA,mCACA,SAAAvF,EAAAmI,OAAAnI,EAAA1d,eAAA,WACAiV,EAAAoN,EAAApc,KAAAyd,WAAAU,OAAA1G,EAAAmI,QAEA,eAAA5Q,EAEA,SAAAyI,EAAA8H,eAAA9H,EAAA1d,eAAA,kBACA,IAAAsC,MAAAqN,QAAA+N,EAAA8H,eACA,sCACA,IAAAznB,EAAA,EAA+BA,EAAA2f,EAAA8H,cAAA5kB,SAAkC7C,EAAA,CACjE,IAAAkX,EACA,GADAA,EAAAoN,EAAApc,KAAA8f,uBAAA3B,OAAA1G,EAAA8H,cAAAznB,IAEA,uBAAAkX,GAGA,aAWAqQ,EAAAf,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAAqf,WACA,OAAAzlB,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAAqf,WAUA,GATA,MAAAzlB,EAAA4lB,YACArD,EAAA1C,MACAhC,EAAA+H,UAAArD,EAAA1C,KAAA8E,UAAA3kB,EAAA4lB,YAAArF,UAAA,EACA,iBAAAvgB,EAAA4lB,UACA/H,EAAA+H,UAAAhB,SAAA5kB,EAAA4lB,UAAA,IACA,iBAAA5lB,EAAA4lB,UACA/H,EAAA+H,UAAA5lB,EAAA4lB,UACA,iBAAA5lB,EAAA4lB,YACA/H,EAAA+H,UAAA,IAAArD,EAAAhE,SAAAve,EAAA4lB,UAAApB,MAAA,EAAAxkB,EAAA4lB,UAAAnB,OAAA,GAAAld,aACAvH,EAAA0lB,YAAA,CACA,IAAAjjB,MAAAqN,QAAA9P,EAAA0lB,aACA,MAAArb,UAAA,gDACAwT,EAAA6H,YAAA,GACA,QAAAxnB,EAAA,EAA+BA,EAAA8B,EAAA0lB,YAAA3kB,SAA+B7C,EAAA,CAC9D,oBAAA8B,EAAA0lB,YAAAxnB,GACA,MAAAmM,UAAA,iDACAwT,EAAA6H,YAAAxnB,GAAAskB,EAAApc,KAAA6f,mBAAAvB,WAAA1kB,EAAA0lB,YAAAxnB,KAoBA,GAjBA,MAAA8B,EAAA6lB,eACAhI,EAAAgI,aAAA3G,OAAAlf,EAAA6lB,eACA,MAAA7lB,EAAA8lB,kBACAjI,EAAAiI,gBAAA5G,OAAAlf,EAAA8lB,kBACA,MAAA9lB,EAAAwlB,SACA3H,EAAA2H,OAAAtG,OAAAlf,EAAAwlB,SACA,MAAAxlB,EAAA+lB,eACAxD,EAAA1C,MACAhC,EAAAkI,aAAAxD,EAAA1C,KAAA8E,UAAA3kB,EAAA+lB,eAAAxF,UAAA,EACA,iBAAAvgB,EAAA+lB,aACAlI,EAAAkI,aAAAnB,SAAA5kB,EAAA+lB,aAAA,IACA,iBAAA/lB,EAAA+lB,aACAlI,EAAAkI,aAAA/lB,EAAA+lB,aACA,iBAAA/lB,EAAA+lB,eACAlI,EAAAkI,aAAA,IAAAxD,EAAAhE,SAAAve,EAAA+lB,aAAAvB,MAAA,EAAAxkB,EAAA+lB,aAAAtB,OAAA,GAAAld,aACA,MAAAvH,EAAAojB,YACAvF,EAAAuF,UAAAlE,OAAAlf,EAAAojB,YACA,MAAApjB,EAAAgmB,MAAA,CACA,oBAAAhmB,EAAAgmB,MACA,MAAA3b,UAAA,2CACAwT,EAAAmI,MAAAxD,EAAApc,KAAAyd,WAAAa,WAAA1kB,EAAAgmB,OAEA,GAAAhmB,EAAA2lB,cAAA,CACA,IAAAljB,MAAAqN,QAAA9P,EAAA2lB,eACA,MAAAtb,UAAA,kDACAwT,EAAA8H,cAAA,GACA,IAAAznB,EAAA,EAA+BA,EAAA8B,EAAA2lB,cAAA5kB,SAAiC7C,EAAA,CAChE,oBAAA8B,EAAA2lB,cAAAznB,GACA,MAAAmM,UAAA,mDACAwT,EAAA8H,cAAAznB,GAAAskB,EAAApc,KAAA8f,uBAAAxB,WAAA1kB,EAAA2lB,cAAAznB,KAGA,OAAA2f,GAYA4H,EAAAZ,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GAKA,IAJA8kB,EAAAC,QAAAD,EAAAE,YACAhlB,EAAA0lB,YAAA,GACA1lB,EAAA2lB,cAAA,IAEAb,EAAAE,SAAA,CACA,GAAAzC,EAAA1C,KAAA,CACA,IAAAoF,EAAA,IAAA1C,EAAA1C,KAAA,QACA7f,EAAA4lB,UAAAd,EAAAxD,QAAApC,OAAA+F,EAAA7T,WAAA0T,EAAAxD,QAAA3W,OAAAsa,EAAA1d,WAAA0d,OAEAjlB,EAAA4lB,UAAAd,EAAAxD,QAAApC,OAAA,MAIA,GAHAlf,EAAA6lB,aAAA,GACA7lB,EAAA8lB,gBAAA,GACA9lB,EAAAwlB,OAAA,GACAjD,EAAA1C,KAAA,CACAoF,EAAA,IAAA1C,EAAA1C,KAAA,QACA7f,EAAA+lB,aAAAjB,EAAAxD,QAAApC,OAAA+F,EAAA7T,WAAA0T,EAAAxD,QAAA3W,OAAAsa,EAAA1d,WAAA0d,OAEAjlB,EAAA+lB,aAAAjB,EAAAxD,QAAApC,OAAA,MACAlf,EAAAojB,UAAA,GACApjB,EAAAgmB,MAAA,KAsBA,GApBA,MAAAnI,EAAA+H,WAAA/H,EAAA1d,eAAA,eACA,iBAAA0d,EAAA+H,UACA5lB,EAAA4lB,UAAAd,EAAAxD,QAAApC,cAAArB,EAAA+H,WAAA/H,EAAA+H,UAEA5lB,EAAA4lB,UAAAd,EAAAxD,QAAApC,OAAAqD,EAAA1C,KAAA3f,UAAAkR,SAAA3S,KAAAof,EAAA+H,WAAAd,EAAAxD,QAAA3W,OAAA,IAAA4X,EAAAhE,SAAAV,EAAA+H,UAAApB,MAAA,EAAA3G,EAAA+H,UAAAnB,OAAA,GAAAld,WAAAsW,EAAA+H,WACA,MAAA/H,EAAAgI,cAAAhI,EAAA1d,eAAA,kBACAH,EAAA6lB,aAAAhI,EAAAgI,cACA,MAAAhI,EAAAiI,iBAAAjI,EAAA1d,eAAA,qBACAH,EAAA8lB,gBAAAjI,EAAAiI,iBACA,MAAAjI,EAAA2H,QAAA3H,EAAA1d,eAAA,YACAH,EAAAwlB,OAAA3H,EAAA2H,QACA,MAAA3H,EAAAkI,cAAAlI,EAAA1d,eAAA,kBACA,iBAAA0d,EAAAkI,aACA/lB,EAAA+lB,aAAAjB,EAAAxD,QAAApC,cAAArB,EAAAkI,cAAAlI,EAAAkI,aAEA/lB,EAAA+lB,aAAAjB,EAAAxD,QAAApC,OAAAqD,EAAA1C,KAAA3f,UAAAkR,SAAA3S,KAAAof,EAAAkI,cAAAjB,EAAAxD,QAAA3W,OAAA,IAAA4X,EAAAhE,SAAAV,EAAAkI,aAAAvB,MAAA,EAAA3G,EAAAkI,aAAAtB,OAAA,GAAAld,WAAAsW,EAAAkI,cACA,MAAAlI,EAAAuF,WAAAvF,EAAA1d,eAAA,eACAH,EAAAojB,UAAAvF,EAAAuF,WACA,MAAAvF,EAAAmI,OAAAnI,EAAA1d,eAAA,WACAH,EAAAgmB,MAAAxD,EAAApc,KAAAyd,WAAAgB,SAAAhH,EAAAmI,MAAAlB,IACAjH,EAAA6H,aAAA7H,EAAA6H,YAAA3kB,OAAA,CACAf,EAAA0lB,YAAA,GACA,QAAAnhB,EAAA,EAA+BA,EAAAsZ,EAAA6H,YAAA3kB,SAAgCwD,EAC/DvE,EAAA0lB,YAAAnhB,GAAAie,EAAApc,KAAA6f,mBAAApB,SAAAhH,EAAA6H,YAAAnhB,GAAAugB,GAEA,GAAAjH,EAAA8H,eAAA9H,EAAA8H,cAAA5kB,OAAA,CACAf,EAAA2lB,cAAA,GACA,IAAAphB,EAAA,EAA+BA,EAAAsZ,EAAA8H,cAAA5kB,SAAkCwD,EACjEvE,EAAA2lB,cAAAphB,GAAAie,EAAApc,KAAA8f,uBAAArB,SAAAhH,EAAA8H,cAAAphB,GAAAugB,GAEA,OAAA9kB,GAUAylB,EAAAvlB,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAGAoE,EAtbA,GAybArf,EAAA8f,uBAAA,WAkBA,SAAAA,EAAApI,GACA,GAAAA,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAA+DA,EAAAwf,EAAA3c,SAAiB7C,EAChF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KAyLA,OAhLAgoB,EAAAhmB,UAAAL,IAAA,GAQAqmB,EAAAhmB,UAAAX,MAAA,GAUA2mB,EAAAtmB,OAAA,SAAAke,GACA,WAAAoI,EAAApI,IAYAoI,EAAA5C,OAAA,SAAAzF,EAAA0F,GAOA,OANAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAAhe,KAAAge,EAAA1d,eAAA,QACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAhe,KACA,MAAAge,EAAAte,OAAAse,EAAA1d,eAAA,UACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAte,OACAgkB,GAYA2C,EAAAnC,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcAsC,EAAAlC,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAA8f,uBACAjC,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAAhe,IAAAokB,EAAAR,SACA,MACA,OACA5F,EAAAte,MAAA0kB,EAAAR,SACA,MACA,QACAQ,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaAqI,EAAA5B,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWA0C,EAAA3B,OAAA,SAAA1G,GACA,uBAAAA,GAAA,OAAAA,EACA,kBACA,MAAAA,EAAAhe,KAAAge,EAAA1d,eAAA,SACAoiB,EAAAtD,SAAApB,EAAAhe,KACA,uBACA,MAAAge,EAAAte,OAAAse,EAAA1d,eAAA,WACAoiB,EAAAtD,SAAApB,EAAAte,OACA,yBACA,MAWA2mB,EAAAxB,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAA8f,uBACA,OAAAlmB,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAA8f,uBAKA,OAJA,MAAAlmB,EAAAH,MACAge,EAAAhe,IAAAqf,OAAAlf,EAAAH,MACA,MAAAG,EAAAT,QACAse,EAAAte,MAAA2f,OAAAlf,EAAAT,QACAse,GAYAqI,EAAArB,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GASA,OARA8kB,EAAAE,WACAhlB,EAAAH,IAAA,GACAG,EAAAT,MAAA,IAEA,MAAAse,EAAAhe,KAAAge,EAAA1d,eAAA,SACAH,EAAAH,IAAAge,EAAAhe,KACA,MAAAge,EAAAte,OAAAse,EAAA1d,eAAA,WACAH,EAAAT,MAAAse,EAAAte,OACAS,GAUAkmB,EAAAhmB,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAGA6E,EA/MA,GAkNA9f,EAAA+f,iBAAA,WAkBA,SAAAA,EAAArI,GAEA,GADAnO,KAAAyW,0BAAA,GACAtI,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAA+DA,EAAAwf,EAAA3c,SAAiB7C,EAChF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KA6MA,OApMAioB,EAAAjmB,UAAAmmB,WAAA,GAQAF,EAAAjmB,UAAAkmB,0BAAA7D,EAAA9D,WAUA0H,EAAAvmB,OAAA,SAAAke,GACA,WAAAqI,EAAArI,IAYAqI,EAAA7C,OAAA,SAAAzF,EAAA0F,GAKA,GAJAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAAwI,YAAAxI,EAAA1d,eAAA,eACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAwI,YACA,MAAAxI,EAAAuI,2BAAAvI,EAAAuI,0BAAArlB,OACA,QAAA7C,EAAA,EAA+BA,EAAA2f,EAAAuI,0BAAArlB,SAA8C7C,EAC7EskB,EAAApc,KAAA8f,uBAAA5C,OAAAzF,EAAAuI,0BAAAloB,GAAAqlB,EAAAC,OAAA,IAAAG,QAAAC,SACA,OAAAL,GAYA4C,EAAApC,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcAuC,EAAAnC,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAA+f,iBACAlC,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAAwI,WAAApC,EAAAR,SACA,MACA,OACA5F,EAAAuI,2BAAAvI,EAAAuI,0BAAArlB,SACA8c,EAAAuI,0BAAA,IACAvI,EAAAuI,0BAAA3a,KAAA+W,EAAApc,KAAA8f,uBAAAlC,OAAAC,IAAAT,WACA,MACA,QACAS,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaAsI,EAAA7B,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWA2C,EAAA5B,OAAA,SAAA1G,GACA,oBAAAA,GAAA,OAAAA,EACA,wBACA,SAAAA,EAAAwI,YAAAxI,EAAA1d,eAAA,gBACAoiB,EAAAtD,SAAApB,EAAAwI,YACA,oCACA,SAAAxI,EAAAuI,2BAAAvI,EAAA1d,eAAA,8BACA,IAAAsC,MAAAqN,QAAA+N,EAAAuI,2BACA,kDACA,QAAAloB,EAAA,EAA+BA,EAAA2f,EAAAuI,0BAAArlB,SAA8C7C,EAAA,CAC7E,IAAAkX,EAAAoN,EAAApc,KAAA8f,uBAAA3B,OAAA1G,EAAAuI,0BAAAloB,IACA,GAAAkX,EACA,mCAAAA,GAGA,aAWA+Q,EAAAzB,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAA+f,iBACA,OAAAnmB,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAA+f,iBAGA,GAFA,MAAAnmB,EAAAqmB,aACAxI,EAAAwI,WAAAnH,OAAAlf,EAAAqmB,aACArmB,EAAAomB,0BAAA,CACA,IAAA3jB,MAAAqN,QAAA9P,EAAAomB,2BACA,MAAA/b,UAAA,oEACAwT,EAAAuI,0BAAA,GACA,QAAAloB,EAAA,EAA+BA,EAAA8B,EAAAomB,0BAAArlB,SAA6C7C,EAAA,CAC5E,oBAAA8B,EAAAomB,0BAAAloB,GACA,MAAAmM,UAAA,qEACAwT,EAAAuI,0BAAAloB,GAAAskB,EAAApc,KAAA8f,uBAAAxB,WAAA1kB,EAAAomB,0BAAAloB,KAGA,OAAA2f,GAYAsI,EAAAtB,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GAOA,IANA8kB,EAAAC,QAAAD,EAAAE,YACAhlB,EAAAomB,0BAAA,IACAtB,EAAAE,WACAhlB,EAAAqmB,WAAA,IACA,MAAAxI,EAAAwI,YAAAxI,EAAA1d,eAAA,gBACAH,EAAAqmB,WAAAxI,EAAAwI,YACAxI,EAAAuI,2BAAAvI,EAAAuI,0BAAArlB,OAAA,CACAf,EAAAomB,0BAAA,GACA,QAAA7hB,EAAA,EAA+BA,EAAAsZ,EAAAuI,0BAAArlB,SAA8CwD,EAC7EvE,EAAAomB,0BAAA7hB,GAAAie,EAAApc,KAAA8f,uBAAArB,SAAAhH,EAAAuI,0BAAA7hB,GAAAugB,GAEA,OAAA9kB,GAUAmmB,EAAAjmB,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAGA8E,EApOA,GAuOA/f,EAAAyd,WAAA,WAwBA,SAAAA,EAAA/F,GAOA,GANAnO,KAAA2M,KAAA,GACA3M,KAAA2W,YAAA,GACA3W,KAAAjC,MAAA,GACAiC,KAAAoE,OAAA,GACApE,KAAA4W,UAAA,GACA5W,KAAA6W,uBAAA,GACA1I,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAA+DA,EAAAwf,EAAA3c,SAAiB7C,EAChF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KAibA,OAxaA2lB,EAAA3jB,UAAAoc,KAAAiG,EAAA9D,WAQAoF,EAAA3jB,UAAArB,KAAA,GAQAglB,EAAA3jB,UAAAomB,YAAA/D,EAAA9D,WAQAoF,EAAA3jB,UAAAkjB,UAAA,GAQAS,EAAA3jB,UAAAwN,MAAA6U,EAAA9D,WAQAoF,EAAA3jB,UAAA6T,OAAAwO,EAAA9D,WAQAoF,EAAA3jB,UAAAqmB,UAAAhE,EAAA9D,WAQAoF,EAAA3jB,UAAAsmB,uBAAAjE,EAAA9D,WAUAoF,EAAAjkB,OAAA,SAAAke,GACA,WAAA+F,EAAA/F,IAYA+F,EAAAP,OAAA,SAAAzF,EAAA0F,GAGA,GAFAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAAvB,MAAAuB,EAAAvB,KAAAvb,OACA,QAAA7C,EAAA,EAA+BA,EAAA2f,EAAAvB,KAAAvb,SAAyB7C,EACxDskB,EAAApc,KAAAkf,UAAAhC,OAAAzF,EAAAvB,KAAApe,GAAAqlB,EAAAC,OAAA,IAAAG,QAAAC,SAGA,GAFA,MAAA/F,EAAAhf,MAAAgf,EAAA1d,eAAA,SACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAhf,MACA,MAAAgf,EAAAyI,aAAAzI,EAAAyI,YAAAvlB,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAAyI,YAAAvlB,SAAgC7C,EAC/DskB,EAAApc,KAAAC,YAAAid,OAAAzF,EAAAyI,YAAApoB,GAAAqlB,EAAAC,OAAA,IAAAG,QAAAC,SAGA,GAFA,MAAA/F,EAAAuF,WAAAvF,EAAA1d,eAAA,cACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAuF,WACA,MAAAvF,EAAAnQ,OAAAmQ,EAAAnQ,MAAA3M,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAAnQ,MAAA3M,SAA0B7C,EACzDskB,EAAApc,KAAAgf,eAAA9B,OAAAzF,EAAAnQ,MAAAxP,GAAAqlB,EAAAC,OAAA,IAAAG,QAAAC,SACA,SAAA/F,EAAA9J,QAAA8J,EAAA9J,OAAAhT,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAA9J,OAAAhT,SAA2B7C,EAC1DskB,EAAApc,KAAAgf,eAAA9B,OAAAzF,EAAA9J,OAAA7V,GAAAqlB,EAAAC,OAAA,IAAAG,QAAAC,SACA,SAAA/F,EAAA0I,WAAA1I,EAAA0I,UAAAxlB,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAA0I,UAAAxlB,SAA8B7C,EAC7DskB,EAAApc,KAAAgf,eAAA9B,OAAAzF,EAAA0I,UAAAroB,GAAAqlB,EAAAC,OAAA,KAAAG,QAAAC,SACA,SAAA/F,EAAA2I,wBAAA3I,EAAA2I,uBAAAzlB,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAA2I,uBAAAzlB,SAA2C7C,EAC1EskB,EAAApc,KAAA+f,iBAAA7C,OAAAzF,EAAA2I,uBAAAtoB,GAAAqlB,EAAAC,OAAA,KAAAG,QAAAC,SACA,OAAAL,GAYAM,EAAAE,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcAC,EAAAG,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAAyd,WACAI,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAAvB,MAAAuB,EAAAvB,KAAAvb,SACA8c,EAAAvB,KAAA,IACAuB,EAAAvB,KAAA7Q,KAAA+W,EAAApc,KAAAkf,UAAAtB,OAAAC,IAAAT,WACA,MACA,OACA3F,EAAAhf,KAAAolB,EAAAR,SACA,MACA,OACA5F,EAAAyI,aAAAzI,EAAAyI,YAAAvlB,SACA8c,EAAAyI,YAAA,IACAzI,EAAAyI,YAAA7a,KAAA+W,EAAApc,KAAAC,YAAA2d,OAAAC,IAAAT,WACA,MACA,QACA3F,EAAAuF,UAAAa,EAAAR,SACA,MACA,QACA5F,EAAAnQ,OAAAmQ,EAAAnQ,MAAA3M,SACA8c,EAAAnQ,MAAA,IACAmQ,EAAAnQ,MAAAjC,KAAA+W,EAAApc,KAAAgf,eAAApB,OAAAC,IAAAT,WACA,MACA,QACA3F,EAAA9J,QAAA8J,EAAA9J,OAAAhT,SACA8c,EAAA9J,OAAA,IACA8J,EAAA9J,OAAAtI,KAAA+W,EAAApc,KAAAgf,eAAApB,OAAAC,IAAAT,WACA,MACA,QACA3F,EAAA0I,WAAA1I,EAAA0I,UAAAxlB,SACA8c,EAAA0I,UAAA,IACA1I,EAAA0I,UAAA9a,KAAA+W,EAAApc,KAAAgf,eAAApB,OAAAC,IAAAT,WACA,MACA,QACA3F,EAAA2I,wBAAA3I,EAAA2I,uBAAAzlB,SACA8c,EAAA2I,uBAAA,IACA3I,EAAA2I,uBAAA/a,KAAA+W,EAAApc,KAAA+f,iBAAAnC,OAAAC,IAAAT,WACA,MACA,QACAS,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaAgG,EAAAS,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWAK,EAAAU,OAAA,SAAA1G,GACA,oBAAAA,GAAA,OAAAA,EACA,wBACA,SAAAA,EAAAvB,MAAAuB,EAAA1d,eAAA,SACA,IAAAsC,MAAAqN,QAAA+N,EAAAvB,MACA,6BACA,QAAApe,EAAA,EAA+BA,EAAA2f,EAAAvB,KAAAvb,SAAyB7C,EAAA,CAExD,GADAkX,EAAAoN,EAAApc,KAAAkf,UAAAf,OAAA1G,EAAAvB,KAAApe,IAEA,cAAAkX,GAGA,SAAAyI,EAAAhf,MAAAgf,EAAA1d,eAAA,UACAoiB,EAAAtD,SAAApB,EAAAhf,MACA,8BACA,SAAAgf,EAAAyI,aAAAzI,EAAA1d,eAAA,gBACA,IAAAsC,MAAAqN,QAAA+N,EAAAyI,aACA,oCACA,IAAApoB,EAAA,EAA+BA,EAAA2f,EAAAyI,YAAAvlB,SAAgC7C,EAAA,CAE/D,GADAkX,EAAAoN,EAAApc,KAAAC,YAAAke,OAAA1G,EAAAyI,YAAApoB,IAEA,qBAAAkX,GAGA,SAAAyI,EAAAuF,WAAAvF,EAAA1d,eAAA,eACAoiB,EAAAtD,SAAApB,EAAAuF,WACA,mCACA,SAAAvF,EAAAnQ,OAAAmQ,EAAA1d,eAAA,UACA,IAAAsC,MAAAqN,QAAA+N,EAAAnQ,OACA,8BACA,IAAAxP,EAAA,EAA+BA,EAAA2f,EAAAnQ,MAAA3M,SAA0B7C,EAAA,CAEzD,GADAkX,EAAAoN,EAAApc,KAAAgf,eAAAb,OAAA1G,EAAAnQ,MAAAxP,IAEA,eAAAkX,GAGA,SAAAyI,EAAA9J,QAAA8J,EAAA1d,eAAA,WACA,IAAAsC,MAAAqN,QAAA+N,EAAA9J,QACA,+BACA,IAAA7V,EAAA,EAA+BA,EAAA2f,EAAA9J,OAAAhT,SAA2B7C,EAAA,CAE1D,GADAkX,EAAAoN,EAAApc,KAAAgf,eAAAb,OAAA1G,EAAA9J,OAAA7V,IAEA,gBAAAkX,GAGA,SAAAyI,EAAA0I,WAAA1I,EAAA1d,eAAA,cACA,IAAAsC,MAAAqN,QAAA+N,EAAA0I,WACA,kCACA,IAAAroB,EAAA,EAA+BA,EAAA2f,EAAA0I,UAAAxlB,SAA8B7C,EAAA,CAE7D,GADAkX,EAAAoN,EAAApc,KAAAgf,eAAAb,OAAA1G,EAAA0I,UAAAroB,IAEA,mBAAAkX,GAGA,SAAAyI,EAAA2I,wBAAA3I,EAAA1d,eAAA,2BACA,IAAAsC,MAAAqN,QAAA+N,EAAA2I,wBACA,+CACA,IAAAtoB,EAAA,EAA+BA,EAAA2f,EAAA2I,uBAAAzlB,SAA2C7C,EAAA,CAC1E,IAAAkX,EACA,GADAA,EAAAoN,EAAApc,KAAA+f,iBAAA5B,OAAA1G,EAAA2I,uBAAAtoB,IAEA,gCAAAkX,GAGA,aAWAyO,EAAAa,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAAyd,WACA,OAAA7jB,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAAyd,WACA,GAAA7jB,EAAAsc,KAAA,CACA,IAAA7Z,MAAAqN,QAAA9P,EAAAsc,MACA,MAAAjS,UAAA,yCACAwT,EAAAvB,KAAA,GACA,QAAApe,EAAA,EAA+BA,EAAA8B,EAAAsc,KAAAvb,SAAwB7C,EAAA,CACvD,oBAAA8B,EAAAsc,KAAApe,GACA,MAAAmM,UAAA,0CACAwT,EAAAvB,KAAApe,GAAAskB,EAAApc,KAAAkf,UAAAZ,WAAA1kB,EAAAsc,KAAApe,KAKA,GAFA,MAAA8B,EAAAnB,OACAgf,EAAAhf,KAAAqgB,OAAAlf,EAAAnB,OACAmB,EAAAsmB,YAAA,CACA,IAAA7jB,MAAAqN,QAAA9P,EAAAsmB,aACA,MAAAjc,UAAA,gDACAwT,EAAAyI,YAAA,GACA,IAAApoB,EAAA,EAA+BA,EAAA8B,EAAAsmB,YAAAvlB,SAA+B7C,EAAA,CAC9D,oBAAA8B,EAAAsmB,YAAApoB,GACA,MAAAmM,UAAA,iDACAwT,EAAAyI,YAAApoB,GAAAskB,EAAApc,KAAAC,YAAAqe,WAAA1kB,EAAAsmB,YAAApoB,KAKA,GAFA,MAAA8B,EAAAojB,YACAvF,EAAAuF,UAAAlE,OAAAlf,EAAAojB,YACApjB,EAAA0N,MAAA,CACA,IAAAjL,MAAAqN,QAAA9P,EAAA0N,OACA,MAAArD,UAAA,0CACAwT,EAAAnQ,MAAA,GACA,IAAAxP,EAAA,EAA+BA,EAAA8B,EAAA0N,MAAA3M,SAAyB7C,EAAA,CACxD,oBAAA8B,EAAA0N,MAAAxP,GACA,MAAAmM,UAAA,2CACAwT,EAAAnQ,MAAAxP,GAAAskB,EAAApc,KAAAgf,eAAAV,WAAA1kB,EAAA0N,MAAAxP,KAGA,GAAA8B,EAAA+T,OAAA,CACA,IAAAtR,MAAAqN,QAAA9P,EAAA+T,QACA,MAAA1J,UAAA,2CACAwT,EAAA9J,OAAA,GACA,IAAA7V,EAAA,EAA+BA,EAAA8B,EAAA+T,OAAAhT,SAA0B7C,EAAA,CACzD,oBAAA8B,EAAA+T,OAAA7V,GACA,MAAAmM,UAAA,4CACAwT,EAAA9J,OAAA7V,GAAAskB,EAAApc,KAAAgf,eAAAV,WAAA1kB,EAAA+T,OAAA7V,KAGA,GAAA8B,EAAAumB,UAAA,CACA,IAAA9jB,MAAAqN,QAAA9P,EAAAumB,WACA,MAAAlc,UAAA,8CACAwT,EAAA0I,UAAA,GACA,IAAAroB,EAAA,EAA+BA,EAAA8B,EAAAumB,UAAAxlB,SAA6B7C,EAAA,CAC5D,oBAAA8B,EAAAumB,UAAAroB,GACA,MAAAmM,UAAA,+CACAwT,EAAA0I,UAAAroB,GAAAskB,EAAApc,KAAAgf,eAAAV,WAAA1kB,EAAAumB,UAAAroB,KAGA,GAAA8B,EAAAwmB,uBAAA,CACA,IAAA/jB,MAAAqN,QAAA9P,EAAAwmB,wBACA,MAAAnc,UAAA,2DACAwT,EAAA2I,uBAAA,GACA,IAAAtoB,EAAA,EAA+BA,EAAA8B,EAAAwmB,uBAAAzlB,SAA0C7C,EAAA,CACzE,oBAAA8B,EAAAwmB,uBAAAtoB,GACA,MAAAmM,UAAA,4DACAwT,EAAA2I,uBAAAtoB,GAAAskB,EAAApc,KAAA+f,iBAAAzB,WAAA1kB,EAAAwmB,uBAAAtoB,KAGA,OAAA2f,GAYAgG,EAAAgB,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GAaA,IAZA8kB,EAAAC,QAAAD,EAAAE,YACAhlB,EAAAsc,KAAA,GACAtc,EAAAsmB,YAAA,GACAtmB,EAAA0N,MAAA,GACA1N,EAAA+T,OAAA,GACA/T,EAAAumB,UAAA,GACAvmB,EAAAwmB,uBAAA,IAEA1B,EAAAE,WACAhlB,EAAAnB,KAAA,GACAmB,EAAAojB,UAAA,IAEAvF,EAAAvB,MAAAuB,EAAAvB,KAAAvb,OAAA,CACAf,EAAAsc,KAAA,GACA,QAAA/X,EAAA,EAA+BA,EAAAsZ,EAAAvB,KAAAvb,SAAyBwD,EACxDvE,EAAAsc,KAAA/X,GAAAie,EAAApc,KAAAkf,UAAAT,SAAAhH,EAAAvB,KAAA/X,GAAAugB,GAIA,GAFA,MAAAjH,EAAAhf,MAAAgf,EAAA1d,eAAA,UACAH,EAAAnB,KAAAgf,EAAAhf,MACAgf,EAAAyI,aAAAzI,EAAAyI,YAAAvlB,OAAA,CACAf,EAAAsmB,YAAA,GACA,IAAA/hB,EAAA,EAA+BA,EAAAsZ,EAAAyI,YAAAvlB,SAAgCwD,EAC/DvE,EAAAsmB,YAAA/hB,GAAAie,EAAApc,KAAAC,YAAAwe,SAAAhH,EAAAyI,YAAA/hB,GAAAugB,GAIA,GAFA,MAAAjH,EAAAuF,WAAAvF,EAAA1d,eAAA,eACAH,EAAAojB,UAAAvF,EAAAuF,WACAvF,EAAAnQ,OAAAmQ,EAAAnQ,MAAA3M,OAAA,CACAf,EAAA0N,MAAA,GACA,IAAAnJ,EAAA,EAA+BA,EAAAsZ,EAAAnQ,MAAA3M,SAA0BwD,EACzDvE,EAAA0N,MAAAnJ,GAAAie,EAAApc,KAAAgf,eAAAP,SAAAhH,EAAAnQ,MAAAnJ,GAAAugB,GAEA,GAAAjH,EAAA9J,QAAA8J,EAAA9J,OAAAhT,OAAA,CACAf,EAAA+T,OAAA,GACA,IAAAxP,EAAA,EAA+BA,EAAAsZ,EAAA9J,OAAAhT,SAA2BwD,EAC1DvE,EAAA+T,OAAAxP,GAAAie,EAAApc,KAAAgf,eAAAP,SAAAhH,EAAA9J,OAAAxP,GAAAugB,GAEA,GAAAjH,EAAA0I,WAAA1I,EAAA0I,UAAAxlB,OAAA,CACAf,EAAAumB,UAAA,GACA,IAAAhiB,EAAA,EAA+BA,EAAAsZ,EAAA0I,UAAAxlB,SAA8BwD,EAC7DvE,EAAAumB,UAAAhiB,GAAAie,EAAApc,KAAAgf,eAAAP,SAAAhH,EAAA0I,UAAAhiB,GAAAugB,GAEA,GAAAjH,EAAA2I,wBAAA3I,EAAA2I,uBAAAzlB,OAAA,CACAf,EAAAwmB,uBAAA,GACA,IAAAjiB,EAAA,EAA+BA,EAAAsZ,EAAA2I,uBAAAzlB,SAA2CwD,EAC1EvE,EAAAwmB,uBAAAjiB,GAAAie,EAAApc,KAAA+f,iBAAAtB,SAAAhH,EAAA2I,uBAAAjiB,GAAAugB,GAEA,OAAA9kB,GAUA6jB,EAAA3jB,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAGAwC,EAndA,GAsdAzd,EAAAC,YAAA,WA8BA,SAAAA,EAAAyX,GASA,GARAnO,KAAA3O,KAAA,GACA2O,KAAAmC,UAAA,GACAnC,KAAAoC,UAAA,GACApC,KAAAkB,WAAA,GACAlB,KAAAqC,UAAA,GACArC,KAAA8W,aAAA,GACA9W,KAAAsC,WAAA,GACAtC,KAAAuC,WAAA,GACA4L,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAA+DA,EAAAwf,EAAA3c,SAAiB7C,EAChF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KAw8BA,OA/7BAmI,EAAAnG,UAAAc,KAAAuhB,EAAA9D,WAQApY,EAAAnG,UAAA0Q,SAAA,EAQAvK,EAAAnG,UAAAwmB,QAAA,KAQArgB,EAAAnG,UAAA4R,UAAAyQ,EAAA9D,WAQApY,EAAAnG,UAAA6R,UAAAwQ,EAAA9D,WAQApY,EAAAnG,UAAA2Q,WAAA0R,EAAA9D,WAQApY,EAAAnG,UAAA8R,UAAAuQ,EAAA9D,WAQApY,EAAAnG,UAAArB,KAAA,GAQAwH,EAAAnG,UAAAkjB,UAAA,GAQA/c,EAAAnG,UAAAmR,QAAAkR,EAAA5C,UAAA,IAQAtZ,EAAAnG,UAAAumB,aAAAlE,EAAA9D,WAQApY,EAAAnG,UAAAymB,aAAA,EAQAtgB,EAAAnG,UAAA+R,WAAAsQ,EAAA9D,WAQApY,EAAAnG,UAAAgS,WAAAqQ,EAAA9D,WAUApY,EAAAzG,OAAA,SAAAke,GACA,WAAAzX,EAAAyX,IAYAzX,EAAAid,OAAA,SAAAzF,EAAA0F,GAGA,GAFAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAA7c,MAAA6c,EAAA7c,KAAAD,OAAA,CACAwiB,EAAAC,OAAA,IAAAG,OACA,QAAAzlB,EAAA,EAA+BA,EAAA2f,EAAA7c,KAAAD,SAAyB7C,EACxDqlB,EAAAG,MAAA7F,EAAA7c,KAAA9C,IACAqlB,EAAAK,SAMA,GAJA,MAAA/F,EAAAjN,UAAAiN,EAAA1d,eAAA,aACAojB,EAAAC,OAAA,IAAAM,MAAAjG,EAAAjN,UACA,MAAAiN,EAAA6I,SAAA7I,EAAA1d,eAAA,YACAqiB,EAAApc,KAAAC,YAAAugB,QAAAtD,OAAAzF,EAAA6I,QAAAnD,EAAAC,OAAA,IAAAG,QAAAC,SACA,MAAA/F,EAAA/L,WAAA+L,EAAA/L,UAAA/Q,OAAA,CACAwiB,EAAAC,OAAA,IAAAG,OACA,IAAAzlB,EAAA,EAA+BA,EAAA2f,EAAA/L,UAAA/Q,SAA8B7C,EAC7DqlB,EAAApF,MAAAN,EAAA/L,UAAA5T,IACAqlB,EAAAK,SAEA,SAAA/F,EAAA9L,WAAA8L,EAAA9L,UAAAhR,OAAA,CACAwiB,EAAAC,OAAA,IAAAG,OACA,IAAAzlB,EAAA,EAA+BA,EAAA2f,EAAA9L,UAAAhR,SAA8B7C,EAC7DqlB,EAAAO,MAAAjG,EAAA9L,UAAA7T,IACAqlB,EAAAK,SAEA,SAAA/F,EAAAhN,YAAAgN,EAAAhN,WAAA9P,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAAhN,WAAA9P,SAA+B7C,EAC9DqlB,EAAAC,OAAA,IAAAhC,MAAA3D,EAAAhN,WAAA3S,IACA,SAAA2f,EAAA7L,WAAA6L,EAAA7L,UAAAjR,OAAA,CACAwiB,EAAAC,OAAA,IAAAG,OACA,IAAAzlB,EAAA,EAA+BA,EAAA2f,EAAA7L,UAAAjR,SAA8B7C,EAC7DqlB,EAAAG,MAAA7F,EAAA7L,UAAA9T,IACAqlB,EAAAK,SAMA,GAJA,MAAA/F,EAAAhf,MAAAgf,EAAA1d,eAAA,SACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAhf,MACA,MAAAgf,EAAAxM,SAAAwM,EAAA1d,eAAA,YACAojB,EAAAC,OAAA,IAAAhC,MAAA3D,EAAAxM,SACA,MAAAwM,EAAA5L,YAAA4L,EAAA5L,WAAAlR,OAAA,CACAwiB,EAAAC,OAAA,IAAAG,OACA,IAAAzlB,EAAA,EAA+BA,EAAA2f,EAAA5L,WAAAlR,SAA+B7C,EAC9DqlB,EAAAsD,OAAAhJ,EAAA5L,WAAA/T,IACAqlB,EAAAK,SAEA,SAAA/F,EAAA3L,YAAA2L,EAAA3L,WAAAnR,OAAA,CACAwiB,EAAAC,OAAA,IAAAG,OACA,IAAAzlB,EAAA,EAA+BA,EAAA2f,EAAA3L,WAAAnR,SAA+B7C,EAC9DqlB,EAAAuD,OAAAjJ,EAAA3L,WAAAhU,IACAqlB,EAAAK,SAIA,GAFA,MAAA/F,EAAAuF,WAAAvF,EAAA1d,eAAA,cACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAuF,WACA,MAAAvF,EAAA4I,cAAA5I,EAAA4I,aAAA1lB,OACA,IAAA7C,EAAA,EAA+BA,EAAA2f,EAAA4I,aAAA1lB,SAAiC7C,EAChEskB,EAAApc,KAAA8f,uBAAA5C,OAAAzF,EAAA4I,aAAAvoB,GAAAqlB,EAAAC,OAAA,KAAAG,QAAAC,SAGA,OAFA,MAAA/F,EAAA8I,cAAA9I,EAAA1d,eAAA,iBACAojB,EAAAC,OAAA,KAAAM,MAAAjG,EAAA8I,cACApD,GAYAld,EAAA0d,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcAvd,EAAA2d,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAAC,YACA4d,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OAGA,GAFAtG,EAAA7c,MAAA6c,EAAA7c,KAAAD,SACA8c,EAAA7c,KAAA,IACA,MAAAmjB,GAEA,IADA,IAAAC,EAAAH,EAAAT,SAAAS,EAAArW,IACAqW,EAAArW,IAAAwW,GACAvG,EAAA7c,KAAAyK,KAAAwY,EAAAP,cAEA7F,EAAA7c,KAAAyK,KAAAwY,EAAAP,SACA,MACA,OACA7F,EAAAjN,SAAAqT,EAAAH,QACA,MACA,OACAjG,EAAA6I,QAAAlE,EAAApc,KAAAC,YAAAugB,QAAA5C,OAAAC,IAAAT,UACA,MACA,OAGA,GAFA3F,EAAA/L,WAAA+L,EAAA/L,UAAA/Q,SACA8c,EAAA/L,UAAA,IACA,MAAAqS,GAEA,IADAC,EAAAH,EAAAT,SAAAS,EAAArW,IACAqW,EAAArW,IAAAwW,GACAvG,EAAA/L,UAAArG,KAAAwY,EAAA9F,cAEAN,EAAA/L,UAAArG,KAAAwY,EAAA9F,SACA,MACA,OAGA,GAFAN,EAAA9L,WAAA8L,EAAA9L,UAAAhR,SACA8c,EAAA9L,UAAA,IACA,MAAAoS,GAEA,IADAC,EAAAH,EAAAT,SAAAS,EAAArW,IACAqW,EAAArW,IAAAwW,GACAvG,EAAA9L,UAAAtG,KAAAwY,EAAAH,cAEAjG,EAAA9L,UAAAtG,KAAAwY,EAAAH,SACA,MACA,OACAjG,EAAAhN,YAAAgN,EAAAhN,WAAA9P,SACA8c,EAAAhN,WAAA,IACAgN,EAAAhN,WAAApF,KAAAwY,EAAAzC,SACA,MACA,OAGA,GAFA3D,EAAA7L,WAAA6L,EAAA7L,UAAAjR,SACA8c,EAAA7L,UAAA,IACA,MAAAmS,GAEA,IADAC,EAAAH,EAAAT,SAAAS,EAAArW,IACAqW,EAAArW,IAAAwW,GACAvG,EAAA7L,UAAAvG,KAAAwY,EAAAP,cAEA7F,EAAA7L,UAAAvG,KAAAwY,EAAAP,SACA,MACA,OACA7F,EAAAhf,KAAAolB,EAAAR,SACA,MACA,QACA5F,EAAAuF,UAAAa,EAAAR,SACA,MACA,OACA5F,EAAAxM,QAAA4S,EAAAzC,QACA,MACA,QACA3D,EAAA4I,cAAA5I,EAAA4I,aAAA1lB,SACA8c,EAAA4I,aAAA,IACA5I,EAAA4I,aAAAhb,KAAA+W,EAAApc,KAAA8f,uBAAAlC,OAAAC,IAAAT,WACA,MACA,QACA3F,EAAA8I,aAAA1C,EAAAH,QACA,MACA,QAGA,GAFAjG,EAAA5L,YAAA4L,EAAA5L,WAAAlR,SACA8c,EAAA5L,WAAA,IACA,MAAAkS,GAEA,IADAC,EAAAH,EAAAT,SAAAS,EAAArW,IACAqW,EAAArW,IAAAwW,GACAvG,EAAA5L,WAAAxG,KAAAwY,EAAA4C,eAEAhJ,EAAA5L,WAAAxG,KAAAwY,EAAA4C,UACA,MACA,QAGA,GAFAhJ,EAAA3L,YAAA2L,EAAA3L,WAAAnR,SACA8c,EAAA3L,WAAA,IACA,MAAAiS,GAEA,IADAC,EAAAH,EAAAT,SAAAS,EAAArW,IACAqW,EAAArW,IAAAwW,GACAvG,EAAA3L,WAAAzG,KAAAwY,EAAA6C,eAEAjJ,EAAA3L,WAAAzG,KAAAwY,EAAA6C,UACA,MACA,QACA7C,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaAxX,EAAAie,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWAnd,EAAAke,OAAA,SAAA1G,GACA,oBAAAA,GAAA,OAAAA,EACA,wBACA,SAAAA,EAAA7c,MAAA6c,EAAA1d,eAAA,SACA,IAAAsC,MAAAqN,QAAA+N,EAAA7c,MACA,6BACA,QAAA9C,EAAA,EAA+BA,EAAA2f,EAAA7c,KAAAD,SAAyB7C,EACxD,KAAAqkB,EAAA3X,UAAAiT,EAAA7c,KAAA9C,KAAA2f,EAAA7c,KAAA9C,IAAAqkB,EAAA3X,UAAAiT,EAAA7c,KAAA9C,GAAAsmB,MAAAjC,EAAA3X,UAAAiT,EAAA7c,KAAA9C,GAAAumB,OACA,sCAEA,SAAA5G,EAAAjN,UAAAiN,EAAA1d,eAAA,cACAoiB,EAAA3X,UAAAiT,EAAAjN,UACA,mCACA,SAAAiN,EAAA6I,SAAA7I,EAAA1d,eAAA,aACAiV,EAAAoN,EAAApc,KAAAC,YAAAugB,QAAArC,OAAA1G,EAAA6I,UAEA,iBAAAtR,EAEA,SAAAyI,EAAA/L,WAAA+L,EAAA1d,eAAA,cACA,IAAAsC,MAAAqN,QAAA+N,EAAA/L,WACA,kCACA,IAAA5T,EAAA,EAA+BA,EAAA2f,EAAA/L,UAAA/Q,SAA8B7C,EAC7D,oBAAA2f,EAAA/L,UAAA5T,GACA,qCAEA,SAAA2f,EAAA9L,WAAA8L,EAAA1d,eAAA,cACA,IAAAsC,MAAAqN,QAAA+N,EAAA9L,WACA,kCACA,IAAA7T,EAAA,EAA+BA,EAAA2f,EAAA9L,UAAAhR,SAA8B7C,EAC7D,IAAAqkB,EAAA3X,UAAAiT,EAAA9L,UAAA7T,IACA,sCAEA,SAAA2f,EAAAhN,YAAAgN,EAAA1d,eAAA,eACA,IAAAsC,MAAAqN,QAAA+N,EAAAhN,YACA,mCACA,IAAA3S,EAAA,EAA+BA,EAAA2f,EAAAhN,WAAA9P,SAA+B7C,EAC9D,KAAA2f,EAAAhN,WAAA3S,IAAA,iBAAA2f,EAAAhN,WAAA3S,GAAA6C,QAAAwhB,EAAAtD,SAAApB,EAAAhN,WAAA3S,KACA,sCAEA,SAAA2f,EAAA7L,WAAA6L,EAAA1d,eAAA,cACA,IAAAsC,MAAAqN,QAAA+N,EAAA7L,WACA,kCACA,IAAA9T,EAAA,EAA+BA,EAAA2f,EAAA7L,UAAAjR,SAA8B7C,EAC7D,KAAAqkB,EAAA3X,UAAAiT,EAAA7L,UAAA9T,KAAA2f,EAAA7L,UAAA9T,IAAAqkB,EAAA3X,UAAAiT,EAAA7L,UAAA9T,GAAAsmB,MAAAjC,EAAA3X,UAAAiT,EAAA7L,UAAA9T,GAAAumB,OACA,2CAEA,SAAA5G,EAAAhf,MAAAgf,EAAA1d,eAAA,UACAoiB,EAAAtD,SAAApB,EAAAhf,MACA,8BACA,SAAAgf,EAAAuF,WAAAvF,EAAA1d,eAAA,eACAoiB,EAAAtD,SAAApB,EAAAuF,WACA,mCACA,SAAAvF,EAAAxM,SAAAwM,EAAA1d,eAAA,cACA0d,EAAAxM,SAAA,iBAAAwM,EAAAxM,QAAAtQ,QAAAwhB,EAAAtD,SAAApB,EAAAxM,UACA,iCACA,SAAAwM,EAAA4I,cAAA5I,EAAA1d,eAAA,iBACA,IAAAsC,MAAAqN,QAAA+N,EAAA4I,cACA,qCACA,IAAAvoB,EAAA,EAA+BA,EAAA2f,EAAA4I,aAAA1lB,SAAiC7C,EAAA,CAChE,IAAAkX,EACA,GADAA,EAAAoN,EAAApc,KAAA8f,uBAAA3B,OAAA1G,EAAA4I,aAAAvoB,IAEA,sBAAAkX,GAGA,SAAAyI,EAAA8I,cAAA9I,EAAA1d,eAAA,gBACA,OAAA0d,EAAA8I,cACA,QACA,0CACA,OACA,QAGA,SAAA9I,EAAA5L,YAAA4L,EAAA1d,eAAA,eACA,IAAAsC,MAAAqN,QAAA+N,EAAA5L,YACA,mCACA,IAAA/T,EAAA,EAA+BA,EAAA2f,EAAA5L,WAAAlR,SAA+B7C,EAC9D,oBAAA2f,EAAA5L,WAAA/T,GACA,sCAEA,SAAA2f,EAAA3L,YAAA2L,EAAA1d,eAAA,eACA,IAAAsC,MAAAqN,QAAA+N,EAAA3L,YACA,mCACA,IAAAhU,EAAA,EAA+BA,EAAA2f,EAAA3L,WAAAnR,SAA+B7C,EAC9D,KAAAqkB,EAAA3X,UAAAiT,EAAA3L,WAAAhU,KAAA2f,EAAA3L,WAAAhU,IAAAqkB,EAAA3X,UAAAiT,EAAA3L,WAAAhU,GAAAsmB,MAAAjC,EAAA3X,UAAAiT,EAAA3L,WAAAhU,GAAAumB,OACA,4CAEA,aAWApe,EAAAqe,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAAC,YACA,OAAArG,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAAC,YACA,GAAArG,EAAAgB,KAAA,CACA,IAAAyB,MAAAqN,QAAA9P,EAAAgB,MACA,MAAAqJ,UAAA,0CACAwT,EAAA7c,KAAA,GACA,QAAA9C,EAAA,EAA+BA,EAAA8B,EAAAgB,KAAAD,SAAwB7C,EACvDqkB,EAAA1C,MACAhC,EAAA7c,KAAA9C,GAAAqkB,EAAA1C,KAAA8E,UAAA3kB,EAAAgB,KAAA9C,KAAAqiB,UAAA,EACA,iBAAAvgB,EAAAgB,KAAA9C,GACA2f,EAAA7c,KAAA9C,GAAA0mB,SAAA5kB,EAAAgB,KAAA9C,GAAA,IACA,iBAAA8B,EAAAgB,KAAA9C,GACA2f,EAAA7c,KAAA9C,GAAA8B,EAAAgB,KAAA9C,GACA,iBAAA8B,EAAAgB,KAAA9C,KACA2f,EAAA7c,KAAA9C,GAAA,IAAAqkB,EAAAhE,SAAAve,EAAAgB,KAAA9C,GAAAsmB,MAAA,EAAAxkB,EAAAgB,KAAA9C,GAAAumB,OAAA,GAAAld,YAIA,GAFA,MAAAvH,EAAA4Q,WACAiN,EAAAjN,SAAA,EAAA5Q,EAAA4Q,UACA,MAAA5Q,EAAA0mB,QAAA,CACA,oBAAA1mB,EAAA0mB,QACA,MAAArc,UAAA,8CACAwT,EAAA6I,QAAAlE,EAAApc,KAAAC,YAAAugB,QAAAlC,WAAA1kB,EAAA0mB,SAEA,GAAA1mB,EAAA8R,UAAA,CACA,IAAArP,MAAAqN,QAAA9P,EAAA8R,WACA,MAAAzH,UAAA,+CACAwT,EAAA/L,UAAA,GACA,IAAA5T,EAAA,EAA+BA,EAAA8B,EAAA8R,UAAA/Q,SAA6B7C,EAC5D2f,EAAA/L,UAAA5T,GAAAyM,OAAA3K,EAAA8R,UAAA5T,IAEA,GAAA8B,EAAA+R,UAAA,CACA,IAAAtP,MAAAqN,QAAA9P,EAAA+R,WACA,MAAA1H,UAAA,+CACAwT,EAAA9L,UAAA,GACA,IAAA7T,EAAA,EAA+BA,EAAA8B,EAAA+R,UAAAhR,SAA6B7C,EAC5D2f,EAAA9L,UAAA7T,GAAA,EAAA8B,EAAA+R,UAAA7T,GAEA,GAAA8B,EAAA6Q,WAAA,CACA,IAAApO,MAAAqN,QAAA9P,EAAA6Q,YACA,MAAAxG,UAAA,gDACAwT,EAAAhN,WAAA,GACA,IAAA3S,EAAA,EAA+BA,EAAA8B,EAAA6Q,WAAA9P,SAA8B7C,EAC7D,iBAAA8B,EAAA6Q,WAAA3S,GACAqkB,EAAAtE,OAAA+F,OAAAhkB,EAAA6Q,WAAA3S,GAAA2f,EAAAhN,WAAA3S,GAAAqkB,EAAA5C,UAAA4C,EAAAtE,OAAAld,OAAAf,EAAA6Q,WAAA3S,KAAA,GACA8B,EAAA6Q,WAAA3S,GAAA6C,SACA8c,EAAAhN,WAAA3S,GAAA8B,EAAA6Q,WAAA3S,IAEA,GAAA8B,EAAAgS,UAAA,CACA,IAAAvP,MAAAqN,QAAA9P,EAAAgS,WACA,MAAA3H,UAAA,+CACAwT,EAAA7L,UAAA,GACA,IAAA9T,EAAA,EAA+BA,EAAA8B,EAAAgS,UAAAjR,SAA6B7C,EAC5DqkB,EAAA1C,MACAhC,EAAA7L,UAAA9T,GAAAqkB,EAAA1C,KAAA8E,UAAA3kB,EAAAgS,UAAA9T,KAAAqiB,UAAA,EACA,iBAAAvgB,EAAAgS,UAAA9T,GACA2f,EAAA7L,UAAA9T,GAAA0mB,SAAA5kB,EAAAgS,UAAA9T,GAAA,IACA,iBAAA8B,EAAAgS,UAAA9T,GACA2f,EAAA7L,UAAA9T,GAAA8B,EAAAgS,UAAA9T,GACA,iBAAA8B,EAAAgS,UAAA9T,KACA2f,EAAA7L,UAAA9T,GAAA,IAAAqkB,EAAAhE,SAAAve,EAAAgS,UAAA9T,GAAAsmB,MAAA,EAAAxkB,EAAAgS,UAAA9T,GAAAumB,OAAA,GAAAld,YAWA,GATA,MAAAvH,EAAAnB,OACAgf,EAAAhf,KAAAqgB,OAAAlf,EAAAnB,OACA,MAAAmB,EAAAojB,YACAvF,EAAAuF,UAAAlE,OAAAlf,EAAAojB,YACA,MAAApjB,EAAAqR,UACA,iBAAArR,EAAAqR,QACAkR,EAAAtE,OAAA+F,OAAAhkB,EAAAqR,QAAAwM,EAAAxM,QAAAkR,EAAA5C,UAAA4C,EAAAtE,OAAAld,OAAAf,EAAAqR,UAAA,GACArR,EAAAqR,QAAAtQ,SACA8c,EAAAxM,QAAArR,EAAAqR,UACArR,EAAAymB,aAAA,CACA,IAAAhkB,MAAAqN,QAAA9P,EAAAymB,cACA,MAAApc,UAAA,kDACAwT,EAAA4I,aAAA,GACA,IAAAvoB,EAAA,EAA+BA,EAAA8B,EAAAymB,aAAA1lB,SAAgC7C,EAAA,CAC/D,oBAAA8B,EAAAymB,aAAAvoB,GACA,MAAAmM,UAAA,mDACAwT,EAAA4I,aAAAvoB,GAAAskB,EAAApc,KAAA8f,uBAAAxB,WAAA1kB,EAAAymB,aAAAvoB,KAGA,OAAA8B,EAAA2mB,cACA,cACA,OACA9I,EAAA8I,aAAA,EACA,MACA,eACA,OACA9I,EAAA8I,aAAA,EAGA,GAAA3mB,EAAAiS,WAAA,CACA,IAAAxP,MAAAqN,QAAA9P,EAAAiS,YACA,MAAA5H,UAAA,gDACAwT,EAAA5L,WAAA,GACA,IAAA/T,EAAA,EAA+BA,EAAA8B,EAAAiS,WAAAlR,SAA8B7C,EAC7D2f,EAAA5L,WAAA/T,GAAAyM,OAAA3K,EAAAiS,WAAA/T,IAEA,GAAA8B,EAAAkS,WAAA,CACA,IAAAzP,MAAAqN,QAAA9P,EAAAkS,YACA,MAAA7H,UAAA,gDACAwT,EAAA3L,WAAA,GACA,IAAAhU,EAAA,EAA+BA,EAAA8B,EAAAkS,WAAAnR,SAA8B7C,EAC7DqkB,EAAA1C,MACAhC,EAAA3L,WAAAhU,GAAAqkB,EAAA1C,KAAA8E,UAAA3kB,EAAAkS,WAAAhU,KAAAqiB,UAAA,EACA,iBAAAvgB,EAAAkS,WAAAhU,GACA2f,EAAA3L,WAAAhU,GAAA0mB,SAAA5kB,EAAAkS,WAAAhU,GAAA,IACA,iBAAA8B,EAAAkS,WAAAhU,GACA2f,EAAA3L,WAAAhU,GAAA8B,EAAAkS,WAAAhU,GACA,iBAAA8B,EAAAkS,WAAAhU,KACA2f,EAAA3L,WAAAhU,GAAA,IAAAqkB,EAAAhE,SAAAve,EAAAkS,WAAAhU,GAAAsmB,MAAA,EAAAxkB,EAAAkS,WAAAhU,GAAAumB,OAAA,GAAAld,UAAA,IAEA,OAAAsW,GAYAxX,EAAAwe,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GAyBA,IAxBA8kB,EAAAC,QAAAD,EAAAE,YACAhlB,EAAAgB,KAAA,GACAhB,EAAA8R,UAAA,GACA9R,EAAA+R,UAAA,GACA/R,EAAA6Q,WAAA,GACA7Q,EAAAgS,UAAA,GACAhS,EAAAiS,WAAA,GACAjS,EAAAkS,WAAA,GACAlS,EAAAymB,aAAA,IAEA3B,EAAAE,WACAhlB,EAAA4Q,SAAA,EACA5Q,EAAA0mB,QAAA,KACA1mB,EAAAnB,KAAA,GACAimB,EAAAtD,QAAAtC,OACAlf,EAAAqR,QAAA,IAEArR,EAAAqR,QAAA,GACAyT,EAAAtD,QAAA/e,QACAzC,EAAAqR,QAAAkR,EAAA5C,UAAA3f,EAAAqR,WAEArR,EAAAojB,UAAA,GACApjB,EAAA2mB,aAAA7B,EAAAvD,QAAArC,OAAA,aAEArB,EAAA7c,MAAA6c,EAAA7c,KAAAD,OAAA,CACAf,EAAAgB,KAAA,GACA,QAAAuD,EAAA,EAA+BA,EAAAsZ,EAAA7c,KAAAD,SAAyBwD,EACxD,iBAAAsZ,EAAA7c,KAAAuD,GACAvE,EAAAgB,KAAAuD,GAAAugB,EAAAxD,QAAApC,cAAArB,EAAA7c,KAAAuD,IAAAsZ,EAAA7c,KAAAuD,GAEAvE,EAAAgB,KAAAuD,GAAAugB,EAAAxD,QAAApC,OAAAqD,EAAA1C,KAAA3f,UAAAkR,SAAA3S,KAAAof,EAAA7c,KAAAuD,IAAAugB,EAAAxD,QAAA3W,OAAA,IAAA4X,EAAAhE,SAAAV,EAAA7c,KAAAuD,GAAAigB,MAAA,EAAA3G,EAAA7c,KAAAuD,GAAAkgB,OAAA,GAAAld,WAAAsW,EAAA7c,KAAAuD,GAMA,GAJA,MAAAsZ,EAAAjN,UAAAiN,EAAA1d,eAAA,cACAH,EAAA4Q,SAAAiN,EAAAjN,UACA,MAAAiN,EAAA6I,SAAA7I,EAAA1d,eAAA,aACAH,EAAA0mB,QAAAlE,EAAApc,KAAAC,YAAAugB,QAAA/B,SAAAhH,EAAA6I,QAAA5B,IACAjH,EAAA/L,WAAA+L,EAAA/L,UAAA/Q,OAAA,CACAf,EAAA8R,UAAA,GACA,IAAAvN,EAAA,EAA+BA,EAAAsZ,EAAA/L,UAAA/Q,SAA8BwD,EAC7DvE,EAAA8R,UAAAvN,GAAAugB,EAAArD,OAAAzC,SAAAnB,EAAA/L,UAAAvN,IAAA2a,OAAArB,EAAA/L,UAAAvN,IAAAsZ,EAAA/L,UAAAvN,GAEA,GAAAsZ,EAAA9L,WAAA8L,EAAA9L,UAAAhR,OAAA,CACAf,EAAA+R,UAAA,GACA,IAAAxN,EAAA,EAA+BA,EAAAsZ,EAAA9L,UAAAhR,SAA8BwD,EAC7DvE,EAAA+R,UAAAxN,GAAAsZ,EAAA9L,UAAAxN,GAEA,GAAAsZ,EAAAhN,YAAAgN,EAAAhN,WAAA9P,OAAA,CACAf,EAAA6Q,WAAA,GACA,IAAAtM,EAAA,EAA+BA,EAAAsZ,EAAAhN,WAAA9P,SAA+BwD,EAC9DvE,EAAA6Q,WAAAtM,GAAAugB,EAAAtD,QAAAtC,OAAAqD,EAAAtE,OAAAqF,OAAAzF,EAAAhN,WAAAtM,GAAA,EAAAsZ,EAAAhN,WAAAtM,GAAAxD,QAAA+jB,EAAAtD,QAAA/e,YAAAvC,UAAAwI,MAAAjK,KAAAof,EAAAhN,WAAAtM,IAAAsZ,EAAAhN,WAAAtM,GAEA,GAAAsZ,EAAA7L,WAAA6L,EAAA7L,UAAAjR,OAAA,CACAf,EAAAgS,UAAA,GACA,IAAAzN,EAAA,EAA+BA,EAAAsZ,EAAA7L,UAAAjR,SAA8BwD,EAC7D,iBAAAsZ,EAAA7L,UAAAzN,GACAvE,EAAAgS,UAAAzN,GAAAugB,EAAAxD,QAAApC,cAAArB,EAAA7L,UAAAzN,IAAAsZ,EAAA7L,UAAAzN,GAEAvE,EAAAgS,UAAAzN,GAAAugB,EAAAxD,QAAApC,OAAAqD,EAAA1C,KAAA3f,UAAAkR,SAAA3S,KAAAof,EAAA7L,UAAAzN,IAAAugB,EAAAxD,QAAA3W,OAAA,IAAA4X,EAAAhE,SAAAV,EAAA7L,UAAAzN,GAAAigB,MAAA,EAAA3G,EAAA7L,UAAAzN,GAAAkgB,OAAA,GAAAld,WAAAsW,EAAA7L,UAAAzN,GAMA,GAJA,MAAAsZ,EAAAhf,MAAAgf,EAAA1d,eAAA,UACAH,EAAAnB,KAAAgf,EAAAhf,MACA,MAAAgf,EAAAxM,SAAAwM,EAAA1d,eAAA,aACAH,EAAAqR,QAAAyT,EAAAtD,QAAAtC,OAAAqD,EAAAtE,OAAAqF,OAAAzF,EAAAxM,QAAA,EAAAwM,EAAAxM,QAAAtQ,QAAA+jB,EAAAtD,QAAA/e,YAAAvC,UAAAwI,MAAAjK,KAAAof,EAAAxM,SAAAwM,EAAAxM,SACAwM,EAAA5L,YAAA4L,EAAA5L,WAAAlR,OAAA,CACAf,EAAAiS,WAAA,GACA,IAAA1N,EAAA,EAA+BA,EAAAsZ,EAAA5L,WAAAlR,SAA+BwD,EAC9DvE,EAAAiS,WAAA1N,GAAAugB,EAAArD,OAAAzC,SAAAnB,EAAA5L,WAAA1N,IAAA2a,OAAArB,EAAA5L,WAAA1N,IAAAsZ,EAAA5L,WAAA1N,GAEA,GAAAsZ,EAAA3L,YAAA2L,EAAA3L,WAAAnR,OAAA,CACAf,EAAAkS,WAAA,GACA,IAAA3N,EAAA,EAA+BA,EAAAsZ,EAAA3L,WAAAnR,SAA+BwD,EAC9D,iBAAAsZ,EAAA3L,WAAA3N,GACAvE,EAAAkS,WAAA3N,GAAAugB,EAAAxD,QAAApC,cAAArB,EAAA3L,WAAA3N,IAAAsZ,EAAA3L,WAAA3N,GAEAvE,EAAAkS,WAAA3N,GAAAugB,EAAAxD,QAAApC,OAAAqD,EAAA1C,KAAA3f,UAAAkR,SAAA3S,KAAAof,EAAA3L,WAAA3N,IAAAugB,EAAAxD,QAAA3W,OAAA,IAAA4X,EAAAhE,SAAAV,EAAA3L,WAAA3N,GAAAigB,MAAA,EAAA3G,EAAA3L,WAAA3N,GAAAkgB,OAAA,GAAAld,UAAA,GAAAsW,EAAA3L,WAAA3N,GAIA,GAFA,MAAAsZ,EAAAuF,WAAAvF,EAAA1d,eAAA,eACAH,EAAAojB,UAAAvF,EAAAuF,WACAvF,EAAA4I,cAAA5I,EAAA4I,aAAA1lB,OAAA,CACAf,EAAAymB,aAAA,GACA,IAAAliB,EAAA,EAA+BA,EAAAsZ,EAAA4I,aAAA1lB,SAAiCwD,EAChEvE,EAAAymB,aAAAliB,GAAAie,EAAApc,KAAA8f,uBAAArB,SAAAhH,EAAA4I,aAAAliB,GAAAugB,GAIA,OAFA,MAAAjH,EAAA8I,cAAA9I,EAAA1d,eAAA,kBACAH,EAAA2mB,aAAA7B,EAAAvD,QAAArC,OAAAsD,EAAApc,KAAAC,YAAA0gB,aAAAlJ,EAAA8I,cAAA9I,EAAA8I,cACA3mB,GAUAqG,EAAAnG,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAyBAhb,EAAAC,SAAA,WACA,IAAAoc,EAAA,GAA+BC,EAAA3jB,OAAAY,OAAA8iB,GAkB/B,OAjBAC,EAAAD,EAAA,kBACAC,EAAAD,EAAA,cACAC,EAAAD,EAAA,cACAC,EAAAD,EAAA,aACAC,EAAAD,EAAA,eACAC,EAAAD,EAAA,cACAC,EAAAD,EAAA,cACAC,EAAAD,EAAA,cACAC,EAAAD,EAAA,eACAC,EAAAD,EAAA,aACAC,EAAAD,EAAA,kBACAC,EAAAD,EAAA,iBACAC,EAAAD,EAAA,iBACAC,EAAAD,EAAA,iBACAC,EAAAD,EAAA,oBACAC,EAAAD,EAAA,qBACAC,EAAAD,EAAA,mBACAC,EAnBA,GAsBAtc,EAAAugB,QAAA,WAkBA,SAAAA,EAAA9I,GACA,GAAAA,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAAmEA,EAAAwf,EAAA3c,SAAiB7C,EACpF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KAqNA,OA5MA0oB,EAAA1mB,UAAA2X,MAAA0K,EAAA1C,KAAA0C,EAAA1C,KAAAtM,SAAA,UAQAqT,EAAA1mB,UAAAmI,IAAAka,EAAA1C,KAAA0C,EAAA1C,KAAAtM,SAAA,UAUAqT,EAAAhnB,OAAA,SAAAke,GACA,WAAA8I,EAAA9I,IAYA8I,EAAAtD,OAAA,SAAAzF,EAAA0F,GAOA,OANAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAAhG,OAAAgG,EAAA1d,eAAA,UACAojB,EAAAC,OAAA,GAAAE,MAAA7F,EAAAhG,OACA,MAAAgG,EAAAxV,KAAAwV,EAAA1d,eAAA,QACAojB,EAAAC,OAAA,IAAAE,MAAA7F,EAAAxV,KACAkb,GAYAqD,EAAA7C,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcAgD,EAAA5C,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAAC,YAAAugB,QACA3C,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAAhG,MAAAoM,EAAAP,QACA,MACA,OACA7F,EAAAxV,IAAA4b,EAAAP,QACA,MACA,QACAO,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaA+I,EAAAtC,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWAoD,EAAArC,OAAA,SAAA1G,GACA,uBAAAA,GAAA,OAAAA,EACA,kBACA,MAAAA,EAAAhG,OAAAgG,EAAA1d,eAAA,YACAoiB,EAAA3X,UAAAiT,EAAAhG,QAAAgG,EAAAhG,OAAA0K,EAAA3X,UAAAiT,EAAAhG,MAAA2M,MAAAjC,EAAA3X,UAAAiT,EAAAhG,MAAA4M,OACA,+BACA,MAAA5G,EAAAxV,KAAAwV,EAAA1d,eAAA,UACAoiB,EAAA3X,UAAAiT,EAAAxV,MAAAwV,EAAAxV,KAAAka,EAAA3X,UAAAiT,EAAAxV,IAAAmc,MAAAjC,EAAA3X,UAAAiT,EAAAxV,IAAAoc,OACA,6BACA,MAWAmC,EAAAlC,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAAC,YAAAugB,QACA,OAAA5mB,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAAC,YAAAugB,QAmBA,OAlBA,MAAA5mB,EAAA6X,QACA0K,EAAA1C,MACAhC,EAAAhG,MAAA0K,EAAA1C,KAAA8E,UAAA3kB,EAAA6X,QAAA0I,UAAA,EACA,iBAAAvgB,EAAA6X,MACAgG,EAAAhG,MAAA+M,SAAA5kB,EAAA6X,MAAA,IACA,iBAAA7X,EAAA6X,MACAgG,EAAAhG,MAAA7X,EAAA6X,MACA,iBAAA7X,EAAA6X,QACAgG,EAAAhG,MAAA,IAAA0K,EAAAhE,SAAAve,EAAA6X,MAAA2M,MAAA,EAAAxkB,EAAA6X,MAAA4M,OAAA,GAAAld,aACA,MAAAvH,EAAAqI,MACAka,EAAA1C,MACAhC,EAAAxV,IAAAka,EAAA1C,KAAA8E,UAAA3kB,EAAAqI,MAAAkY,UAAA,EACA,iBAAAvgB,EAAAqI,IACAwV,EAAAxV,IAAAuc,SAAA5kB,EAAAqI,IAAA,IACA,iBAAArI,EAAAqI,IACAwV,EAAAxV,IAAArI,EAAAqI,IACA,iBAAArI,EAAAqI,MACAwV,EAAAxV,IAAA,IAAAka,EAAAhE,SAAAve,EAAAqI,IAAAmc,MAAA,EAAAxkB,EAAAqI,IAAAoc,OAAA,GAAAld,aACAsW,GAYA+I,EAAA/B,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GACA,GAAA8kB,EAAAE,SAAA,CACA,GAAAzC,EAAA1C,KAAA,CACA,IAAAoF,EAAA,IAAA1C,EAAA1C,KAAA,QACA7f,EAAA6X,MAAAiN,EAAAxD,QAAApC,OAAA+F,EAAA7T,WAAA0T,EAAAxD,QAAA3W,OAAAsa,EAAA1d,WAAA0d,OAEAjlB,EAAA6X,MAAAiN,EAAAxD,QAAApC,OAAA,MACA,GAAAqD,EAAA1C,KAAA,CACAoF,EAAA,IAAA1C,EAAA1C,KAAA,QACA7f,EAAAqI,IAAAyc,EAAAxD,QAAApC,OAAA+F,EAAA7T,WAAA0T,EAAAxD,QAAA3W,OAAAsa,EAAA1d,WAAA0d,OAEAjlB,EAAAqI,IAAAyc,EAAAxD,QAAApC,OAAA,MAYA,OAVA,MAAArB,EAAAhG,OAAAgG,EAAA1d,eAAA,WACA,iBAAA0d,EAAAhG,MACA7X,EAAA6X,MAAAiN,EAAAxD,QAAApC,cAAArB,EAAAhG,OAAAgG,EAAAhG,MAEA7X,EAAA6X,MAAAiN,EAAAxD,QAAApC,OAAAqD,EAAA1C,KAAA3f,UAAAkR,SAAA3S,KAAAof,EAAAhG,OAAAiN,EAAAxD,QAAA3W,OAAA,IAAA4X,EAAAhE,SAAAV,EAAAhG,MAAA2M,MAAA,EAAA3G,EAAAhG,MAAA4M,OAAA,GAAAld,WAAAsW,EAAAhG,OACA,MAAAgG,EAAAxV,KAAAwV,EAAA1d,eAAA,SACA,iBAAA0d,EAAAxV,IACArI,EAAAqI,IAAAyc,EAAAxD,QAAApC,cAAArB,EAAAxV,KAAAwV,EAAAxV,IAEArI,EAAAqI,IAAAyc,EAAAxD,QAAApC,OAAAqD,EAAA1C,KAAA3f,UAAAkR,SAAA3S,KAAAof,EAAAxV,KAAAyc,EAAAxD,QAAA3W,OAAA,IAAA4X,EAAAhE,SAAAV,EAAAxV,IAAAmc,MAAA,EAAA3G,EAAAxV,IAAAoc,OAAA,GAAAld,WAAAsW,EAAAxV,KACArI,GAUA4mB,EAAA1mB,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAGAuF,EA3OA,GAqPAvgB,EAAA0gB,aAAA,WACA,IAAArE,EAAA,GAA+BC,EAAA3jB,OAAAY,OAAA8iB,GAG/B,OAFAC,EAAAD,EAAA,gBACAC,EAAAD,EAAA,iBACAC,EAJA,GAOAtc,EAl/BA,GAq/BAD,EAAA4gB,iBAAA,WAiBA,SAAAA,EAAAlJ,GAEA,GADAnO,KAAA/H,IAAA,GACAkW,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAA+DA,EAAAwf,EAAA3c,SAAiB7C,EAChF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KAicA,OAxbA8oB,EAAA9mB,UAAA0H,IAAA2a,EAAA9D,WAUAuI,EAAApnB,OAAA,SAAAke,GACA,WAAAkJ,EAAAlJ,IAYAkJ,EAAA1D,OAAA,SAAAzF,EAAA0F,GAGA,GAFAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAAjW,KAAAiW,EAAAjW,IAAA7G,OACA,QAAA7C,EAAA,EAA+BA,EAAA2f,EAAAjW,IAAA7G,SAAwB7C,EACvDskB,EAAApc,KAAA4gB,iBAAAC,UAAA3D,OAAAzF,EAAAjW,IAAA1J,GAAAqlB,EAAAC,OAAA,IAAAG,QAAAC,SACA,OAAAL,GAYAyD,EAAAjD,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcAoD,EAAAhD,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAA4gB,iBACA/C,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAAjW,KAAAiW,EAAAjW,IAAA7G,SACA8c,EAAAjW,IAAA,IACAiW,EAAAjW,IAAA6D,KAAA+W,EAAApc,KAAA4gB,iBAAAC,UAAAjD,OAAAC,IAAAT,WACA,MACA,QACAS,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaAmJ,EAAA1C,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWAwD,EAAAzC,OAAA,SAAA1G,GACA,oBAAAA,GAAA,OAAAA,EACA,wBACA,SAAAA,EAAAjW,KAAAiW,EAAA1d,eAAA,QACA,IAAAsC,MAAAqN,QAAA+N,EAAAjW,KACA,4BACA,QAAA1J,EAAA,EAA+BA,EAAA2f,EAAAjW,IAAA7G,SAAwB7C,EAAA,CACvD,IAAAkX,EAAAoN,EAAApc,KAAA4gB,iBAAAC,UAAA1C,OAAA1G,EAAAjW,IAAA1J,IACA,GAAAkX,EACA,aAAAA,GAGA,aAWA4R,EAAAtC,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAA4gB,iBACA,OAAAhnB,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAA4gB,iBACA,GAAAhnB,EAAA4H,IAAA,CACA,IAAAnF,MAAAqN,QAAA9P,EAAA4H,KACA,MAAAyC,UAAA,8CACAwT,EAAAjW,IAAA,GACA,QAAA1J,EAAA,EAA+BA,EAAA8B,EAAA4H,IAAA7G,SAAuB7C,EAAA,CACtD,oBAAA8B,EAAA4H,IAAA1J,GACA,MAAAmM,UAAA,+CACAwT,EAAAjW,IAAA1J,GAAAskB,EAAApc,KAAA4gB,iBAAAC,UAAAvC,WAAA1kB,EAAA4H,IAAA1J,KAGA,OAAA2f,GAYAmJ,EAAAnC,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GAGA,IAFA8kB,EAAAC,QAAAD,EAAAE,YACAhlB,EAAA4H,IAAA,IACAiW,EAAAjW,KAAAiW,EAAAjW,IAAA7G,OAAA,CACAf,EAAA4H,IAAA,GACA,QAAArD,EAAA,EAA+BA,EAAAsZ,EAAAjW,IAAA7G,SAAwBwD,EACvDvE,EAAA4H,IAAArD,GAAAie,EAAApc,KAAA4gB,iBAAAC,UAAApC,SAAAhH,EAAAjW,IAAArD,GAAAugB,GAEA,OAAA9kB,GAUAgnB,EAAA9mB,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAGA2F,EAAAC,UAAA,WAmBA,SAAAA,EAAAnJ,GACA,GAAAA,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAAmEA,EAAAwf,EAAA3c,SAAiB7C,EACpF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KA4BA,IAAAgpB,EAoNA,OAvOAD,EAAA/mB,UAAA2H,SAAA0a,EAAA1C,KAAA0C,EAAA1C,KAAAtM,SAAA,UAQA0T,EAAA/mB,UAAAinB,SAAA,GAQAF,EAAA/mB,UAAAknB,WAAA,GAWApoB,OAAAC,eAAAgoB,EAAA/mB,UAAA,SACAf,IAAAojB,EAAAtB,YAAAiG,EAAA,yBACApjB,IAAAye,EAAAnB,YAAA8F,KAWAD,EAAArnB,OAAA,SAAAke,GACA,WAAAmJ,EAAAnJ,IAYAmJ,EAAA3D,OAAA,SAAAzF,EAAA0F,GASA,OARAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAAhW,UAAAgW,EAAA1d,eAAA,aACAojB,EAAAC,OAAA,GAAAE,MAAA7F,EAAAhW,UACA,MAAAgW,EAAAsJ,UAAAtJ,EAAA1d,eAAA,aACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAsJ,UACA,MAAAtJ,EAAAuJ,YAAAvJ,EAAA1d,eAAA,eACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAuJ,YACA7D,GAYA0D,EAAAlD,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcAqD,EAAAjD,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAA4gB,iBAAAC,UACAhD,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAAhW,SAAAoc,EAAAP,QACA,MACA,OACA7F,EAAAsJ,SAAAlD,EAAAR,SACA,MACA,OACA5F,EAAAuJ,WAAAnD,EAAAR,SACA,MACA,QACAQ,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaAoJ,EAAA3C,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWAyD,EAAA1C,OAAA,SAAA1G,GACA,oBAAAA,GAAA,OAAAA,EACA,wBACA,IAAAC,EAAA,GACA,SAAAD,EAAAhW,UAAAgW,EAAA1d,eAAA,cACA2d,EAAAve,MAAA,IACAgjB,EAAA3X,UAAAiT,EAAAhW,WAAAgW,EAAAhW,UAAA0a,EAAA3X,UAAAiT,EAAAhW,SAAA2c,MAAAjC,EAAA3X,UAAAiT,EAAAhW,SAAA4c,QACA,wCAEA,SAAA5G,EAAAsJ,UAAAtJ,EAAA1d,eAAA,aACA,OAAA2d,EAAAve,MACA,+BAEA,GADAue,EAAAve,MAAA,GACAgjB,EAAAtD,SAAApB,EAAAsJ,UACA,kCAEA,aAAAtJ,EAAAuJ,YAAAvJ,EAAA1d,eAAA,gBACAoiB,EAAAtD,SAAApB,EAAAuJ,YACA,8BACA,MAWAH,EAAAvC,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAA4gB,iBAAAC,UACA,OAAAjnB,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAA4gB,iBAAAC,UAcA,OAbA,MAAAjnB,EAAA6H,WACA0a,EAAA1C,MACAhC,EAAAhW,SAAA0a,EAAA1C,KAAA8E,UAAA3kB,EAAA6H,WAAA0Y,UAAA,EACA,iBAAAvgB,EAAA6H,SACAgW,EAAAhW,SAAA+c,SAAA5kB,EAAA6H,SAAA,IACA,iBAAA7H,EAAA6H,SACAgW,EAAAhW,SAAA7H,EAAA6H,SACA,iBAAA7H,EAAA6H,WACAgW,EAAAhW,SAAA,IAAA0a,EAAAhE,SAAAve,EAAA6H,SAAA2c,MAAA,EAAAxkB,EAAA6H,SAAA4c,OAAA,GAAAld,aACA,MAAAvH,EAAAmnB,WACAtJ,EAAAsJ,SAAAjI,OAAAlf,EAAAmnB,WACA,MAAAnnB,EAAAonB,aACAvJ,EAAAuJ,WAAAlI,OAAAlf,EAAAonB,aACAvJ,GAYAoJ,EAAApC,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GAkBA,OAjBA8kB,EAAAE,WACAhlB,EAAAonB,WAAA,IACA,MAAAvJ,EAAAhW,UAAAgW,EAAA1d,eAAA,cACA,iBAAA0d,EAAAhW,SACA7H,EAAA6H,SAAAid,EAAAxD,QAAApC,cAAArB,EAAAhW,UAAAgW,EAAAhW,SAEA7H,EAAA6H,SAAAid,EAAAxD,QAAApC,OAAAqD,EAAA1C,KAAA3f,UAAAkR,SAAA3S,KAAAof,EAAAhW,UAAAid,EAAAxD,QAAA3W,OAAA,IAAA4X,EAAAhE,SAAAV,EAAAhW,SAAA2c,MAAA,EAAA3G,EAAAhW,SAAA4c,OAAA,GAAAld,WAAAsW,EAAAhW,SACAid,EAAAuC,SACArnB,EAAAT,MAAA,aAEA,MAAAse,EAAAsJ,UAAAtJ,EAAA1d,eAAA,cACAH,EAAAmnB,SAAAtJ,EAAAsJ,SACArC,EAAAuC,SACArnB,EAAAT,MAAA,aAEA,MAAAse,EAAAuJ,YAAAvJ,EAAA1d,eAAA,gBACAH,EAAAonB,WAAAvJ,EAAAuJ,YACApnB,GAUAinB,EAAA/mB,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAGA4F,EAvQA,GA0QAD,EAvdA,GA0dA5gB,EAAAif,UAAA,WAkBA,SAAAA,EAAAvH,GACA,GAAAA,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAA+DA,EAAAwf,EAAA3c,SAAiB7C,EAChF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KAoBA,IAAAgpB,EAoZA,OA/ZA7B,EAAAnlB,UAAAwH,WAAA,KAQA2d,EAAAnlB,UAAAknB,WAAA,GAWApoB,OAAAC,eAAAomB,EAAAnlB,UAAA,SACAf,IAAAojB,EAAAtB,YAAAiG,EAAA,gBACApjB,IAAAye,EAAAnB,YAAA8F,KAWA7B,EAAAzlB,OAAA,SAAAke,GACA,WAAAuH,EAAAvH,IAYAuH,EAAA/B,OAAA,SAAAzF,EAAA0F,GAOA,OANAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAAnW,YAAAmW,EAAA1d,eAAA,eACAqiB,EAAApc,KAAAif,UAAAzhB,OAAA0f,OAAAzF,EAAAnW,WAAA6b,EAAAC,OAAA,IAAAG,QAAAC,SACA,MAAA/F,EAAAuJ,YAAAvJ,EAAA1d,eAAA,eACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAAuJ,YACA7D,GAYA8B,EAAAtB,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcAyB,EAAArB,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAAif,UACApB,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAAnW,WAAA8a,EAAApc,KAAAif,UAAAzhB,OAAAogB,OAAAC,IAAAT,UACA,MACA,OACA3F,EAAAuJ,WAAAnD,EAAAR,SACA,MACA,QACAQ,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaAwH,EAAAf,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWA6B,EAAAd,OAAA,SAAA1G,GACA,oBAAAA,GAAA,OAAAA,EACA,wBAEA,SAAAA,EAAAnW,YAAAmW,EAAA1d,eAAA,eAGA,IAAAiV,EAAAoN,EAAApc,KAAAif,UAAAzhB,OAAA2gB,OAAA1G,EAAAnW,YACA,GAAA0N,EACA,oBAAAA,EAGA,aAAAyI,EAAAuJ,YAAAvJ,EAAA1d,eAAA,gBACAoiB,EAAAtD,SAAApB,EAAAuJ,YACA,8BACA,MAWA/B,EAAAX,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAAif,UACA,OAAArlB,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAAif,UACA,SAAArlB,EAAA0H,WAAA,CACA,oBAAA1H,EAAA0H,WACA,MAAA2C,UAAA,+CACAwT,EAAAnW,WAAA8a,EAAApc,KAAAif,UAAAzhB,OAAA8gB,WAAA1kB,EAAA0H,YAIA,OAFA,MAAA1H,EAAAonB,aACAvJ,EAAAuJ,WAAAlI,OAAAlf,EAAAonB,aACAvJ,GAYAwH,EAAAR,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GAUA,OATA8kB,EAAAE,WACAhlB,EAAAonB,WAAA,IACA,MAAAvJ,EAAAnW,YAAAmW,EAAA1d,eAAA,gBACAH,EAAA0H,WAAA8a,EAAApc,KAAAif,UAAAzhB,OAAAihB,SAAAhH,EAAAnW,WAAAod,GACAA,EAAAuC,SACArnB,EAAAT,MAAA,eAEA,MAAAse,EAAAuJ,YAAAvJ,EAAA1d,eAAA,gBACAH,EAAAonB,WAAAvJ,EAAAuJ,YACApnB,GAUAqlB,EAAAnlB,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAGAgE,EAAAzhB,OAAA,WAkBA,SAAAA,EAAAka,GACA,GAAAA,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAAmEA,EAAAwf,EAAA3c,SAAiB7C,EACpF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KA8LA,OArLA0F,EAAA1D,UAAAyH,SAAA,EAQA/D,EAAA1D,UAAAwE,MAAA,KAUAd,EAAAhE,OAAA,SAAAke,GACA,WAAAla,EAAAka,IAYAla,EAAA0f,OAAA,SAAAzF,EAAA0F,GAOA,OANAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAAlW,UAAAkW,EAAA1d,eAAA,aACAojB,EAAAC,OAAA,GAAAM,MAAAjG,EAAAlW,UACA,MAAAkW,EAAAnZ,OAAAmZ,EAAA1d,eAAA,UACAqiB,EAAApc,KAAA4gB,iBAAA1D,OAAAzF,EAAAnZ,MAAA6e,EAAAC,OAAA,IAAAG,QAAAC,SACAL,GAYA3f,EAAAmgB,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcAhgB,EAAAogB,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAAif,UAAAzhB,OACAqgB,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAAlW,SAAAsc,EAAAH,QACA,MACA,OACAjG,EAAAnZ,MAAA8d,EAAApc,KAAA4gB,iBAAAhD,OAAAC,IAAAT,UACA,MACA,QACAS,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaAja,EAAA0gB,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWA5f,EAAA2gB,OAAA,SAAA1G,GACA,oBAAAA,GAAA,OAAAA,EACA,wBACA,SAAAA,EAAAlW,UAAAkW,EAAA1d,eAAA,cACAoiB,EAAA3X,UAAAiT,EAAAlW,UACA,mCACA,SAAAkW,EAAAnZ,OAAAmZ,EAAA1d,eAAA,UACA,IAAAiV,EAAAoN,EAAApc,KAAA4gB,iBAAAzC,OAAA1G,EAAAnZ,OACA,GAAA0Q,EACA,eAAAA,EAEA,aAWAxR,EAAA8gB,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAAif,UAAAzhB,OACA,OAAA5D,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAAif,UAAAzhB,OAGA,GAFA,MAAA5D,EAAA2H,WACAkW,EAAAlW,SAAA,EAAA3H,EAAA2H,UACA,MAAA3H,EAAA0E,MAAA,CACA,oBAAA1E,EAAA0E,MACA,MAAA2F,UAAA,iDACAwT,EAAAnZ,MAAA8d,EAAApc,KAAA4gB,iBAAAtC,WAAA1kB,EAAA0E,OAEA,OAAAmZ,GAYAja,EAAAihB,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GASA,OARA8kB,EAAAE,WACAhlB,EAAA2H,SAAA,EACA3H,EAAA0E,MAAA,MAEA,MAAAmZ,EAAAlW,UAAAkW,EAAA1d,eAAA,cACAH,EAAA2H,SAAAkW,EAAAlW,UACA,MAAAkW,EAAAnZ,OAAAmZ,EAAA1d,eAAA,WACAH,EAAA0E,MAAA8d,EAAApc,KAAA4gB,iBAAAnC,SAAAhH,EAAAnZ,MAAAogB,IACA9kB,GAUA4D,EAAA1D,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAGAzd,EApNA,GAuNAyhB,EA9bA,GAicAjf,EAAA6f,mBAAA,WAkBA,SAAAA,EAAAnI,GACA,GAAAA,EACA,QAAAJ,EAAA1e,OAAA0e,KAAAI,GAAA5f,EAAA,EAA+DA,EAAAwf,EAAA3c,SAAiB7C,EAChF,MAAA4f,EAAAJ,EAAAxf,MACAyR,KAAA+N,EAAAxf,IAAA4f,EAAAJ,EAAAxf,KAuMA,OA9LA+nB,EAAA/lB,UAAAslB,OAAA,GAQAS,EAAA/lB,UAAAwT,QAAA6O,EAAA1C,KAAA0C,EAAA1C,KAAAtM,SAAA,UAUA0S,EAAArmB,OAAA,SAAAke,GACA,WAAAmI,EAAAnI,IAYAmI,EAAA3C,OAAA,SAAAzF,EAAA0F,GAOA,OANAA,IACAA,EAAAlB,EAAAziB,UACA,MAAAie,EAAA2H,QAAA3H,EAAA1d,eAAA,WACAojB,EAAAC,OAAA,IAAAC,OAAA5F,EAAA2H,QACA,MAAA3H,EAAAnK,SAAAmK,EAAA1d,eAAA,YACAojB,EAAAC,OAAA,IAAAE,MAAA7F,EAAAnK,SACA6P,GAYA0C,EAAAlC,gBAAA,SAAAlG,EAAA0F,GACA,OAAA5T,KAAA2T,OAAAzF,EAAA0F,GAAAK,UAcAqC,EAAAjC,OAAA,SAAAC,EAAAljB,GACAkjB,aAAA9B,IACA8B,EAAA9B,EAAAviB,OAAAqkB,IAEA,IADA,IAAA5b,OAAAxG,IAAAd,EAAAkjB,EAAAC,IAAAD,EAAArW,IAAA7M,EAAA8c,EAAA,IAAA2E,EAAApc,KAAA6f,mBACAhC,EAAArW,IAAAvF,GAAA,CACA,IAAA8b,EAAAF,EAAAT,SACA,OAAAW,IAAA,GACA,OACAtG,EAAA2H,OAAAvB,EAAAR,SACA,MACA,OACA5F,EAAAnK,QAAAuQ,EAAAP,QACA,MACA,QACAO,EAAAI,SAAA,EAAAF,IAIA,OAAAtG,GAaAoI,EAAA3B,gBAAA,SAAAL,GAGA,OAFAA,aAAA9B,IACA8B,EAAA,IAAA9B,EAAA8B,IACAtU,KAAAqU,OAAAC,IAAAT,WAWAyC,EAAA1B,OAAA,SAAA1G,GACA,uBAAAA,GAAA,OAAAA,EACA,kBACA,MAAAA,EAAA2H,QAAA3H,EAAA1d,eAAA,YACAoiB,EAAAtD,SAAApB,EAAA2H,QACA,0BACA,MAAA3H,EAAAnK,SAAAmK,EAAA1d,eAAA,cACAoiB,EAAA3X,UAAAiT,EAAAnK,UAAAmK,EAAAnK,SAAA6O,EAAA3X,UAAAiT,EAAAnK,QAAA8Q,MAAAjC,EAAA3X,UAAAiT,EAAAnK,QAAA+Q,OACA,iCACA,MAWAwB,EAAAvB,WAAA,SAAA1kB,GACA,GAAAA,aAAAwiB,EAAApc,KAAA6f,mBACA,OAAAjmB,EACA,IAAA6d,EAAA,IAAA2E,EAAApc,KAAA6f,mBAYA,OAXA,MAAAjmB,EAAAwlB,SACA3H,EAAA2H,OAAAtG,OAAAlf,EAAAwlB,SACA,MAAAxlB,EAAA0T,UACA6O,EAAA1C,MACAhC,EAAAnK,QAAA6O,EAAA1C,KAAA8E,UAAA3kB,EAAA0T,UAAA6M,UAAA,EACA,iBAAAvgB,EAAA0T,QACAmK,EAAAnK,QAAAkR,SAAA5kB,EAAA0T,QAAA,IACA,iBAAA1T,EAAA0T,QACAmK,EAAAnK,QAAA1T,EAAA0T,QACA,iBAAA1T,EAAA0T,UACAmK,EAAAnK,QAAA,IAAA6O,EAAAhE,SAAAve,EAAA0T,QAAA8Q,MAAA,EAAAxkB,EAAA0T,QAAA+Q,OAAA,GAAAld,aACAsW,GAYAoI,EAAApB,SAAA,SAAAhH,EAAAiH,GACAA,IACAA,EAAA,IACA,IAAA9kB,EAAA,GACA,GAAA8kB,EAAAE,SAEA,GADAhlB,EAAAwlB,OAAA,GACAjD,EAAA1C,KAAA,CACA,IAAAoF,EAAA,IAAA1C,EAAA1C,KAAA,QACA7f,EAAA0T,QAAAoR,EAAAxD,QAAApC,OAAA+F,EAAA7T,WAAA0T,EAAAxD,QAAA3W,OAAAsa,EAAA1d,WAAA0d,OAEAjlB,EAAA0T,QAAAoR,EAAAxD,QAAApC,OAAA,MASA,OAPA,MAAArB,EAAA2H,QAAA3H,EAAA1d,eAAA,YACAH,EAAAwlB,OAAA3H,EAAA2H,QACA,MAAA3H,EAAAnK,SAAAmK,EAAA1d,eAAA,aACA,iBAAA0d,EAAAnK,QACA1T,EAAA0T,QAAAoR,EAAAxD,QAAApC,cAAArB,EAAAnK,SAAAmK,EAAAnK,QAEA1T,EAAA0T,QAAAoR,EAAAxD,QAAApC,OAAAqD,EAAA1C,KAAA3f,UAAAkR,SAAA3S,KAAAof,EAAAnK,SAAAoR,EAAAxD,QAAA3W,OAAA,IAAA4X,EAAAhE,SAAAV,EAAAnK,QAAA8Q,MAAA,EAAA3G,EAAAnK,QAAA+Q,OAAA,GAAAld,WAAAsW,EAAAnK,SACA1T,GAUAimB,EAAA/lB,UAAAilB,OAAA,WACA,OAAAxV,KAAAI,YAAA8U,SAAAlV,KAAAuS,EAAA7E,KAAAgE,gBAGA4E,EA7NA,GAgOA7f,EAzwJA,GA4wJAtI,EAAAD,QAAA2kB,iaCpxJA,IAAA8E,EAAAjpB,EAAA,IAEAkR,EAAAlR,EAAA,GAGAkpB,EAAAlpB,EAAA,IAEAmpB,EAAA,SAAA3M,GAAA,SAAA2M,mDAMA,OANkC1M,EAAA0M,EAAA3M,GAChC2M,EAAAtnB,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,IAAM6I,EAAe+F,EAAA9L,UAAU2F,sBAAsBzI,EAAO,GAAGK,KAAML,EAAO,GAAGgnB,aAE/E,MAAO,CADgBC,EAAQF,EAAkB/mB,EAAO,GAAI6I,KAGhEge,EANA,CAAkCF,EAAAO,SAQlC,SAAgBD,EACZF,EAAyCha,EAAelE,GAC1D,IAAMse,EAAUJ,EAAiBK,uBAAuBra,GACpDsa,EAAcxe,EACO,IAArBse,EAAQG,WACVD,EAAcT,EAAAW,eAAe1e,IAE/B,IAAM2e,EAAkC,CACtCF,SAAUH,EAAQG,SAClBG,OAAQN,EAAQM,OAChBC,MAAOP,EAAQO,MAEf3jB,MAA8B,IAAvBsjB,EAAYjnB,OAAeinB,EAAc,CAAC,GACjDxf,QAAS+G,EAAA9L,UAAU6E,eAAe0f,GAClCM,cAAe9e,GAKjB,OADIke,EAAiBa,wBAAwBJ,EAAkBza,EAAM7J,KAAMikB,EAAQU,QAAS9a,EAAMD,QAC5Egb,OA3BX5qB,EAAA2pB,eAQb3pB,EAAA+pB,0OCiCA,SAASc,EAAchV,EAAiBiV,GACtC,GAAIA,EAASC,SAAS,KAAM,CAE1B,IAAMC,EAAale,OAAOia,SAAS+D,EAAS5H,UAAU,EAAG4H,EAAS5nB,OAAS,GAAI,IAC/E,OAAQ+nB,MAAMD,IAAeA,GAAcnV,EACtC,GAAmC,IAA/BiV,EAASrc,MAAM,KAAKvL,OAAc,CAE3C,IAAMgoB,EAAOJ,EAASrc,MAAM,KAEtB0c,GADAH,EAAale,OAAOia,SAASmE,EAAK,GAAI,IAC3Bpe,OAAOia,SAASmE,EAAK,GAAI,KAC1C,OAAQD,MAAMD,KAAgBC,MAAME,IAAaH,GAAcnV,GAAWA,GAAWsV,EAGrF,OAAOre,OAAOia,SAAS+D,EAAU,MAAQjV,mDArC7C7V,EAAAorB,gBAAA,SACI3M,EAAkB4M,EAA8BC,mBAClD,IAAmB,IAAAC,EAAA7e,EAAA4e,GAAKE,EAAAD,EAAA3e,QAAA4e,EAAA3e,KAAA2e,EAAAD,EAAA3e,OAAE,CAArB,IAAM6e,EAAID,EAAA9pB,MACPgmB,EAAS+D,EAAK,GACd9D,EAAS8D,EAAK,GACdC,EAAkBD,EAAK,GACvBE,EAAgBF,EAAK,GAE3B,GAAIhN,EAAKiJ,SAAWA,MAClB,IAAoB,IAAAkE,GAAAC,OAAA,EAAAnf,EAAA2e,IAAMS,EAAAF,EAAAhf,QAAAkf,EAAAjf,KAAAif,EAAAF,EAAAhf,OAAE,CAAvB,IAAMmf,EAAKD,EAAApqB,MAEd,IAAIqqB,EAAMpE,SAAWA,GAA4B,YAAjBoE,EAAMpE,QAAmC,KAAXA,IACxDkD,EAAckB,EAAMlW,QAAS6V,GAC/B,OAAOC,EAAclN,wMAO/B,MAAM,IAAIjS,UAAU,4BAA4BiS,EAAKiJ,OAAM,kBACvD2D,EAAO9hB,IAAI,SAAAtD,GAAO,OAAGA,EAAI0hB,QAAU,WAAS,KAAK1hB,EAAI4P,UAAWmW,KAAK,uCChD3E,SAAAzM;;;;;;;AAUA,IAAAa,EAAa5f,EAAQ,IACrByrB,EAAczrB,EAAQ,IACtByR,EAAczR,EAAQ,IAmDtB,SAAA0rB,IACA,OAAAhZ,EAAAiZ,oBACA,WACA,WAGA,SAAAC,EAAAC,EAAAnpB,GACA,GAAAgpB,IAAAhpB,EACA,UAAA8O,WAAA,8BAcA,OAZAkB,EAAAiZ,qBAEAE,EAAA,IAAA7X,WAAAtR,IACAopB,UAAApZ,EAAA7Q,WAGA,OAAAgqB,IACAA,EAAA,IAAAnZ,EAAAhQ,IAEAmpB,EAAAnpB,UAGAmpB,EAaA,SAAAnZ,EAAAqZ,EAAAC,EAAAtpB,GACA,KAAAgQ,EAAAiZ,qBAAAra,gBAAAoB,GACA,WAAAA,EAAAqZ,EAAAC,EAAAtpB,GAIA,oBAAAqpB,EAAA,CACA,oBAAAC,EACA,UAAAjlB,MACA,qEAGA,OAAAwc,EAAAjS,KAAAya,GAEA,OAAApZ,EAAArB,KAAAya,EAAAC,EAAAtpB,GAWA,SAAAiQ,EAAAkZ,EAAA3qB,EAAA8qB,EAAAtpB,GACA,oBAAAxB,EACA,UAAA8K,UAAA,yCAGA,0BAAA6F,aAAA3Q,aAAA2Q,YA6HA,SAAAga,EAAArY,EAAAX,EAAAnQ,GAGA,GAFA8Q,EAAAV,WAEAD,EAAA,GAAAW,EAAAV,WAAAD,EACA,UAAArB,WAAA,6BAGA,GAAAgC,EAAAV,WAAAD,GAAAnQ,GAAA,GACA,UAAA8O,WAAA,6BAIAgC,OADAhQ,IAAAqP,QAAArP,IAAAd,EACA,IAAAsR,WAAAR,QACGhQ,IAAAd,EACH,IAAAsR,WAAAR,EAAAX,GAEA,IAAAmB,WAAAR,EAAAX,EAAAnQ,GAGAgQ,EAAAiZ,qBAEAE,EAAArY,GACAsY,UAAApZ,EAAA7Q,UAGAgqB,EAAAI,EAAAJ,EAAArY,GAEA,OAAAqY,EAvJAK,CAAAL,EAAA3qB,EAAA8qB,EAAAtpB,GAGA,iBAAAxB,EAwFA,SAAA2qB,EAAAzG,EAAA9B,GACA,iBAAAA,GAAA,KAAAA,IACAA,EAAA,QAGA,IAAA5Q,EAAAyZ,WAAA7I,GACA,UAAAtX,UAAA,8CAGA,IAAAtJ,EAAA,EAAAoQ,EAAAsS,EAAA9B,GAGA8I,GAFAP,EAAAD,EAAAC,EAAAnpB,IAEA2pB,MAAAjH,EAAA9B,GAEA8I,IAAA1pB,IAIAmpB,IAAAxhB,MAAA,EAAA+hB,IAGA,OAAAP,EA5GAS,CAAAT,EAAA3qB,EAAA8qB,GAsJA,SAAAH,EAAA5K,GACA,GAAAvO,EAAA6Z,SAAAtL,GAAA,CACA,IAAA4E,EAAA,EAAA2G,EAAAvL,EAAAve,QAGA,YAFAmpB,EAAAD,EAAAC,EAAAhG,IAEAnjB,OACAmpB,GAGA5K,EAAAwL,KAAAZ,EAAA,IAAAhG,GACAgG,GAGA,GAAA5K,EAAA,CACA,uBAAApP,aACAoP,EAAArO,kBAAAf,aAAA,WAAAoP,EACA,uBAAAA,EAAAve,SA+8CAgqB,EA/8CAzL,EAAAve,SAg9CAgqB,EA/8CAd,EAAAC,EAAA,GAEAI,EAAAJ,EAAA5K,GAGA,cAAAA,EAAAzb,MAAAiM,EAAAwP,EAAA9R,MACA,OAAA8c,EAAAJ,EAAA5K,EAAA9R,MAw8CA,IAAAud,EAp8CA,UAAA1gB,UAAA,sFA9KAqa,CAAAwF,EAAA3qB,GA4BA,SAAAyrB,EAAArnB,GACA,oBAAAA,EACA,UAAA0G,UAAA,oCACG,GAAA1G,EAAA,EACH,UAAAkM,WAAA,wCA4BA,SAAA+R,EAAAsI,EAAAvmB,GAGA,GAFAqnB,EAAArnB,GACAumB,EAAAD,EAAAC,EAAAvmB,EAAA,MAAAknB,EAAAlnB,KACAoN,EAAAiZ,oBACA,QAAA9rB,EAAA,EAAmBA,EAAAyF,IAAUzF,EAC7BgsB,EAAAhsB,GAAA,EAGA,OAAAgsB,EAwCA,SAAAI,EAAAJ,EAAArY,GACA,IAAA9Q,EAAA8Q,EAAA9Q,OAAA,MAAA8pB,EAAAhZ,EAAA9Q,QACAmpB,EAAAD,EAAAC,EAAAnpB,GACA,QAAA7C,EAAA,EAAiBA,EAAA6C,EAAY7C,GAAA,EAC7BgsB,EAAAhsB,GAAA,IAAA2T,EAAA3T,GAEA,OAAAgsB,EA+DA,SAAAW,EAAA9pB,GAGA,GAAAA,GAAAgpB,IACA,UAAAla,WAAA,0DACAka,IAAA3Y,SAAA,cAEA,SAAArQ,EAsFA,SAAAoQ,EAAAsS,EAAA9B,GACA,GAAA5Q,EAAA6Z,SAAAnH,GACA,OAAAA,EAAA1iB,OAEA,uBAAAmP,aAAA,mBAAAA,YAAA+a,SACA/a,YAAA+a,OAAAxH,iBAAAvT,aACA,OAAAuT,EAAAtS,WAEA,iBAAAsS,IACAA,EAAA,GAAAA,GAGA,IAAAS,EAAAT,EAAA1iB,OACA,OAAAmjB,EAAA,SAIA,IADA,IAAAgH,GAAA,IAEA,OAAAvJ,GACA,YACA,aACA,aACA,OAAAuC,EACA,WACA,YACA,UAAAriB,EACA,OAAAspB,EAAA1H,GAAA1iB,OACA,WACA,YACA,cACA,eACA,SAAAmjB,EACA,UACA,OAAAA,IAAA,EACA,aACA,OAAAkH,EAAA3H,GAAA1iB,OACA,QACA,GAAAmqB,EAAA,OAAAC,EAAA1H,GAAA1iB,OACA4gB,GAAA,GAAAA,GAAAb,cACAoK,GAAA,GAgFA,SAAAG,EAAAzpB,EAAA7B,EAAArB,GACA,IAAAR,EAAA0D,EAAA7B,GACA6B,EAAA7B,GAAA6B,EAAAlD,GACAkD,EAAAlD,GAAAR,EAmIA,SAAAotB,EAAAra,EAAA8Z,EAAA7Z,EAAAyQ,EAAA4J,GAEA,OAAAta,EAAAlQ,OAAA,SAmBA,GAhBA,iBAAAmQ,GACAyQ,EAAAzQ,EACAA,EAAA,GACGA,EAAA,WACHA,EAAA,WACGA,GAAA,aACHA,GAAA,YAEAA,KACA4X,MAAA5X,KAEAA,EAAAqa,EAAA,EAAAta,EAAAlQ,OAAA,GAIAmQ,EAAA,IAAAA,EAAAD,EAAAlQ,OAAAmQ,GACAA,GAAAD,EAAAlQ,OAAA,CACA,GAAAwqB,EAAA,SACAra,EAAAD,EAAAlQ,OAAA,OACG,GAAAmQ,EAAA,GACH,IAAAqa,EACA,SADAra,EAAA,EAUA,GALA,iBAAA6Z,IACAA,EAAAha,EAAAC,KAAA+Z,EAAApJ,IAIA5Q,EAAA6Z,SAAAG,GAEA,WAAAA,EAAAhqB,QACA,EAEAyqB,EAAAva,EAAA8Z,EAAA7Z,EAAAyQ,EAAA4J,GACG,oBAAAR,EAEH,OADAA,GAAA,IACAha,EAAAiZ,qBACA,mBAAA3X,WAAAnS,UAAAsL,QACA+f,EACAlZ,WAAAnS,UAAAsL,QAAA/M,KAAAwS,EAAA8Z,EAAA7Z,GAEAmB,WAAAnS,UAAAurB,YAAAhtB,KAAAwS,EAAA8Z,EAAA7Z,GAGAsa,EAAAva,EAAA,CAAA8Z,GAAA7Z,EAAAyQ,EAAA4J,GAGA,UAAAlhB,UAAA,wCAGA,SAAAmhB,EAAAE,EAAAX,EAAA7Z,EAAAyQ,EAAA4J,GACA,IA0BArtB,EA1BAytB,EAAA,EACAC,EAAAF,EAAA3qB,OACA8qB,EAAAd,EAAAhqB,OAEA,QAAAc,IAAA8f,IAEA,UADAA,EAAAzC,OAAAyC,GAAAb,gBACA,UAAAa,GACA,YAAAA,GAAA,aAAAA,GAAA,CACA,GAAA+J,EAAA3qB,OAAA,GAAAgqB,EAAAhqB,OAAA,EACA,SAEA4qB,EAAA,EACAC,GAAA,EACAC,GAAA,EACA3a,GAAA,EAIA,SAAA4a,EAAA7b,EAAA/R,GACA,WAAAytB,EACA1b,EAAA/R,GAEA+R,EAAA8b,aAAA7tB,EAAAytB,GAKA,GAAAJ,EAAA,CACA,IAAAS,GAAA,EACA,IAAA9tB,EAAAgT,EAAwBhT,EAAA0tB,EAAe1tB,IACvC,GAAA4tB,EAAAJ,EAAAxtB,KAAA4tB,EAAAf,GAAA,IAAAiB,EAAA,EAAA9tB,EAAA8tB,IAEA,IADA,IAAAA,MAAA9tB,GACAA,EAAA8tB,EAAA,IAAAH,EAAA,OAAAG,EAAAL,OAEA,IAAAK,IAAA9tB,KAAA8tB,GACAA,GAAA,OAKA,IADA9a,EAAA2a,EAAAD,IAAA1a,EAAA0a,EAAAC,GACA3tB,EAAAgT,EAAwBhT,GAAA,EAAQA,IAAA,CAEhC,IADA,IAAA+tB,GAAA,EACA1nB,EAAA,EAAqBA,EAAAsnB,EAAetnB,IACpC,GAAAunB,EAAAJ,EAAAxtB,EAAAqG,KAAAunB,EAAAf,EAAAxmB,GAAA,CACA0nB,GAAA,EACA,MAGA,GAAAA,EAAA,OAAA/tB,EAIA,SAeA,SAAAguB,EAAAjc,EAAAwT,EAAApe,EAAAtE,GACAsE,EAAAsF,OAAAtF,IAAA,EACA,IAAA8mB,EAAAlc,EAAAlP,OAAAsE,EACAtE,GAGAA,EAAA4J,OAAA5J,IACAorB,IACAprB,EAAAorB,GAJAprB,EAAAorB,EASA,IAAAC,EAAA3I,EAAA1iB,OACA,GAAAqrB,EAAA,eAAA/hB,UAAA,sBAEAtJ,EAAAqrB,EAAA,IACArrB,EAAAqrB,EAAA,GAEA,QAAAluB,EAAA,EAAiBA,EAAA6C,IAAY7C,EAAA,CAC7B,IAAAmuB,EAAAzH,SAAAnB,EAAA6I,OAAA,EAAApuB,EAAA,OACA,GAAA4qB,MAAAuD,GAAA,OAAAnuB,EACA+R,EAAA5K,EAAAnH,GAAAmuB,EAEA,OAAAnuB,EAGA,SAAAshB,EAAAvP,EAAAwT,EAAApe,EAAAtE,GACA,OAAAwrB,EAAApB,EAAA1H,EAAAxT,EAAAlP,OAAAsE,GAAA4K,EAAA5K,EAAAtE,GAGA,SAAAyrB,EAAAvc,EAAAwT,EAAApe,EAAAtE,GACA,OAAAwrB,EAq6BA,SAAAzb,GAEA,IADA,IAAA2b,EAAA,GACAvuB,EAAA,EAAiBA,EAAA4S,EAAA/P,SAAgB7C,EAEjCuuB,EAAAhhB,KAAA,IAAAqF,EAAA4b,WAAAxuB,IAEA,OAAAuuB,EA36BAE,CAAAlJ,GAAAxT,EAAA5K,EAAAtE,GAGA,SAAA6rB,EAAA3c,EAAAwT,EAAApe,EAAAtE,GACA,OAAAyrB,EAAAvc,EAAAwT,EAAApe,EAAAtE,GAGA,SAAA8rB,EAAA5c,EAAAwT,EAAApe,EAAAtE,GACA,OAAAwrB,EAAAnB,EAAA3H,GAAAxT,EAAA5K,EAAAtE,GAGA,SAAA+rB,EAAA7c,EAAAwT,EAAApe,EAAAtE,GACA,OAAAwrB,EAk6BA,SAAAzb,EAAAic,GAGA,IAFA,IAAApuB,EAAAgiB,EAAAD,EACA+L,EAAA,GACAvuB,EAAA,EAAiBA,EAAA4S,EAAA/P,WACjBgsB,GAAA,QADiC7uB,EAGjCS,EAAAmS,EAAA4b,WAAAxuB,GACAyiB,EAAAhiB,GAAA,EACA+hB,EAAA/hB,EAAA,IACA8tB,EAAAhhB,KAAAiV,GACA+L,EAAAhhB,KAAAkV,GAGA,OAAA8L,EA/6BAO,CAAAvJ,EAAAxT,EAAAlP,OAAAsE,GAAA4K,EAAA5K,EAAAtE,GAkFA,SAAAksB,EAAAhd,EAAA7H,EAAAC,GACA,WAAAD,GAAAC,IAAA4H,EAAAlP,OACAkd,EAAAiP,cAAAjd,GAEAgO,EAAAiP,cAAAjd,EAAAvH,MAAAN,EAAAC,IAIA,SAAA8kB,EAAAld,EAAA7H,EAAAC,GACAA,EAAA/F,KAAA8qB,IAAAnd,EAAAlP,OAAAsH,GAIA,IAHA,IAAAwF,EAAA,GAEA3P,EAAAkK,EACAlK,EAAAmK,GAAA,CACA,IAQAglB,EAAAC,EAAAC,EAAAC,EARAC,EAAAxd,EAAA/R,GACAwvB,EAAA,KACAC,EAAAF,EAAA,MACAA,EAAA,MACAA,EAAA,MACA,EAEA,GAAAvvB,EAAAyvB,GAAAtlB,EAGA,OAAAslB,GACA,OACAF,EAAA,MACAC,EAAAD,GAEA,MACA,OAEA,WADAJ,EAAApd,EAAA/R,EAAA,OAEAsvB,GAAA,GAAAC,IAAA,KAAAJ,GACA,MACAK,EAAAF,GAGA,MACA,OACAH,EAAApd,EAAA/R,EAAA,GACAovB,EAAArd,EAAA/R,EAAA,GACA,UAAAmvB,IAAA,UAAAC,KACAE,GAAA,GAAAC,IAAA,OAAAJ,IAAA,KAAAC,GACA,OAAAE,EAAA,OAAAA,EAAA,SACAE,EAAAF,GAGA,MACA,OACAH,EAAApd,EAAA/R,EAAA,GACAovB,EAAArd,EAAA/R,EAAA,GACAqvB,EAAAtd,EAAA/R,EAAA,GACA,UAAAmvB,IAAA,UAAAC,IAAA,UAAAC,KACAC,GAAA,GAAAC,IAAA,OAAAJ,IAAA,OAAAC,IAAA,KAAAC,GACA,OAAAC,EAAA,UACAE,EAAAF,GAMA,OAAAE,GAGAA,EAAA,MACAC,EAAA,GACKD,EAAA,QAELA,GAAA,MACA7f,EAAApC,KAAAiiB,IAAA,eACAA,EAAA,WAAAA,GAGA7f,EAAApC,KAAAiiB,GACAxvB,GAAAyvB,EAGA,OAQA,SAAAC,GACA,IAAA1J,EAAA0J,EAAA7sB,OACA,GAAAmjB,GAAA2J,EACA,OAAA3O,OAAA4O,aAAAC,MAAA7O,OAAA0O,GAIA,IAAA/f,EAAA,GACA3P,EAAA,EACA,KAAAA,EAAAgmB,GACArW,GAAAqR,OAAA4O,aAAAC,MACA7O,OACA0O,EAAAllB,MAAAxK,KAAA2vB,IAGA,OAAAhgB,EAvBAmgB,CAAAngB,GA98BAhQ,EAAAkT,SACAlT,EAAAowB,WAoTA,SAAAltB,IACAA,OACAA,EAAA,GAEA,OAAAgQ,EAAAmd,OAAAntB,IAvTAlD,EAAAswB,kBAAA,GA0BApd,EAAAiZ,yBAAAnoB,IAAAub,EAAA4M,oBACA5M,EAAA4M,oBAQA,WACA,IACA,IAAA0B,EAAA,IAAArZ,WAAA,GAEA,OADAqZ,EAAAvB,UAAA,CAAqBA,UAAA9X,WAAAnS,UAAAkuB,IAAA,WAAmD,YACxE,KAAA1C,EAAA0C,OACA,mBAAA1C,EAAA2C,UACA,IAAA3C,EAAA2C,SAAA,KAAAld,WACG,MAAAoH,GACH,UAfA+V,GAKAzwB,EAAAksB,eAkEAhZ,EAAAwd,SAAA,KAGAxd,EAAAyd,SAAA,SAAA9C,GAEA,OADAA,EAAAvB,UAAApZ,EAAA7Q,UACAwrB,GA2BA3a,EAAAC,KAAA,SAAAzR,EAAA8qB,EAAAtpB,GACA,OAAAiQ,EAAA,KAAAzR,EAAA8qB,EAAAtpB,IAGAgQ,EAAAiZ,sBACAjZ,EAAA7Q,UAAAiqB,UAAA9X,WAAAnS,UACA6Q,EAAAoZ,UAAA9X,WACA,oBAAAhT,eAAAovB,SACA1d,EAAA1R,OAAAovB,WAAA1d,GAEA/R,OAAAC,eAAA8R,EAAA1R,OAAAovB,QAAA,CACAlvB,MAAA,KACAmvB,cAAA,KAiCA3d,EAAAmd,MAAA,SAAAvqB,EAAAgI,EAAAgW,GACA,OArBA,SAAAuI,EAAAvmB,EAAAgI,EAAAgW,GAEA,OADAqJ,EAAArnB,GACAA,GAAA,EACAsmB,EAAAC,EAAAvmB,QAEA9B,IAAA8J,EAIA,iBAAAgW,EACAsI,EAAAC,EAAAvmB,GAAAgI,OAAAgW,GACAsI,EAAAC,EAAAvmB,GAAAgI,QAEAse,EAAAC,EAAAvmB,GAQAuqB,CAAA,KAAAvqB,EAAAgI,EAAAgW,IAiBA5Q,EAAA6Q,YAAA,SAAAje,GACA,OAAAie,EAAA,KAAAje,IAKAoN,EAAA4d,gBAAA,SAAAhrB,GACA,OAAAie,EAAA,KAAAje,IAiHAoN,EAAA6Z,SAAA,SAAAhpB,GACA,cAAAA,MAAAgtB,YAGA7d,EAAA8d,QAAA,SAAA5wB,EAAA2D,GACA,IAAAmP,EAAA6Z,SAAA3sB,KAAA8S,EAAA6Z,SAAAhpB,GACA,UAAAyI,UAAA,6BAGA,GAAApM,IAAA2D,EAAA,SAKA,IAHA,IAAAoJ,EAAA/M,EAAA8C,OACAkK,EAAArJ,EAAAb,OAEA7C,EAAA,EAAAgmB,EAAA5hB,KAAA8qB,IAAApiB,EAAAC,GAAuC/M,EAAAgmB,IAAShmB,EAChD,GAAAD,EAAAC,KAAA0D,EAAA1D,GAAA,CACA8M,EAAA/M,EAAAC,GACA+M,EAAArJ,EAAA1D,GACA,MAIA,OAAA8M,EAAAC,GAAA,EACAA,EAAAD,EAAA,EACA,GAGA+F,EAAAyZ,WAAA,SAAA7I,GACA,OAAAzC,OAAAyC,GAAAb,eACA,UACA,WACA,YACA,YACA,aACA,aACA,aACA,WACA,YACA,cACA,eACA,SACA,QACA,WAIA/P,EAAA+d,OAAA,SAAAC,EAAAhuB,GACA,IAAA+O,EAAAif,GACA,UAAA1kB,UAAA,+CAGA,OAAA0kB,EAAAhuB,OACA,OAAAgQ,EAAAmd,MAAA,GAGA,IAAAhwB,EACA,QAAA2D,IAAAd,EAEA,IADAA,EAAA,EACA7C,EAAA,EAAeA,EAAA6wB,EAAAhuB,SAAiB7C,EAChC6C,GAAAguB,EAAA7wB,GAAA6C,OAIA,IAAAkQ,EAAAF,EAAA6Q,YAAA7gB,GACA6M,EAAA,EACA,IAAA1P,EAAA,EAAaA,EAAA6wB,EAAAhuB,SAAiB7C,EAAA,CAC9B,IAAA+R,EAAA8e,EAAA7wB,GACA,IAAA6S,EAAA6Z,SAAA3a,GACA,UAAA5F,UAAA,+CAEA4F,EAAA6a,KAAA7Z,EAAArD,GACAA,GAAAqC,EAAAlP,OAEA,OAAAkQ,GA8CAF,EAAAI,aA0EAJ,EAAA7Q,UAAA0uB,WAAA,EAQA7d,EAAA7Q,UAAA8uB,OAAA,WACA,IAAA9K,EAAAvU,KAAA5O,OACA,GAAAmjB,EAAA,KACA,UAAArU,WAAA,6CAEA,QAAA3R,EAAA,EAAiBA,EAAAgmB,EAAShmB,GAAA,EAC1BmtB,EAAA1b,KAAAzR,IAAA,GAEA,OAAAyR,MAGAoB,EAAA7Q,UAAA+uB,OAAA,WACA,IAAA/K,EAAAvU,KAAA5O,OACA,GAAAmjB,EAAA,KACA,UAAArU,WAAA,6CAEA,QAAA3R,EAAA,EAAiBA,EAAAgmB,EAAShmB,GAAA,EAC1BmtB,EAAA1b,KAAAzR,IAAA,GACAmtB,EAAA1b,KAAAzR,EAAA,EAAAA,EAAA,GAEA,OAAAyR,MAGAoB,EAAA7Q,UAAAgvB,OAAA,WACA,IAAAhL,EAAAvU,KAAA5O,OACA,GAAAmjB,EAAA,KACA,UAAArU,WAAA,6CAEA,QAAA3R,EAAA,EAAiBA,EAAAgmB,EAAShmB,GAAA,EAC1BmtB,EAAA1b,KAAAzR,IAAA,GACAmtB,EAAA1b,KAAAzR,EAAA,EAAAA,EAAA,GACAmtB,EAAA1b,KAAAzR,EAAA,EAAAA,EAAA,GACAmtB,EAAA1b,KAAAzR,EAAA,EAAAA,EAAA,GAEA,OAAAyR,MAGAoB,EAAA7Q,UAAAkR,SAAA,WACA,IAAArQ,EAAA,EAAA4O,KAAA5O,OACA,WAAAA,EAAA,GACA,IAAAD,UAAAC,OAAAosB,EAAAxd,KAAA,EAAA5O,GAxHA,SAAA4gB,EAAAvZ,EAAAC,GACA,IAAA6iB,GAAA,EAcA,SALArpB,IAAAuG,KAAA,KACAA,EAAA,GAIAA,EAAAuH,KAAA5O,OACA,SAOA,SAJAc,IAAAwG,KAAAsH,KAAA5O,UACAsH,EAAAsH,KAAA5O,QAGAsH,GAAA,EACA,SAOA,IAHAA,KAAA,KACAD,KAAA,GAGA,SAKA,IAFAuZ,MAAA,UAGA,OAAAA,GACA,UACA,OAAAwN,EAAAxf,KAAAvH,EAAAC,GAEA,WACA,YACA,OAAA8kB,EAAAxd,KAAAvH,EAAAC,GAEA,YACA,OAAA+mB,EAAAzf,KAAAvH,EAAAC,GAEA,aACA,aACA,OAAAgnB,EAAA1f,KAAAvH,EAAAC,GAEA,aACA,OAAA4kB,EAAAtd,KAAAvH,EAAAC,GAEA,WACA,YACA,cACA,eACA,OAAAinB,EAAA3f,KAAAvH,EAAAC,GAEA,QACA,GAAA6iB,EAAA,UAAA7gB,UAAA,qBAAAsX,GACAA,KAAA,IAAAb,cACAoK,GAAA,IAwDA6C,MAAApe,KAAA7O,YAGAiQ,EAAA7Q,UAAAqvB,OAAA,SAAA3tB,GACA,IAAAmP,EAAA6Z,SAAAhpB,GAAA,UAAAyI,UAAA,6BACA,OAAAsF,OAAA/N,GACA,IAAAmP,EAAA8d,QAAAlf,KAAA/N,IAGAmP,EAAA7Q,UAAAsvB,QAAA,WACA,IAAA1e,EAAA,GACAvO,EAAA1E,EAAAswB,kBAKA,OAJAxe,KAAA5O,OAAA,IACA+P,EAAAnB,KAAAyB,SAAA,QAAA7O,GAAAktB,MAAA,SAAkD5F,KAAA,KAClDla,KAAA5O,OAAAwB,IAAAuO,GAAA,UAEA,WAAAA,EAAA,KAGAC,EAAA7Q,UAAA2uB,QAAA,SAAA9pB,EAAAqD,EAAAC,EAAAqnB,EAAAC,GACA,IAAA5e,EAAA6Z,SAAA7lB,GACA,UAAAsF,UAAA,6BAgBA,QAbAxI,IAAAuG,IACAA,EAAA,QAEAvG,IAAAwG,IACAA,EAAAtD,IAAAhE,OAAA,QAEAc,IAAA6tB,IACAA,EAAA,QAEA7tB,IAAA8tB,IACAA,EAAAhgB,KAAA5O,QAGAqH,EAAA,GAAAC,EAAAtD,EAAAhE,QAAA2uB,EAAA,GAAAC,EAAAhgB,KAAA5O,OACA,UAAA8O,WAAA,sBAGA,GAAA6f,GAAAC,GAAAvnB,GAAAC,EACA,SAEA,GAAAqnB,GAAAC,EACA,SAEA,GAAAvnB,GAAAC,EACA,SAQA,GAAAsH,OAAA5K,EAAA,SASA,IAPA,IAAAiG,GAJA2kB,KAAA,IADAD,KAAA,GAMAzkB,GAPA5C,KAAA,IADAD,KAAA,GASA8b,EAAA5hB,KAAA8qB,IAAApiB,EAAAC,GAEA2kB,EAAAjgB,KAAAjH,MAAAgnB,EAAAC,GACAE,EAAA9qB,EAAA2D,MAAAN,EAAAC,GAEAnK,EAAA,EAAiBA,EAAAgmB,IAAShmB,EAC1B,GAAA0xB,EAAA1xB,KAAA2xB,EAAA3xB,GAAA,CACA8M,EAAA4kB,EAAA1xB,GACA+M,EAAA4kB,EAAA3xB,GACA,MAIA,OAAA8M,EAAAC,GAAA,EACAA,EAAAD,EAAA,EACA,GA6HA+F,EAAA7Q,UAAA4vB,SAAA,SAAA/E,EAAA7Z,EAAAyQ,GACA,WAAAhS,KAAAnE,QAAAuf,EAAA7Z,EAAAyQ,IAGA5Q,EAAA7Q,UAAAsL,QAAA,SAAAuf,EAAA7Z,EAAAyQ,GACA,OAAA2J,EAAA3b,KAAAob,EAAA7Z,EAAAyQ,GAAA,IAGA5Q,EAAA7Q,UAAAurB,YAAA,SAAAV,EAAA7Z,EAAAyQ,GACA,OAAA2J,EAAA3b,KAAAob,EAAA7Z,EAAAyQ,GAAA,IAkDA5Q,EAAA7Q,UAAAwqB,MAAA,SAAAjH,EAAApe,EAAAtE,EAAA4gB,GAEA,QAAA9f,IAAAwD,EACAsc,EAAA,OACA5gB,EAAA4O,KAAA5O,OACAsE,EAAA,OAEG,QAAAxD,IAAAd,GAAA,iBAAAsE,EACHsc,EAAAtc,EACAtE,EAAA4O,KAAA5O,OACAsE,EAAA,MAEG,KAAA2Z,SAAA3Z,GAWH,UAAAD,MACA,2EAXAC,GAAA,EACA2Z,SAAAje,IACAA,GAAA,OACAc,IAAA8f,MAAA,UAEAA,EAAA5gB,EACAA,OAAAc,GASA,IAAAsqB,EAAAxc,KAAA5O,OAAAsE,EAGA,SAFAxD,IAAAd,KAAAorB,KAAAprB,EAAAorB,GAEA1I,EAAA1iB,OAAA,IAAAA,EAAA,GAAAsE,EAAA,IAAAA,EAAAsK,KAAA5O,OACA,UAAA8O,WAAA,0CAGA8R,MAAA,QAGA,IADA,IAAAuJ,GAAA,IAEA,OAAAvJ,GACA,UACA,OAAAuK,EAAAvc,KAAA8T,EAAApe,EAAAtE,GAEA,WACA,YACA,OAAAye,EAAA7P,KAAA8T,EAAApe,EAAAtE,GAEA,YACA,OAAAyrB,EAAA7c,KAAA8T,EAAApe,EAAAtE,GAEA,aACA,aACA,OAAA6rB,EAAAjd,KAAA8T,EAAApe,EAAAtE,GAEA,aAEA,OAAA8rB,EAAAld,KAAA8T,EAAApe,EAAAtE,GAEA,WACA,YACA,cACA,eACA,OAAA+rB,EAAAnd,KAAA8T,EAAApe,EAAAtE,GAEA,QACA,GAAAmqB,EAAA,UAAA7gB,UAAA,qBAAAsX,GACAA,GAAA,GAAAA,GAAAb,cACAoK,GAAA,IAKAna,EAAA7Q,UAAAilB,OAAA,WACA,OACAthB,KAAA,SACA2J,KAAA/K,MAAAvC,UAAAwI,MAAAjK,KAAAkR,KAAAogB,MAAApgB,KAAA,KAwFA,IAAAke,EAAA,KAoBA,SAAAuB,EAAAnf,EAAA7H,EAAAC,GACA,IAAA2nB,EAAA,GACA3nB,EAAA/F,KAAA8qB,IAAAnd,EAAAlP,OAAAsH,GAEA,QAAAnK,EAAAkK,EAAqBlK,EAAAmK,IAASnK,EAC9B8xB,GAAA9Q,OAAA4O,aAAA,IAAA7d,EAAA/R,IAEA,OAAA8xB,EAGA,SAAAX,EAAApf,EAAA7H,EAAAC,GACA,IAAA2nB,EAAA,GACA3nB,EAAA/F,KAAA8qB,IAAAnd,EAAAlP,OAAAsH,GAEA,QAAAnK,EAAAkK,EAAqBlK,EAAAmK,IAASnK,EAC9B8xB,GAAA9Q,OAAA4O,aAAA7d,EAAA/R,IAEA,OAAA8xB,EAGA,SAAAb,EAAAlf,EAAA7H,EAAAC,GACA,IAAA6b,EAAAjU,EAAAlP,SAEAqH,KAAA,KAAAA,EAAA,KACAC,KAAA,GAAAA,EAAA6b,KAAA7b,EAAA6b,GAGA,IADA,IAAA+L,EAAA,GACA/xB,EAAAkK,EAAqBlK,EAAAmK,IAASnK,EAC9B+xB,GAAAC,EAAAjgB,EAAA/R,IAEA,OAAA+xB,EAGA,SAAAX,EAAArf,EAAA7H,EAAAC,GAGA,IAFA,IAAAmZ,EAAAvR,EAAAvH,MAAAN,EAAAC,GACAwF,EAAA,GACA3P,EAAA,EAAiBA,EAAAsjB,EAAAzgB,OAAkB7C,GAAA,EACnC2P,GAAAqR,OAAA4O,aAAAtM,EAAAtjB,GAAA,IAAAsjB,EAAAtjB,EAAA,IAEA,OAAA2P,EA0CA,SAAAsiB,EAAA9qB,EAAA+qB,EAAArvB,GACA,GAAAsE,EAAA,MAAAA,EAAA,YAAAwK,WAAA,sBACA,GAAAxK,EAAA+qB,EAAArvB,EAAA,UAAA8O,WAAA,yCA+JA,SAAAwgB,EAAApgB,EAAA1Q,EAAA8F,EAAA+qB,EAAA7tB,EAAA6qB,GACA,IAAArc,EAAA6Z,SAAA3a,GAAA,UAAA5F,UAAA,+CACA,GAAA9K,EAAAgD,GAAAhD,EAAA6tB,EAAA,UAAAvd,WAAA,qCACA,GAAAxK,EAAA+qB,EAAAngB,EAAAlP,OAAA,UAAA8O,WAAA,sBAkDA,SAAAygB,EAAArgB,EAAA1Q,EAAA8F,EAAAkrB,GACAhxB,EAAA,IAAAA,EAAA,MAAAA,EAAA,GACA,QAAArB,EAAA,EAAAqG,EAAAjC,KAAA8qB,IAAAnd,EAAAlP,OAAAsE,EAAA,GAAuDnH,EAAAqG,IAAOrG,EAC9D+R,EAAA5K,EAAAnH,IAAAqB,EAAA,QAAAgxB,EAAAryB,EAAA,EAAAA,MACA,GAAAqyB,EAAAryB,EAAA,EAAAA,GA8BA,SAAAsyB,EAAAvgB,EAAA1Q,EAAA8F,EAAAkrB,GACAhxB,EAAA,IAAAA,EAAA,WAAAA,EAAA,GACA,QAAArB,EAAA,EAAAqG,EAAAjC,KAAA8qB,IAAAnd,EAAAlP,OAAAsE,EAAA,GAAuDnH,EAAAqG,IAAOrG,EAC9D+R,EAAA5K,EAAAnH,GAAAqB,IAAA,GAAAgxB,EAAAryB,EAAA,EAAAA,GAAA,IAmJA,SAAAuyB,EAAAxgB,EAAA1Q,EAAA8F,EAAA+qB,EAAA7tB,EAAA6qB,GACA,GAAA/nB,EAAA+qB,EAAAngB,EAAAlP,OAAA,UAAA8O,WAAA,sBACA,GAAAxK,EAAA,YAAAwK,WAAA,sBAGA,SAAA6gB,EAAAzgB,EAAA1Q,EAAA8F,EAAAkrB,EAAAI,GAKA,OAJAA,GACAF,EAAAxgB,EAAA1Q,EAAA8F,EAAA,GAEAykB,EAAAY,MAAAza,EAAA1Q,EAAA8F,EAAAkrB,EAAA,MACAlrB,EAAA,EAWA,SAAAurB,EAAA3gB,EAAA1Q,EAAA8F,EAAAkrB,EAAAI,GAKA,OAJAA,GACAF,EAAAxgB,EAAA1Q,EAAA8F,EAAA,GAEAykB,EAAAY,MAAAza,EAAA1Q,EAAA8F,EAAAkrB,EAAA,MACAlrB,EAAA,EA/cA0L,EAAA7Q,UAAAwI,MAAA,SAAAN,EAAAC,GACA,IAoBAwoB,EApBA3M,EAAAvU,KAAA5O,OAqBA,IApBAqH,OAGA,GACAA,GAAA8b,GACA,IAAA9b,EAAA,GACGA,EAAA8b,IACH9b,EAAA8b,IANA7b,OAAAxG,IAAAwG,EAAA6b,IAAA7b,GASA,GACAA,GAAA6b,GACA,IAAA7b,EAAA,GACGA,EAAA6b,IACH7b,EAAA6b,GAGA7b,EAAAD,IAAAC,EAAAD,GAGA2I,EAAAiZ,qBACA6G,EAAAlhB,KAAA0e,SAAAjmB,EAAAC,IACA8hB,UAAApZ,EAAA7Q,cACG,CACH,IAAA4wB,EAAAzoB,EAAAD,EACAyoB,EAAA,IAAA9f,EAAA+f,OAAAjvB,GACA,QAAA3D,EAAA,EAAmBA,EAAA4yB,IAAc5yB,EACjC2yB,EAAA3yB,GAAAyR,KAAAzR,EAAAkK,GAIA,OAAAyoB,GAWA9f,EAAA7Q,UAAA6wB,WAAA,SAAA1rB,EAAA8L,EAAAwf,GACAtrB,GAAA,EACA8L,GAAA,EACAwf,GAAAR,EAAA9qB,EAAA8L,EAAAxB,KAAA5O,QAKA,IAHA,IAAAgqB,EAAApb,KAAAtK,GACA8G,EAAA,EACAjO,EAAA,IACAA,EAAAiT,IAAAhF,GAAA,MACA4e,GAAApb,KAAAtK,EAAAnH,GAAAiO,EAGA,OAAA4e,GAGAha,EAAA7Q,UAAA8wB,WAAA,SAAA3rB,EAAA8L,EAAAwf,GACAtrB,GAAA,EACA8L,GAAA,EACAwf,GACAR,EAAA9qB,EAAA8L,EAAAxB,KAAA5O,QAKA,IAFA,IAAAgqB,EAAApb,KAAAtK,IAAA8L,GACAhF,EAAA,EACAgF,EAAA,IAAAhF,GAAA,MACA4e,GAAApb,KAAAtK,IAAA8L,GAAAhF,EAGA,OAAA4e,GAGAha,EAAA7Q,UAAA+wB,UAAA,SAAA5rB,EAAAsrB,GAEA,OADAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QACA4O,KAAAtK,IAGA0L,EAAA7Q,UAAAgxB,aAAA,SAAA7rB,EAAAsrB,GAEA,OADAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QACA4O,KAAAtK,GAAAsK,KAAAtK,EAAA,OAGA0L,EAAA7Q,UAAA6rB,aAAA,SAAA1mB,EAAAsrB,GAEA,OADAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QACA4O,KAAAtK,IAAA,EAAAsK,KAAAtK,EAAA,IAGA0L,EAAA7Q,UAAAixB,aAAA,SAAA9rB,EAAAsrB,GAGA,OAFAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,SAEA4O,KAAAtK,GACAsK,KAAAtK,EAAA,MACAsK,KAAAtK,EAAA,QACA,SAAAsK,KAAAtK,EAAA,IAGA0L,EAAA7Q,UAAAkxB,aAAA,SAAA/rB,EAAAsrB,GAGA,OAFAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QAEA,SAAA4O,KAAAtK,IACAsK,KAAAtK,EAAA,OACAsK,KAAAtK,EAAA,MACAsK,KAAAtK,EAAA,KAGA0L,EAAA7Q,UAAAmxB,UAAA,SAAAhsB,EAAA8L,EAAAwf,GACAtrB,GAAA,EACA8L,GAAA,EACAwf,GAAAR,EAAA9qB,EAAA8L,EAAAxB,KAAA5O,QAKA,IAHA,IAAAgqB,EAAApb,KAAAtK,GACA8G,EAAA,EACAjO,EAAA,IACAA,EAAAiT,IAAAhF,GAAA,MACA4e,GAAApb,KAAAtK,EAAAnH,GAAAiO,EAMA,OAFA4e,IAFA5e,GAAA,OAEA4e,GAAAzoB,KAAAyJ,IAAA,IAAAoF,IAEA4Z,GAGAha,EAAA7Q,UAAAoxB,UAAA,SAAAjsB,EAAA8L,EAAAwf,GACAtrB,GAAA,EACA8L,GAAA,EACAwf,GAAAR,EAAA9qB,EAAA8L,EAAAxB,KAAA5O,QAKA,IAHA,IAAA7C,EAAAiT,EACAhF,EAAA,EACA4e,EAAApb,KAAAtK,IAAAnH,GACAA,EAAA,IAAAiO,GAAA,MACA4e,GAAApb,KAAAtK,IAAAnH,GAAAiO,EAMA,OAFA4e,IAFA5e,GAAA,OAEA4e,GAAAzoB,KAAAyJ,IAAA,IAAAoF,IAEA4Z,GAGAha,EAAA7Q,UAAAqxB,SAAA,SAAAlsB,EAAAsrB,GAEA,OADAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QACA,IAAA4O,KAAAtK,IACA,OAAAsK,KAAAtK,GAAA,GADAsK,KAAAtK,IAIA0L,EAAA7Q,UAAAsxB,YAAA,SAAAnsB,EAAAsrB,GACAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QACA,IAAAgqB,EAAApb,KAAAtK,GAAAsK,KAAAtK,EAAA,MACA,aAAA0lB,EAAA,WAAAA,KAGAha,EAAA7Q,UAAAuxB,YAAA,SAAApsB,EAAAsrB,GACAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QACA,IAAAgqB,EAAApb,KAAAtK,EAAA,GAAAsK,KAAAtK,IAAA,EACA,aAAA0lB,EAAA,WAAAA,KAGAha,EAAA7Q,UAAAwxB,YAAA,SAAArsB,EAAAsrB,GAGA,OAFAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QAEA4O,KAAAtK,GACAsK,KAAAtK,EAAA,MACAsK,KAAAtK,EAAA,OACAsK,KAAAtK,EAAA,QAGA0L,EAAA7Q,UAAAyxB,YAAA,SAAAtsB,EAAAsrB,GAGA,OAFAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QAEA4O,KAAAtK,IAAA,GACAsK,KAAAtK,EAAA,OACAsK,KAAAtK,EAAA,MACAsK,KAAAtK,EAAA,IAGA0L,EAAA7Q,UAAA0xB,YAAA,SAAAvsB,EAAAsrB,GAEA,OADAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QACA+oB,EAAAgC,KAAAnc,KAAAtK,GAAA,SAGA0L,EAAA7Q,UAAA2xB,YAAA,SAAAxsB,EAAAsrB,GAEA,OADAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QACA+oB,EAAAgC,KAAAnc,KAAAtK,GAAA,SAGA0L,EAAA7Q,UAAA4xB,aAAA,SAAAzsB,EAAAsrB,GAEA,OADAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QACA+oB,EAAAgC,KAAAnc,KAAAtK,GAAA,SAGA0L,EAAA7Q,UAAA6xB,aAAA,SAAA1sB,EAAAsrB,GAEA,OADAA,GAAAR,EAAA9qB,EAAA,EAAAsK,KAAA5O,QACA+oB,EAAAgC,KAAAnc,KAAAtK,GAAA,SASA0L,EAAA7Q,UAAA8xB,YAAA,SAAAzyB,EAAA8F,EAAA8L,EAAAwf,IACApxB,KACA8F,GAAA,EACA8L,GAAA,EACAwf,IAEAN,EAAA1gB,KAAApQ,EAAA8F,EAAA8L,EADA7O,KAAAyJ,IAAA,IAAAoF,GAAA,EACA,GAGA,IAAAhF,EAAA,EACAjO,EAAA,EAEA,IADAyR,KAAAtK,GAAA,IAAA9F,IACArB,EAAAiT,IAAAhF,GAAA,MACAwD,KAAAtK,EAAAnH,GAAAqB,EAAA4M,EAAA,IAGA,OAAA9G,EAAA8L,GAGAJ,EAAA7Q,UAAA+xB,YAAA,SAAA1yB,EAAA8F,EAAA8L,EAAAwf,IACApxB,KACA8F,GAAA,EACA8L,GAAA,EACAwf,IAEAN,EAAA1gB,KAAApQ,EAAA8F,EAAA8L,EADA7O,KAAAyJ,IAAA,IAAAoF,GAAA,EACA,GAGA,IAAAjT,EAAAiT,EAAA,EACAhF,EAAA,EAEA,IADAwD,KAAAtK,EAAAnH,GAAA,IAAAqB,IACArB,GAAA,IAAAiO,GAAA,MACAwD,KAAAtK,EAAAnH,GAAAqB,EAAA4M,EAAA,IAGA,OAAA9G,EAAA8L,GAGAJ,EAAA7Q,UAAAgyB,WAAA,SAAA3yB,EAAA8F,EAAAsrB,GAMA,OALApxB,KACA8F,GAAA,EACAsrB,GAAAN,EAAA1gB,KAAApQ,EAAA8F,EAAA,SACA0L,EAAAiZ,sBAAAzqB,EAAA+C,KAAAkC,MAAAjF,IACAoQ,KAAAtK,GAAA,IAAA9F,EACA8F,EAAA,GAWA0L,EAAA7Q,UAAAiyB,cAAA,SAAA5yB,EAAA8F,EAAAsrB,GAUA,OATApxB,KACA8F,GAAA,EACAsrB,GAAAN,EAAA1gB,KAAApQ,EAAA8F,EAAA,WACA0L,EAAAiZ,qBACAra,KAAAtK,GAAA,IAAA9F,EACAoQ,KAAAtK,EAAA,GAAA9F,IAAA,GAEA+wB,EAAA3gB,KAAApQ,EAAA8F,GAAA,GAEAA,EAAA,GAGA0L,EAAA7Q,UAAAkyB,cAAA,SAAA7yB,EAAA8F,EAAAsrB,GAUA,OATApxB,KACA8F,GAAA,EACAsrB,GAAAN,EAAA1gB,KAAApQ,EAAA8F,EAAA,WACA0L,EAAAiZ,qBACAra,KAAAtK,GAAA9F,IAAA,EACAoQ,KAAAtK,EAAA,OAAA9F,GAEA+wB,EAAA3gB,KAAApQ,EAAA8F,GAAA,GAEAA,EAAA,GAUA0L,EAAA7Q,UAAAmyB,cAAA,SAAA9yB,EAAA8F,EAAAsrB,GAYA,OAXApxB,KACA8F,GAAA,EACAsrB,GAAAN,EAAA1gB,KAAApQ,EAAA8F,EAAA,gBACA0L,EAAAiZ,qBACAra,KAAAtK,EAAA,GAAA9F,IAAA,GACAoQ,KAAAtK,EAAA,GAAA9F,IAAA,GACAoQ,KAAAtK,EAAA,GAAA9F,IAAA,EACAoQ,KAAAtK,GAAA,IAAA9F,GAEAixB,EAAA7gB,KAAApQ,EAAA8F,GAAA,GAEAA,EAAA,GAGA0L,EAAA7Q,UAAAoyB,cAAA,SAAA/yB,EAAA8F,EAAAsrB,GAYA,OAXApxB,KACA8F,GAAA,EACAsrB,GAAAN,EAAA1gB,KAAApQ,EAAA8F,EAAA,gBACA0L,EAAAiZ,qBACAra,KAAAtK,GAAA9F,IAAA,GACAoQ,KAAAtK,EAAA,GAAA9F,IAAA,GACAoQ,KAAAtK,EAAA,GAAA9F,IAAA,EACAoQ,KAAAtK,EAAA,OAAA9F,GAEAixB,EAAA7gB,KAAApQ,EAAA8F,GAAA,GAEAA,EAAA,GAGA0L,EAAA7Q,UAAAqyB,WAAA,SAAAhzB,EAAA8F,EAAA8L,EAAAwf,GAGA,GAFApxB,KACA8F,GAAA,GACAsrB,EAAA,CACA,IAAA6B,EAAAlwB,KAAAyJ,IAAA,IAAAoF,EAAA,GAEAkf,EAAA1gB,KAAApQ,EAAA8F,EAAA8L,EAAAqhB,EAAA,GAAAA,GAGA,IAAAt0B,EAAA,EACAiO,EAAA,EACAsmB,EAAA,EAEA,IADA9iB,KAAAtK,GAAA,IAAA9F,IACArB,EAAAiT,IAAAhF,GAAA,MACA5M,EAAA,OAAAkzB,GAAA,IAAA9iB,KAAAtK,EAAAnH,EAAA,KACAu0B,EAAA,GAEA9iB,KAAAtK,EAAAnH,IAAAqB,EAAA4M,GAAA,GAAAsmB,EAAA,IAGA,OAAAptB,EAAA8L,GAGAJ,EAAA7Q,UAAAwyB,WAAA,SAAAnzB,EAAA8F,EAAA8L,EAAAwf,GAGA,GAFApxB,KACA8F,GAAA,GACAsrB,EAAA,CACA,IAAA6B,EAAAlwB,KAAAyJ,IAAA,IAAAoF,EAAA,GAEAkf,EAAA1gB,KAAApQ,EAAA8F,EAAA8L,EAAAqhB,EAAA,GAAAA,GAGA,IAAAt0B,EAAAiT,EAAA,EACAhF,EAAA,EACAsmB,EAAA,EAEA,IADA9iB,KAAAtK,EAAAnH,GAAA,IAAAqB,IACArB,GAAA,IAAAiO,GAAA,MACA5M,EAAA,OAAAkzB,GAAA,IAAA9iB,KAAAtK,EAAAnH,EAAA,KACAu0B,EAAA,GAEA9iB,KAAAtK,EAAAnH,IAAAqB,EAAA4M,GAAA,GAAAsmB,EAAA,IAGA,OAAAptB,EAAA8L,GAGAJ,EAAA7Q,UAAAyyB,UAAA,SAAApzB,EAAA8F,EAAAsrB,GAOA,OANApxB,KACA8F,GAAA,EACAsrB,GAAAN,EAAA1gB,KAAApQ,EAAA8F,EAAA,YACA0L,EAAAiZ,sBAAAzqB,EAAA+C,KAAAkC,MAAAjF,IACAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,GACAoQ,KAAAtK,GAAA,IAAA9F,EACA8F,EAAA,GAGA0L,EAAA7Q,UAAA0yB,aAAA,SAAArzB,EAAA8F,EAAAsrB,GAUA,OATApxB,KACA8F,GAAA,EACAsrB,GAAAN,EAAA1gB,KAAApQ,EAAA8F,EAAA,gBACA0L,EAAAiZ,qBACAra,KAAAtK,GAAA,IAAA9F,EACAoQ,KAAAtK,EAAA,GAAA9F,IAAA,GAEA+wB,EAAA3gB,KAAApQ,EAAA8F,GAAA,GAEAA,EAAA,GAGA0L,EAAA7Q,UAAA2yB,aAAA,SAAAtzB,EAAA8F,EAAAsrB,GAUA,OATApxB,KACA8F,GAAA,EACAsrB,GAAAN,EAAA1gB,KAAApQ,EAAA8F,EAAA,gBACA0L,EAAAiZ,qBACAra,KAAAtK,GAAA9F,IAAA,EACAoQ,KAAAtK,EAAA,OAAA9F,GAEA+wB,EAAA3gB,KAAApQ,EAAA8F,GAAA,GAEAA,EAAA,GAGA0L,EAAA7Q,UAAA4yB,aAAA,SAAAvzB,EAAA8F,EAAAsrB,GAYA,OAXApxB,KACA8F,GAAA,EACAsrB,GAAAN,EAAA1gB,KAAApQ,EAAA8F,EAAA,0BACA0L,EAAAiZ,qBACAra,KAAAtK,GAAA,IAAA9F,EACAoQ,KAAAtK,EAAA,GAAA9F,IAAA,EACAoQ,KAAAtK,EAAA,GAAA9F,IAAA,GACAoQ,KAAAtK,EAAA,GAAA9F,IAAA,IAEAixB,EAAA7gB,KAAApQ,EAAA8F,GAAA,GAEAA,EAAA,GAGA0L,EAAA7Q,UAAA6yB,aAAA,SAAAxzB,EAAA8F,EAAAsrB,GAaA,OAZApxB,KACA8F,GAAA,EACAsrB,GAAAN,EAAA1gB,KAAApQ,EAAA8F,EAAA,0BACA9F,EAAA,IAAAA,EAAA,WAAAA,EAAA,GACAwR,EAAAiZ,qBACAra,KAAAtK,GAAA9F,IAAA,GACAoQ,KAAAtK,EAAA,GAAA9F,IAAA,GACAoQ,KAAAtK,EAAA,GAAA9F,IAAA,EACAoQ,KAAAtK,EAAA,OAAA9F,GAEAixB,EAAA7gB,KAAApQ,EAAA8F,GAAA,GAEAA,EAAA,GAgBA0L,EAAA7Q,UAAA8yB,aAAA,SAAAzzB,EAAA8F,EAAAsrB,GACA,OAAAD,EAAA/gB,KAAApQ,EAAA8F,GAAA,EAAAsrB,IAGA5f,EAAA7Q,UAAA+yB,aAAA,SAAA1zB,EAAA8F,EAAAsrB,GACA,OAAAD,EAAA/gB,KAAApQ,EAAA8F,GAAA,EAAAsrB,IAWA5f,EAAA7Q,UAAAgzB,cAAA,SAAA3zB,EAAA8F,EAAAsrB,GACA,OAAAC,EAAAjhB,KAAApQ,EAAA8F,GAAA,EAAAsrB,IAGA5f,EAAA7Q,UAAAizB,cAAA,SAAA5zB,EAAA8F,EAAAsrB,GACA,OAAAC,EAAAjhB,KAAApQ,EAAA8F,GAAA,EAAAsrB,IAIA5f,EAAA7Q,UAAA4qB,KAAA,SAAA/lB,EAAAquB,EAAAhrB,EAAAC,GAQA,GAPAD,MAAA,GACAC,GAAA,IAAAA,MAAAsH,KAAA5O,QACAqyB,GAAAruB,EAAAhE,SAAAqyB,EAAAruB,EAAAhE,QACAqyB,MAAA,GACA/qB,EAAA,GAAAA,EAAAD,IAAAC,EAAAD,GAGAC,IAAAD,EAAA,SACA,OAAArD,EAAAhE,QAAA,IAAA4O,KAAA5O,OAAA,SAGA,GAAAqyB,EAAA,EACA,UAAAvjB,WAAA,6BAEA,GAAAzH,EAAA,GAAAA,GAAAuH,KAAA5O,OAAA,UAAA8O,WAAA,6BACA,GAAAxH,EAAA,YAAAwH,WAAA,2BAGAxH,EAAAsH,KAAA5O,SAAAsH,EAAAsH,KAAA5O,QACAgE,EAAAhE,OAAAqyB,EAAA/qB,EAAAD,IACAC,EAAAtD,EAAAhE,OAAAqyB,EAAAhrB,GAGA,IACAlK,EADAgmB,EAAA7b,EAAAD,EAGA,GAAAuH,OAAA5K,GAAAqD,EAAAgrB,KAAA/qB,EAEA,IAAAnK,EAAAgmB,EAAA,EAAqBhmB,GAAA,IAAQA,EAC7B6G,EAAA7G,EAAAk1B,GAAAzjB,KAAAzR,EAAAkK,QAEG,GAAA8b,EAAA,MAAAnT,EAAAiZ,oBAEH,IAAA9rB,EAAA,EAAeA,EAAAgmB,IAAShmB,EACxB6G,EAAA7G,EAAAk1B,GAAAzjB,KAAAzR,EAAAkK,QAGAiK,WAAAnS,UAAA4D,IAAArF,KACAsG,EACA4K,KAAA0e,SAAAjmB,IAAA8b,GACAkP,GAIA,OAAAlP,GAOAnT,EAAA7Q,UAAAyL,KAAA,SAAAof,EAAA3iB,EAAAC,EAAAsZ,GAEA,oBAAAoJ,EAAA,CASA,GARA,iBAAA3iB,GACAuZ,EAAAvZ,EACAA,EAAA,EACAC,EAAAsH,KAAA5O,QACK,iBAAAsH,IACLsZ,EAAAtZ,EACAA,EAAAsH,KAAA5O,QAEA,IAAAgqB,EAAAhqB,OAAA,CACA,IAAAsyB,EAAAtI,EAAA2B,WAAA,GACA2G,EAAA,MACAtI,EAAAsI,GAGA,QAAAxxB,IAAA8f,GAAA,iBAAAA,EACA,UAAAtX,UAAA,6BAEA,oBAAAsX,IAAA5Q,EAAAyZ,WAAA7I,GACA,UAAAtX,UAAA,qBAAAsX,OAEG,iBAAAoJ,IACHA,GAAA,KAIA,GAAA3iB,EAAA,GAAAuH,KAAA5O,OAAAqH,GAAAuH,KAAA5O,OAAAsH,EACA,UAAAwH,WAAA,sBAGA,GAAAxH,GAAAD,EACA,OAAAuH,KAQA,IAAAzR,EACA,GANAkK,KAAA,EACAC,OAAAxG,IAAAwG,EAAAsH,KAAA5O,OAAAsH,IAAA,EAEA0iB,MAAA,GAGA,iBAAAA,EACA,IAAA7sB,EAAAkK,EAAmBlK,EAAAmK,IAASnK,EAC5ByR,KAAAzR,GAAA6sB,MAEG,CACH,IAAAvJ,EAAAzQ,EAAA6Z,SAAAG,GACAA,EACAI,EAAA,IAAApa,EAAAga,EAAApJ,GAAAvQ,YACA8S,EAAA1C,EAAAzgB,OACA,IAAA7C,EAAA,EAAeA,EAAAmK,EAAAD,IAAiBlK,EAChCyR,KAAAzR,EAAAkK,GAAAoZ,EAAAtjB,EAAAgmB,GAIA,OAAAvU,MAMA,IAAA2jB,EAAA,qBAmBA,SAAApD,EAAAnwB,GACA,OAAAA,EAAA,OAAAA,EAAAqR,SAAA,IACArR,EAAAqR,SAAA,IAGA,SAAA+Z,EAAA1H,EAAAsJ,GAEA,IAAAW,EADAX,KAAAwG,IAMA,IAJA,IAAAxyB,EAAA0iB,EAAA1iB,OACAyyB,EAAA,KACAhS,EAAA,GAEAtjB,EAAA,EAAiBA,EAAA6C,IAAY7C,EAAA,CAI7B,IAHAwvB,EAAAjK,EAAAiJ,WAAAxuB,IAGA,OAAAwvB,EAAA,OAEA,IAAA8F,EAAA,CAEA,GAAA9F,EAAA,QAEAX,GAAA,OAAAvL,EAAA/V,KAAA,aACA,SACS,GAAAvN,EAAA,IAAA6C,EAAA,EAETgsB,GAAA,OAAAvL,EAAA/V,KAAA,aACA,SAIA+nB,EAAA9F,EAEA,SAIA,GAAAA,EAAA,QACAX,GAAA,OAAAvL,EAAA/V,KAAA,aACA+nB,EAAA9F,EACA,SAIAA,EAAA,OAAA8F,EAAA,UAAA9F,EAAA,YACK8F,IAELzG,GAAA,OAAAvL,EAAA/V,KAAA,aAMA,GAHA+nB,EAAA,KAGA9F,EAAA,KACA,IAAAX,GAAA,WACAvL,EAAA/V,KAAAiiB,QACK,GAAAA,EAAA,MACL,IAAAX,GAAA,WACAvL,EAAA/V,KACAiiB,GAAA,MACA,GAAAA,EAAA,UAEK,GAAAA,EAAA,OACL,IAAAX,GAAA,WACAvL,EAAA/V,KACAiiB,GAAA,OACAA,GAAA,SACA,GAAAA,EAAA,SAEK,MAAAA,EAAA,SASL,UAAAtoB,MAAA,sBARA,IAAA2nB,GAAA,WACAvL,EAAA/V,KACAiiB,GAAA,OACAA,GAAA,UACAA,GAAA,SACA,GAAAA,EAAA,MAOA,OAAAlM,EA4BA,SAAA4J,EAAAta,GACA,OAAAmN,EAAAwV,YAhIA,SAAA3iB,GAIA,IAFAA,EAUA,SAAAA,GACA,OAAAA,EAAA4iB,KAAA5iB,EAAA4iB,OACA5iB,EAAA6iB,QAAA,iBAZAC,CAAA9iB,GAAA6iB,QAAAL,EAAA,KAEAvyB,OAAA,WAEA,KAAA+P,EAAA/P,OAAA,MACA+P,GAAA,IAEA,OAAAA,EAuHA+iB,CAAA/iB,IAGA,SAAAyb,EAAA/O,EAAAD,EAAAlY,EAAAtE,GACA,QAAA7C,EAAA,EAAiBA,EAAA6C,KACjB7C,EAAAmH,GAAAkY,EAAAxc,QAAA7C,GAAAsf,EAAAzc,UAD6B7C,EAE7Bqf,EAAArf,EAAAmH,GAAAmY,EAAAtf,GAEA,OAAAA,oCCvvDAJ,EAAAD,QAAAgiB,EAKA,IAAAiU,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAAE,OAAA,IAAA5hB,WAAA,CACA,m2BACA,IAASxU,QACR,MAAA0a,IAcD,SAAAsH,EAAA2E,EAAAC,EAAAlE,GAMA5Q,KAAA6U,IAAA,EAAAA,EAMA7U,KAAA8U,KAAA,EAAAA,EAMA9U,KAAA4Q,aAoCA,SAAAjZ,EAAAgY,GACA,YAAAA,KAAA,YAXAO,EAAA3f,UAAAg0B,WAEAl1B,OAAAC,eAAA4gB,EAAA3f,UAAA,cAAqDX,OAAA,IAkBrDsgB,EAAAvY,SAOA,IAAA6sB,EAAA,GAOAC,EAAA,GAQA,SAAAC,EAAA90B,EAAAghB,GACA,IAAAjB,EAAAgV,EAAA5kB,EACA,OAAA6Q,GAEA7Q,EAAA,IADAnQ,KAAA,IACAA,EAAA,OACA+0B,EAAAF,EAAA70B,IAEA+0B,GAEAhV,EAAA/L,EAAAhU,GAAA,EAAAA,GAAA,WACAmQ,IACA0kB,EAAA70B,GAAA+f,GACAA,IAGA5P,GAAA,MADAnQ,GAAA,IACAA,EAAA,OACA+0B,EAAAH,EAAA50B,IAEA+0B,GAEAhV,EAAA/L,EAAAhU,IAAA,WACAmQ,IACAykB,EAAA50B,GAAA+f,GACAA,GAmBA,SAAAiV,EAAAh1B,EAAAghB,GACA,GAAAuI,MAAAvpB,GACA,OAAAghB,EAAAiU,EAAAC,EACA,GAAAlU,EAAA,CACA,GAAAhhB,EAAA,EACA,OAAAi1B,EACA,GAAAj1B,GAAAm1B,EACA,OAAAC,MACK,CACL,GAAAp1B,IAAAq1B,EACA,OAAAC,EACA,GAAAt1B,EAAA,GAAAq1B,EACA,OAAAE,EAEA,OAAAv1B,EAAA,EACAg1B,GAAAh1B,EAAAghB,GAAAwU,MACAxhB,EAAAhU,EAAAy1B,EAAA,EAAAz1B,EAAAy1B,EAAA,EAAAzU,GAmBA,SAAAhN,EAAA0hB,EAAAC,EAAA3U,GACA,WAAAV,EAAAoV,EAAAC,EAAA3U,GA5CAV,EAAAwU,UAkCAxU,EAAA0U,aAsBA1U,EAAAtM,WASA,IAAA4hB,EAAA7yB,KAAAyJ,IASA,SAAA4e,EAAA7Z,EAAAyP,EAAA6U,GACA,OAAAtkB,EAAA/P,OACA,MAAAqE,MAAA,gBACA,WAAA0L,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAA2jB,EASA,GARA,iBAAAlU,GAEA6U,EAAA7U,EACAA,GAAA,GAEAA,OAEA6U,KAAA,IACA,MAAAA,EACA,MAAAvlB,WAAA,SAEA,IAAAzP,EACA,IAAAA,EAAA0Q,EAAAtF,QAAA,QACA,MAAApG,MAAA,mBACA,OAAAhF,EACA,OAAAuqB,EAAA7Z,EAAAiQ,UAAA,GAAAR,EAAA6U,GAAAL,MAQA,IAHA,IAAAM,EAAAd,EAAAY,EAAAC,EAAA,IAEAvY,EAAA4X,EACAv2B,EAAA,EAAmBA,EAAA4S,EAAA/P,OAAgB7C,GAAA,GACnC,IAAAyF,EAAArB,KAAA8qB,IAAA,EAAAtc,EAAA/P,OAAA7C,GACAqB,EAAAqlB,SAAA9T,EAAAiQ,UAAA7iB,IAAAyF,GAAAyxB,GACA,GAAAzxB,EAAA,GACA,IAAA2xB,EAAAf,EAAAY,EAAAC,EAAAzxB,IACAkZ,IAAA1Q,IAAAmpB,GAAApY,IAAAqX,EAAAh1B,SAGAsd,GADAA,IAAA1Q,IAAAkpB,IACAnY,IAAAqX,EAAAh1B,IAIA,OADAsd,EAAA0D,WACA1D,EAoBA,SAAA8H,EAAAoG,EAAAxK,GACA,uBAAAwK,EACAwJ,EAAAxJ,EAAAxK,GACA,iBAAAwK,EACAJ,EAAAI,EAAAxK,GAEAhN,EAAAwX,EAAAvG,IAAAuG,EAAAtG,KAAA,kBAAAlE,IAAAwK,EAAAxK,UAfAV,EAAA8K,aAyBA9K,EAAA8E,YAUA,IAcAqQ,EAAAO,WAOAb,EAAAM,IAOAJ,EAAAF,EAAA,EAOAc,EAAAnB,EA5BA,OAkCAI,EAAAJ,EAAA,GAMAxU,EAAA4U,OAMA,IAAAD,EAAAH,EAAA,MAMAxU,EAAA2U,QAMA,IAAAiB,EAAApB,EAAA,GAMAxU,EAAA4V,MAMA,IAAAC,EAAArB,EAAA,MAMAxU,EAAA6V,OAMA,IAAAC,EAAAtB,GAAA,GAMAxU,EAAA8V,UAMA,IAAAb,EAAAvhB,GAAA,iBAMAsM,EAAAiV,YAMA,IAAAH,EAAAphB,GAAA,SAMAsM,EAAA8U,qBAMA,IAAAE,EAAAthB,EAAA,kBAMAsM,EAAAgV,YAMA,IAAAe,EAAA/V,EAAA3f,UAMA01B,EAAAC,MAAA,WACA,OAAAlmB,KAAA4Q,SAAA5Q,KAAA6U,MAAA,EAAA7U,KAAA6U,KAOAoR,EAAAruB,SAAA,WACA,OAAAoI,KAAA4Q,UACA5Q,KAAA8U,OAAA,GAAAuQ,GAAArlB,KAAA6U,MAAA,GACA7U,KAAA8U,KAAAuQ,GAAArlB,KAAA6U,MAAA,IAUAoR,EAAAxkB,SAAA,SAAAgkB,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAAvlB,WAAA,SACA,GAAAF,KAAAmmB,SACA,UACA,GAAAnmB,KAAAomB,aAAA,CACA,GAAApmB,KAAAqmB,GAAAnB,GAAA,CAGA,IAAAoB,EAAA1B,EAAAa,GACAc,EAAAvmB,KAAAumB,IAAAD,GACAE,EAAAD,EAAA/pB,IAAA8pB,GAAAxD,IAAA9iB,MACA,OAAAumB,EAAA9kB,SAAAgkB,GAAAe,EAAAN,QAAAzkB,SAAAgkB,GAEA,UAAAzlB,KAAAolB,MAAA3jB,SAAAgkB,GAQA,IAHA,IAAAC,EAAAd,EAAAY,EAAAC,EAAA,GAAAzlB,KAAA4Q,UACA6V,EAAAzmB,KACAkN,EAAA,KACA,CACA,IAAAwZ,EAAAD,EAAAF,IAAAb,GAEAiB,GADAF,EAAA3D,IAAA4D,EAAAlqB,IAAAkpB,IAAAQ,UAAA,GACAzkB,SAAAgkB,GAEA,IADAgB,EAAAC,GACAP,SACA,OAAAQ,EAAAzZ,EAEA,KAAAyZ,EAAAv1B,OAAA,GACAu1B,EAAA,IAAAA,EACAzZ,EAAA,GAAAyZ,EAAAzZ,IASA+Y,EAAAW,YAAA,WACA,OAAA5mB,KAAA8U,MAOAmR,EAAAY,oBAAA,WACA,OAAA7mB,KAAA8U,OAAA,GAOAmR,EAAAa,WAAA,WACA,OAAA9mB,KAAA6U,KAOAoR,EAAAc,mBAAA,WACA,OAAA/mB,KAAA6U,MAAA,GAOAoR,EAAAe,cAAA,WACA,GAAAhnB,KAAAomB,aACA,OAAApmB,KAAAqmB,GAAAnB,GAAA,GAAAllB,KAAAolB,MAAA4B,gBAEA,IADA,IAAA5L,EAAA,GAAApb,KAAA8U,KAAA9U,KAAA8U,KAAA9U,KAAA6U,IACAoS,EAAA,GAAsBA,EAAA,GACtB,IAAA7L,EAAA,GAAA6L,GAD+BA,KAG/B,UAAAjnB,KAAA8U,KAAAmS,EAAA,GAAAA,EAAA,GAOAhB,EAAAE,OAAA,WACA,WAAAnmB,KAAA8U,MAAA,IAAA9U,KAAA6U,KAOAoR,EAAAiB,IAAAjB,EAAAE,OAMAF,EAAAG,WAAA,WACA,OAAApmB,KAAA4Q,UAAA5Q,KAAA8U,KAAA,GAOAmR,EAAAkB,WAAA,WACA,OAAAnnB,KAAA4Q,UAAA5Q,KAAA8U,MAAA,GAOAmR,EAAAmB,MAAA,WACA,aAAApnB,KAAA6U,MAOAoR,EAAAoB,OAAA,WACA,aAAArnB,KAAA6U,MAQAoR,EAAArG,OAAA,SAAA0H,GAGA,OAFA3vB,EAAA2vB,KACAA,EAAAtS,EAAAsS,KACAtnB,KAAA4Q,WAAA0W,EAAA1W,UAAA5Q,KAAA8U,OAAA,OAAAwS,EAAAxS,OAAA,SAEA9U,KAAA8U,OAAAwS,EAAAxS,MAAA9U,KAAA6U,MAAAyS,EAAAzS,MASAoR,EAAAI,GAAAJ,EAAArG,OAOAqG,EAAAsB,UAAA,SAAAD,GACA,OAAAtnB,KAAAqmB,GAAAiB,IASArB,EAAAuB,IAAAvB,EAAAsB,UAQAtB,EAAAwB,GAAAxB,EAAAsB,UAOAtB,EAAA9iB,SAAA,SAAAmkB,GACA,OAAAtnB,KAAA0nB,KAAAJ,GAAA,GASArB,EAAA0B,GAAA1B,EAAA9iB,SAOA8iB,EAAA2B,gBAAA,SAAAN,GACA,OAAAtnB,KAAA0nB,KAAAJ,IAAA,GASArB,EAAA4B,IAAA5B,EAAA2B,gBAQA3B,EAAA6B,GAAA7B,EAAA2B,gBAOA3B,EAAA8B,YAAA,SAAAT,GACA,OAAAtnB,KAAA0nB,KAAAJ,GAAA,GASArB,EAAA+B,GAAA/B,EAAA8B,YAOA9B,EAAA/iB,mBAAA,SAAAokB,GACA,OAAAtnB,KAAA0nB,KAAAJ,IAAA,GASArB,EAAAgC,IAAAhC,EAAA/iB,mBAQA+iB,EAAAiC,GAAAjC,EAAA/iB,mBAQA+iB,EAAA/G,QAAA,SAAAoI,GAGA,GAFA3vB,EAAA2vB,KACAA,EAAAtS,EAAAsS,IACAtnB,KAAAqmB,GAAAiB,GACA,SACA,IAAAa,EAAAnoB,KAAAomB,aACAgC,EAAAd,EAAAlB,aACA,OAAA+B,IAAAC,GACA,GACAD,GAAAC,EACA,EAEApoB,KAAA4Q,SAGA0W,EAAAxS,OAAA,EAAA9U,KAAA8U,OAAA,GAAAwS,EAAAxS,OAAA9U,KAAA8U,MAAAwS,EAAAzS,MAAA,EAAA7U,KAAA6U,MAAA,OAFA7U,KAAA8iB,IAAAwE,GAAAlB,cAAA,KAYAH,EAAAyB,KAAAzB,EAAA/G,QAMA+G,EAAAoC,OAAA,WACA,OAAAroB,KAAA4Q,UAAA5Q,KAAAqmB,GAAAnB,GACAA,EACAllB,KAAAsoB,MAAA/a,IAAAuY,IAQAG,EAAAb,IAAAa,EAAAoC,OAOApC,EAAA1Y,IAAA,SAAAgb,GACA5wB,EAAA4wB,KACAA,EAAAvT,EAAAuT,IAIA,IAAAC,EAAAxoB,KAAA8U,OAAA,GACA2T,EAAA,MAAAzoB,KAAA8U,KACA4T,EAAA1oB,KAAA6U,MAAA,GACA8T,EAAA,MAAA3oB,KAAA6U,IAEA+T,EAAAL,EAAAzT,OAAA,GACA+T,EAAA,MAAAN,EAAAzT,KACAgU,EAAAP,EAAA1T,MAAA,GAGAkU,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAA1T,QAIA,GAGAmU,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEAhlB,GANAqlB,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGAhpB,KAAA4Q,WAQAqV,EAAAkD,SAAA,SAAAC,GAGA,OAFAzxB,EAAAyxB,KACAA,EAAApU,EAAAoU,IACAppB,KAAAuN,IAAA6b,EAAAhE,QASAa,EAAAnD,IAAAmD,EAAAkD,SAOAlD,EAAAoD,SAAA,SAAAC,GACA,GAAAtpB,KAAAmmB,SACA,OAAArB,EAKA,GAJAntB,EAAA2xB,KACAA,EAAAtU,EAAAsU,IAGAnF,EAKA,OAAAvgB,EAJAugB,EAAA3nB,IAAAwD,KAAA6U,IACA7U,KAAA8U,KACAwU,EAAAzU,IACAyU,EAAAxU,MACAqP,EAAAoF,WAAAvpB,KAAA4Q,UAGA,GAAA0Y,EAAAnD,SACA,OAAArB,EACA,GAAA9kB,KAAAqmB,GAAAnB,GACA,OAAAoE,EAAAlC,QAAAlC,EAAAJ,EACA,GAAAwE,EAAAjD,GAAAnB,GACA,OAAAllB,KAAAonB,QAAAlC,EAAAJ,EAEA,GAAA9kB,KAAAomB,aACA,OAAAkD,EAAAlD,aACApmB,KAAAolB,MAAA5oB,IAAA8sB,EAAAlE,OAEAplB,KAAAolB,MAAA5oB,IAAA8sB,GAAAlE,MACK,GAAAkE,EAAAlD,aACL,OAAApmB,KAAAxD,IAAA8sB,EAAAlE,aAGA,GAAAplB,KAAA2nB,GAAA9B,IAAAyD,EAAA3B,GAAA9B,GACA,OAAAjB,EAAA5kB,KAAApI,WAAA0xB,EAAA1xB,WAAAoI,KAAA4Q,UAKA,IAAA4X,EAAAxoB,KAAA8U,OAAA,GACA2T,EAAA,MAAAzoB,KAAA8U,KACA4T,EAAA1oB,KAAA6U,MAAA,GACA8T,EAAA,MAAA3oB,KAAA6U,IAEA+T,EAAAU,EAAAxU,OAAA,GACA+T,EAAA,MAAAS,EAAAxU,KACAgU,EAAAQ,EAAAzU,MAAA,GACA2U,EAAA,MAAAF,EAAAzU,IAEAkU,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEAhlB,GAZAqlB,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGAhpB,KAAA4Q,WASAqV,EAAAzpB,IAAAypB,EAAAoD,SAQApD,EAAAwD,OAAA,SAAAC,GAGA,GAFA/xB,EAAA+xB,KACAA,EAAA1U,EAAA0U,IACAA,EAAAvD,SACA,MAAA1wB,MAAA,oBAaA,IAWAk0B,EAAAlD,EAAAvoB,EArBA,GAAAimB,EAIA,OAAAnkB,KAAA4Q,WACA,aAAA5Q,KAAA8U,OACA,IAAA4U,EAAA7U,MAAA,IAAA6U,EAAA5U,KAUAlR,GANA5D,KAAA4Q,SAAAuT,EAAAyF,MAAAzF,EAAA0F,OACA7pB,KAAA6U,IACA7U,KAAA8U,KACA4U,EAAA7U,IACA6U,EAAA5U,MAEAqP,EAAAoF,WAAAvpB,KAAA4Q,UARA5Q,KAWA,GAAAA,KAAAmmB,SACA,OAAAnmB,KAAA4Q,SAAAiU,EAAAC,EAEA,GAAA9kB,KAAA4Q,SA6BK,CAKL,GAFA8Y,EAAA9Y,WACA8Y,IAAAI,cACAJ,EAAA1B,GAAAhoB,MACA,OAAA6kB,EACA,GAAA6E,EAAA1B,GAAAhoB,KAAA+pB,KAAA,IACA,OAAAhE,EACA7nB,EAAA2mB,MAtCA,CAGA,GAAA7kB,KAAAqmB,GAAAnB,GACA,OAAAwE,EAAArD,GAAAP,IAAA4D,EAAArD,GAAAL,GACAd,EACAwE,EAAArD,GAAAnB,GACAY,GAIA6D,EADA3pB,KAAAgqB,IAAA,GACAzD,IAAAmD,GAAAO,IAAA,IACA5D,GAAAvB,GACA4E,EAAAtD,aAAAN,EAAAE,GAEAS,EAAAzmB,KAAA8iB,IAAA4G,EAAAltB,IAAAmtB,IACAzrB,EAAAyrB,EAAApc,IAAAkZ,EAAAF,IAAAmD,KAIS,GAAAA,EAAArD,GAAAnB,GACT,OAAAllB,KAAA4Q,SAAAiU,EAAAC,EACA,GAAA9kB,KAAAomB,aACA,OAAAsD,EAAAtD,aACApmB,KAAAolB,MAAAmB,IAAAmD,EAAAtE,OACAplB,KAAAolB,MAAAmB,IAAAmD,GAAAtE,MACS,GAAAsE,EAAAtD,aACT,OAAApmB,KAAAumB,IAAAmD,EAAAtE,aACAlnB,EAAA4mB,EAmBA,IADA2B,EAAAzmB,KACAymB,EAAAwB,IAAAyB,IAAA,CAGAC,EAAAh3B,KAAAC,IAAA,EAAAD,KAAAkC,MAAA4xB,EAAA7uB,WAAA8xB,EAAA9xB,aAWA,IAPA,IAAAsyB,EAAAv3B,KAAAw3B,KAAAx3B,KAAAmS,IAAA6kB,GAAAh3B,KAAAy3B,KACAC,EAAAH,GAAA,KAAA1E,EAAA,EAAA0E,EAAA,IAIAI,EAAA1F,EAAA+E,GACAY,EAAAD,EAAA9tB,IAAAktB,GACAa,EAAAnE,cAAAmE,EAAAvC,GAAAvB,IAGA8D,GADAD,EAAA1F,EADA+E,GAAAU,EACArqB,KAAA4Q,WACApU,IAAAktB,GAKAY,EAAAnE,WACAmE,EAAAxE,GAEA5nB,IAAAqP,IAAA+c,GACA7D,IAAA3D,IAAAyH,GAEA,OAAArsB,GASA+nB,EAAAM,IAAAN,EAAAwD,OAOAxD,EAAAuE,OAAA,SAAAd,GAKA,OAJA/xB,EAAA+xB,KACAA,EAAA1U,EAAA0U,IAGAvF,EAOAvgB,GANA5D,KAAA4Q,SAAAuT,EAAAsG,MAAAtG,EAAAuG,OACA1qB,KAAA6U,IACA7U,KAAA8U,KACA4U,EAAA7U,IACA6U,EAAA5U,MAEAqP,EAAAoF,WAAAvpB,KAAA4Q,UAGA5Q,KAAA8iB,IAAA9iB,KAAAumB,IAAAmD,GAAAltB,IAAAktB,KASAzD,EAAA0E,IAAA1E,EAAAuE,OAQAvE,EAAAQ,IAAAR,EAAAuE,OAMAvE,EAAAqC,IAAA,WACA,OAAA1kB,GAAA5D,KAAA6U,KAAA7U,KAAA8U,KAAA9U,KAAA4Q,WAQAqV,EAAA2E,IAAA,SAAAtD,GAGA,OAFA3vB,EAAA2vB,KACAA,EAAAtS,EAAAsS,IACA1jB,EAAA5D,KAAA6U,IAAAyS,EAAAzS,IAAA7U,KAAA8U,KAAAwS,EAAAxS,KAAA9U,KAAA4Q,WAQAqV,EAAA4E,GAAA,SAAAvD,GAGA,OAFA3vB,EAAA2vB,KACAA,EAAAtS,EAAAsS,IACA1jB,EAAA5D,KAAA6U,IAAAyS,EAAAzS,IAAA7U,KAAA8U,KAAAwS,EAAAxS,KAAA9U,KAAA4Q,WAQAqV,EAAA6E,IAAA,SAAAxD,GAGA,OAFA3vB,EAAA2vB,KACAA,EAAAtS,EAAAsS,IACA1jB,EAAA5D,KAAA6U,IAAAyS,EAAAzS,IAAA7U,KAAA8U,KAAAwS,EAAAxS,KAAA9U,KAAA4Q,WAQAqV,EAAA8E,UAAA,SAAAC,GAGA,OAFArzB,EAAAqzB,KACAA,IAAA9E,SACA,IAAA8E,GAAA,IACAhrB,KACAgrB,EAAA,GACApnB,EAAA5D,KAAA6U,KAAAmW,EAAAhrB,KAAA8U,MAAAkW,EAAAhrB,KAAA6U,MAAA,GAAAmW,EAAAhrB,KAAA4Q,UAEAhN,EAAA,EAAA5D,KAAA6U,KAAAmW,EAAA,GAAAhrB,KAAA4Q,WASAqV,EAAAgE,IAAAhE,EAAA8E,UAOA9E,EAAAgF,WAAA,SAAAD,GAGA,OAFArzB,EAAAqzB,KACAA,IAAA9E,SACA,IAAA8E,GAAA,IACAhrB,KACAgrB,EAAA,GACApnB,EAAA5D,KAAA6U,MAAAmW,EAAAhrB,KAAA8U,MAAA,GAAAkW,EAAAhrB,KAAA8U,MAAAkW,EAAAhrB,KAAA4Q,UAEAhN,EAAA5D,KAAA8U,MAAAkW,EAAA,GAAAhrB,KAAA8U,MAAA,OAAA9U,KAAA4Q,WASAqV,EAAA+D,IAAA/D,EAAAgF,WAOAhF,EAAAiF,mBAAA,SAAAF,GAIA,GAHArzB,EAAAqzB,KACAA,IAAA9E,SAEA,KADA8E,GAAA,IAEA,OAAAhrB,KAEA,IAAA8U,EAAA9U,KAAA8U,KACA,OAAAkW,EAAA,GAEApnB,EADA5D,KAAA6U,MACAmW,EAAAlW,GAAA,GAAAkW,EAAAlW,IAAAkW,EAAAhrB,KAAA4Q,UAEAhN,EADS,KAAAonB,EACTlW,EAEAA,IAAAkW,EAAA,GAFA,EAAAhrB,KAAA4Q,WAYAqV,EAAA8D,KAAA9D,EAAAiF,mBAQAjF,EAAAkF,MAAAlF,EAAAiF,mBAMAjF,EAAAmF,SAAA,WACA,OAAAprB,KAAA4Q,SAEAhN,EAAA5D,KAAA6U,IAAA7U,KAAA8U,MAAA,GADA9U,MAQAimB,EAAA6D,WAAA,WACA,OAAA9pB,KAAA4Q,SACA5Q,KACA4D,EAAA5D,KAAA6U,IAAA7U,KAAA8U,MAAA,IAQAmR,EAAAoF,QAAA,SAAAvD,GACA,OAAAA,EAAA9nB,KAAAsrB,YAAAtrB,KAAAurB,aAOAtF,EAAAqF,UAAA,WACA,IAAAta,EAAAhR,KAAA8U,KACA/D,EAAA/Q,KAAA6U,IACA,OACA,IAAA9D,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAiV,EAAAsF,UAAA,WACA,IAAAva,EAAAhR,KAAA8U,KACA/D,EAAA/Q,KAAA6U,IACA,OACA7D,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAb,EAAAsb,UAAA,SAAA3Z,EAAAjB,EAAAkX,GACA,OAAAA,EAAA5X,EAAAub,YAAA5Z,EAAAjB,GAAAV,EAAAwb,YAAA7Z,EAAAjB,IASAV,EAAAub,YAAA,SAAA5Z,EAAAjB,GACA,WAAAV,EACA2B,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAjB,IAUAV,EAAAwb,YAAA,SAAA7Z,EAAAjB,GACA,WAAAV,EACA2B,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAjB,mFC7xCA,IAAA+a,EAAA,oBAAAA,KA6CA,OA1CEA,EAAAp7B,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAK8rB,QAAUD,EAAWE,SAAS,UAAW,MAC9C/rB,KAAKgsB,SAAWH,EAAWE,SAAS,WAAY,IAChD/rB,KAAKisB,QAAUJ,EAAWK,OAAO,UAAW,IAG9CP,EAAAp7B,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpB26B,EAAAp7B,UAAA67B,gBAAV,SAA0Bp7B,GACxB,IAAMq7B,EAAIr7B,EAAO,GACXs7B,EAAQt7B,EAAO,GACfu7B,EAAIv7B,EAAO,GACXw7B,EAAOx7B,EAAO,GACdy7B,EAAOz7B,EAAO,GAIpB,QAAIq7B,EAAEh7B,KAAKD,OAAS,GAA2B,IAAtBk7B,EAAMj7B,KAAKD,QAAkC,IAAlBm7B,EAAEl7B,KAAKD,QAAqC,IAArBo7B,EAAKn7B,KAAKD,QAC5D,IAArBq7B,EAAKp7B,KAAKD,UAGVk7B,EAAMj7B,KAAK,KAAOg7B,EAAEh7B,KAAK,IAAMk7B,EAAEl7B,KAAK,KAAOg7B,EAAEh7B,KAAK,IAAMm7B,EAAKn7B,KAAK,KAAOg7B,EAAEh7B,KAAK,IAClFo7B,EAAKp7B,KAAK,KAAOg7B,EAAEh7B,KAAK,MAGZ,YAAXg7B,EAAEn4B,MAAiC,YAAXm4B,EAAEn4B,MAAuC,YAAfo4B,EAAMp4B,MAAqC,YAAfo4B,EAAMp4B,MACzE,YAAXq4B,EAAEr4B,MAAiC,YAAXq4B,EAAEr4B,MAAsC,YAAds4B,EAAKt4B,MAAoC,YAAds4B,EAAKt4B,MACpE,YAAdu4B,EAAKv4B,MAAoC,YAAdu4B,EAAKv4B,QASzCy3B,EA7CA,GAAsBz9B,EAAAy9B,oGCHtB,IAAAe,EAAA,WACE,SAAAA,EACcC,EAA0D/W,EAC1D/hB,GADAmM,KAAA2sB,iBAA0D3sB,KAAA4V,SAC1D5V,KAAAnM,aAuBhB,OAnBE64B,EAAAn8B,UAAAq7B,WAAA,SAAWC,KAEXa,EAAAn8B,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpB07B,EAAAn8B,UAAA67B,gBAAV,SAA0Bp7B,GACxB,OAAqD,IAAjDgP,KAAK2sB,eAAe9wB,QAAQ7K,EAAO,GAAGkD,OAGtClD,EAAO,GAAGkD,OAASlD,EAAO,GAAGkD,MAKrCw4B,EA1BA,GAAsBx+B,EAAAw+B,0FCAtB,IAAAE,EAAA,oBAAAA,KAkFA,OA/EEA,EAAAr8B,UAAAq7B,WAAA,SAAWC,GAET7rB,KAAKlB,QAAU+sB,EAAWgB,UAAU,WAAY,UAChD7sB,KAAKnB,UAAYgtB,EAAWiB,QAAQ,YAAa,CAAC,EAAG,IACrD9sB,KAAK+sB,MAAQlB,EAAWK,OAAO,QAAS,GACxClsB,KAAKtB,YAAcmtB,EAAWiB,QAAQ,eAAgB,IACtD9sB,KAAKrB,KAAOktB,EAAWiB,QAAQ,OAAQ,CAAC,EAAG,EAAG,EAAG,IACjD9sB,KAAKnH,QAAUgzB,EAAWiB,QAAQ,UAAW,CAAC,EAAG,KAGnDF,EAAAr8B,UAAA47B,YAAA,SAAYn7B,GAGV,IAAKA,GAA6B,IAAlBA,EAAOI,QAAkC,IAAlBJ,EAAOI,OAC5C,OAAO,EAKT,GAA8B,IAA1BJ,EAAO,GAAGK,KAAKD,QAA0C,IAA1BJ,EAAO,GAAGK,KAAKD,OAChD,OAAO,EAMT,GAFoBJ,EAAO,GAAGK,KAAK,KACXL,EAAO,GAAGK,KAAK,GAAK2O,KAAK+sB,MAE/C,OAAO,EAIT,GAAsB,IAAlB/7B,EAAOI,SAA2C,IAA1BJ,EAAO,GAAGK,KAAKD,QAAgBJ,EAAO,GAAGK,KAAK,KAAOL,EAAO,GAAGK,KAAK,IAC9F,OAAO,EAGT,IAAM27B,EAAch8B,EAAO,GAAGK,KAAKD,OAAS,EAE5C,OAAI4O,KAAKnB,UAAUzN,SAAW47B,IAK1BhtB,KAAKnH,QAAQzH,SAAW47B,IAKxBhtB,KAAKrB,KAAKvN,SAAyB,EAAd47B,KAMO,IAA5BhtB,KAAKtB,YAAYtN,QAAgB4O,KAAKtB,YAAYtN,SAAWJ,EAAO,GAAGK,KAAKD,OAAS,IAIlF4O,KAAKosB,gBAAgBp7B,OAGpB47B,EAAAr8B,UAAA67B,gBAAV,SAA0Bp7B,GAExB,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,OAIxB,IAAlBlD,EAAOI,QAAmC,YAAnBJ,EAAO,GAAGkD,OAazC04B,EAlFA,GAAsB1+B,EAAA0+B,mtBCLtB,IAAAK,EAAAv+B,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAGAw+B,EAAA,SAAAhiB,GAAA,SAAAgiB,mDAKA,OAL+B/hB,EAAA+hB,EAAAhiB,GAC7BgiB,EAAA38B,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQm8B,EAAOn8B,EAAO,GAAIA,EAAO,MAG5Ck8B,EALA,CAA+BD,EAAAG,QAO/B,SAAgBD,EAAO7+B,EAAW2D,GAC1B,IAAAe,EAAAC,EAAA2M,EAAAtO,WAAAC,sBAAAjD,EAAA+C,KAAAY,EAAAZ,MAAA,GAACG,EAAAwB,EAAA,GAAOvB,EAAAuB,EAAA,GACRq6B,EAAa,CAAC77B,EAAMA,EAAMJ,OAAS,GAAIK,EAAMA,EAAML,OAAS,IAC5D2D,EAAQ6K,EAAAzN,cAAcC,UAAUZ,EAAOC,GAAO,GACpD,IAAKsD,EAEH,MAAM,IAAIU,MAAM,iDAUlB,IARA,IACM63B,EADO1tB,EAAA9L,UAAUE,KAAKe,IACEs4B,EAAW,GAAKA,EAAW,IAEnD/xB,EAAI,IAAIxK,EAAAmD,OAAOc,EAAkB,YAAXzG,EAAE4F,MAAiC,YAAXjC,EAAEiC,KAAqB,UAAY,WACnFq5B,EAAU,EACRr0B,EAAU,IAAIpG,MAAciC,EAAM3D,QAClCo8B,EAAW,IAAI16B,MAAcxE,EAAE+C,KAAKD,QACpCq8B,EAAW,IAAI36B,MAAcb,EAAEZ,KAAKD,QACjC7C,EAAI,EAAGA,EAAI++B,EAAe/+B,IAAK,CAEtC2K,EAAQnE,EAAM3D,OAAS,GAAK,EAC5B8H,EAAQnE,EAAM3D,OAAS,GAAK,EAE5B,IADA,IAAIuD,EAAOpG,EACFqG,EAAIG,EAAM3D,OAAS,EAAGwD,GAAK,EAAGA,IACrCsE,EAAQtE,GAAKD,EAAOI,EAAMH,GAC1BD,EAAOhC,KAAKkC,MAAMF,EAAOI,EAAMH,IAGjCgL,EAAAzN,cAAcqB,UAAU0F,EAAS5K,EAAE+C,KAAMm8B,GACzC5tB,EAAAzN,cAAcqB,UAAU0F,EAASjH,EAAEZ,KAAMo8B,GAEzC,IAAMC,EAAUF,EAASp8B,QAAU,EAAI,EAAIwO,EAAA9L,UAAUmF,gBAAgBu0B,EAAUl/B,EAAEuK,QAAS9D,EAAM3D,OAAS,GACnGu8B,EAAUF,EAASr8B,QAAU,EAAI,EAAIwO,EAAA9L,UAAUmF,gBAAgBw0B,EAAUx7B,EAAE4G,QAAS9D,EAAM3D,OAAS,GAEzGw8B,EACIt/B,EAAE6T,UAAUuc,SAASgP,GAAUz7B,EAAEkQ,UAAUuc,SAASiP,GAAUryB,EAAE6G,UAAUuc,SAAS6O,IAAU,GAAO,EAAO,EAAG,EAC9GF,EAAW,GAAIA,EAAW,GAAI77B,EAAMA,EAAMJ,OAAS,IACvDm8B,GAAWF,EAAW,GAAKA,EAAW,GAExC,OAAO/xB,EAST,SAAgBsyB,EACZC,EAA8BtB,EAA8BuB,EAA8BC,EAC1FC,EAAiB1xB,EAAe2xB,EAAc/3B,EAAWE,EAAWD,GACtE,OAAI43B,GAAUC,EAgFhB,SACIH,EAA8BtB,EAA8BuB,EAA8BxxB,EAC1F2xB,EAAc/3B,EAAWE,EAAWD,GAEtC,IADA,IAAIu3B,EAAU,EAAGC,EAAU,EAAGO,EAAU,EAC/BC,EAAK,EAAGA,EAAKj4B,EAAGi4B,IAAM,CAC7B,IAAK,IAAIC,EAAK,EAAGA,EAAKh4B,EAAGg4B,IAAM,CAE7B,IADA,IAAIC,EAAM,EACDC,EAAK,EAAGA,EAAKn4B,EAAGm4B,IACvBD,GAAOR,EAAEH,GAAWnB,EAAEoB,GACtBD,GAAWx3B,EACXy3B,GAAW,EAEbD,GAAWx3B,EAAIC,EACfw3B,GAAWx3B,EACX23B,EAAEI,GAAW5xB,EAAQ+xB,EAAMJ,EAAOH,EAAEI,GACpCA,IACAP,GAAWx3B,EAEbw3B,GAAWv3B,EAAID,EACfu3B,KAlGOa,CAAcV,EAAGtB,EAAGuB,EAAGxxB,EAAO2xB,EAAM/3B,EAAGE,EAAGD,GACxC43B,EAgCb,SACIF,EAA8BtB,EAA8BuB,EAA8BxxB,EAC1F2xB,EAAc/3B,EAAWE,EAAWD,GAEtC,IADA,IAAIu3B,EAAU,EAAGC,EAAU,EAAGO,EAAU,EAC/BC,EAAK,EAAGA,EAAKj4B,EAAGi4B,IAAM,CAC7B,IAAK,IAAIC,EAAK,EAAGA,EAAKh4B,EAAGg4B,IAAM,CAE7B,IADA,IAAIC,EAAM,EACDC,EAAK,EAAGA,EAAKn4B,EAAGm4B,IACvBD,GAAOR,EAAEH,GAAWnB,EAAEoB,GACtBD,GAAWx3B,EACXy3B,GAAWv3B,EAEbs3B,GAAWx3B,EAAIC,EACfw3B,GAAWv3B,EAAID,EACf23B,EAAEI,GAAW5xB,EAAQ+xB,EAAMJ,EAAOH,EAAEI,GACpCA,IACAP,IAEFA,GAAWv3B,EACXs3B,KAlDOc,CAAYX,EAAGtB,EAAGuB,EAAGxxB,EAAO2xB,EAAM/3B,EAAGE,EAAGD,GACtC63B,EAqDb,SACIH,EAA8BtB,EAA8BuB,EAA8BxxB,EAC1F2xB,EAAc/3B,EAAWE,EAAWD,GAEtC,IADA,IAAIu3B,EAAU,EAAGC,EAAU,EAAGO,EAAU,EAC/BC,EAAK,EAAGA,EAAKj4B,EAAGi4B,IAAM,CAC7B,IAAK,IAAIC,EAAK,EAAGA,EAAKh4B,EAAGg4B,IAAM,CAE7B,IADA,IAAIC,EAAM,EACDC,EAAK,EAAGA,EAAKn4B,EAAGm4B,IACvBD,GAAOR,EAAEH,GAAWnB,EAAEoB,GACtBD,GAAW,EACXC,GAAW,EAEbD,GAAWv3B,EACXw3B,GAAWx3B,EACX23B,EAAEI,GAAW5xB,EAAQ+xB,EAAMJ,EAAOH,EAAEI,GACpCA,IACAP,GAAWx3B,EAEbw3B,GAAWv3B,EAAID,EACfu3B,GAAWv3B,GAvEJs4B,CAAYZ,EAAGtB,EAAGuB,EAAGxxB,EAAO2xB,EAAM/3B,EAAGE,EAAGD,GAMnD,SACI03B,EAA8BtB,EAA8BuB,EAA8BxxB,EAC1F2xB,EAAc/3B,EAAWE,EAAWD,GAEtC,IADA,IAAIu3B,EAAU,EAAGC,EAAU,EAAGO,EAAU,EAC/BC,EAAK,EAAGA,EAAKj4B,EAAGi4B,IAAM,CAC7B,IAAK,IAAIC,EAAK,EAAGA,EAAKh4B,EAAGg4B,IAAM,CAE7B,IADA,IAAIC,EAAM,EACDC,EAAK,EAAGA,EAAKn4B,EAAGm4B,IACvBD,GAAOR,EAAEH,GAAWnB,EAAEoB,GACtBD,GAAW,EACXC,GAAWv3B,EAEbs3B,GAAWv3B,EACXw3B,GAAWv3B,EAAID,EACf23B,EAAEI,GAAW5xB,EAAQ+xB,EAAMJ,EAAOH,EAAEI,GACpCA,IACAP,IAEFA,GAAWv3B,EACXs3B,GAAWv3B,GAvBJu4B,CAAUb,EAAGtB,EAAGuB,EAAGxxB,EAAO2xB,EAAM/3B,EAAGE,EAAGD,GA/DpCjI,EAAAg/B,YAObh/B,EAAAi/B,SA8CAj/B,EAAA0/B,0FCrDA,IAAAR,EAAA,oBAAAA,KAgCA,OA7BEA,EAAA78B,UAAAq7B,WAAA,SAAWC,KAEXuB,EAAA78B,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,UAIlBJ,EAAO,GAAGK,KAAKL,EAAO,GAAGK,KAAKD,OAAS,KAAOJ,EAAO,GAAGK,KAAKL,EAAO,GAAGK,KAAKD,OAAS,IAIlF4O,KAAKosB,gBAAgBp7B,KAGpBo8B,EAAA78B,UAAA67B,gBAAV,SAA0Bp7B,GACxB,OAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,SAIvB,YAAnBlD,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,OAI1ClD,EAAO,GAAGkD,OAASlD,EAAO,GAAGkD,OAMrCk5B,EAhCA,GAAsBl/B,EAAAk/B,wFCAtB,IAAAuB,EAAA,oBAAAA,KAyCA,OAtCEA,EAAAp+B,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAK+tB,OAA4C,IAAnClC,EAAWK,OAAO,SAAU,GAC1ClsB,KAAKguB,OAA4C,IAAnCnC,EAAWK,OAAO,SAAU,GAC1ClsB,KAAK1D,MAAQuvB,EAAWE,SAAS,QAAS,GAC1C/rB,KAAKiuB,KAAOpC,EAAWE,SAAS,OAAQ,IAG1C4C,EAAAp+B,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,WAKQ,IAA1BJ,EAAO,GAAGK,KAAKD,QAA0C,IAA1BJ,EAAO,GAAGK,KAAKD,SAI3C4O,KAAKosB,gBAAgBp7B,KAGpB29B,EAAAp+B,UAAA67B,gBAAV,SAA0Bp7B,GACxB,QAAwB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MACvB,YAAnBlD,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MACvB,YAAnBlD,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,QAI1ClD,EAAO,GAAGkD,OAASlD,EAAO,GAAGkD,MAAUlD,EAAO,GAAGkD,OAASlD,EAAO,GAAGkD,OAW7Ey6B,EAzCA,GAAsBzgC,EAAAygC,saCAtB,IAAAC,EAAA,oBAAAA,KAuBA,OAtBEA,EAAAr+B,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpB49B,EAAAr+B,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MAalD06B,EAvBA,GAyBAC,EAAA,SAAA3jB,GAAA,SAAA2jB,mDAgBA,OAhB0C1jB,EAAA0jB,EAAA3jB,GAGxC2jB,EAAAt+B,UAAAq7B,WAAA,SAAWC,GAST,GARA7rB,KAAKlB,QAAU+sB,EAAWgB,UAAU,WAAY,UAChD7sB,KAAKtB,YAAcmtB,EAAWiB,QAAQ,gBACtC9sB,KAAKnH,QAAUgzB,EAAWiB,QAAQ,UAAW,IAC7C9sB,KAAKrB,KAAOktB,EAAWiB,QAAQ,OAAQ,IACvC9sB,KAAK8uB,gBAAiE,IAA9CjD,EAAWK,OAAO,oBAAqB,GAC/DlsB,KAAK+uB,SAAWlD,EAAWK,OAAO,YAAa,GAGzB,IAAlBlsB,KAAK+uB,SACP,MAAM,IAAIt5B,MAAM,2EAGtBo5B,EAhBA,CAA0CD,GAApB1gC,EAAA2gC,cAkBtB,IAAAG,EAAA,SAAA9jB,GAAA,SAAA8jB,mDAMA,OANgD7jB,EAAA6jB,EAAA9jB,GAG9C8jB,EAAAz+B,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAK8uB,gBAAiE,IAA9CjD,EAAWK,OAAO,oBAAqB,IAEnE8C,EANA,CAAgDJ,GAA1B1gC,EAAA8gC,oBAQtB,IAAAC,EAAA,SAAA/jB,GAAA,SAAA+jB,mDAqBA,OArBsC9jB,EAAA8jB,EAAA/jB,GAGpC+jB,EAAA1+B,UAAAq7B,WAAA,SAAWC,GAST,GARA7rB,KAAKlB,QAAU+sB,EAAWgB,UAAU,WAAY,UAChD7sB,KAAKtB,YAAcmtB,EAAWiB,QAAQ,gBACtC9sB,KAAKnH,QAAUgzB,EAAWiB,QAAQ,UAAW,IAC7C9sB,KAAKrB,KAAOktB,EAAWiB,QAAQ,OAAQ,IACvC9sB,KAAK+uB,SAAWlD,EAAWK,OAAO,YAAa,GAC/ClsB,KAAKkvB,aAAerD,EAAWK,OAAO,gBAAiB,GAG7B,IAAtBlsB,KAAKkvB,aACP,MAAM,IAAIz5B,MAAM,+DAElB,GAAsB,IAAlBuK,KAAK+uB,SACP,MAAM,IAAIt5B,MAAM,uEAKtBw5B,EArBA,CAAsCL,GAAhB1gC,EAAA+gC,UAuBtB,IAAAE,EAAA,SAAAjkB,GAAA,SAAAikB,mDAIA,OAJ4ChkB,EAAAgkB,EAAAjkB,GAG1CikB,EAAA5+B,UAAAq7B,WAAA,SAAWC,KACbsD,EAJA,CAA4CP,GAAtB1gC,EAAAihC,+FC1EtB,IAAAC,EAAA,oBAAAA,KAwBA,OArBEA,EAAA7+B,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKzH,KAAOszB,EAAWK,OAAO,OAAQ,IAGxCkD,EAAA7+B,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpBo+B,EAAA7+B,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MAQlDk7B,EAxBA,GAAsBlhC,EAAAkhC,yFCAtB,IAAAC,EAAA,oBAAAA,KAsCA,OAnCEA,EAAA9+B,UAAAq7B,WAAA,SAAWC,KAEXwD,EAAA9+B,UAAA47B,YAAA,SAAYn7B,GACV,IAAKA,GAA4B,IAAlBA,EAAOI,OACpB,OAAO,EAIT,IADA,IAAMA,EAASJ,EAAO,GAAGK,KAAKD,OACrB7C,EAAI,EAAGA,EAAIyC,EAAOI,OAAQ7C,IAAK,CACtC,GAAI6C,IAAWJ,EAAOzC,GAAG8C,KAAKD,OAC5B,OAAO,EAGT,IAAK,IAAIwD,EAAI,EAAGA,EAAIxD,EAAQwD,IAC1B,GAAI5D,EAAO,GAAGK,KAAKuD,KAAO5D,EAAOzC,GAAG8C,KAAKuD,GACvC,OAAO,EAKb,OAAOoL,KAAKosB,gBAAgBp7B,IAGpBq+B,EAAA9+B,UAAA67B,gBAAV,SAA0Bp7B,GACxB,GAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,KAC5C,OAAO,EAET,IAAK,IAAI3F,EAAI,EAAGA,EAAIyC,EAAOI,OAAQ7C,IACjC,GAAIyC,EAAO,GAAGkD,OAASlD,EAAOzC,GAAG2F,KAC/B,OAAO,EAIX,OAAO,GAEXm7B,EAtCA,GAAsBnhC,EAAAmhC,qBCPtB,IAOAC,EACAC,EARApgB,EAAAhhB,EAAAD,QAAA,GAUA,SAAAshC,IACA,UAAA/5B,MAAA,mCAEA,SAAAg6B,IACA,UAAAh6B,MAAA,qCAsBA,SAAAi6B,EAAAC,GACA,GAAAL,IAAAplB,WAEA,OAAAA,WAAAylB,EAAA,GAGA,IAAAL,IAAAE,IAAAF,IAAAplB,WAEA,OADAolB,EAAAplB,WACAA,WAAAylB,EAAA,GAEA,IAEA,OAAAL,EAAAK,EAAA,GACK,MAAA/mB,GACL,IAEA,OAAA0mB,EAAAxgC,KAAA,KAAA6gC,EAAA,GACS,MAAA/mB,GAET,OAAA0mB,EAAAxgC,KAAAkR,KAAA2vB,EAAA,MAvCA,WACA,IAEAL,EADA,mBAAAplB,WACAA,WAEAslB,EAEK,MAAA5mB,GACL0mB,EAAAE,EAEA,IAEAD,EADA,mBAAAzlB,aACAA,aAEA2lB,EAEK,MAAA7mB,GACL2mB,EAAAE,GAjBA,GAwEA,IAEAG,EAFAC,EAAA,GACAC,GAAA,EAEAC,GAAA,EAEA,SAAAC,IACAF,GAAAF,IAGAE,GAAA,EACAF,EAAAx+B,OACAy+B,EAAAD,EAAAzQ,OAAA0Q,GAEAE,GAAA,EAEAF,EAAAz+B,QACA6+B,KAIA,SAAAA,IACA,IAAAH,EAAA,CAGA,IAAAI,EAAAR,EAAAM,GACAF,GAAA,EAGA,IADA,IAAAvb,EAAAsb,EAAAz+B,OACAmjB,GAAA,CAGA,IAFAqb,EAAAC,EACAA,EAAA,KACAE,EAAAxb,GACAqb,GACAA,EAAAG,GAAAjY,MAGAiY,GAAA,EACAxb,EAAAsb,EAAAz+B,OAEAw+B,EAAA,KACAE,GAAA,EAnEA,SAAAK,GACA,GAAAZ,IAAAzlB,aAEA,OAAAA,aAAAqmB,GAGA,IAAAZ,IAAAE,IAAAF,IAAAzlB,aAEA,OADAylB,EAAAzlB,aACAA,aAAAqmB,GAEA,IAEAZ,EAAAY,GACK,MAAAvnB,GACL,IAEA,OAAA2mB,EAAAzgC,KAAA,KAAAqhC,GACS,MAAAvnB,GAGT,OAAA2mB,EAAAzgC,KAAAkR,KAAAmwB,KAgDAC,CAAAF,IAiBA,SAAAG,EAAAV,EAAAztB,GACAlC,KAAA2vB,MACA3vB,KAAAkC,QAYA,SAAAouB,KA5BAnhB,EAAAohB,SAAA,SAAAZ,GACA,IAAAa,EAAA,IAAA19B,MAAA3B,UAAAC,OAAA,GACA,GAAAD,UAAAC,OAAA,EACA,QAAA7C,EAAA,EAAuBA,EAAA4C,UAAAC,OAAsB7C,IAC7CiiC,EAAAjiC,EAAA,GAAA4C,UAAA5C,GAGAshC,EAAA/zB,KAAA,IAAAu0B,EAAAV,EAAAa,IACA,IAAAX,EAAAz+B,QAAA0+B,GACAJ,EAAAO,IASAI,EAAA9/B,UAAAunB,IAAA,WACA9X,KAAA2vB,IAAAvR,MAAA,KAAApe,KAAAkC,QAEAiN,EAAAshB,MAAA,UACAthB,EAAAuhB,SAAA,EACAvhB,EAAAwhB,IAAA,GACAxhB,EAAAyhB,KAAA,GACAzhB,EAAApL,QAAA,GACAoL,EAAAC,SAAA,GAIAD,EAAA0hB,GAAAP,EACAnhB,EAAA2hB,YAAAR,EACAnhB,EAAA4hB,KAAAT,EACAnhB,EAAA6hB,IAAAV,EACAnhB,EAAA8hB,eAAAX,EACAnhB,EAAA+hB,mBAAAZ,EACAnhB,EAAAgiB,KAAAb,EACAnhB,EAAAiiB,gBAAAd,EACAnhB,EAAAkiB,oBAAAf,EAEAnhB,EAAAmiB,UAAA,SAAApiC,GAAqC,UAErCigB,EAAAoiB,QAAA,SAAAriC,GACA,UAAAuG,MAAA,qCAGA0Z,EAAAqiB,IAAA,WAA2B,WAC3BriB,EAAAsiB,MAAA,SAAA7V,GACA,UAAAnmB,MAAA,mCAEA0Z,EAAAuiB,MAAA,WAA4B,sQCvL5B,IAAAC,EAAAroB,EAAA5a,EAAA,MAEA+H,EAAA6S,EAAA5a,EAAA,KASAkjC,EAAA,WAMA,OANA,WACkB5xB,KAAAvJ,KAAOA,EACPuJ,KAAA6xB,QAAUp7B,EAAKo7B,QACf7xB,KAAA2xB,SAAWA,EAEpB3xB,KAAA8xB,OAAQ,GALjB,GAQa5jC,EAAAyiC,IAAW,IAAIiB,iDCf5BG,2KAAArjC,EAAA,KAIM+H,EAAas7B,GADoB,oBAAXvjC,OAA0BA,OAASif,GAEpDhX,KAAOA,EAGlBtI,EAAAD,QAAS6jC,gRCTT,IAAAC,EAAAtjC,EAAA,GAGAujC,EAAAvjC,EAAA,IACAwjC,EAAAxjC,EAAA,IACAyjC,EAAAzjC,EAAA,IACA0jC,EAAA1jC,EAAA,IACA2jC,EAAA3jC,EAAA,IACA4jC,EAAA5jC,EAAA,IACA6jC,EAAA7jC,EAAA,IACA8jC,EAAA9jC,EAAA,IACA+jC,EAAA/jC,EAAA,IACAgkC,EAAAhkC,EAAA,IACAikC,EAAAjkC,EAAA,IACAkkC,EAAAlkC,EAAA,IACAu+B,EAAAv+B,EAAA,IACAmkC,EAAAnkC,EAAA,IACAokC,EAAAxpB,EAAA5a,EAAA,KACAipB,EAAAjpB,EAAA,IACAqkC,EAAArkC,EAAA,IACAskC,EAAAtkC,EAAA,IACAukC,EAAAvkC,EAAA,IACAwkC,EAAAxkC,EAAA,IACAykC,EAAAzkC,EAAA,IACA0kC,EAAA1kC,EAAA,IACA2kC,EAAA/pB,EAAA5a,EAAA,KACA4kC,EAAA5kC,EAAA,IACA6kC,EAAA7kC,EAAA,IAEaR,EAAAslC,qBAAyD,CACpE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIF,EAAAG,WAAWzB,EAAA9f,aAAcmhB,EAASK,OAC9D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIJ,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASM,QAC9D,CAAC,QAAS,GAAI,KAAM,WAAM,WAAIL,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASO,SAC/D,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIzB,EAAA0B,YAAY7B,EAAA9f,aAAc,SAAC4hB,EAAIC,GAAO,OAACD,EAAKC,MACxE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI5B,EAAA0B,YAAY,CAAC,QAAS,SAACC,EAAIC,GAAO,OAACD,GAAMC,MACrE,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI9B,EAAA+B,YAC/B,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIV,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASY,QAC9D,CAAC,QAAS,GAAI,KAAM,WAAM,WAAIX,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASa,SAC/D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIZ,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASc,QAC9D,CAAC,QAAS,GAAI,KAAM,WAAM,WAAIb,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASe,SAC/D,CAAC,cAAe,GAAI,KAAM,WAAM,WAAIvB,EAAAwB,iBACpC,CAAC,qBAAsB,GAAI,KAAM,WAAM,WAAInC,EAAAoC,wBAC3C,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIhB,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASlJ,QAC9D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAImJ,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASkB,KAAMlB,EAASmB,mBAC7E,CAAC,SAAU,GAAI,KAAM,WAAM,WAAIpC,EAAAqC,YAC/B,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIpC,EAAAqC,UAC7B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIpB,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASsB,OAC7D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIrB,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASuB,QAC9D,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIzC,EAAA0B,YAAY7B,EAAA9f,aAAc,SAAC4hB,EAAIC,GAAO,OAACD,EAAKC,MACxE,CAAC,UAAW,GAAI,KAAM,WAAM,WAAIzB,EAAAuC,aAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIvB,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASyB,IAAKzB,EAAS0B,kBAC3E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIzB,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAAS2B,OAC7D,CAAC,UAAW,GAAI,KAAM,WAAM,WAAIzC,EAAA0C,aAChC,CAAC,QAAS,GAAI,KAAM,WAAM,WAAI3B,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASx+B,SAC/D,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI29B,EAAA0C,YAC/B,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIzC,EAAA0C,UAC7B,CAAC,oBAAqB,GAAI,KAAM,WAAM,WAAItC,EAAAuC,uBAC1C,CAAC,gBAAiB,GAAI,KAAM,WAAM,WAAIvC,EAAAwC,mBACtC,CAAC,cAAe,GAAI,KAAM,WAAM,WAAI3C,EAAA4C,iBACpC,CAAC,wBAAyB,GAAI,KAAM,WAAM,WAAI3C,EAAA4C,2BAC9C,CAAC,QAAS,GAAI,KAAM,WAAM,WAAIjC,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASmC,WAAOtjC,EAAW,UACjF,CAAC,YAAa,GAAI,KAAM,WAAM,WAAIohC,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASoC,UAAWpC,EAASqC,wBACvF,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIpC,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASvuB,OAC7D,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI8tB,EAAA+C,SAC5B,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI1I,EAAAC,YAC/B,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI2F,EAAA+C,aAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIzD,EAAA0B,YAAY7B,EAAA9f,aAAc,SAAC4hB,EAAIC,GAAO,OAACD,EAAKC,MACxE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIT,EAAAG,WAAWzB,EAAA9f,aAAcmhB,EAASjO,OAC9D,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIkO,EAAAG,WAAW,CAAC,QAASJ,EAAS/K,SAAKp2B,EAAW,UAC1E,CAAC,KAAM,GAAI,KAAM,WAAM,WAAIigC,EAAA0B,YAAY,CAAC,QAAS,SAACC,EAAIC,GAAO,OAACD,GAAMC,MACpE,CAAC,QAAS,GAAI,KAAM,WAAM,WAAI5B,EAAA0B,YAAY7B,EAAA9f,aAAc,SAAC4hB,EAAIC,GAAO,OAACD,GAAM,EAAIA,EAAKA,EAAKC,MACzF,CAAC,aAAc,GAAI,KAAM,WAAM,WAAIT,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASwC,cACpE,CAAC,eAAgB,GAAI,KAAM,WAAM,WAAI/C,EAAUgD,kBAC/C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAIhD,EAAUiD,eAC5C,CAAC,aAAc,GAAI,KAAM,WAAM,WAAIjD,EAAUkD,gBAC7C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAIlD,EAAUmD,eAC5C,CAAC,aAAc,GAAI,KAAM,WAAM,WAAInD,EAAUoD,gBAC7C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAIpD,EAAUqD,eAC5C,CAAC,kBAAmB,GAAI,KAAM,WAAM,WAAIrD,EAAUsD,qBAClD,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI9C,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASgD,QAC9D,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI1e,EAAA2e,aAChC,CAAC,UAAW,GAAI,KAAM,WAAM,WAAIhD,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASkD,WACjE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIjD,EAAAG,WAAWzB,EAAA9f,aAAcmhB,EAASmD,QAC/D,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIlD,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASoD,OAC7D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAInD,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASqD,QAC9D,CAAC,QAAS,GAAI,MAAO,WAAM,WAAI3D,EAAA4D,cAC/B,CAAC,QAAS,GAAI,MAAO,WAAM,WAAI5D,EAAA6D,WAC/B,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI5D,EAAA6D,aAChC,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIvD,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAASyD,QAC9D,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI7D,EAAA8D,aAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI5E,EAAA0B,YAAY7B,EAAA9f,aAAc,SAAC4hB,EAAIC,GAAO,OAACD,EAAKC,MACxE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIb,EAAA8D,SAC5B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI1D,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAAS4D,OAC7D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI3D,EAAAG,WAAWzB,EAAA5f,YAAaihB,EAAS6D,QAC9D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI/D,EAAAgE,UAC7B,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI/D,EAAAgE,eAClC,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI7D,EAAA8D,eAClC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIlF,EAAA0B,YAAY,CAAC,QAAS,SAACC,EAAIC,GAAO,OAACD,EAAKC,qCCnGtE5lC,EAAAD,QAAAykB,EAEA,IAEA2kB,EAFA5pB,EAAgBhf,EAAQ,GAIxBkgB,EAAAlB,EAAAkB,SACAN,EAAAZ,EAAAY,OACAI,EAAAhB,EAAAgB,KAWA,SAAA6oB,EAAAC,EAAAjjB,EAAA6G,GAMApb,KAAAw3B,KAMAx3B,KAAAuU,MAMAvU,KAAAlF,UAAA5I,EAMA8N,KAAAob,MAIA,SAAAkV,KAUA,SAAAmH,EAAA7jB,GAMA5T,KAAA03B,KAAA9jB,EAAA8jB,KAMA13B,KAAA23B,KAAA/jB,EAAA+jB,KAMA33B,KAAAuU,IAAAX,EAAAW,IAMAvU,KAAAlF,KAAA8Y,EAAAgkB,OAQA,SAAAjlB,IAMA3S,KAAAuU,IAAA,EAMAvU,KAAA03B,KAAA,IAAAH,EAAAjH,EAAA,KAMAtwB,KAAA23B,KAAA33B,KAAA03B,KAMA13B,KAAA43B,OAAA,KAqDA,SAAAC,EAAAzc,EAAA9a,EAAArC,GACAqC,EAAArC,GAAA,IAAAmd,EAoBA,SAAA0c,EAAAvjB,EAAA6G,GACApb,KAAAuU,MACAvU,KAAAlF,UAAA5I,EACA8N,KAAAob,MA8CA,SAAA2c,EAAA3c,EAAA9a,EAAArC,GACA,KAAAmd,EAAApK,IACA1Q,EAAArC,KAAA,IAAAmd,EAAArK,GAAA,IACAqK,EAAArK,IAAAqK,EAAArK,KAAA,EAAAqK,EAAApK,IAAA,QACAoK,EAAApK,MAAA,EAEA,KAAAoK,EAAArK,GAAA,KACAzQ,EAAArC,KAAA,IAAAmd,EAAArK,GAAA,IACAqK,EAAArK,GAAAqK,EAAArK,KAAA,EAEAzQ,EAAArC,KAAAmd,EAAArK,GA2CA,SAAAinB,EAAA5c,EAAA9a,EAAArC,GACAqC,EAAArC,GAAA,IAAAmd,EACA9a,EAAArC,EAAA,GAAAmd,IAAA,MACA9a,EAAArC,EAAA,GAAAmd,IAAA,OACA9a,EAAArC,EAAA,GAAAmd,IAAA,GAtKAzI,EAAA1iB,OAAAyd,EAAAtM,OACA,WACA,OAAAuR,EAAA1iB,OAAA,WACA,WAAAqnC,OAIA,WACA,WAAA3kB,GAQAA,EAAA4L,MAAA,SAAAvqB,GACA,WAAA0Z,EAAA5a,MAAAkB,IAKA0Z,EAAA5a,gBACA6f,EAAA4L,MAAA7Q,EAAAiB,KAAAgE,EAAA4L,MAAA7Q,EAAA5a,MAAAvC,UAAAmuB,WAUA/L,EAAApiB,UAAA0nC,MAAA,SAAAT,EAAAjjB,EAAA6G,GAGA,OAFApb,KAAA23B,KAAA33B,KAAA23B,KAAA78B,KAAA,IAAAy8B,EAAAC,EAAAjjB,EAAA6G,GACApb,KAAAuU,OACAvU,MA8BA83B,EAAAvnC,UAAAlB,OAAAY,OAAAsnC,EAAAhnC,WACAunC,EAAAvnC,UAAAinC,GAxBA,SAAApc,EAAA9a,EAAArC,GACA,KAAAmd,EAAA,KACA9a,EAAArC,KAAA,IAAAmd,EAAA,IACAA,KAAA,EAEA9a,EAAArC,GAAAmd,GA0BAzI,EAAApiB,UAAAsjB,OAAA,SAAAjkB,GAWA,OARAoQ,KAAAuU,MAAAvU,KAAA23B,KAAA33B,KAAA23B,KAAA78B,KAAA,IAAAg9B,GACAloC,KAAA,GACA,MACAA,EAAA,QACAA,EAAA,UACAA,EAAA,YACA,EACAA,IAAA2kB,IACAvU,MASA2S,EAAApiB,UAAA4jB,MAAA,SAAAvkB,GACA,OAAAA,EAAA,EACAoQ,KAAAi4B,MAAAF,EAAA,GAAAnpB,EAAAgW,WAAAh1B,IACAoQ,KAAA6T,OAAAjkB,IAQA+iB,EAAApiB,UAAA2nC,OAAA,SAAAtoC,GACA,OAAAoQ,KAAA6T,QAAAjkB,GAAA,EAAAA,GAAA,UAsBA+iB,EAAApiB,UAAA4mB,OAAA,SAAAvnB,GACA,IAAAihB,EAAAjC,EAAAvN,KAAAzR,GACA,OAAAoQ,KAAAi4B,MAAAF,EAAAlnB,EAAAzf,SAAAyf,IAUA8B,EAAApiB,UAAAwjB,MAAApB,EAAApiB,UAAA4mB,OAQAxE,EAAApiB,UAAA4nC,OAAA,SAAAvoC,GACA,IAAAihB,EAAAjC,EAAAvN,KAAAzR,GAAAwoC,WACA,OAAAp4B,KAAAi4B,MAAAF,EAAAlnB,EAAAzf,SAAAyf,IAQA8B,EAAApiB,UAAA8nC,KAAA,SAAAzoC,GACA,OAAAoQ,KAAAi4B,MAAAJ,EAAA,EAAAjoC,EAAA,MAeA+iB,EAAApiB,UAAA+nC,QAAA,SAAA1oC,GACA,OAAAoQ,KAAAi4B,MAAAD,EAAA,EAAApoC,IAAA,IASA+iB,EAAApiB,UAAAgoC,SAAA5lB,EAAApiB,UAAA+nC,QAQA3lB,EAAApiB,UAAAioC,QAAA,SAAA5oC,GACA,IAAAihB,EAAAjC,EAAAvN,KAAAzR,GACA,OAAAoQ,KAAAi4B,MAAAD,EAAA,EAAAnnB,EAAAE,IAAAknB,MAAAD,EAAA,EAAAnnB,EAAAG,KAUA2B,EAAApiB,UAAAkoC,SAAA9lB,EAAApiB,UAAAioC,QAQA7lB,EAAApiB,UAAAie,MAAA,SAAA5e,GACA,OAAAoQ,KAAAi4B,MAAAvqB,EAAAc,MAAA6U,aAAA,EAAAzzB,IASA+iB,EAAApiB,UAAA2mB,OAAA,SAAAtnB,GACA,OAAAoQ,KAAAi4B,MAAAvqB,EAAAc,MAAA+U,cAAA,EAAA3zB,IAGA,IAAA8oC,EAAAhrB,EAAA5a,MAAAvC,UAAA4D,IACA,SAAAinB,EAAA9a,EAAArC,GACAqC,EAAAnM,IAAAinB,EAAAnd,IAGA,SAAAmd,EAAA9a,EAAArC,GACA,QAAA1P,EAAA,EAAuBA,EAAA6sB,EAAAhqB,SAAgB7C,EACvC+R,EAAArC,EAAA1P,GAAA6sB,EAAA7sB,IAQAokB,EAAApiB,UAAAshB,MAAA,SAAAjiB,GACA,IAAA2kB,EAAA3kB,EAAAwB,SAAA,EACA,IAAAmjB,EACA,OAAAvU,KAAAi4B,MAAAJ,EAAA,KACA,GAAAnqB,EAAA4B,SAAA1f,GAAA,CACA,IAAA0Q,EAAAqS,EAAA4L,MAAAhK,EAAAjG,EAAAld,OAAAxB,IACA0e,EAAA+F,OAAAzkB,EAAA0Q,EAAA,GACA1Q,EAAA0Q,EAEA,OAAAN,KAAA6T,OAAAU,GAAA0jB,MAAAS,EAAAnkB,EAAA3kB,IAQA+iB,EAAApiB,UAAAujB,OAAA,SAAAlkB,GACA,IAAA2kB,EAAA7F,EAAAtd,OAAAxB,GACA,OAAA2kB,EACAvU,KAAA6T,OAAAU,GAAA0jB,MAAAvpB,EAAAqM,MAAAxG,EAAA3kB,GACAoQ,KAAAi4B,MAAAJ,EAAA,MAQAllB,EAAApiB,UAAAyjB,KAAA,WAIA,OAHAhU,KAAA43B,OAAA,IAAAH,EAAAz3B,MACAA,KAAA03B,KAAA13B,KAAA23B,KAAA,IAAAJ,EAAAjH,EAAA,KACAtwB,KAAAuU,IAAA,EACAvU,MAOA2S,EAAApiB,UAAAmW,MAAA,WAUA,OATA1G,KAAA43B,QACA53B,KAAA03B,KAAA13B,KAAA43B,OAAAF,KACA13B,KAAA23B,KAAA33B,KAAA43B,OAAAD,KACA33B,KAAAuU,IAAAvU,KAAA43B,OAAArjB,IACAvU,KAAA43B,OAAA53B,KAAA43B,OAAA98B,OAEAkF,KAAA03B,KAAA13B,KAAA23B,KAAA,IAAAJ,EAAAjH,EAAA,KACAtwB,KAAAuU,IAAA,GAEAvU,MAOA2S,EAAApiB,UAAA0jB,OAAA,WACA,IAAAyjB,EAAA13B,KAAA03B,KACAC,EAAA33B,KAAA23B,KACApjB,EAAAvU,KAAAuU,IAOA,OANAvU,KAAA0G,QAAAmN,OAAAU,GACAA,IACAvU,KAAA23B,KAAA78B,KAAA48B,EAAA58B,KACAkF,KAAA23B,OACA33B,KAAAuU,QAEAvU,MAOA2S,EAAApiB,UAAAooC,OAAA,WAIA,IAHA,IAAAjB,EAAA13B,KAAA03B,KAAA58B,KACAwF,EAAAN,KAAAI,YAAAme,MAAAve,KAAAuU,KACAtW,EAAA,EACAy5B,GACAA,EAAAF,GAAAE,EAAAtc,IAAA9a,EAAArC,GACAA,GAAAy5B,EAAAnjB,IACAmjB,IAAA58B,KAGA,OAAAwF,GAGAqS,EAAAZ,WAAA,SAAA6mB,GACAtB,EAAAsB,iCCxcAzqC,EAAAD,QAAAukB,EAEA,IAEAomB,EAFAnrB,EAAgBhf,EAAQ,GAIxBkgB,EAAAlB,EAAAkB,SACAF,EAAAhB,EAAAgB,KAGA,SAAAoqB,EAAAxkB,EAAAykB,GACA,OAAA74B,WAAA,uBAAAoU,EAAArW,IAAA,OAAA86B,GAAA,SAAAzkB,EAAAC,KASA,SAAA9B,EAAAnR,GAMAtB,KAAAM,IAAAgB,EAMAtB,KAAA/B,IAAA,EAMA+B,KAAAuU,IAAAjT,EAAAlQ,OAGA,IAwCAxB,EAxCAopC,EAAA,oBAAAt2B,WACA,SAAApB,GACA,GAAAA,aAAAoB,YAAA5P,MAAAqN,QAAAmB,GACA,WAAAmR,EAAAnR,GACA,MAAA7L,MAAA,mBAGA,SAAA6L,GACA,GAAAxO,MAAAqN,QAAAmB,GACA,WAAAmR,EAAAnR,GACA,MAAA7L,MAAA,mBAkEA,SAAAwjC,IAEA,IAAApoB,EAAA,IAAAjC,EAAA,KACArgB,EAAA,EACA,KAAAyR,KAAAuU,IAAAvU,KAAA/B,IAAA,GAaK,CACL,KAAc1P,EAAA,IAAOA,EAAA,CAErB,GAAAyR,KAAA/B,KAAA+B,KAAAuU,IACA,MAAAukB,EAAA94B,MAGA,GADA6Q,EAAAE,IAAAF,EAAAE,IAAA,IAAA/Q,KAAAM,IAAAN,KAAA/B,OAAA,EAAA1P,KAAA,EACAyR,KAAAM,IAAAN,KAAA/B,OAAA,IACA,OAAA4S,EAIA,OADAA,EAAAE,IAAAF,EAAAE,IAAA,IAAA/Q,KAAAM,IAAAN,KAAA/B,SAAA,EAAA1P,KAAA,EACAsiB,EAxBA,KAActiB,EAAA,IAAOA,EAGrB,GADAsiB,EAAAE,IAAAF,EAAAE,IAAA,IAAA/Q,KAAAM,IAAAN,KAAA/B,OAAA,EAAA1P,KAAA,EACAyR,KAAAM,IAAAN,KAAA/B,OAAA,IACA,OAAA4S,EAKA,GAFAA,EAAAE,IAAAF,EAAAE,IAAA,IAAA/Q,KAAAM,IAAAN,KAAA/B,OAAA,QACA4S,EAAAG,IAAAH,EAAAG,IAAA,IAAAhR,KAAAM,IAAAN,KAAA/B,OAAA,OACA+B,KAAAM,IAAAN,KAAA/B,OAAA,IACA,OAAA4S,EAgBA,GAfAtiB,EAAA,EAeAyR,KAAAuU,IAAAvU,KAAA/B,IAAA,GACA,KAAc1P,EAAA,IAAOA,EAGrB,GADAsiB,EAAAG,IAAAH,EAAAG,IAAA,IAAAhR,KAAAM,IAAAN,KAAA/B,OAAA,EAAA1P,EAAA,OACAyR,KAAAM,IAAAN,KAAA/B,OAAA,IACA,OAAA4S,OAGA,KAActiB,EAAA,IAAOA,EAAA,CAErB,GAAAyR,KAAA/B,KAAA+B,KAAAuU,IACA,MAAAukB,EAAA94B,MAGA,GADA6Q,EAAAG,IAAAH,EAAAG,IAAA,IAAAhR,KAAAM,IAAAN,KAAA/B,OAAA,EAAA1P,EAAA,OACAyR,KAAAM,IAAAN,KAAA/B,OAAA,IACA,OAAA4S,EAIA,MAAApb,MAAA,2BAkCA,SAAAyjC,EAAA54B,EAAA5H,GACA,OAAA4H,EAAA5H,EAAA,GACA4H,EAAA5H,EAAA,MACA4H,EAAA5H,EAAA,OACA4H,EAAA5H,EAAA,YA+BA,SAAAygC,IAGA,GAAAn5B,KAAA/B,IAAA,EAAA+B,KAAAuU,IACA,MAAAukB,EAAA94B,KAAA,GAEA,WAAA4O,EAAAsqB,EAAAl5B,KAAAM,IAAAN,KAAA/B,KAAA,GAAAi7B,EAAAl5B,KAAAM,IAAAN,KAAA/B,KAAA,IArLAwU,EAAAxiB,OAAAyd,EAAAtM,OACA,SAAAE,GACA,OAAAmR,EAAAxiB,OAAA,SAAAqR,GACA,OAAAoM,EAAAtM,OAAA6Z,SAAA3Z,GACA,IAAAu3B,EAAAv3B,GAEA03B,EAAA13B,KACSA,IAGT03B,EAEAvmB,EAAAliB,UAAA6oC,OAAA1rB,EAAA5a,MAAAvC,UAAAmuB,UAAAhR,EAAA5a,MAAAvC,UAAAwI,MAOA0Z,EAAAliB,UAAAsjB,QACAjkB,EAAA,WACA,WACiE,GAAjEA,GAAA,IAAAoQ,KAAAM,IAAAN,KAAA/B,QAAA,EAAiE+B,KAAAM,IAAAN,KAAA/B,OAAA,WAAArO,EACA,GAAjEA,MAAA,IAAAoQ,KAAAM,IAAAN,KAAA/B,OAAA,OAAiE+B,KAAAM,IAAAN,KAAA/B,OAAA,WAAArO,EACA,GAAjEA,MAAA,IAAAoQ,KAAAM,IAAAN,KAAA/B,OAAA,QAAiE+B,KAAAM,IAAAN,KAAA/B,OAAA,WAAArO,EACA,GAAjEA,MAAA,IAAAoQ,KAAAM,IAAAN,KAAA/B,OAAA,QAAiE+B,KAAAM,IAAAN,KAAA/B,OAAA,WAAArO,EACA,GAAjEA,MAAA,GAAAoQ,KAAAM,IAAAN,KAAA/B,OAAA,QAAiE+B,KAAAM,IAAAN,KAAA/B,OAAA,WAAArO,EAGjE,IAAAoQ,KAAA/B,KAAA,GAAA+B,KAAAuU,IAEA,MADAvU,KAAA/B,IAAA+B,KAAAuU,IACAukB,EAAA94B,KAAA,IAEA,OAAApQ,IAQA6iB,EAAAliB,UAAA4jB,MAAA,WACA,SAAAnU,KAAA6T,UAOApB,EAAAliB,UAAA2nC,OAAA,WACA,IAAAtoC,EAAAoQ,KAAA6T,SACA,OAAAjkB,IAAA,MAAAA,GAAA,GAqFA6iB,EAAAliB,UAAA8nC,KAAA,WACA,WAAAr4B,KAAA6T,UAcApB,EAAAliB,UAAA+nC,QAAA,WAGA,GAAAt4B,KAAA/B,IAAA,EAAA+B,KAAAuU,IACA,MAAAukB,EAAA94B,KAAA,GAEA,OAAAk5B,EAAAl5B,KAAAM,IAAAN,KAAA/B,KAAA,IAOAwU,EAAAliB,UAAAgoC,SAAA,WAGA,GAAAv4B,KAAA/B,IAAA,EAAA+B,KAAAuU,IACA,MAAAukB,EAAA94B,KAAA,GAEA,SAAAk5B,EAAAl5B,KAAAM,IAAAN,KAAA/B,KAAA,IAmCAwU,EAAAliB,UAAAie,MAAA,WAGA,GAAAxO,KAAA/B,IAAA,EAAA+B,KAAAuU,IACA,MAAAukB,EAAA94B,KAAA,GAEA,IAAApQ,EAAA8d,EAAAc,MAAAyT,YAAAjiB,KAAAM,IAAAN,KAAA/B,KAEA,OADA+B,KAAA/B,KAAA,EACArO,GAQA6iB,EAAAliB,UAAA2mB,OAAA,WAGA,GAAAlX,KAAA/B,IAAA,EAAA+B,KAAAuU,IACA,MAAAukB,EAAA94B,KAAA,GAEA,IAAApQ,EAAA8d,EAAAc,MAAA2T,aAAAniB,KAAAM,IAAAN,KAAA/B,KAEA,OADA+B,KAAA/B,KAAA,EACArO,GAOA6iB,EAAAliB,UAAAshB,MAAA,WACA,IAAAzgB,EAAA4O,KAAA6T,SACApb,EAAAuH,KAAA/B,IACAvF,EAAAsH,KAAA/B,IAAA7M,EAGA,GAAAsH,EAAAsH,KAAAuU,IACA,MAAAukB,EAAA94B,KAAA5O,GAGA,OADA4O,KAAA/B,KAAA7M,EACA0B,MAAAqN,QAAAH,KAAAM,KACAN,KAAAM,IAAAvH,MAAAN,EAAAC,GACAD,IAAAC,EACA,IAAAsH,KAAAM,IAAAF,YAAA,GACAJ,KAAAo5B,OAAAtqC,KAAAkR,KAAAM,IAAA7H,EAAAC,IAOA+Z,EAAAliB,UAAAujB,OAAA,WACA,IAAAjC,EAAA7R,KAAA6R,QACA,OAAAnD,EAAAyN,KAAAtK,EAAA,EAAAA,EAAAzgB,SAQAqhB,EAAAliB,UAAA8oC,KAAA,SAAAjoC,GACA,oBAAAA,EAAA,CAEA,GAAA4O,KAAA/B,IAAA7M,EAAA4O,KAAAuU,IACA,MAAAukB,EAAA94B,KAAA5O,GACA4O,KAAA/B,KAAA7M,OAEA,GAEA,GAAA4O,KAAA/B,KAAA+B,KAAAuU,IACA,MAAAukB,EAAA94B,YACS,IAAAA,KAAAM,IAAAN,KAAA/B,QAET,OAAA+B,MAQAyS,EAAAliB,UAAAmkB,SAAA,SAAA4kB,GACA,OAAAA,GACA,OACAt5B,KAAAq5B,OACA,MACA,OACAr5B,KAAAq5B,KAAA,GACA,MACA,OACAr5B,KAAAq5B,KAAAr5B,KAAA6T,UACA,MACA,OACA,SAAAylB,EAAA,EAAAt5B,KAAA6T,WACA7T,KAAA0U,SAAA4kB,GAEA,MACA,OACAt5B,KAAAq5B,KAAA,GACA,MAGA,QACA,MAAA5jC,MAAA,qBAAA6jC,EAAA,cAAAt5B,KAAA/B,KAEA,OAAA+B,MAGAyS,EAAAV,WAAA,SAAAwnB,GACAV,EAAAU,EAEA,IAAA/B,EAAA9pB,EAAAwC,KAAA,oBACAxC,EAAAC,MAAA8E,EAAAliB,UAAA,CAEAwjB,MAAA,WACA,OAAAklB,EAAAnqC,KAAAkR,MAAAw3B,IAAA,IAGArgB,OAAA,WACA,OAAA8hB,EAAAnqC,KAAAkR,MAAAw3B,IAAA,IAGAW,OAAA,WACA,OAAAc,EAAAnqC,KAAAkR,MAAAw5B,WAAAhC,IAAA,IAGAgB,QAAA,WACA,OAAAW,EAAArqC,KAAAkR,MAAAw3B,IAAA,IAGAiB,SAAA,WACA,OAAAU,EAAArqC,KAAAkR,MAAAw3B,IAAA,wRCxYA,IAAAiC,EAAA,oBAAAA,KAwCA,OArCEA,EAAAlpC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKzH,KAAOszB,EAAWK,OAAO,SAGhCuN,EAAAlpC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAAUA,EAAOI,OAAS,IAIxB4O,KAAKosB,gBAAgBp7B,IAGpByoC,EAAAlpC,UAAA67B,gBAAV,SAA0Bp7B,WAClB0oC,EAAY1oC,EAAO,GAAGkD,KACtBylC,EAAsB3oC,EAAO,GAAGK,KAAKD,OAG3C,GAAkB,WAAdsoC,EACF,OAAO,MAGT,IAAoB,IAAAE,EAAAh/B,EAAA5J,GAAM6oC,EAAAD,EAAA9+B,QAAA++B,EAAA9+B,KAAA8+B,EAAAD,EAAA9+B,OAAE,CAAvB,IAAMiD,EAAK87B,EAAAjqC,MAEd,GAAImO,EAAM7J,OAASwlC,EACjB,OAAO,EAIT,GAAI37B,EAAM1M,KAAKD,SAAWuoC,EACxB,OAAO,oGAIX,OAAO,GAIXF,EAxCA,GAAsBvrC,EAAAurC,wFCDtB,IAAAK,EAAA,oBAAAA,KA0BA,OAvBEA,EAAAvpC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAK+5B,MAAQlO,EAAWE,SAAS,QAAS,IAC1C/rB,KAAKg6B,UAAW,GAGlBF,EAAAvpC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpB8oC,EAAAvpC,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MASlD4lC,EA1BA,GAAsB5rC,EAAA4rC,yFCCtB,IAAAG,EAAA,oBAAAA,KAiCA,OA9BEA,EAAA1pC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKzH,KAAOszB,EAAWK,OAAO,OAAQ,IAGxC+N,EAAA1pC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,UAIQ,IAA1BJ,EAAO,GAAGK,KAAKD,WAIf4O,KAAKzH,KAAO,GAAKyH,KAAKzH,KAAOvH,EAAO,GAAGK,KAAKD,SAIzC4O,KAAKosB,gBAAgBp7B,MAGpBipC,EAAA1pC,UAAA67B,gBAAV,SAA0Bp7B,GAExB,MAAuB,WAAnBA,EAAO,GAAGkD,MAQlB+lC,EAjCA,GAAsB/rC,EAAA+rC,yFCHtB,IAAAjI,EAAAtjC,EAAA,GAGAwrC,EAAA,oBAAAA,KAiCA,OA9BEA,EAAA3pC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKzH,KAAOszB,EAAWK,OAAO,OAAQ,IAGxCgO,EAAA3pC,UAAA47B,YAAA,SAAYn7B,GACV,IAAKA,GAA4B,IAAlBA,EAAOI,OACpB,OAAO,EAET,IAAMiI,EAAarI,EAAO,GAAGK,KAAKD,OAClC,QAAIiI,EAAa,OAGb2G,KAAKzH,MAAQc,GAAc2G,KAAKzH,KAAOc,EAAa,IAIjD2G,KAAKosB,gBAAgBp7B,KAGpBkpC,EAAA3pC,UAAA67B,gBAAV,SAA0Bp7B,GACxB,OAA8C,IAA1CghC,EAAA9f,aAAarW,QAAQ7K,EAAO,GAAGkD,QAGZ,UAAnBlD,EAAO,GAAGkD,MAAuC,UAAnBlD,EAAO,GAAGkD,OAOhDgmC,EAjCA,GAAsBhsC,EAAAgsC,wFCAtB,IAAAC,EAAA,oBAAAA,KA8BA,OA3BEA,EAAA5pC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKssB,MAAQT,EAAWE,SAAS,SACjC/rB,KAAKo6B,KAAOvO,EAAWwO,UAAU,SAGnCF,EAAA5pC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,UAIQ,IAA1BJ,EAAO,GAAGK,KAAKD,QAIZ4O,KAAKosB,gBAAgBp7B,KAGpBmpC,EAAA5pC,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MASlDimC,EA9BA,GAAsBjsC,EAAAisC,6FCAtB,IAAAG,EAAA,oBAAAA,KAoCA,OAjCEA,EAAA/pC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAK8rB,QAAUD,EAAWE,SAAS,UAAW,OAGhDuO,EAAA/pC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpBspC,EAAA/pC,UAAA67B,gBAAV,SAA0Bp7B,GACxB,IAAMq7B,EAAIr7B,EAAO,GACXs7B,EAAQt7B,EAAO,GACfu7B,EAAIv7B,EAAO,GAIjB,QAAIq7B,EAAEh7B,KAAKD,OAAS,GAA2B,IAAtBk7B,EAAMj7B,KAAKD,QAAkC,IAAlBm7B,EAAEl7B,KAAKD,UAGvDk7B,EAAMj7B,KAAK,KAAOg7B,EAAEh7B,KAAK,IAAMk7B,EAAEl7B,KAAK,KAAOg7B,EAAEh7B,KAAK,MAGxC,YAAXg7B,EAAEn4B,MAAiC,YAAXm4B,EAAEn4B,MAAuC,YAAfo4B,EAAMp4B,MAAqC,YAAfo4B,EAAMp4B,MACzE,YAAXq4B,EAAEr4B,MAAiC,YAAXq4B,EAAEr4B,QAOnComC,EApCA,GAAsBpsC,EAAAosC,uGCHtB,IAAAtI,EAAAtjC,EAAA,GAGA6rC,EAAA,oBAAAA,KA0BA,OAvBEA,EAAAhqC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKvE,KAAOowB,EAAWiB,QAAQ,OAAQ,IACvC9sB,KAAK5B,SAAgD,IAArCytB,EAAWK,OAAO,WAAY,IAGhDqO,EAAAhqC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpBupC,EAAAhqC,UAAA67B,gBAAV,SAA0Bp7B,GACxB,OAA8C,IAA1CghC,EAAA9f,aAAarW,QAAQ7K,EAAO,GAAGkD,OASvCqmC,EA1BA,GAAsBrsC,EAAAqsC,4FCAtB,IAAAriB,EAAA,oBAAAA,KAwBA,OArBEA,EAAA3nB,UAAAq7B,WAAA,SAAWC,KAEX3T,EAAA3nB,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,QAA0C,IAA1BJ,EAAO,GAAGK,KAAKD,SAI9C4O,KAAKosB,gBAAgBp7B,IAGpBknB,EAAA3nB,UAAA67B,gBAAV,SAA0Bp7B,GACxB,OAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,OAIvB,UAAnBlD,EAAO,GAAGkD,MAMlBgkB,EAxBA,GAAsBhqB,EAAAgqB,yFCAtB,IAAAsiB,EAAA,oBAAAA,KA0BA,OAvBEA,EAAAjqC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKy6B,OAAS5O,EAAWiB,QAAQ,UACjC9sB,KAAK06B,KAAO7O,EAAWiB,QAAQ,QAC/B9sB,KAAKvE,KAAOowB,EAAWiB,QAAQ,OAAQ,KAGzC0N,EAAAjqC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAGf4O,KAAKosB,gBAAgBp7B,IAGpBwpC,EAAAjqC,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MASlDsmC,EA1BA,GAAsBtsC,EAAAssC,QA4BtB,IAAAG,EAAA,oBAAAA,KA4BA,OAzBEA,EAAApqC,UAAAq7B,WAAA,SAAWC,KAEX8O,EAAApqC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAAUA,EAAOI,OAAS,GAAKJ,EAAOI,OAAS,IAG7C4O,KAAKosB,gBAAgBp7B,IAGpB2pC,EAAApqC,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,UAAnBA,EAAO,GAAGkD,MAA8C,IAA1BlD,EAAO,GAAGK,KAAKD,SAG1B,UAAnBJ,EAAO,GAAGkD,MAA8C,IAA1BlD,EAAO,GAAGK,KAAKD,YAG7CJ,EAAOI,QAAU,IAAyB,UAAnBJ,EAAO,GAAGkD,MAA8C,IAA1BlD,EAAO,GAAGK,KAAKD,YAGpEJ,EAAOI,QAAU,IAAyB,UAAnBJ,EAAO,GAAGkD,MAA8C,IAA1BlD,EAAO,GAAGK,KAAKD,WAM5EupC,EA5BA,GAAsBzsC,EAAAysC,0FC5BtB,IAAAC,EAAA,oBAAAA,KAyBA,OAtBEA,EAAArqC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKvE,KAAOowB,EAAWiB,QAAQ,SAGjC8N,EAAArqC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpB4pC,EAAArqC,UAAA67B,gBAAV,SAA0Bp7B,GAExB,MAAuB,WAAnBA,EAAO,GAAGkD,MAQlB0mC,EAzBA,GAAsB1sC,EAAA0sC,yFCHtB,IAAA5I,EAAAtjC,EAAA,GAGAmsC,EAAA,oBAAAA,KA4BA,OAzBEA,EAAAtqC,UAAAq7B,WAAA,SAAWC,KAEXgP,EAAAtqC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,UAGQ,IAA1BJ,EAAO,GAAGK,KAAKD,SAGfJ,EAAO,GAAGK,KAAK,KAAOL,EAAO,GAAGK,KAAKD,QAIlC4O,KAAKosB,gBAAgBp7B,MAGpB6pC,EAAAtqC,UAAA67B,gBAAV,SAA0Bp7B,GACxB,OAA8C,IAA1CghC,EAAA9f,aAAarW,QAAQ7K,EAAO,GAAGkD,QAGZ,UAAnBlD,EAAO,GAAGkD,MAAuC,UAAnBlD,EAAO,GAAGkD,OAKhD2mC,EA5BA,GAAsB3sC,EAAA2sC,sFCAtB,IAAAC,EAAA,oBAAAA,KAwBA,OArBEA,EAAAvqC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAK9F,KAAO2xB,EAAWiB,QAAQ,OAAQ,KAGzCgO,EAAAvqC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpB8pC,EAAAvqC,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MAQlD4mC,EAxBA,GAAsB5sC,EAAA4sC,2aCJtB,IAAAxH,EAAA5kC,EAAA,IACAoC,EAAApC,EAAA,GAKA+kC,EAAA,SAAAvoB,GAGE,SAAAuoB,EACI9G,EAAwD1kB,EAChD8yB,EAAsDlnC,GAFlE,IAAA6U,EAGEwC,EAAApc,KAAAkR,KAAM2sB,EAAgB94B,IAAWmM,YAFyB0I,EAAAT,OAChDS,EAAAqyB,0BAiBd,OAtB6C5vB,EAAAsoB,EAAAvoB,GAS3CuoB,EAAAljC,UAAAq7B,WAAA,SAAWC,GACL7rB,KAAK+6B,wBACP/6B,KAAK6rB,WAAa7rB,KAAK+6B,sBAAsBlP,KAIjD4H,EAAAljC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAKzC,MAAO,CADQgqC,EAAQhqC,EAAO,GAAIgP,KAAKiI,KAAMjI,KAAK6rB,WAAY7rB,KAAKnM,cAGvE4/B,EAtBA,CAA6CH,EAAA2H,SAwB7C,SAAgBD,EACZ3/B,EAAW4M,EAA8B4jB,EAAeh4B,GAC1D,IAAMuQ,EAAS,IAAItT,EAAAmD,OAAOoH,EAAEhK,KAAMwC,GAA0BwH,EAAEnH,MAI9D,OADA+T,EAFwB5M,EAAEwC,KACDuG,EAAOvG,KACQguB,GACjCznB,EA9BIlW,EAAAulC,aAwBbvlC,EAAA8sC,UAcA9sC,EAAAwlC,IAAA,SAAoB31B,EAA0BqG,GAC5C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAK+gC,IAAI31B,EAAMxP,KAI/BL,EAAAylC,KAAA,SAAqB51B,EAA0BqG,GAC7C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKghC,KAAK51B,EAAMxP,KAIhCL,EAAA0lC,MAAA,SAAsB71B,EAA0BqG,GAC9C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKihC,MAAM71B,EAAMxP,KAIjCL,EAAA+lC,KAAA,SAAqBl2B,EAA0BqG,GAC7C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKshC,KAAKl2B,EAAMxP,KAIhCL,EAAAgmC,MAAA,SAAsBn2B,EAA0BqG,GAC9C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKuhC,MAAMn2B,EAAMxP,KAIjCL,EAAAimC,KAAA,SAAqBp2B,EAA0BqG,GAC7C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKwhC,KAAKp2B,EAAMxP,KAIhCL,EAAAkmC,MAAA,SAAsBr2B,EAA0BqG,GAC9C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKyhC,MAAMr2B,EAAMxP,KAIjCL,EAAAi8B,KAAA,SAAqBpsB,EAA0BqG,GAC7C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKw3B,KAAKpsB,EAAMxP,KAIhCL,EAAAsmC,gBAAA,SAAgC3I,GAC9B,MAAO,CACLpO,IAAKoO,EAAWE,SAAS,OAAQ,uBACjCn5B,IAAKi5B,EAAWE,SAAS,MAAO,yBAIpC79B,EAAAqmC,KAAA,SAAqBx2B,EAA0BqG,EAA2BynB,GAGxE,IAFA,IAAMpO,EAAMoO,EAAWpO,IACjB7qB,EAAMi5B,EAAWj5B,IACdrE,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAAK,CACrC,IAAMqB,EAAQmO,EAAMxP,GACpB6V,EAAO7V,GAAMqB,EAAQ6tB,EAAOA,EAAO7tB,EAAQgD,EAAOA,EAAMhD,IAI5D1B,EAAAymC,IAAA,SAAoB52B,EAA0BqG,GAC5C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKgiC,IAAI52B,EAAMxP,KAI/BL,EAAA0mC,KAAA,SAAqB72B,EAA0BqG,GAC7C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKiiC,KAAK72B,EAAMxP,KAIhCL,EAAA6mC,eAAA,SAA+BlJ,GAC7B,OAAOA,EAAWE,SAAS,QAAS,IAGtC79B,EAAA4mC,IAAA,SAAoB/2B,EAA0BqG,EAA2BynB,GAEvE,IADA,IAAMvvB,EAAQuvB,EACLt9B,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAAK,CACrC,IAAMqB,EAAQmO,EAAMxP,GACpB6V,EAAO7V,GAAKqB,GAAS,EAAIA,EAAQ0M,GAAS3J,KAAKqiC,IAAIplC,GAAS,KAIhE1B,EAAA8mC,IAAA,SAAoBj3B,EAA0BqG,GAC5C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKqiC,IAAIj3B,EAAMxP,KAI/BL,EAAA2G,MAAA,SAAsBkJ,EAA0BqG,GAC9C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKkC,MAAMkJ,EAAMxP,KAIjCL,EAAAsnC,MAAA,SAAsBz3B,EAA0BqG,GAC9C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKyM,OAAOme,MAAMpb,EAAMxP,IAAM,EAAI,GAI7CL,EAAAwnC,qBAAA,SAAqC7J,GACnC,OAAOA,EAAWE,SAAS,QAAS,MAGtC79B,EAAAunC,UAAA,SAA0B13B,EAA0BqG,EAA2BynB,GAE7E,IADA,IAAMvvB,EAAQuvB,EACLt9B,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAAK,CACrC,IAAMqB,EAAQmO,EAAMxP,GACpB6V,EAAO7V,GAAKqB,GAAS,EAAIA,EAAQ0M,EAAQ1M,IAI7C1B,EAAA4W,IAAA,SAAoB/G,EAA0BqG,GAC5C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKmS,IAAI/G,EAAMxP,KAI/BL,EAAAk3B,IAAA,SAAoBrnB,EAA0BqG,GAC5C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,IAAMwP,EAAMxP,IAIvBL,EAAAo6B,IAAA,SAAoBvqB,EAA2BqG,GAC7C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKwP,EAAMxP,GAAK,EAAI,GAI/BL,EAAA2nC,WAAA,SAA2B93B,EAA0BqG,GACnD,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAK,EAAMwP,EAAMxP,IAI5BL,EAAAmoC,KAAA,SAAqBt4B,EAA0BqG,GAC7C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKC,IAAI,EAAGmL,EAAMxP,KAIlCL,EAAAqoC,QAAA,SAAwBx4B,EAA0BqG,GAChD,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAM,GAAK,EAAIoE,KAAKqiC,KAAKj3B,EAAMxP,MAI1CL,EAAAsoC,KAAA,SAAqBz4B,EAA0BqG,GAC7C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKwP,EAAMxP,GAAK,EAAI,EAAIwP,EAAMxP,GAAK,GAAK,EAAI,GAIvDL,EAAAuoC,IAAA,SAAoB14B,EAA0BqG,GAC5C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAK8jC,IAAI14B,EAAMxP,KAI/BL,EAAAwoC,KAAA,SAAqB34B,EAA0BqG,GAC7C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAK+jC,KAAK34B,EAAMxP,KAIhCL,EAAA4oC,KAAA,SAAqB/4B,EAA0BqG,GAC7C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKmkC,KAAK/4B,EAAMxP,KAIhCL,EAAA+oC,IAAA,SAAoBl5B,EAA0BqG,GAC5C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKskC,IAAIl5B,EAAMxP,KAI/BL,EAAAgpC,KAAA,SAAqBn5B,EAA0BqG,GAC7C,IAAK,IAAI7V,EAAI,EAAGA,EAAIwP,EAAM3M,OAAQ7C,IAChC6V,EAAO7V,GAAKoE,KAAKukC,KAAKn5B,EAAMxP,oFClOhC,IAAA0sC,EAAA,WACE,SAAAA,EAAsBtO,EAA0D94B,GAA1DmM,KAAA2sB,iBAA0D3sB,KAAAnM,aAqBlF,OAjBEonC,EAAA1qC,UAAAq7B,WAAA,SAAWC,KAEXoP,EAAA1qC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpBiqC,EAAA1qC,UAAA67B,gBAAV,SAA0Bp7B,GACxB,OAAqD,IAAjDgP,KAAK2sB,eAAe9wB,QAAQ7K,EAAO,GAAGkD,OAM9C+mC,EAtBA,GAAsB/sC,EAAA+sC,yFCAtB,IAAAC,EAAA,oBAAAA,KAyBA,OAtBEA,EAAA3qC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKvE,KAAOowB,EAAWiB,QAAQ,SAGjCoO,EAAA3qC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpBkqC,EAAA3qC,UAAA67B,gBAAV,SAA0Bp7B,GAExB,MAAuB,WAAnBA,EAAO,GAAGkD,MAQlBgnC,EAzBA,GAAsBhtC,EAAAgtC,2GCAtB,IAAAC,EAAA,oBAAAA,KA0BA,OAvBEA,EAAA5qC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKyd,IAAMoO,EAAWE,SAAS,OAAQ,uBACvC/rB,KAAKpN,IAAMi5B,EAAWE,SAAS,MAAO,wBAGxCoP,EAAA5qC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpBmqC,EAAA5qC,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MASlDinC,EA1BA,GAAsBjtC,EAAAitC,sFCCtBjtC,EAAAqqB,eAAA,SAA+BI,GAC7B,IAAMpE,EAAMoE,EAAcvnB,OAC1B,OAAOunB,EAAc5f,MAAM,EAAGwb,EAAM,GAAG4K,OAAOxG,EAAcpE,EAAM,GAAK,6pBCNzE,IAAAzjB,EAAApC,EAAA,GAGA0sC,EAAA9xB,EAAA5a,EAAA,KAMAuF,EAAA,WAEE,SAAAA,EAAY4J,EAAmC3J,EAAY7C,GACzD,IAAMgqC,EAAehqC,GAAc,CAACwM,EAAKzM,QACzC,GAAoB,IAAhByM,EAAKzM,OACP,MAAM,IAAI8O,WAAW,oDAGnBpN,MAAMqN,QAAQtC,IAAkB,WAAT3J,EACZ,YAATA,EAEF8L,KAAKnC,KAAOmF,aAAa3B,KAAKxD,GACZ,SAAT3J,EAET8L,KAAKnC,KAAO6E,WAAWrB,KAAKxD,GACV,UAAT3J,IAET8L,KAAKnC,KAAOiF,WAAWzB,KAAKxD,IAG9BmC,KAAKnC,KAAOA,EAGdmC,KAAK3O,KAAOgqC,EACZr7B,KAAK9L,KAAOA,EACZ8L,KAAKs7B,eAAiB,IAAIxqC,EAAAmD,OAAe+L,KAAK3O,KAAM2O,KAAK9L,UAAMhC,OAAWA,EAAW8N,KAAKnC,MAC1FmC,KAAKhM,KAAOgM,KAAKs7B,eAAetnC,KAiEpC,OAxDEC,EAAA1D,UAAAf,IAAA,SAAI0J,OAAJ,IAAAwP,EAAA1I,KAA4CrL,EAAA,GAAAzD,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAyD,EAAAzD,EAAA,GAAAC,UAAAD,GAC1C,IAAIqqC,EAAoC,GACxC,GAAuB,iBAAZriC,EACTqiC,EAAUC,EAAA,CAAItiC,GAAYvE,OACrB,KAAIuE,EAGT,MAAM,IAAIzD,MAAM,oCAFhB8lC,EAAariC,EAMf,GADAkiC,EAAMK,gBAAgBF,GAClBA,EAAWnqC,SAAW4O,KAAK3O,KAAKD,OAClC,MAAM,IAAI8O,WAAW,uDAGvBq7B,EAAWj+B,QAAQ,SAACrF,EAAayjC,GAC/B,GAAIzjC,GAAOyQ,EAAKrX,KAAKqqC,GACnB,MAAM,IAAIx7B,WAAW,yDAGzB,IAAMtQ,EAAQoQ,KAAKs7B,eAAe9rC,IAAI+rC,GACtC,MAAkB,SAAdv7B,KAAK9L,KACU,IAAVtE,EAEFA,GAITqE,EAAA1D,UAAA4D,IAAA,SAAIvE,EAAoBsJ,OAAxB,IAAAwP,EAAA1I,KAAgErL,EAAA,GAAAzD,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAyD,EAAAzD,EAAA,GAAAC,UAAAD,GAC9DkqC,EAAMO,iBAAiB37B,KAAK9L,KAAMtE,GAClC,IAAI2rC,EAAoC,GACxC,GAAuB,iBAAZriC,EACTqiC,EAAUC,EAAA,CAAItiC,GAAYvE,OACrB,KAAIuE,EAGT,MAAM,IAAIzD,MAAM,mCAFhB8lC,EAAariC,EAMf,GADAkiC,EAAMK,gBAAgBF,GAClBA,EAAWnqC,SAAW4O,KAAK3O,KAAKD,OAClC,MAAM,IAAI8O,WAAW,uDAGvBq7B,EAAWj+B,QAAQ,SAACrF,EAAayjC,GAC/B,GAAIzjC,GAAOyQ,EAAKrX,KAAKqqC,GACnB,MAAM,IAAIx7B,WAAW,yDAIJ,kBAAVtQ,EACToQ,KAAKs7B,eAAennC,IAAIonC,EAAY3rC,EAAQ,EAAI,GAEhDoQ,KAAKs7B,eAAennC,IAAIonC,EAAY3rC,IAG1CqE,EA3FA,GAAa/F,EAAA+F,0RCXb,IAAAnD,EAAApC,EAAA,GAEAktC,EAAAltC,EAAA,IAEAR,EAAA2tC,mBAAA,SAAmCP,GACjC,OAAQA,EAAepnC,MACrB,IAAK,OACH,OAAO,IAAI0nC,EAAA3nC,OAAU,IAAIyO,WAAW44B,EAAetjB,aAAc,OAAQsjB,EAAejqC,MAC1F,IAAK,UACH,OAAO,IAAIuqC,EAAA3nC,OAAUqnC,EAAen5B,UAA2B,UAAWm5B,EAAejqC,MAC3F,IAAK,UACH,OAAO,IAAIuqC,EAAA3nC,OAAU,IAAI+O,aAAas4B,EAAen5B,WAAY,UAAWm5B,EAAejqC,MAC7F,IAAK,SACH,OAAO,IAAIuqC,EAAA3nC,OAAUqnC,EAAep6B,WAAY,SAAUo6B,EAAejqC,MAC3E,IAAK,OACH,OAAO,IAAIuqC,EAAA3nC,OAAU,IAAI6O,WAAWw4B,EAAetjB,aAAc,QAASsjB,EAAejqC,MAC3F,IAAK,QACH,OAAO,IAAIuqC,EAAA3nC,OAAUqnC,EAAetjB,YAA2B,QAASsjB,EAAejqC,MACzF,QACE,MAAM,IAAIqJ,UAAU,oCAI1BxM,EAAA4tC,iBAAA,SAAiChjB,GAC/B,OAAO,IAAIhoB,EAAAmD,OAAe6kB,EAAOznB,KAAMynB,EAAO5kB,UAAMhC,OAAWA,EAAW4mB,EAAOjb,OAGnF3P,EAAAytC,iBAAA,SAAiCznC,EAA4BsO,GAC3D,cAAeA,GACb,IAAK,SACH,GAAa,WAATtO,EACF,MAAM,IAAIwG,UAAU,4DAEtB,MACF,IAAK,SACH,GAAa,YAATxG,GAA+B,UAATA,EACxB,MAAM,IAAIwG,UAAU,4DAEtB,GAAa,YAATxG,GAAsB8G,OAAOC,UAAUuH,GACzC,MAAM,IAAI9H,UAAU,4DAEtB,GAAa,UAATxG,IAAqB8G,OAAOC,UAAUuH,GACxC,MAAM,IAAI9H,UAAU,4DAEtB,MACF,IAAK,UACH,GAAa,SAATxG,EACF,MAAM,IAAIwG,UAAU,4DAEtB,MACF,QACE,MAAM,IAAIA,UAAU,4CAI1BxM,EAAAutC,gBAAA,SAAgCviC,WAC9B,GAAIA,EAAQ9H,OAAS,GAAK8H,EAAQ9H,OAAS,EACzC,MAAM,IAAI8O,WAAW,uDAEvB,IAAgB,IAAA67B,EAAAnhC,EAAA1B,GAAO8iC,EAAAD,EAAAjhC,QAAAkhC,EAAAjhC,KAAAihC,EAAAD,EAAAjhC,OAAE,CAApB,IAAM1K,EAAC4rC,EAAApsC,MACV,IAAKoL,OAAOC,UAAU7K,GACpB,MAAM,IAAIsK,UAAU,kBAAkBtK,EAAC,sBAEzC,GAAIA,EAAI,GAAKA,EAAI,WACf,MAAM,IAAIsK,UAAU,yBAAyBtK,EAAC,oQChEpD,IAAA6rC,EAAAvtC,EAAA,IACAwtC,EAAAxtC,EAAA,IACAytC,EAAAztC,EAAA,KAGA0tC,EAAA1tC,EAAA,KAKA2tC,EAAA3tC,EAAA,MACA2tC,EAAA3tC,EAAA,MAEaR,EAAA2jC,QAAmB,CAC9ByK,IAAK,IAAIL,EAAAM,WACTpY,KAAM,IAAI+X,EAAAM,YACVC,MAAO,IAAIN,EAAAO,cAGAxuC,EAAAyuC,IAAmBP,EAAAQ,uFCfhC,IAAAC,EAAAnuC,EAAA,IAIA6tC,EAAA,oBAAAA,KAUA,OAPEA,EAAAhsC,UAAAq7B,WAAA,WACE,OAAO,GAET2Q,EAAAhsC,UAAAusC,qBAAA,SAAqBzwB,GACnB,OAAO,IAAIwwB,EAAAE,kBAAkB/8B,KAAMqM,IAErCkwB,EAAAhsC,UAAAysC,QAAA,aACFT,EAVA,GAAaruC,EAAAquC,4FCLb,IAAAU,EAAAvuC,EAAA,IAGAwuC,EAAAxuC,EAAA,IACAyuC,EAAAzuC,EAAA,IAEAquC,EAAA,WACE,SAAAA,EAAqBlL,EAA2BxlB,GAA3BrM,KAAA6xB,UAA2B7xB,KAAAqM,UAalD,OAXE0wB,EAAAxsC,UAAA6sC,uBAAA,WACE,OAAO,IAAIF,EAAAG,oBAAoBr9B,KAAMA,KAAKqM,QAAQixB,WAGpDP,EAAAxsC,UAAAysC,QAAA,aAEAD,EAAAxsC,UAAAgY,QAAA,SAAQoE,EAAkB4M,GACxB,IAAM5lB,EAAKspC,EAAA3jB,gBAAgB3M,EAAM4M,EAAQ4jB,EAAA3J,sBAEzC,OADA7/B,EAAGi4B,WAAWjf,EAAKkf,YACZl4B,GAEXopC,EAdA,GAAa7uC,EAAA6uC,mGCJb,IAAAM,EAAA,WACE,SAAAA,EAA4BE,EAA4CD,GAA5Ct9B,KAAAu9B,UAA4Cv9B,KAAAs9B,WAG1E,OADED,EAAA9sC,UAAAysC,QAAA,aACFK,EAJA,GAAanvC,EAAAmvC,qbCRb,IAAApL,EAAAvjC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAGAslC,EAAA,SAAA9oB,GAAA,SAAA8oB,mDAKA,OAL+B7oB,EAAA6oB,EAAA9oB,GAC7B8oB,EAAAzjC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQwsC,EAAOxsC,EAAO,GAAIgP,KAAKzH,KAAMyH,KAAK5B,YAGrD41B,EALA,CAA+B/B,EAAAwL,QAO/B,SAAgBD,EAAOniC,EAAW9C,EAAc4E,GAC9C,IAAMvE,EAAOyC,EAAEhK,KAAOgK,EAAEhK,KAAKD,OAAS,EACtCmH,EAAOqH,EAAA9L,UAAUsF,UAAUb,EAAMK,GAQjC,IAPA,IAAM8C,EAAakE,EAAA3C,WAAWO,gBAAgBnC,EAAEhK,KAAM,CAACkH,IAAO,GACxD8zB,EAAIhxB,EAAEwC,KACN6/B,EAAI,IAAI56B,WAAWlD,EAAA9L,UAAUE,KAAK0H,IAClClG,EAAYoK,EAAA9L,UAAUwE,kBAAkB+C,EAAEhK,KAAMkH,EAAO,GACvDM,EAAU+G,EAAA9L,UAAU6E,eAAe+C,GACnC+B,EAAemC,EAAA9L,UAAU6E,eAAe0C,EAAEhK,MAC1CqM,EAAW,IAAI5K,MAAMuI,EAAEhK,KAAKD,QACzB7C,EAAI,EAAGA,EAAImvC,EAAEtsC,OAAQ7C,IAAK,CACjC,IAAM2K,EAAU0G,EAAA9L,UAAUqF,gBAAgB5K,EAAGsK,GAE7C+G,EAAAzN,cAAcqB,UAAU0F,EAASmC,EAAEhK,KAAMqM,GAIzC,IAHA,IAAMhI,EAASkK,EAAA9L,UAAUmF,gBAAgByE,EAAUD,GAC/C7K,EAAMyI,EAAEwC,KAAKnI,GACbtC,EAAQ,EACHwB,EAAI,EAAGA,EAAIyG,EAAEhK,KAAKkH,KAAS3D,EAAG,CACrC,IAAMhF,EAAQy8B,EAAE32B,EAASd,EAAIY,GACzB5F,EAAQgD,IACVA,EAAMhD,EACNwD,EAAQwB,GAGZ8oC,EAAEnvC,GAAK6E,EAGT,OAAO,IAAItC,EAAAmD,OACPkJ,EAAWzB,EAAakE,EAAA3C,WAAWO,gBAAgBnC,EAAEhK,KAAM,CAACkH,GAAO4E,GAAW,aAASjL,OAAWA,EAAWwrC,GAnCtGxvC,EAAA8lC,YAOb9lC,EAAAsvC,wFCPA,IAAAxL,EAAAtjC,EAAA,GAGA+uC,EAAA,oBAAAA,KA0BA,OAvBEA,EAAAltC,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKzH,KAAOszB,EAAWK,OAAO,OAAQ,GACtClsB,KAAK5B,SAAgD,IAArCytB,EAAWK,OAAO,WAAY,IAGhDuR,EAAAltC,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpBysC,EAAAltC,UAAA67B,gBAAV,SAA0Bp7B,GACxB,OAA8C,IAA1CghC,EAAA9f,aAAarW,QAAQ7K,EAAO,GAAGkD,OASvCupC,EA1BA,GAAsBvvC,EAAAuvC,uCCNtBvvC,EAAAsT,WAuCA,SAAAm8B,GACA,IAAAC,EAAAC,EAAAF,GACAG,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACA,UAAAE,EAAAC,GAAA,EAAAA,GA1CA7vC,EAAA41B,YAiDA,SAAA6Z,GAeA,IAdA,IAAAK,EACAJ,EAAAC,EAAAF,GACAG,EAAAF,EAAA,GACAG,EAAAH,EAAA,GAEA7hB,EAAA,IAAAkiB,EAVA,SAAAN,EAAAG,EAAAC,GACA,UAAAD,EAAAC,GAAA,EAAAA,EASAG,CAAAP,EAAAG,EAAAC,IAEAI,EAAA,EAGA5pB,EAAAwpB,EAAA,EACAD,EAAA,EACAA,EAEAvvC,EAAA,EAAiBA,EAAAgmB,EAAShmB,GAAA,EAC1ByvC,EACAI,EAAAT,EAAA5gB,WAAAxuB,KAAA,GACA6vC,EAAAT,EAAA5gB,WAAAxuB,EAAA,QACA6vC,EAAAT,EAAA5gB,WAAAxuB,EAAA,OACA6vC,EAAAT,EAAA5gB,WAAAxuB,EAAA,IACAwtB,EAAAoiB,KAAAH,GAAA,OACAjiB,EAAAoiB,KAAAH,GAAA,MACAjiB,EAAAoiB,KAAA,IAAAH,EAGA,IAAAD,IACAC,EACAI,EAAAT,EAAA5gB,WAAAxuB,KAAA,EACA6vC,EAAAT,EAAA5gB,WAAAxuB,EAAA,OACAwtB,EAAAoiB,KAAA,IAAAH,GAGA,IAAAD,IACAC,EACAI,EAAAT,EAAA5gB,WAAAxuB,KAAA,GACA6vC,EAAAT,EAAA5gB,WAAAxuB,EAAA,OACA6vC,EAAAT,EAAA5gB,WAAAxuB,EAAA,OACAwtB,EAAAoiB,KAAAH,GAAA,MACAjiB,EAAAoiB,KAAA,IAAAH,GAGA,OAAAjiB,GA1FA7tB,EAAAqvB,cAiHA,SAAA8gB,GAQA,IAPA,IAAAL,EACAzpB,EAAA8pB,EAAAjtC,OACAktC,EAAA/pB,EAAA,EACAgqB,EAAA,GAIAhwC,EAAA,EAAAiwC,EAAAjqB,EAAA+pB,EAA0C/vC,EAAAiwC,EAAUjwC,GAHpD,MAIAgwC,EAAAziC,KAAA2iC,EACAJ,EAAA9vC,IALA,MAKAiwC,IAAAjwC,EALA,QAUA,IAAA+vC,GACAN,EAAAK,EAAA9pB,EAAA,GACAgqB,EAAAziC,KACA4iC,EAAAV,GAAA,GACAU,EAAAV,GAAA,MACA,OAEG,IAAAM,IACHN,GAAAK,EAAA9pB,EAAA,OAAA8pB,EAAA9pB,EAAA,GACAgqB,EAAAziC,KACA4iC,EAAAV,GAAA,IACAU,EAAAV,GAAA,MACAU,EAAAV,GAAA,MACA,MAIA,OAAAO,EAAArkB,KAAA,KA1IA,IALA,IAAAwkB,EAAA,GACAN,EAAA,GACAH,EAAA,oBAAAv7B,sBAAA5P,MAEA4wB,EAAA,mEACAn1B,EAAA,EAAAgmB,EAAAmP,EAAAtyB,OAAkC7C,EAAAgmB,IAAShmB,EAC3CmwC,EAAAnwC,GAAAm1B,EAAAn1B,GACA6vC,EAAA1a,EAAA3G,WAAAxuB,MAQA,SAAAsvC,EAAAF,GACA,IAAAppB,EAAAopB,EAAAvsC,OAEA,GAAAmjB,EAAA,IACA,UAAA9e,MAAA,kDAKA,IAAAqoC,EAAAH,EAAA9hC,QAAA,KAOA,OANA,IAAAiiC,MAAAvpB,GAMA,CAAAupB,EAJAA,IAAAvpB,EACA,EACA,EAAAupB,EAAA,GAqEA,SAAAW,EAAAJ,EAAA5lC,EAAAC,GAGA,IAFA,IAAAslC,EARAW,EASAv6B,EAAA,GACA7V,EAAAkK,EAAqBlK,EAAAmK,EAASnK,GAAA,EAC9ByvC,GACAK,EAAA9vC,IAAA,cACA8vC,EAAA9vC,EAAA,cACA,IAAA8vC,EAAA9vC,EAAA,IACA6V,EAAAtI,KAdA4iC,GADAC,EAeAX,IAdA,OACAU,EAAAC,GAAA,OACAD,EAAAC,GAAA,MACAD,EAAA,GAAAC,IAaA,OAAAv6B,EAAA8V,KAAA,IAhGAkkB,EAAA,IAAArhB,WAAA,OACAqhB,EAAA,IAAArhB,WAAA,sBCnBA7uB,EAAAiuB,KAAA,SAAA7a,EAAA5L,EAAAkpC,EAAAC,EAAAC,GACA,IAAAl2B,EAAA7Z,EACAgwC,EAAA,EAAAD,EAAAD,EAAA,EACAG,GAAA,GAAAD,GAAA,EACAE,EAAAD,GAAA,EACAE,GAAA,EACA3wC,EAAAqwC,EAAAE,EAAA,IACA7vC,EAAA2vC,GAAA,IACAluC,EAAA4Q,EAAA5L,EAAAnH,GAOA,IALAA,GAAAU,EAEA2Z,EAAAlY,GAAA,IAAAwuC,GAAA,EACAxuC,KAAAwuC,EACAA,GAAAH,EACQG,EAAA,EAAWt2B,EAAA,IAAAA,EAAAtH,EAAA5L,EAAAnH,MAAAU,EAAAiwC,GAAA,GAKnB,IAHAnwC,EAAA6Z,GAAA,IAAAs2B,GAAA,EACAt2B,KAAAs2B,EACAA,GAAAL,EACQK,EAAA,EAAWnwC,EAAA,IAAAA,EAAAuS,EAAA5L,EAAAnH,MAAAU,EAAAiwC,GAAA,GAEnB,OAAAt2B,EACAA,EAAA,EAAAq2B,MACG,IAAAr2B,IAAAo2B,EACH,OAAAjwC,EAAAowC,IAAAvb,KAAAlzB,GAAA,KAEA3B,GAAA4D,KAAAyJ,IAAA,EAAAyiC,GACAj2B,GAAAq2B,EAEA,OAAAvuC,GAAA,KAAA3B,EAAA4D,KAAAyJ,IAAA,EAAAwM,EAAAi2B,IAGA3wC,EAAA6sB,MAAA,SAAAzZ,EAAA1R,EAAA8F,EAAAkpC,EAAAC,EAAAC,GACA,IAAAl2B,EAAA7Z,EAAAC,EACA+vC,EAAA,EAAAD,EAAAD,EAAA,EACAG,GAAA,GAAAD,GAAA,EACAE,EAAAD,GAAA,EACAI,EAAA,KAAAP,EAAAlsC,KAAAyJ,IAAA,OAAAzJ,KAAAyJ,IAAA,SACA7N,EAAAqwC,EAAA,EAAAE,EAAA,EACA7vC,EAAA2vC,EAAA,KACAluC,EAAAd,EAAA,OAAAA,GAAA,EAAAA,EAAA,MAmCA,IAjCAA,EAAA+C,KAAA+gC,IAAA9jC,GAEAupB,MAAAvpB,QAAAg0B,KACA70B,EAAAoqB,MAAAvpB,GAAA,IACAgZ,EAAAo2B,IAEAp2B,EAAAjW,KAAAkC,MAAAlC,KAAAmS,IAAAlV,GAAA+C,KAAAy3B,KACAx6B,GAAAZ,EAAA2D,KAAAyJ,IAAA,GAAAwM,IAAA,IACAA,IACA5Z,GAAA,IAGAY,GADAgZ,EAAAq2B,GAAA,EACAG,EAAApwC,EAEAowC,EAAAzsC,KAAAyJ,IAAA,IAAA6iC,IAEAjwC,GAAA,IACA4Z,IACA5Z,GAAA,GAGA4Z,EAAAq2B,GAAAD,GACAjwC,EAAA,EACA6Z,EAAAo2B,GACKp2B,EAAAq2B,GAAA,GACLlwC,GAAAa,EAAAZ,EAAA,GAAA2D,KAAAyJ,IAAA,EAAAyiC,GACAj2B,GAAAq2B,IAEAlwC,EAAAa,EAAA+C,KAAAyJ,IAAA,EAAA6iC,EAAA,GAAAtsC,KAAAyJ,IAAA,EAAAyiC,GACAj2B,EAAA,IAIQi2B,GAAA,EAAWv9B,EAAA5L,EAAAnH,GAAA,IAAAQ,EAAAR,GAAAU,EAAAF,GAAA,IAAA8vC,GAAA,GAInB,IAFAj2B,KAAAi2B,EAAA9vC,EACAgwC,GAAAF,EACQE,EAAA,EAAUz9B,EAAA5L,EAAAnH,GAAA,IAAAqa,EAAAra,GAAAU,EAAA2Z,GAAA,IAAAm2B,GAAA,GAElBz9B,EAAA5L,EAAAnH,EAAAU,IAAA,IAAAyB,kBClFA,IAAA+Q,EAAA,GAAiBA,SAEjBtT,EAAAD,QAAA4E,MAAAqN,SAAA,SAAA4b,GACA,wBAAAta,EAAA3S,KAAAitB,kCCAA5tB,EAAAD,QAAiBQ,EAAQ,kCCFzB,IAAA2wC,EAAAnxC,EA2BA,SAAAoxC,IACAD,EAAA5sB,OAAAV,WAAAstB,EAAAxG,cACAwG,EAAA3xB,KAAAqE,aArBAstB,EAAAE,MAAA,UAGAF,EAAA1sB,OAAwBjkB,EAAQ,IAChC2wC,EAAA/H,aAAwB5oC,EAAQ,IAChC2wC,EAAA5sB,OAAwB/jB,EAAQ,IAChC2wC,EAAAxG,aAAwBnqC,EAAQ,IAGhC2wC,EAAA3xB,KAAwBhf,EAAQ,GAChC2wC,EAAAG,IAAwB9wC,EAAQ,IAChC2wC,EAAAvsB,MAAwBpkB,EAAQ,IAChC2wC,EAAAC,YAaAD,EAAA1sB,OAAAZ,WAAAstB,EAAA/H,cACAgI,kCClCAnxC,EAAAD,QAmBA,SAAAspC,EAAAiI,GACA,IAAAj0B,EAAA,IAAA1Y,MAAA3B,UAAAC,OAAA,GACAsE,EAAA,EACAtC,EAAA,EACAssC,GAAA,EACA,KAAAtsC,EAAAjC,UAAAC,QACAoa,EAAA9V,KAAAvE,UAAAiC,KACA,WAAAkV,QAAA,SAAAC,EAAAC,GACAgD,EAAA9V,GAAA,SAAAsV,GACA,GAAA00B,EAEA,GADAA,GAAA,EACA10B,EACAxC,EAAAwC,OACA,CAGA,IAFA,IAAAQ,EAAA,IAAA1Y,MAAA3B,UAAAC,OAAA,GACAsE,EAAA,EACAA,EAAA8V,EAAApa,QACAoa,EAAA9V,KAAAvE,UAAAuE,GACA6S,EAAA6V,MAAA,KAAA5S,KAIA,IACAgsB,EAAApZ,MAAAqhB,GAAA,KAAAj0B,GACS,MAAAR,GACT00B,IACAA,GAAA,EACAl3B,EAAAwC,sCCxCA,IAAAsD,EAAApgB,EAOAogB,EAAAld,OAAA,SAAA0iB,GACA,IAAArjB,EAAAqjB,EAAA1iB,OACA,IAAAX,EACA,SAEA,IADA,IAAAL,EAAA,IACAK,EAAA,WAAAqjB,EAAA5C,OAAAzgB,MACAL,EACA,OAAAuC,KAAAw3B,KAAA,EAAArW,EAAA1iB,QAAA,EAAAhB,GAUA,IANA,IAAAutC,EAAA,IAAA7qC,MAAA,IAGA6sC,EAAA,IAAA7sC,MAAA,KAGAvE,EAAA,EAAeA,EAAA,IACfoxC,EAAAhC,EAAApvC,KAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,EAAAA,EAAA,OAAAA,IASA+f,EAAAqF,OAAA,SAAArS,EAAA7I,EAAAC,GAMA,IALA,IAIA7I,EAJA0uC,EAAA,KACAqB,EAAA,GACArxC,EAAA,EACAqG,EAAA,EAEA6D,EAAAC,GAAA,CACA,IAAAzG,EAAAqP,EAAA7I,KACA,OAAA7D,GACA,OACAgrC,EAAArxC,KAAAovC,EAAA1rC,GAAA,GACApC,GAAA,EAAAoC,IAAA,EACA2C,EAAA,EACA,MACA,OACAgrC,EAAArxC,KAAAovC,EAAA9tC,EAAAoC,GAAA,GACApC,GAAA,GAAAoC,IAAA,EACA2C,EAAA,EACA,MACA,OACAgrC,EAAArxC,KAAAovC,EAAA9tC,EAAAoC,GAAA,GACA2tC,EAAArxC,KAAAovC,EAAA,GAAA1rC,GACA2C,EAAA,EAGArG,EAAA,QACAgwC,MAAA,KAAAziC,KAAAyT,OAAA4O,aAAAC,MAAA7O,OAAAqwB,IACArxC,EAAA,GASA,OANAqG,IACAgrC,EAAArxC,KAAAovC,EAAA9tC,GACA+vC,EAAArxC,KAAA,GACA,IAAAqG,IACAgrC,EAAArxC,KAAA,KAEAgwC,GACAhwC,GACAgwC,EAAAziC,KAAAyT,OAAA4O,aAAAC,MAAA7O,OAAAqwB,EAAA7mC,MAAA,EAAAxK,KACAgwC,EAAArkB,KAAA,KAEA3K,OAAA4O,aAAAC,MAAA7O,OAAAqwB,EAAA7mC,MAAA,EAAAxK,KAaA+f,EAAA+F,OAAA,SAAAP,EAAAxS,EAAA5L,GAIA,IAHA,IAEA7F,EAFA4I,EAAA/C,EACAd,EAAA,EAEArG,EAAA,EAAmBA,EAAAulB,EAAA1iB,QAAmB,CACtC,IAAApC,EAAA8kB,EAAAiJ,WAAAxuB,KACA,QAAAS,GAAA4F,EAAA,EACA,MACA,QAAA1C,KAAAlD,EAAA2wC,EAAA3wC,IACA,MAAAyG,MAnBA,oBAoBA,OAAAb,GACA,OACA/E,EAAAb,EACA4F,EAAA,EACA,MACA,OACA0M,EAAA5L,KAAA7F,GAAA,MAAAb,IAAA,EACAa,EAAAb,EACA4F,EAAA,EACA,MACA,OACA0M,EAAA5L,MAAA,GAAA7F,IAAA,MAAAb,IAAA,EACAa,EAAAb,EACA4F,EAAA,EACA,MACA,OACA0M,EAAA5L,MAAA,EAAA7F,IAAA,EAAAb,EACA4F,EAAA,GAIA,OAAAA,EACA,MAAAa,MA1CA,oBA2CA,OAAAC,EAAA+C,GAQA6V,EAAAuxB,KAAA,SAAA/rB,GACA,4EAAwE+rB,KAAA/rB,kCChIxE,SAAAvF,IAOAvO,KAAA8/B,WAAA,GAfA3xC,EAAAD,QAAAqgB,EAyBAA,EAAAhe,UAAAsgC,GAAA,SAAAkP,EAAAvI,EAAAiI,GAKA,OAJAz/B,KAAA8/B,WAAAC,KAAA//B,KAAA8/B,WAAAC,GAAA,KAAAjkC,KAAA,CACA07B,KACAiI,OAAAz/B,OAEAA,MASAuO,EAAAhe,UAAAygC,IAAA,SAAA+O,EAAAvI,GACA,QAAAtlC,IAAA6tC,EACA//B,KAAA8/B,WAAA,QAEA,QAAA5tC,IAAAslC,EACAx3B,KAAA8/B,WAAAC,GAAA,QAGA,IADA,IAAAzO,EAAAtxB,KAAA8/B,WAAAC,GACAxxC,EAAA,EAA2BA,EAAA+iC,EAAAlgC,QAC3BkgC,EAAA/iC,GAAAipC,OACAlG,EAAAx/B,OAAAvD,EAAA,KAEAA,EAGA,OAAAyR,MASAuO,EAAAhe,UAAA4gC,KAAA,SAAA4O,GACA,IAAAzO,EAAAtxB,KAAA8/B,WAAAC,GACA,GAAAzO,EAAA,CAGA,IAFA,IAAAd,EAAA,GACAjiC,EAAA,EACcA,EAAA4C,UAAAC,QACdo/B,EAAA10B,KAAA3K,UAAA5C,MACA,IAAAA,EAAA,EAAmBA,EAAA+iC,EAAAlgC,QACnBkgC,EAAA/iC,GAAAipC,GAAApZ,MAAAkT,EAAA/iC,KAAAkxC,IAAAjP,GAEA,OAAAxwB,oCCaA,SAAA/R,EAAAC,GAwNA,MArNA,oBAAA8U,aAAA,WAEA,IAAAg9B,EAAA,IAAAh9B,aAAA,MACAi9B,EAAA,IAAAv9B,WAAAs9B,EAAA1+B,QACAwmB,EAAA,MAAAmY,EAAA,GAEA,SAAAC,EAAA9kB,EAAA9a,EAAArC,GACA+hC,EAAA,GAAA5kB,EACA9a,EAAArC,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GAGA,SAAAE,EAAA/kB,EAAA9a,EAAArC,GACA+hC,EAAA,GAAA5kB,EACA9a,EAAArC,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GAQA,SAAAG,EAAA9/B,EAAArC,GAKA,OAJAgiC,EAAA,GAAA3/B,EAAArC,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACA+hC,EAAA,GAGA,SAAAK,EAAA//B,EAAArC,GAKA,OAJAgiC,EAAA,GAAA3/B,EAAArC,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACA+hC,EAAA,GAjBA9xC,EAAAm1B,aAAAyE,EAAAoY,EAAAC,EAEAjyC,EAAAo1B,aAAAwE,EAAAqY,EAAAD,EAmBAhyC,EAAA+zB,YAAA6F,EAAAsY,EAAAC,EAEAnyC,EAAAg0B,YAAA4F,EAAAuY,EAAAD,EA9CA,GAiDS,WAET,SAAAE,EAAAC,EAAAnlB,EAAA9a,EAAArC,GACA,IAAAu4B,EAAApb,EAAA,MAGA,GAFAob,IACApb,MACA,IAAAA,EACAmlB,EAAA,EAAAnlB,EAAA,eAAA9a,EAAArC,QACA,GAAAkb,MAAAiC,GACAmlB,EAAA,WAAAjgC,EAAArC,QACA,GAAAmd,EAAA,sBACAmlB,GAAA/J,GAAA,mBAAAl2B,EAAArC,QACA,GAAAmd,EAAA,uBACAmlB,GAAA/J,GAAA,GAAA7jC,KAAA6tC,MAAAplB,EAAA,4BAAA9a,EAAArC,OACA,CACA,IAAAwiC,EAAA9tC,KAAAkC,MAAAlC,KAAAmS,IAAAsW,GAAAzoB,KAAAy3B,KAEAmW,GAAA/J,GAAA,GAAAiK,EAAA,QADA,QAAA9tC,KAAA6tC,MAAAplB,EAAAzoB,KAAAyJ,IAAA,GAAAqkC,GAAA,YACA,EAAAngC,EAAArC,IAOA,SAAAyiC,EAAAC,EAAArgC,EAAArC,GACA,IAAA2iC,EAAAD,EAAArgC,EAAArC,GACAu4B,EAAA,GAAAoK,GAAA,MACAH,EAAAG,IAAA,OACAC,EAAA,QAAAD,EACA,aAAAH,EACAI,EACA1B,IACA3I,GAAA5S,KACA,IAAA6c,EACA,sBAAAjK,EAAAqK,EACArK,EAAA7jC,KAAAyJ,IAAA,EAAAqkC,EAAA,MAAAI,EAAA,SAdA3yC,EAAAm1B,aAAAid,EAAAnwC,KAAA,KAAA2wC,GACA5yC,EAAAo1B,aAAAgd,EAAAnwC,KAAA,KAAA4wC,GAgBA7yC,EAAA+zB,YAAAye,EAAAvwC,KAAA,KAAA6wC,GACA9yC,EAAAg0B,YAAAwe,EAAAvwC,KAAA,KAAA8wC,GAvCS,GA4CT,oBAAAh+B,aAAA,WAEA,IAAAi+B,EAAA,IAAAj+B,aAAA,MACAg9B,EAAA,IAAAv9B,WAAAw+B,EAAA5/B,QACAwmB,EAAA,MAAAmY,EAAA,GAEA,SAAAkB,EAAA/lB,EAAA9a,EAAArC,GACAijC,EAAA,GAAA9lB,EACA9a,EAAArC,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GAGA,SAAAmB,EAAAhmB,EAAA9a,EAAArC,GACAijC,EAAA,GAAA9lB,EACA9a,EAAArC,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GACA3/B,EAAArC,EAAA,GAAAgiC,EAAA,GAQA,SAAAoB,EAAA/gC,EAAArC,GASA,OARAgiC,EAAA,GAAA3/B,EAAArC,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAijC,EAAA,GAGA,SAAAI,EAAAhhC,EAAArC,GASA,OARAgiC,EAAA,GAAA3/B,EAAArC,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAgiC,EAAA,GAAA3/B,EAAArC,EAAA,GACAijC,EAAA,GAzBAhzC,EAAAq1B,cAAAuE,EAAAqZ,EAAAC,EAEAlzC,EAAAs1B,cAAAsE,EAAAsZ,EAAAD,EA2BAjzC,EAAAi0B,aAAA2F,EAAAuZ,EAAAC,EAEApzC,EAAAk0B,aAAA0F,EAAAwZ,EAAAD,EA9DA,GAiES,WAET,SAAAE,EAAAhB,EAAAiB,EAAAC,EAAArmB,EAAA9a,EAAArC,GACA,IAAAu4B,EAAApb,EAAA,MAGA,GAFAob,IACApb,MACA,IAAAA,EACAmlB,EAAA,EAAAjgC,EAAArC,EAAAujC,GACAjB,EAAA,EAAAnlB,EAAA,eAAA9a,EAAArC,EAAAwjC,QACa,GAAAtoB,MAAAiC,GACbmlB,EAAA,EAAAjgC,EAAArC,EAAAujC,GACAjB,EAAA,WAAAjgC,EAAArC,EAAAwjC,QACa,GAAArmB,EAAA,uBACbmlB,EAAA,EAAAjgC,EAAArC,EAAAujC,GACAjB,GAAA/J,GAAA,mBAAAl2B,EAAArC,EAAAwjC,OACa,CACb,IAAAZ,EACA,GAAAzlB,EAAA,wBAEAmlB,GADAM,EAAAzlB,EAAA,UACA,EAAA9a,EAAArC,EAAAujC,GACAjB,GAAA/J,GAAA,GAAAqK,EAAA,gBAAAvgC,EAAArC,EAAAwjC,OACiB,CACjB,IAAAhB,EAAA9tC,KAAAkC,MAAAlC,KAAAmS,IAAAsW,GAAAzoB,KAAAy3B,KACA,OAAAqW,IACAA,EAAA,MAEAF,EAAA,kBADAM,EAAAzlB,EAAAzoB,KAAAyJ,IAAA,GAAAqkC,MACA,EAAAngC,EAAArC,EAAAujC,GACAjB,GAAA/J,GAAA,GAAAiK,EAAA,iBAAAI,EAAA,aAAAvgC,EAAArC,EAAAwjC,KAQA,SAAAC,EAAAf,EAAAa,EAAAC,EAAAnhC,EAAArC,GACA,IAAA8S,EAAA4vB,EAAArgC,EAAArC,EAAAujC,GACAxwB,EAAA2vB,EAAArgC,EAAArC,EAAAwjC,GACAjL,EAAA,GAAAxlB,GAAA,MACAyvB,EAAAzvB,IAAA,QACA6vB,EAAA,oBAAA7vB,GAAAD,EACA,cAAA0vB,EACAI,EACA1B,IACA3I,GAAA5S,KACA,IAAA6c,EACA,OAAAjK,EAAAqK,EACArK,EAAA7jC,KAAAyJ,IAAA,EAAAqkC,EAAA,OAAAI,EAAA,kBAfA3yC,EAAAq1B,cAAAge,EAAApxC,KAAA,KAAA2wC,EAAA,KACA5yC,EAAAs1B,cAAA+d,EAAApxC,KAAA,KAAA4wC,EAAA,KAiBA7yC,EAAAi0B,aAAAuf,EAAAvxC,KAAA,KAAA6wC,EAAA,KACA9yC,EAAAk0B,aAAAsf,EAAAvxC,KAAA,KAAA8wC,EAAA,KAnDS,GAuDT/yC,EAKA,SAAA4yC,EAAA1lB,EAAA9a,EAAArC,GACAqC,EAAArC,GAAA,IAAAmd,EACA9a,EAAArC,EAAA,GAAAmd,IAAA,MACA9a,EAAArC,EAAA,GAAAmd,IAAA,OACA9a,EAAArC,EAAA,GAAAmd,IAAA,GAGA,SAAA2lB,EAAA3lB,EAAA9a,EAAArC,GACAqC,EAAArC,GAAAmd,IAAA,GACA9a,EAAArC,EAAA,GAAAmd,IAAA,OACA9a,EAAArC,EAAA,GAAAmd,IAAA,MACA9a,EAAArC,EAAA,OAAAmd,EAGA,SAAA4lB,EAAA1gC,EAAArC,GACA,OAAAqC,EAAArC,GACAqC,EAAArC,EAAA,MACAqC,EAAArC,EAAA,OACAqC,EAAArC,EAAA,YAGA,SAAAgjC,EAAA3gC,EAAArC,GACA,OAAAqC,EAAArC,IAAA,GACAqC,EAAArC,EAAA,OACAqC,EAAArC,EAAA,MACAqC,EAAArC,EAAA,QA3UA9P,EAAAD,QAAAD,gECOA,SAAAwgB,QAAAkzB,YACA,IACA,IAAAhX,IAAAiX,KAAA,QAAA5d,QAAA,UAAA4d,CAAAD,YACA,GAAAhX,UAAAv5B,QAAA/B,OAAA0e,KAAA4c,KAAAv5B,QACA,OAAAu5B,IACK,MAAA/hB,IACL,YAdAza,OAAAD,QAAAugB,sCCMA,IAAAC,EAAAxgB,EAOAwgB,EAAAtd,OAAA,SAAA0iB,GAGA,IAFA,IAAAS,EAAA,EACAvlB,EAAA,EACAT,EAAA,EAAmBA,EAAAulB,EAAA1iB,SAAmB7C,GACtCS,EAAA8kB,EAAAiJ,WAAAxuB,IACA,IACAgmB,GAAA,EACAvlB,EAAA,KACAulB,GAAA,EACA,cAAAvlB,IAAA,cAAA8kB,EAAAiJ,WAAAxuB,EAAA,OACAA,EACAgmB,GAAA,GAEAA,GAAA,EAEA,OAAAA,GAUA7F,EAAAyN,KAAA,SAAA7a,EAAA7I,EAAAC,GAEA,GADAA,EAAAD,EACA,EACA,SAKA,IAJA,IAGA5I,EAHA0uC,EAAA,KACAqB,EAAA,GACArxC,EAAA,EAEAkK,EAAAC,IACA7I,EAAAyR,EAAA7I,MACA,IACAmnC,EAAArxC,KAAAsB,EACAA,EAAA,KAAAA,EAAA,IACA+vC,EAAArxC,MAAA,GAAAsB,IAAA,KAAAyR,EAAA7I,KACA5I,EAAA,KAAAA,EAAA,KACAA,IAAA,EAAAA,IAAA,OAAAyR,EAAA7I,OAAA,OAAA6I,EAAA7I,OAAA,KAAA6I,EAAA7I,MAAA,MACAmnC,EAAArxC,KAAA,OAAAsB,GAAA,IACA+vC,EAAArxC,KAAA,YAAAsB,IAEA+vC,EAAArxC,MAAA,GAAAsB,IAAA,OAAAyR,EAAA7I,OAAA,KAAA6I,EAAA7I,KACAlK,EAAA,QACAgwC,MAAA,KAAAziC,KAAAyT,OAAA4O,aAAAC,MAAA7O,OAAAqwB,IACArxC,EAAA,GAGA,OAAAgwC,GACAhwC,GACAgwC,EAAAziC,KAAAyT,OAAA4O,aAAAC,MAAA7O,OAAAqwB,EAAA7mC,MAAA,EAAAxK,KACAgwC,EAAArkB,KAAA,KAEA3K,OAAA4O,aAAAC,MAAA7O,OAAAqwB,EAAA7mC,MAAA,EAAAxK,KAUAmgB,EAAAqM,MAAA,SAAAjH,EAAAxS,EAAA5L,GAIA,IAHA,IACAmsC,EACAC,EAFArpC,EAAA/C,EAGAnH,EAAA,EAAmBA,EAAAulB,EAAA1iB,SAAmB7C,GACtCszC,EAAA/tB,EAAAiJ,WAAAxuB,IACA,IACA+S,EAAA5L,KAAAmsC,EACSA,EAAA,MACTvgC,EAAA5L,KAAAmsC,GAAA,MACAvgC,EAAA5L,KAAA,GAAAmsC,EAAA,KACS,cAAAA,IAAA,eAAAC,EAAAhuB,EAAAiJ,WAAAxuB,EAAA,MACTszC,EAAA,aAAAA,IAAA,UAAAC,KACAvzC,EACA+S,EAAA5L,KAAAmsC,GAAA,OACAvgC,EAAA5L,KAAAmsC,GAAA,UACAvgC,EAAA5L,KAAAmsC,GAAA,SACAvgC,EAAA5L,KAAA,GAAAmsC,EAAA,MAEAvgC,EAAA5L,KAAAmsC,GAAA,OACAvgC,EAAA5L,KAAAmsC,GAAA,SACAvgC,EAAA5L,KAAA,GAAAmsC,EAAA,KAGA,OAAAnsC,EAAA+C,iCCtGAtK,EAAAD,QA6BA,SAAAqwB,EAAAxlB,EAAA/E,GACA,IAAA+tC,EAAA/tC,GAAA,KACAguC,EAAAD,IAAA,EACAE,EAAA,KACAvsC,EAAAqsC,EACA,gBAAA/tC,GACA,GAAAA,EAAA,GAAAA,EAAAguC,EACA,OAAAzjB,EAAAvqB,GACA0B,EAAA1B,EAAA+tC,IACAE,EAAA1jB,EAAAwjB,GACArsC,EAAA,GAEA,IAAA4K,EAAAvH,EAAAjK,KAAAmzC,EAAAvsC,KAAA1B,GAGA,OAFA,EAAA0B,IACAA,EAAA,KAAAA,IACA4K,kCC5CAnS,EAAAD,QAAA0gB,EAEA,IAAAlB,EAAWhf,EAAQ,GAUnB,SAAAkgB,EAAAmC,EAAAC,GASAhR,KAAA+Q,OAAA,EAMA/Q,KAAAgR,OAAA,EAQA,IAAAkxB,EAAAtzB,EAAAszB,KAAA,IAAAtzB,EAAA,KAEAszB,EAAAtqC,SAAA,WAA4B,UAC5BsqC,EAAA9J,SAAA8J,EAAA1I,SAAA,WAA4C,OAAAx5B,MAC5CkiC,EAAA9wC,OAAA,WAA0B,UAO1B,IAAAqf,EAAA7B,EAAA6B,SAAA,mBAOA7B,EAAAgW,WAAA,SAAAh1B,GACA,OAAAA,EACA,OAAAsyC,EACA,IAAA1L,EAAA5mC,EAAA,EACA4mC,IACA5mC,MACA,IAAAmhB,EAAAnhB,IAAA,EACAohB,GAAAphB,EAAAmhB,GAAA,eAUA,OATAylB,IACAxlB,OAAA,EACAD,OAAA,IACAA,EAAA,aACAA,EAAA,IACAC,EAAA,aACAA,EAAA,KAGA,IAAApC,EAAAmC,EAAAC,IAQApC,EAAAvN,KAAA,SAAAzR,GACA,oBAAAA,EACA,OAAAgf,EAAAgW,WAAAh1B,GACA,GAAA8d,EAAA4B,SAAA1f,GAAA,CAEA,IAAA8d,EAAAwC,KAGA,OAAAtB,EAAAgW,WAAA3P,SAAArlB,EAAA,KAFAA,EAAA8d,EAAAwC,KAAA8K,WAAAprB,GAIA,OAAAA,EAAAilB,KAAAjlB,EAAAklB,KAAA,IAAAlG,EAAAhf,EAAAilB,MAAA,EAAAjlB,EAAAklB,OAAA,GAAAotB,GAQAtzB,EAAAre,UAAAqH,SAAA,SAAAgZ,GACA,IAAAA,GAAA5Q,KAAAgR,KAAA,IACA,IAAAD,EAAA,GAAA/Q,KAAA+Q,KAAA,EACAC,GAAAhR,KAAAgR,KAAA,EAGA,OAFAD,IACAC,IAAA,SACAD,EAAA,WAAAC,GAEA,OAAAhR,KAAA+Q,GAAA,WAAA/Q,KAAAgR,IAQApC,EAAAre,UAAA4xC,OAAA,SAAAvxB,GACA,OAAAlD,EAAAwC,KACA,IAAAxC,EAAAwC,KAAA,EAAAlQ,KAAA+Q,GAAA,EAAA/Q,KAAAgR,GAAA9B,QAAA0B,IAEA,CAAWiE,IAAA,EAAA7U,KAAA+Q,GAAA+D,KAAA,EAAA9U,KAAAgR,GAAAJ,SAAA1B,QAAA0B,KAGX,IAAAmM,EAAAxN,OAAAhf,UAAAwsB,WAOAnO,EAAAkC,SAAA,SAAAH,GACA,OAAAA,IAAAF,EACAyxB,EACA,IAAAtzB,GACAmO,EAAAjuB,KAAA6hB,EAAA,GACAoM,EAAAjuB,KAAA6hB,EAAA,MACAoM,EAAAjuB,KAAA6hB,EAAA,OACAoM,EAAAjuB,KAAA6hB,EAAA,aAEAoM,EAAAjuB,KAAA6hB,EAAA,GACAoM,EAAAjuB,KAAA6hB,EAAA,MACAoM,EAAAjuB,KAAA6hB,EAAA,OACAoM,EAAAjuB,KAAA6hB,EAAA,cAQA/B,EAAAre,UAAAigB,OAAA,WACA,OAAAjB,OAAA4O,aACA,IAAAne,KAAA+Q,GACA/Q,KAAA+Q,KAAA,MACA/Q,KAAA+Q,KAAA,OACA/Q,KAAA+Q,KAAA,GACA,IAAA/Q,KAAAgR,GACAhR,KAAAgR,KAAA,MACAhR,KAAAgR,KAAA,OACAhR,KAAAgR,KAAA,KAQApC,EAAAre,UAAA6nC,SAAA,WACA,IAAAgK,EAAApiC,KAAAgR,IAAA,GAGA,OAFAhR,KAAAgR,KAAAhR,KAAAgR,IAAA,EAAAhR,KAAA+Q,KAAA,IAAAqxB,KAAA,EACApiC,KAAA+Q,IAAA/Q,KAAA+Q,IAAA,EAAAqxB,KAAA,EACApiC,MAOA4O,EAAAre,UAAAipC,SAAA,WACA,IAAA4I,IAAA,EAAApiC,KAAA+Q,IAGA,OAFA/Q,KAAA+Q,KAAA/Q,KAAA+Q,KAAA,EAAA/Q,KAAAgR,IAAA,IAAAoxB,KAAA,EACApiC,KAAAgR,IAAAhR,KAAAgR,KAAA,EAAAoxB,KAAA,EACApiC,MAOA4O,EAAAre,UAAAa,OAAA,WACA,IAAAixC,EAAAriC,KAAA+Q,GACAuxB,GAAAtiC,KAAA+Q,KAAA,GAAA/Q,KAAAgR,IAAA,OACAuxB,EAAAviC,KAAAgR,KAAA,GACA,WAAAuxB,EACA,IAAAD,EACAD,EAAA,MACAA,EAAA,QACAA,EAAA,YACAC,EAAA,MACAA,EAAA,QACAA,EAAA,YACAC,EAAA,wCCrMAp0C,EAAAD,QAAAopC,EAGA,IAAA3kB,EAAajkB,EAAQ,KACrB4oC,EAAA/mC,UAAAlB,OAAAY,OAAA0iB,EAAApiB,YAAA6P,YAAAk3B,EAEA,IAAA5pB,EAAWhf,EAAQ,GAEnB0S,EAAAsM,EAAAtM,OAQA,SAAAk2B,IACA3kB,EAAA7jB,KAAAkR,MAQAs3B,EAAA/Y,MAAA,SAAAvqB,GACA,OAAAsjC,EAAA/Y,MAAA7Q,EAAAqC,qBAAA/b,IAGA,IAAAwuC,EAAAphC,KAAA7Q,qBAAAmS,YAAA,QAAAtB,EAAA7Q,UAAA4D,IAAAjF,KACA,SAAAksB,EAAA9a,EAAArC,GACAqC,EAAAnM,IAAAinB,EAAAnd,IAIA,SAAAmd,EAAA9a,EAAArC,GACA,GAAAmd,EAAAD,KACAC,EAAAD,KAAA7a,EAAArC,EAAA,EAAAmd,EAAAhqB,aACA,QAAA7C,EAAA,EAA4BA,EAAA6sB,EAAAhqB,QAC5BkP,EAAArC,KAAAmd,EAAA7sB,MAgBA,SAAAk0C,EAAArnB,EAAA9a,EAAArC,GACAmd,EAAAhqB,OAAA,GACAsc,EAAAgB,KAAAqM,MAAAK,EAAA9a,EAAArC,GAEAqC,EAAAuP,UAAAuL,EAAAnd,GAdAq5B,EAAA/mC,UAAAshB,MAAA,SAAAjiB,GACA8d,EAAA4B,SAAA1f,KACAA,EAAA8d,EAAAoC,aAAAlgB,EAAA,WACA,IAAA2kB,EAAA3kB,EAAAwB,SAAA,EAIA,OAHA4O,KAAA6T,OAAAU,GACAA,GACAvU,KAAAi4B,MAAAuK,EAAAjuB,EAAA3kB,GACAoQ,MAaAs3B,EAAA/mC,UAAAujB,OAAA,SAAAlkB,GACA,IAAA2kB,EAAAnT,EAAAI,WAAA5R,GAIA,OAHAoQ,KAAA6T,OAAAU,GACAA,GACAvU,KAAAi4B,MAAAwK,EAAAluB,EAAA3kB,GACAoQ,oCCtEA7R,EAAAD,QAAA2qC,EAGA,IAAApmB,EAAa/jB,EAAQ,KACrBmqC,EAAAtoC,UAAAlB,OAAAY,OAAAwiB,EAAAliB,YAAA6P,YAAAy4B,EAEA,IAAAnrB,EAAWhf,EAAQ,GASnB,SAAAmqC,EAAAv3B,GACAmR,EAAA3jB,KAAAkR,KAAAsB,GAUAoM,EAAAtM,SACAy3B,EAAAtoC,UAAA6oC,OAAA1rB,EAAAtM,OAAA7Q,UAAAwI,OAKA8/B,EAAAtoC,UAAAujB,OAAA,WACA,IAAAS,EAAAvU,KAAA6T,SACA,OAAA7T,KAAAM,IAAAkd,UAAAxd,KAAA/B,IAAA+B,KAAA/B,IAAAtL,KAAA8qB,IAAAzd,KAAA/B,IAAAsW,EAAAvU,KAAAuU,qCC7BArmB,EA6BAw0C,QAAch0C,EAAQ,kCClCtBP,EAAAD,QAAAw0C,EAEA,IAAAh1B,EAAWhf,EAAQ,GAsCnB,SAAAg0C,EAAAC,EAAAC,EAAAC,GAEA,sBAAAF,EACA,MAAAjoC,UAAA,8BAEAgT,EAAAa,aAAAzf,KAAAkR,MAMAA,KAAA2iC,UAMA3iC,KAAA4iC,iBAAA1zB,QAAA0zB,GAMA5iC,KAAA6iC,kBAAA3zB,QAAA2zB,IA1DAH,EAAAnyC,UAAAlB,OAAAY,OAAAyd,EAAAa,aAAAhe,YAAA6P,YAAAsiC,EAwEAA,EAAAnyC,UAAAuyC,QAAA,SAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAD,EACA,MAAAxoC,UAAA,6BAEA,IAAAmU,EAAA7O,KACA,IAAAmjC,EACA,OAAAz1B,EAAAW,UAAAy0B,EAAAj0B,EAAAk0B,EAAAC,EAAAC,EAAAC,GAEA,GAAAr0B,EAAA8zB,QAKA,IACA,OAAA9zB,EAAA8zB,QACAI,EACAC,EAAAn0B,EAAA+zB,iBAAA,4BAAAM,GAAAvK,SACA,SAAA3tB,EAAAo4B,GAEA,GAAAp4B,EAEA,OADA6D,EAAAsiB,KAAA,QAAAnmB,EAAA+3B,GACAI,EAAAn4B,GAGA,UAAAo4B,EAAA,CAKA,KAAAA,aAAAH,GACA,IACAG,EAAAH,EAAAp0B,EAAAg0B,kBAAA,4BAAAO,GACqB,MAAAp4B,GAErB,OADA6D,EAAAsiB,KAAA,QAAAnmB,EAAA+3B,GACAI,EAAAn4B,GAKA,OADA6D,EAAAsiB,KAAA,OAAAiS,EAAAL,GACAI,EAAA,KAAAC,GAdAv0B,EAAAnW,KAAA,KAiBK,MAAAsS,GAGL,OAFA6D,EAAAsiB,KAAA,QAAAnmB,EAAA+3B,QACA74B,WAAA,WAA+Bi5B,EAAAn4B,IAAiB,QAnChDd,WAAA,WAA+Bi5B,EAAA1tC,MAAA,mBAAoC,IA6CnEitC,EAAAnyC,UAAAmI,IAAA,SAAA2qC,GAOA,OANArjC,KAAA2iC,UACAU,GACArjC,KAAA2iC,QAAA,gBACA3iC,KAAA2iC,QAAA,KACA3iC,KAAAmxB,KAAA,OAAAH,OAEAhxB,oCC3IA7R,EAAAD,QAAA,kaCEA,IAAAgkC,EAAAxjC,EAAA,IACAoC,EAAApC,EAAA,GAGA4lC,EAAA,SAAAppB,GAAA,SAAAopB,mDAMA,OAN2CnpB,EAAAmpB,EAAAppB,GACzCopB,EAAA/jC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAGzC,MAAO,CAFQsyC,EACXtyC,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIgP,KAAK8rB,QAAS9rB,KAAKgsB,SAAUhsB,KAAKisB,WAGjGqI,EANA,CAA2CpC,EAAAvG,oBAQ3C,SAAgB2X,EACZjoC,EAAWixB,EAAer6B,EAAWu6B,EAAc+W,EAAkBzX,EAAiBE,EACtFC,GAOF,IANA,IAAMuX,EAAkBnoC,EAAEhK,KACpB+E,EAAIotC,EAAgB,GACpB1V,EAAI0V,EAAgB,GAGtBC,EAAc,EACTl1C,EAAI,EAAGA,EAAIi1C,EAAgBpyC,OAAQ7C,IAC1Ck1C,GAAeD,EAAgBj1C,GAYjC,IATA,IAAM6V,EAAS,IAAItT,EAAAmD,OAAOoH,EAAEhK,KAAMgK,EAAEnH,MAE9Bm4B,EAAIhxB,EAAE8G,UACNu7B,EAAIt5B,EAAOjC,UACXuhC,EAAYpX,EAAM1uB,WAClB+lC,EAAQ1xC,EAAE2L,WACVgmC,EAAWpX,EAAK5uB,WAChBimC,EAAeN,EAAS3lC,WAErBkmC,EAAK,EAAGA,EAAK1tC,EAAI03B,EAAGgW,IAC3B,KAAMpuC,EAASouC,EAAKL,EACpB,IAASl1C,EAAI,EAAGA,EAAIk1C,EAAal1C,IAC/BmvC,EAAEhoC,EAASnH,GACPm1C,EAAUI,EAAKhW,KAAOzB,EAAE32B,EAASnH,GAAKq1C,EAASE,EAAKhW,IAAMn7B,KAAKmkC,KAAK+M,EAAaC,EAAKhW,GAAKhC,IAC3F6X,EAAMG,EAAKhW,GAGnB,OAAO1pB,EAtCIlW,EAAAomC,wBAQbpmC,EAAAo1C,obCXA,IAAAnR,EAAAzjC,EAAA,IAEAkR,EAAAlR,EAAA,GAGAmlC,EAAA,SAAA3oB,GACE,SAAA2oB,EACIlH,EAAwDoX,EACxDnuB,EAAiB/hB,GAFrB,IAAA6U,EAGEwC,EAAApc,KAAAkR,KAAM2sB,EAAgB/W,EAAQ/hB,IAAWmM,YAFiB0I,EAAAq7B,aAwB9D,OA1BiC54B,EAAA0oB,EAAA3oB,GAQ/B2oB,EAAAtjC,UAAAq7B,WAAA,SAAWC,GACT,IAAK7rB,KAAK4V,SAAW5V,KAAK+jC,SACxB,MAAM,IAAItuC,MAAM,8DAIlB,IAAKuK,KAAK+jC,SAGJ,MAFI/jC,KAAK4V,OAEH,IAAIngB,MAAM,2DAKxBo+B,EAAAtjC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CAIX,SACIqK,EAAWC,EAAWyoC,EAA8CnwC,EACpEC,GACF,IAAMqZ,EAAStN,EAAAzN,cAAcuB,KAAK2H,EAAGC,EAAGyoC,EAAUnwC,EAASC,GAC3D,IAAKqZ,EACH,MAAM,IAAIzX,MAAM,qBAElB,OAAOyX,EAZU82B,CAAShzC,EAAO,GAAIA,EAAO,GAAIgP,KAAK+jC,UAAW,EAAO/jC,KAAKnM,cAG9EggC,EA1BA,CAAiC1B,EAAAzF,UAApBx+B,EAAA2lC,slBCNb,IAAAzB,EAAA1jC,EAAA,IACAoC,EAAApC,EAAA,GACAu1C,EAAA36B,EAAA5a,EAAA,IAGA+lC,EAAA,SAAAvpB,GAAA,SAAAupB,mDAKA,OAL+BtpB,EAAAspB,EAAAvpB,GAC7BupB,EAAAlkC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQmuB,EAAOnuB,EAAQgP,KAAKzH,QAGvCk8B,EALA,CAA+BrC,EAAAqH,QAO/B,SAAgBta,EAAO9jB,EAAa9C,GAClC,IAAM2rC,EAAS7oC,EAAE,GACX8oC,EAAaD,EAAO7yC,KAE1B,GAAIkH,GAAQ4rC,EAAW/yC,QAAUmH,GAAS,EAAI4rC,EAAW/yC,OACvD,MAAM,IAAIqE,MAAM,gEAGd8C,EAAO,IACTA,EAAO4rC,EAAW/yC,OAASmH,GAQ7B,IAHA,IAAI6rC,EAAiBD,EAAW5rC,GAC1B5G,EAAc,IAAImB,MAAcqxC,EAAW/yC,QAExC7C,EAAI,EAAGA,EAAI8M,EAAEjK,OAAQ7C,IAI5B,IAHA,IACM81C,GADAC,EAAQjpC,EAAE9M,IACS8C,KAEhBkzC,EAAY,EAAGA,EAAYJ,EAAW/yC,OAAQmzC,IAAa,CAElE,GAAIA,IAAchsC,EAChB6rC,GAAkBC,EAAWE,QAI1B,GAAIJ,EAAWI,KAAeF,EAAWE,GAC5C,MAAM,IAAI9uC,MAAM,oCAIlB9D,EAAY4yC,GAAaF,EAAWE,GAKxC5yC,EAAY4G,GAAQ6rC,EAGpB,IAAMhgC,EAAS,IAAItT,EAAAmD,OAAOtC,EAAauyC,EAAOhwC,MACxCwpC,EAAIt5B,EAAOxG,WAIb4mC,EAAY,EAChB,IAASj2C,EAAIoD,EAAYP,OAAS,EAAG7C,GAAKgK,EAAMhK,IAC9Ci2C,GAAa7yC,EAAYpD,GAI3B,IADA,IAAIk2C,EAAa,EACRC,EAAa,EAAGA,EAAarpC,EAAEjK,OAAQszC,IAAc,CAC5D,IAAMJ,EAIFK,EAAiB,EACrB,IAASp2C,GALH+1C,EAAQjpC,EAAEqpC,IAKGrzC,KAAKD,OAAS,EAAG7C,GAAKgK,EAAMhK,IAC7Co2C,GAAkBL,EAAMjzC,KAAK9C,GAY/B,IATA,IAAMq2C,EAAYN,EAAM1mC,WAClBinC,EAAYZ,EAAKnwC,UAAUE,KAAKswC,EAAMjzC,MAMxCyzC,EAAeL,EAEH7vC,GAAPrG,EAAI,EAAO,GAAGA,EAAIs2C,EAAWt2C,IACpCmvC,EAAEoH,EAAev2C,GAAKq2C,EAAUr2C,KAC1BqG,IAAM+vC,IAEVG,GAAiBN,EAAYG,EAC7B/vC,EAAI,GAGR6vC,GAAcE,EAGhB,OAAOvgC,EAzFIlW,EAAAumC,YAObvmC,EAAAixB,waCZA,IAAAkT,EAAA3jC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAGAu+B,EAAAv+B,EAAA,IAEAgmC,EAAA,SAAAxpB,GAAA,SAAAwpB,mDAsBA,OAtB6BvpB,EAAAupB,EAAAxpB,GAC3BwpB,EAAAnkC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GACzC,IAAMqK,EAAIrK,EAAO,GACX+zC,EAAI/zC,EAAO,GACXiB,EAAsB,IAAlBjB,EAAOI,OAAeJ,EAAO,QAAKkB,EAG5C,GAAgC,IAA5B8N,KAAKtB,YAAYtN,OAEnB,IADA,IAAM4zC,EAAQh0C,EAAO,GAAGK,KACf9C,EAAI,EAAGA,EAAIy2C,EAAM5zC,SAAU7C,EAClCyR,KAAKtB,YAAY5C,KAAKkpC,EAAMz2C,IAKhC,IAAMmN,EAAakE,EAAAtB,aAAaY,uBAC5B7D,EAAEhK,KAAM0zC,EAAE1zC,KAAM2O,KAAKnH,QAASmH,KAAKnB,UAAWmB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAKlB,SAC9ExD,EAAI,IAAIxK,EAAAmD,OAAOyH,EAAYL,EAAEnH,MAGnC,OADA+wC,EAAO3pC,EAAGD,EAAG0pC,EAAG9yC,EAAG+N,KAAKnB,UAAWmB,KAAK+sB,MAAO/sB,KAAKrB,KAAMqB,KAAKnH,SACxD,CAACyC,IAEZo5B,EAtBA,CAA6BrC,EAAAzF,MAyB7B,SAAgBqY,EACZvH,EAAWrR,EAAW6Y,EAAW3Y,EAAqB1tB,EAAkCkuB,EACxFpuB,EAA6B9F,GA8B/B,IA7BA,IAAMssC,EAAY9Y,EAAEh7B,KAAK,GACnB+zC,EAAiB/Y,EAAEh7B,KAAK,GACxBg0C,EAAehZ,EAAEh7B,KAAK,GACtBi0C,EAAcjZ,EAAEh7B,KAAK,GAErBk0C,EAAaL,EAAE7zC,KAAK,GACpBm0C,EAAkBN,EAAE7zC,KAAK,GACzBo0C,EAAgBP,EAAE7zC,KAAK,GACvBq0C,EAAeR,EAAE7zC,KAAK,GACtBs0C,EAAcJ,EAAaC,EAAkBC,EAAgBC,EAC7DE,EAAe,CAACH,EAAeC,GAE/BG,EAAanI,EAAErsC,KAAK,GACpBy0C,EAAkBpI,EAAErsC,KAAK,GACzB00C,EAAgBrI,EAAErsC,KAAK,GACvB20C,EAAetI,EAAErsC,KAAK,GAItB40C,EAAoBF,EAAgBC,EAEpCE,EAAWd,EAAiBrY,GAHTsY,EAAeC,GAIlCa,EANcN,EAAaC,EAAkBC,EAAgBC,EAMpCH,EAAa9Y,EACtCqZ,EAAWT,EAAc5Y,EACzBsZ,EAAajB,EAAiBrY,GAJhB6Y,EAAa,GAAKA,EAAa,IAO7CU,EAAkB,IAAItjC,aAFJqjC,EAAaJ,GAI5BM,EAAW,EAAGA,EAAWpB,IAAaoB,EAAU,CAGvD,IAFA,IAAIC,EAAiB,EACjBC,EAAiB,EACZC,EAAW,EAAGA,EAAW3Z,IAAS2Z,EACzCC,EACIta,EAAElqB,UAAUuc,SAAS8nB,EAAiBE,EAAWR,GAAWI,EAAiBlB,EAAiBrY,EAC9FsY,EAAcC,EAAaM,EAAa,GAAIA,EAAa,GAAI/mC,EAAU,GAAIA,EAAU,GAAIF,EAAK,GAAIA,EAAK,GACvGA,EAAK,GAAIA,EAAK,GAAI9F,EAAQ,GAAIA,EAAQ,IAE1Co0B,EAAAW,SACIsX,EAAE/iC,UAAUuc,SAASgoB,EAAWN,GAAWE,EAC3C5I,EAAEv7B,UAAUuc,SAAS+nB,EAAiBC,EAAWP,IAAW,GAAO,EAAO,EAAG,EAAGZ,EAAaxY,EAC7FkZ,EAAmBI,GAGzBG,GAAkBN,EAAWnZ,EAC7B0Z,GAAkBN,EAAWpZ,EAI/B,GAAIR,EAOF,IANA,IAAMqa,EAAWra,EAAEpqB,UACb0kC,EAAanJ,EAAEv7B,UACf2kC,EAAYpJ,EAAErsC,KAAK,GACnB01C,EAAiBrJ,EAAErsC,KAAK,GACxBoyC,EAAc/F,EAAErsC,KAAK,GAAKqsC,EAAErsC,KAAK,GACjC21C,EAAWD,EAAiBtD,EACzBwD,EAAQ,EAAGA,EAAQH,IAAaG,EACvC,IAAK,IAAIC,EAAU,EAAGA,EAAUH,IAAkBG,EAEhD,IADA,IAAMxxC,EAASuxC,EAAQD,EAAWE,EAAUzD,EACnCrwC,EAAQ,EAAGA,EAAQqwC,IAAerwC,EACzCyzC,EAAWnxC,EAAStC,IAAUwzC,EAASM,GAOjD,SAASP,EACLQ,EAAoCC,EAAqC9uB,EAAkBG,EAC3FC,EAAe2uB,EAAkBC,EAAkBC,EAAoBC,EAAoBC,EAC3FC,EAAeC,EAAeC,EAAeC,EAAkBC,GACjE,IAAMC,EAAyF,MAA1EtvB,EAASkvB,EAAQF,GAASF,GAAcF,EAAW,GAAK,IAAMQ,GAC7EG,EAAwF,MAAzEtvB,EAAQgvB,EAAQE,GAASJ,GAAcF,EAAW,GAAK,IAAMQ,GAIlF,GAAmB,IAAfP,GAAmC,IAAfC,GAA8B,IAAVE,GAAyB,IAAVE,GAAyB,IAAVH,GAAyB,IAAVE,EAkCzF,IAPA,IAGMM,EAAmE,MAAlDxvB,EAASgvB,EAAQE,GAHtBJ,GAAcF,EAAW,GAAK,IAGaQ,GACvDK,EAAiE,MAAjDxvB,EAAQgvB,EAAQE,GAHpBJ,GAAcF,EAAW,GAAK,IAGWQ,GAErDK,EAAe7vB,EAAW+uB,EAAWC,EAClCt4C,EAAI,EAAGA,EAAIm5C,IAAgBn5C,EAIlC,IAHA,IAAMo5C,EAAWp5C,EAAIs4C,EACfe,KAAcr5C,EAAIs4C,GAAYD,EAC9BiB,KAAUt5C,GAAKq4C,EAAWC,IACvBiB,EAAI,EAAGA,EAAIN,IAAcM,EAChC,IAAK,IAAIxD,EAAI,EAAGA,EAAImD,IAAanD,EAAG,CAClC,IAAMyD,EAAQD,EAAIV,EAAWJ,EAAQY,EAAWd,EAC1CkB,EAAQ1D,EAAI+C,EAAWJ,EAAQU,EAAWZ,EAE9CJ,GAAUp4C,EAAIi5C,EAAaM,GAAKL,EAAYnD,GAD1CyD,GAAS,GAAKA,EAAQ/vB,GAAUgwB,GAAS,GAAKA,EAAQ/vB,EACPyuB,GAASmB,EAAO7vB,EAAS+vB,GAAS9vB,EAAQ+vB,GAE1C,OA5CvD,IAAK,IAAIjvC,EAAI,EAAGA,EAAI8e,EAAW+uB,EAAWC,EAAU9tC,IAQlD,IAPA,IAAMkvC,KAASlvC,GAAK6tC,EAAWC,IACzB3yC,EAAO6E,GAAK6tC,EAAWC,GACvBqB,KAAQh0C,EAAO2yC,GACfsB,EAAKj0C,EAAO2yC,EACZuB,EAAaH,GAAOrB,EAAWC,EAAWS,EAAWC,GAAYW,GAAMrB,EAAWS,EAAWC,GAC/FY,GAAMb,EAAWC,GACfc,EAAaJ,GAAOjwB,EAASC,GAC1Bpd,EAAI,EAAGA,EAAIysC,EAAUzsC,IAAK,CACjC,IAAMytC,EAAKztC,EAAIusC,EAAWc,EACpBK,EAAKJ,EACX,GAAiB,IAAbd,EACFV,EAASjzC,IACLgzC,EAAQzoB,SAASoqB,EAAaC,EAAKrwB,EAAQswB,EAAIF,EAAaC,EAAKrwB,EAAQswB,EAAKhB,GAC9Ea,EAAavtC,EAAI0sC,QAErB,IAAK,IAAI3sC,EAAI,EAAGA,EAAI2sC,EAAU3sC,IAC5B+rC,EAASyB,GAAcvtC,EAAI0sC,EAAW3sC,IAAM8rC,EAAQ2B,GAAcC,EAAKrwB,EAAQswB,EAAK3tC,EAAIysC,KA1HvF55C,EAAAwmC,UAyBbxmC,EAAA+2C,waChCA,IAAA3S,EAAA5jC,EAAA,IACAoC,EAAApC,EAAA,GAGAmmC,EAAA,SAAA3pB,GAAA,SAAA2pB,mDAKA,OALgC1pB,EAAA0pB,EAAA3pB,GAC9B2pB,EAAAtkC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQi4C,EAAQj4C,EAAO,GAAIgP,KAAK+5B,MAAO/5B,KAAKg6B,YAGvDnF,EALA,CAAgCvC,EAAAwH,SAOhC,SAAgBmP,EAAQ5tC,EAAW0+B,EAAemP,GAChD,IAAKA,EACH,MAAM,IAAIzzC,MAAM,+BAGlB,IAAM2O,EAAS,IAAItT,EAAAmD,OAAOoH,EAAEhK,KAAMgK,EAAEnH,MAC9Bm4B,EAAIhxB,EAAE8G,UAGZ,OAFUiC,EAAOxG,WACfzJ,IAAIk4B,GACCjoB,EAhBIlW,EAAA2mC,aAOb3mC,EAAA+6C,yaCXA,IAAA1W,EAAA7jC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAGAumC,EAAA,SAAA/pB,GAAA,SAAA+pB,mDAKA,OALgC9pB,EAAA8pB,EAAA/pB,GAC9B+pB,EAAA1kC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQm4C,EAAQn4C,EAAO,GAAIgP,KAAKzH,QAG3C08B,EALA,CAAgC1C,EAAA0H,SAOhC,SAAgBkP,EAAQ9tC,EAAW9C,GACjC,IAAMmD,EAAakE,EAAA9L,UAAUoH,aAAaG,EAAEhK,KAAMkH,GAC5C6L,EAAS,IAAItT,EAAAmD,OAAOyH,EAAYL,EAAEnH,MAElCm4B,EAAIhxB,EAAEuC,WAKZ,OAJUwG,EAAOxG,WAEfzJ,IAAIk4B,GAECjoB,EAhBIlW,EAAA+mC,aAOb/mC,EAAAi7C,yaCfA,IAAA3W,EAAA9jC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAGAwmC,EAAA,SAAAhqB,GAAA,SAAAgqB,mDAKA,OAL+B/pB,EAAA+pB,EAAAhqB,GAC7BgqB,EAAA3kC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQo4C,EAAOp4C,EAAO,GAAIA,EAAO,GAAIgP,KAAKzH,QAGrD28B,EALA,CAA+B1C,EAAA0H,QAO/B,SAAgBkP,EAAO/tC,EAAWnC,EAAiBX,GACjDA,EAAOqH,EAAA9L,UAAUsF,UAAUb,EAAM8C,EAAEhK,KAAKD,QACxC,IAAMC,EAAOgK,EAAEhK,KAAK0H,QACdswC,EAAUh4C,EAAK0H,QACfuwC,EAAcpwC,EAAQ2E,KAC5BwrC,EAAQ9wC,GAAQ+wC,EAAYl4C,OAM5B,IALA,IAAMm4C,EAAc3pC,EAAA9L,UAAU6E,eAAetH,GACvCm4C,EAAiB5pC,EAAA9L,UAAU6E,eAAe0wC,GAE1C3L,EADS,IAAI5sC,EAAAmD,OAAOo1C,EAAShuC,EAAEnH,MACpB0J,WACXyuB,EAAIhxB,EAAEwC,KACHtP,EAAI,EAAGA,EAAImvC,EAAEtsC,SAAU7C,EAAG,CACjC,IAAMk7C,EAAkB7pC,EAAA9L,UAAUqF,gBAAgB5K,EAAGi7C,GAC/CE,EAAkBD,EAAgB1wC,QACxC2wC,EAAgBnxC,GAAQ+wC,EAAYG,EAAgBlxC,IACpD,IAAMoxC,EAAY/pC,EAAA9L,UAAUmF,gBAAgBywC,EAAiBH,GAC7D7L,EAAEnvC,GAAK89B,EAAEsd,GAGX,IAAMjuC,EAAarK,EAAK0H,MAAM,EAAGR,GAAM4mB,OAAOjmB,EAAQ7H,MAAM8tB,OAAO9tB,EAAK0H,MAAMR,EAAO,IACrF,OAAO,IAAIzH,EAAAmD,OAAOyH,EAAYL,EAAEnH,UAAMhC,OAAWA,EAAWwrC,GA3BjDxvC,EAAAgnC,YAObhnC,EAAAk7C,83BCTA,IAAA3W,EAAA/jC,EAAA,IACAoC,EAAApC,EAAA,GACAgf,EAAApE,EAAA5a,EAAA,IAGAu+B,EAAAv+B,EAAA,IAEAymC,EAAA,SAAAjqB,GAAA,SAAAiqB,mDAKA,OAL6BhqB,EAAAgqB,EAAAjqB,GAC3BiqB,EAAA5kC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ44C,EAAK54C,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIgP,KAAK1D,MAAO0D,KAAKiuB,KAAMjuB,KAAK+tB,OAAQ/tB,KAAKguB,UAGlGmH,EALA,CAA6B1C,EAAA9D,MAO7B,SAAgBib,EAAKt7C,EAAW2D,EAAWjD,EAAWsN,EAAe2xB,EAAcF,EAAiBC,GAC5F,IAAAh7B,EAAAC,EAAAya,EAAA/X,SAAAC,qBAAAtH,EAAA+C,KAAA08B,EAAA97B,EAAAZ,KAAA28B,EAAAh/B,EAAAqC,MAAA,GAAC6E,EAAAlD,EAAA,GAAGoD,EAAApD,EAAA,GAAGmD,EAAAnD,EAAA,GAGPoR,EAAS,IAAItT,EAAAmD,OAAO,CAACiC,EAAGE,GAAI9H,EAAE4F,MAEpC,GAAIwZ,EAAKvb,cAAcuB,KAAK0Q,EAAQpV,EAAG,SAACV,EAAG2D,GAAM,OAAAA,IAAG,KAAUmS,EAC5D,MAAM,IAAI3O,MAAM,0CAKlB,OAFAw3B,EAAAW,SAASt/B,EAAE6T,UAAWlQ,EAAEkQ,UAAWiC,EAAOjC,UAAW4rB,EAAQC,EAAQ1xB,EAAO2xB,EAAM/3B,EAAGE,EAAGD,GAEjFiO,EAnBIlW,EAAAinC,UAObjnC,EAAA07C,mtBCdA,IAAAlX,EAAAhkC,EAAA,IACAoC,EAAApC,EAAA,GAGA4mC,EAAA,SAAApqB,GAAA,SAAAoqB,mDAKA,OALoCnqB,EAAAmqB,EAAApqB,GAClCoqB,EAAA/kC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ64C,EAAY74C,EAAO,GAAIgP,KAAKo6B,KAAMp6B,KAAKssB,SAG1DgJ,EALA,CAAoC5C,EAAAyH,aAOpC,SAAgB0P,EAAYxuC,EAAW++B,EAAgB9N,GAKrD,IAJM,IAAAt5B,EAAAC,EAAAoI,EAAAhK,KAAA,GAAC+E,EAAApD,EAAA,GAAG86B,EAAA96B,EAAA,GAAG82C,EAAA92C,EAAA,GAAGkyC,EAAAlyC,EAAA,GACVoR,EAAS,IAAItT,EAAAmD,OAAO,CAACmC,EAAG03B,EAAGgc,EAAG5E,GAAI7pC,EAAEnH,MACpCm4B,EAAIhxB,EAAE8G,UACNu7B,EAAIt5B,EAAOjC,UACR2hC,EAAK,EAAGA,EAAK1tC,EAAI03B,EAAGgW,IAC3B,IAAK,IAAIiG,EAAK,EAAGA,EAAKD,EAAI5E,EAAG6E,IAAM,CACjC,IAAM32C,EAAQ0wC,EAAKgG,EAAI5E,EAAI6E,EAC3BrM,EAAEtqC,GAASi5B,EAAEj5B,GAASk5B,EAAQ8N,EAAK0J,EAAKhW,GAI5C,OAAO1pB,EAnBIlW,EAAAonC,iBAObpnC,EAAA27C,6aCXA,IAAAlX,EAAAjkC,EAAA,IACAoC,EAAApC,EAAA,GAGA6mC,EAAA,SAAArqB,GAAA,SAAAqqB,mDAKA,OAL8CpqB,EAAAoqB,EAAArqB,GAC5CqqB,EAAAhlC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQg5C,EAAsBh5C,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIgP,KAAK8rB,WAG/EyJ,EALA,CAA8C5C,EAAA2H,uBAO9C,SAAgB0P,EAAsB3uC,EAAWixB,EAAer6B,EAAW65B,GAOzE,IANA,IAAM0X,EAAkBnoC,EAAEhK,KACpB+E,EAAIotC,EAAgB,GACpB1V,EAAI0V,EAAgB,GAGtBC,EAAc,EACTl1C,EAAI,EAAGA,EAAIi1C,EAAgBpyC,OAAQ7C,IAC1Ck1C,GAAeD,EAAgBj1C,GAgBjC,IAdA,IAOI07C,EACAzd,EACA+W,EACA2G,EACAC,EACAC,EAZEhmC,EAAS,IAAItT,EAAAmD,OAAOoH,EAAEhK,KAAMgK,EAAEnH,MAE9Bm4B,EAAIhxB,EAAE8G,UACNu7B,EAAIt5B,EAAOjC,UACXuhC,EAAYpX,EAAM1uB,WAClB+lC,EAAQ1xC,EAAE2L,WASPkmC,EAAK,EAAGA,EAAK1tC,EAAI03B,EAAGgW,IAAM,CAEjCqG,GADAD,EAAiBpG,EAAKL,GACKA,EAC3B2G,EAAiBtG,EAAKhW,EAGtBmc,EAAO,EACP,IAAS17C,EAAI27C,EAAgB37C,EAAI47C,IAAW57C,EAC1C07C,GAAQ5d,EAAE99B,GAEZi+B,EAAOyd,EAAOxG,EAGdwG,EAAO,EACP,IAAS17C,EAAI27C,EAAgB37C,EAAI47C,IAAW57C,EAC1C07C,GAAQt3C,KAAKyJ,IAAIiwB,EAAE99B,GAAKi+B,EAAM,GAEhC+W,EAAW0G,EAAOxG,EAGlB,IAASl1C,EAAI27C,EAAgB37C,EAAI47C,IAAW57C,EAC1CmvC,EAAEnvC,GAAKm1C,EAAU0G,KAAoB/d,EAAE99B,GAAKi+B,GAAQ75B,KAAKmkC,KAAKyM,EAAWzX,IAAY6X,EAAMyG,GAI/F,OAAOhmC,EAxDIlW,EAAAqnC,2BAObrnC,EAAA87C,gmBCXA,IAAApX,EAAAlkC,EAAA,IACAoC,EAAApC,EAAA,GACAgf,EAAApE,EAAA5a,EAAA,IAGAinC,EAAA,SAAAzqB,GAAA,SAAAyqB,mDAKA,OAL4BxqB,EAAAwqB,EAAAzqB,GAC1ByqB,EAAAplC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQq5C,EAAIr5C,EAAO,GAAIgP,KAAK1D,MAAO0D,KAAKiuB,KAAMjuB,KAAKo6B,KAAMp6B,KAAKhM,QAGzE2hC,EALA,CAA4B/C,EAAA0X,KAO5B,SAAgBD,EAAIhvC,EAAWiB,EAAe2xB,EAAcmM,EAAcpmC,GAMxE,IALA,IAAMoC,EAAIiF,EAAEhK,KAAK,GACXy8B,EAAIzyB,EAAEhK,KAAK,GACXg7B,EAAIhxB,EAAE8G,UACRshC,EAAc,EAETl1C,EAAI,EAAGA,EAAI8M,EAAEhK,KAAKD,SAAU7C,EACnCk1C,GAAepoC,EAAEhK,KAAK9C,GAGxB,IAAMg8C,EAAiB9G,EAAc3V,EAG/B1pB,EAAS,IAAItT,EAAAmD,OAAOoH,EAAEhK,KAAMgK,EAAEnH,MAC9BwpC,EAAc,IAAI5qC,MAAM4a,EAAK5Z,UAAUE,KAAKqH,EAAEhK,OAGpD,IAAS9C,EAAI,EAAGA,EAAImvC,EAAEtsC,SAAU7C,EAC9BmvC,EAAEnvC,GAAK6rC,EAWT,IAPA,IACMoQ,EAAmB,IAAIvnC,cADH6qB,EAAI95B,EAAO,GAAKyvC,GAGpCgH,EAAgBnuC,EAAQtI,EACxB02C,GAAU12C,EAAO,GAAK,EAGnB5D,EAAI,EAAGA,EAAIgG,IAAKhG,EAAG,CAE1Bsd,EAAKxR,SAASC,IAAIquC,EAAkBne,EAAGqe,EAASjH,EAAa8G,EAAiBn6C,EAAGm6C,GAGjF,IAAK,IAAIv7C,EAAI,EAAGA,EAAIgF,IAAQhF,EAC1B0e,EAAKxR,SAASG,KAAKqhC,EAAG8M,EAAkBD,EAAiBn6C,EAAGpB,EAAIy0C,EAAaA,EAAagH,GAG5F,IAASz7C,EAAI,EAAGA,EAAI8+B,IAAK9+B,EAAG,CAC1B,IAAM27C,EAAkBv6C,EAAIm6C,EAAiBv7C,EAAIy0C,EAGjD/1B,EAAKvY,gBAAgBuoC,EAAGA,EAAGiN,EAAiBA,EAAkBlH,EAAaA,GAG3E/1B,EAAKxR,SAASG,KACVqhC,EAAG8M,EAAkBG,GAAkB37C,EAAIgF,EAAO,GAAKyvC,EAAaA,EAAagH,GAGrF/8B,EAAKxR,SAASG,KAAKqhC,EAAG8M,EAAkBG,GAAkB37C,EAAI,GAAKy0C,EAAaA,GAAcgH,IAUlG,OANA/8B,EAAKxR,SAASK,KAAKmhC,EAAGA,EAAG,EAAG,EAAGhwB,EAAK5Z,UAAUE,KAAKqH,EAAEhK,OAAQ48B,GAE7DvgB,EAAKxR,SAASM,IAAIkhC,EAAGrR,EAAG,EAAG,EAAG3e,EAAK5Z,UAAUE,KAAKqH,EAAEhK,OAEpD+S,EAAOjC,UAAUhO,IAAIupC,GAEdt5B,EAlEIlW,EAAAynC,SAObznC,EAAAm8C,qFCPA,IAAAC,EAAA,oBAAAA,KAmCA,OAhCEA,EAAA/5C,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAK1D,MAAQuvB,EAAWE,SAAS,QAAS,MAC1C/rB,KAAKiuB,KAAOpC,EAAWE,SAAS,OAAQ,KACxC/rB,KAAKo6B,KAAOvO,EAAWE,SAAS,OAAQ,GACxC/rB,KAAKhM,KAAO63B,EAAWK,OAAO,SAGhCoe,EAAA/5C,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,YAKlBJ,EAAO,GAAGK,KAAKD,OAAS,IAIrB4O,KAAKosB,gBAAgBp7B,KAGpBs5C,EAAA/5C,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MAWlDo2C,EAnCA,GAAsBp8C,EAAAo8C,qaCLtB,IAAAzX,EAAAnkC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAGA2lC,EAAA,SAAAnpB,GAAA,SAAAmpB,mDAMA,OANoClpB,EAAAkpB,EAAAnpB,GAClCmpB,EAAA9jC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAGzC,MAAO,CADH45C,EAAY55C,EAAO,GAAIgP,KAAKlB,QAASkB,KAAK8uB,gBAAiB9uB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAKnH,WAGrGw7B,EANA,CAAoCxB,EAAAhE,aAAvB3gC,EAAAmmC,iBAQb,IAAAe,EAAA,SAAAlqB,GAAA,SAAAkqB,mDAKA,OAL0CjqB,EAAAiqB,EAAAlqB,GACxCkqB,EAAA7kC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ65C,EAAkB75C,EAAO,MAG5CokC,EALA,CAA0CvC,EAAA7D,mBAA7B9gC,EAAAknC,uBAOb,IAAAQ,EAAA,SAAA1qB,GAAA,SAAA0qB,mDAKA,OALgCzqB,EAAAyqB,EAAA1qB,GAC9B0qB,EAAArlC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ85C,EAAQ95C,EAAO,GAAIgP,KAAKlB,QAASkB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAKnH,WAGtF+8B,EALA,CAAgC/C,EAAA5D,SAAnB/gC,EAAA0nC,aAOb,IAAAP,EAAA,SAAAnqB,GAAA,SAAAmqB,mDAKA,OALsClqB,EAAAkqB,EAAAnqB,GACpCmqB,EAAA9kC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ+5C,EAAc/5C,EAAO,MAGxCqkC,EALA,CAAsCxC,EAAA1D,eAQtC,SAAgByb,EACZ7sC,EAAee,EAAiBgwB,EAA0BpwB,EAAuBC,EACjF9F,GACF,OAAO8V,GACH,EAAO5Q,EAAOe,EAASgwB,EAAiBpwB,EAAaC,EAAM9F,EAAS,EAAG,SAACvK,EAAG2D,GAAM,OAAC3D,EAAI2D,GAAI,SAAC3D,EAAG2D,GAAM,OAAC3D,EAAI2D,IAG/G,SAAgB44C,EAAkB9sC,GAChC,OAAO4Q,GAAK,EAAM5Q,EAAO,UAAU,EAAO,GAAI,GAAI,GAAI,EAAG,SAACzP,EAAG2D,GAAM,OAAC3D,EAAI2D,GAAI,SAAC3D,EAAG2D,GAAM,OAAC3D,EAAI2D,IAG7F,SAAgB64C,EACZ/sC,EAAee,EAAiBJ,EAAuBC,EAAgB9F,GACzE,OAAO8V,GACH,EAAO5Q,EAAOe,GAAS,EAAOJ,EAAaC,EAAM9F,EAASmC,OAAOgwC,iBAAkB,SAAC18C,EAAG2D,GAAM,OAACU,KAAKC,IAAItE,EAAG2D,IAC1G,SAAC3D,EAAG2D,GAAM,OAAA3D,IAGhB,SAAgBy8C,EAAchtC,GAC5B,OAAO4Q,GACH,EAAM5Q,EAAO,UAAU,EAAO,GAAI,GAAI,GAAI/C,OAAOgwC,iBAAkB,SAAC18C,EAAG2D,GAAM,OAACU,KAAKC,IAAItE,EAAG2D,IAAK,SAAC3D,EAAG2D,GAAM,OAAA3D,IAmB/G,SAAgBqgB,EACZnQ,EAA2BT,EAAee,EAAiBgwB,EAA0BpwB,EACrFC,EAAgB9F,EAAmBoyC,EAAkBC,EACrDC,GAEFvrC,EAAAtB,aAAaC,qBAAqBC,EAAkBT,EAAM1M,KAAMqN,EAAa7F,EAAS8F,GAetF,IAZA,IAAMhN,EACFiO,EAAAtB,aAAaU,uBAAuBR,EAAkBT,EAAM1M,KAAMwH,EAAS6F,EAAaC,EAAMG,GAE5FssC,EAAaxrC,EAAA9L,UAAUE,KAAK0K,GAC5B2sC,EAAgBzrC,EAAA9L,UAAU6E,eAAe+F,GACzC4sC,EAAcD,EAAcj6C,OAC5BwH,EAAOjH,EAAYP,OAEnBm6C,EAAa3rC,EAAA9L,UAAUE,KAAKrC,GAC5ByS,EAAS,IAAItT,EAAAmD,OAAOtC,EAAaoM,EAAM7J,MACvCs3C,EAAe5rC,EAAA9L,UAAU6E,eAAehH,GAErC4L,EAAM,EAAGA,EAAMguC,EAAYhuC,IAAO,CAKzC,IAJA,IAAMkuC,EAAS7rC,EAAA9L,UAAUqF,gBAAgBoE,EAAKiuC,GACxCE,EAAWD,EAAO1yC,MAAM,GACxBsC,EAAIowC,EAAO1yC,MAAM,GAEdxK,EAAI,EAAGA,EAAI+8C,EAAa/8C,IAC/Bm9C,EAAS9yC,EAAO0yC,EAAc/8C,GAAKk9C,EAAO7yC,EAAO0yC,EAAc/8C,GAAKsK,EAAQtK,GAE9E,IAAIqB,EAAQq7C,EACR5wC,EAAM,EACNsxC,GAAQ,EAEZ,IAASp9C,EAAI,EAAGA,EAAI68C,EAAY78C,IAAK,CACnC,IAAMmH,EAASkK,EAAA9L,UAAUqF,gBAAgB5K,EAAG88C,GAC5CM,GAAQ,EAER,IAAK,IAAI/2C,EAAIgE,EAAO0yC,EAAa12C,EAAIgE,EAAMhE,IAGzC,GAFAyG,EAAEzG,GAAK82C,EAAS92C,GAAKc,EAAOd,EAAIgE,EAAO0yC,GAAe3sC,EAAK/J,EAAI,GAE3DyG,EAAEzG,IAAMmJ,EAAM1M,KAAKuD,IAAMyG,EAAEzG,GAAK,EAAG,CACrCyF,IACAsxC,GAAQ,EACR,MAGJ/7C,EAAQ+7C,EAAQ/7C,EAAQs7C,EAAUt7C,EAAOmO,EAAMvO,IAAI6L,IAErDzL,EAA0Bu7C,EAAQv7C,EAA1Bk/B,EAAiCsc,EAA6BA,EAAa/wC,GACnF+J,EAAOjQ,IAAIs3C,EAAQ77C,GAGrB,OAAOwU,EAlGIlW,EAAAmnC,mBAQbnnC,EAAA08C,cAOA18C,EAAA28C,oBAIA38C,EAAA48C,UAOA58C,EAAA68C,gBAqBA78C,EAAAygB,saC1EA,IAAAi9B,EAAAl9C,EAAA,IAEAkR,EAAAlR,EAAA,GAGAynC,EAAA,SAAAjrB,GAAA,SAAAirB,mDAKA,OALkChrB,EAAAgrB,EAAAjrB,GAChCirB,EAAA5lC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ66C,EAAU76C,EAAO,GAAIgP,KAAKvE,KAAMuE,KAAK5B,YAGxD+3B,EALA,CAAkCyV,EAAArR,YAArBrsC,EAAAioC,eAOb,IAAAC,EAAA,SAAAlrB,GAAA,SAAAkrB,mDAKA,OALwCjrB,EAAAirB,EAAAlrB,GACtCkrB,EAAA7lC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ86C,EAAgB96C,EAAO,GAAIgP,KAAKvE,KAAMuE,KAAK5B,YAG9Dg4B,EALA,CAAwCwV,EAAArR,YAA3BrsC,EAAAkoC,qBAOb,IAAAN,EAAA,SAAA5qB,GAAA,SAAA4qB,mDAKA,OALqC3qB,EAAA2qB,EAAA5qB,GACnC4qB,EAAAvlC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ+6C,EAAa/6C,EAAO,GAAIgP,KAAKvE,KAAMuE,KAAK5B,YAG3D03B,EALA,CAAqC8V,EAAArR,YAAxBrsC,EAAA4nC,kBAOb,IAAAC,EAAA,SAAA7qB,GAAA,SAAA6qB,mDAKA,OALkC5qB,EAAA4qB,EAAA7qB,GAChC6qB,EAAAxlC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQg7C,EAAUh7C,EAAO,GAAIgP,KAAKvE,KAAMuE,KAAK5B,YAGxD23B,EALA,CAAkC6V,EAAArR,YAArBrsC,EAAA6nC,eAOb,IAAAE,EAAA,SAAA/qB,GAAA,SAAA+qB,mDAKA,OALkC9qB,EAAA8qB,EAAA/qB,GAChC+qB,EAAA1lC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQi7C,EAAUj7C,EAAO,GAAIgP,KAAKvE,KAAMuE,KAAK5B,YAGxD63B,EALA,CAAkC2V,EAAArR,YAArBrsC,EAAA+nC,eAOb,IAAAD,EAAA,SAAA9qB,GAAA,SAAA8qB,mDAKA,OALmC7qB,EAAA6qB,EAAA9qB,GACjC8qB,EAAAzlC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQk7C,EAAWl7C,EAAO,GAAIgP,KAAKvE,KAAMuE,KAAK5B,YAGzD43B,EALA,CAAmC4V,EAAArR,YAAtBrsC,EAAA8nC,gBAOb,IAAAE,EAAA,SAAAhrB,GAAA,SAAAgrB,mDAKA,OALmC/qB,EAAA+qB,EAAAhrB,GACjCgrB,EAAA3lC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQm7C,EAAWn7C,EAAO,GAAIgP,KAAKvE,KAAMuE,KAAK5B,YAGzD83B,EALA,CAAmC0V,EAAArR,YAQnC,SAAgBsR,EAAU9tC,EAAetC,EAAgB2C,GACvD,OAAOwB,EAAA3C,WAAWC,WAAWa,EAAOtC,EAAM2C,EAAU,SAAAnM,GAAK,OAAAA,GAAG,SAAC3D,EAAG2D,GAAM,OAAA3D,EAAI2D,IAG5E,SAAgB65C,EAAgB/tC,EAAetC,EAAgB2C,GAC7D,OAAOwB,EAAA3C,WAAWC,WAAWa,EAAOtC,EAAM2C,EAAU,SAAAnM,GAAK,OAAAA,EAAIA,GAAG,SAAC3D,EAAG2D,GAAM,OAAA3D,EAAI2D,IAGhF,SAAgB85C,EAAahuC,EAAetC,EAAgB2C,GAG1D,IAFA,IAAMgG,EAASxE,EAAA3C,WAAWC,WAAWa,EAAOtC,EAAM2C,EAAU,SAAAnM,GAAK,OAAAA,GAAG,SAAC3D,EAAG2D,GAAM,OAAA3D,EAAI2D,IAC5Eb,EAASgT,EAAOjC,UAAU/Q,OACvB7C,EAAI,EAAGA,EAAI6C,EAAQ7C,IAC1B6V,EAAOjC,UAAU5T,GAAKoE,KAAKmS,IAAIV,EAAOjC,UAAU5T,IAElD,OAAO6V,EAGT,SAAgB4nC,EAAUjuC,EAAetC,EAAgB2C,GACvD,OAAOwB,EAAA3C,WAAWC,WAAWa,EAAOtC,EAAM2C,EAAU,SAAAnM,GAAK,OAAAA,GAAG,SAAC3D,EAAG2D,GAAM,OAAAU,KAAKC,IAAItE,EAAG2D,KAGpF,SAAgBg6C,EAAUluC,EAAetC,EAAgB2C,GACvD,OAAOwB,EAAA3C,WAAWC,WAAWa,EAAOtC,EAAM2C,EAAU,SAAAnM,GAAK,OAAAA,GAAG,SAAC3D,EAAG2D,GAAM,OAAAU,KAAK8qB,IAAInvB,EAAG2D,KAGpF,SAAgBi6C,EAAWnuC,EAAetC,EAAgB2C,GAOxD,IANA,IAAMgG,EAASxE,EAAA3C,WAAWC,WAAWa,EAAOtC,EAAM2C,EAAU,SAAAnM,GAAK,OAAAA,GAAG,SAAC3D,EAAG2D,GAAM,OAAA3D,EAAI2D,IAC5EyJ,EAAakE,EAAA3C,WAAWO,gBAAgBO,EAAM1M,KAAkBoK,EAAM2C,GAGtEguC,EAFYxsC,EAAA9L,UAAUE,KAAK+J,EAAM1M,MACpBuO,EAAA9L,UAAUE,KAAK0H,GAE5BtK,EAASgT,EAAOjC,UAAU/Q,OACvB7C,EAAI,EAAGA,EAAI6C,EAAQ7C,IAC1B6V,EAAOjC,UAAU5T,GAAK6V,EAAOjC,UAAU5T,GAAK69C,EAE9C,OAAOhoC,EAGT,SAAgB+nC,EAAWpuC,EAAetC,EAAgB2C,GACxD,OAAOwB,EAAA3C,WAAWC,WAAWa,EAAOtC,EAAM2C,EAAU,SAAAnM,GAAK,OAAAA,GAAG,SAAC3D,EAAG2D,GAAM,OAAA3D,EAAI2D,IA/C/D/D,EAAAgoC,gBAQbhoC,EAAA29C,YAIA39C,EAAA49C,kBAIA59C,EAAA69C,eASA79C,EAAA89C,YAIA99C,EAAA+9C,YAIA/9C,EAAAg+C,aAaAh+C,EAAAi+C,4aC7FA,IAAAx0B,EAAAjpB,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAGA4nC,EAAA,SAAAprB,GAAA,SAAAorB,mDAKA,OALgCnrB,EAAAmrB,EAAAprB,GAC9BorB,EAAA/lC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQinB,EAAQjnB,EAAO,GAAIA,EAAO,MAG7CslC,EALA,CAAgC3e,EAAAO,SAOhC,SAAgBD,EAAQ5c,EAAWtG,GACjC,IAAM8E,EAAe+F,EAAA9L,UAAU2F,sBAAsB4B,EAAEhK,KAAM0D,EAAMijB,aAC7D5T,EAAS,IAAItT,EAAAmD,OAAO4F,EAAcwB,EAAEnH,MAG1C,OAFUkQ,EAAOjC,UACfhO,IAAIkH,EAAE8G,WACDiC,EAZIlW,EAAAooC,aAObpoC,EAAA+pB,yaCZA,IAAA8a,EAAArkC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAGAkoC,EAAA,SAAA1rB,GAAA,SAAA0rB,mDAKA,OAL8BzrB,EAAAyrB,EAAA1rB,GAC5B0rB,EAAArmC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ+H,EAAM/H,EAAO,GAAIgP,KAAKy6B,OAAQz6B,KAAK06B,KAAM16B,KAAKvE,QAGjEm7B,EALA,CAA8B7D,EAAAyH,OAAjBtsC,EAAA0oC,WAOb,IAAAD,EAAA,SAAAzrB,GAAA,SAAAyrB,mDAWA,OAXiCxrB,EAAAwrB,EAAAzrB,GAC/ByrB,EAAApmC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GACzC,GAAIA,EAAOI,QAAU,GAAKJ,EAAO,GAAGgnB,YAAYrc,KAAK,SAACpN,GAAc,OAAM,IAANA,IAClE,MAAM,IAAIkH,MAAM,oDAElB,IAAMglC,EAAS3nC,MAAMuO,KAAKrQ,EAAO,GAAGgnB,aAC9B0iB,EAAO5nC,MAAMuO,KAAKrQ,EAAO,GAAGgnB,aAC5Bvc,EAAOzK,EAAOI,QAAU,EAAI0B,MAAMuO,KAAKrQ,EAAO,GAAGgnB,aAAe,GAEtE,MAAO,CADQjf,EAAM/H,EAAO,GAAIypC,EAAQC,EAAMj/B,KAGlDk7B,EAXA,CAAiC5D,EAAA4H,UAajC,SAAgB5hC,EACZsC,EAAWo/B,EAA+BC,EAA6Bj/B,GACrD,IAAhBA,EAAKrK,SACPqK,EAAOJ,EAAEhK,KAAKoG,IAAI,SAAC2jB,EAAK7d,GAAQ,OAAAA,KAElC9B,EAAOA,EAAKhE,IAAI,SAAAc,GAAQ,OAAAqH,EAAA9L,UAAUsF,UAAUb,EAAM8C,EAAEhK,KAAKD,UACzDqpC,EAASA,EAAOhjC,IAAI,SAACgB,EAAO8E,GAC1B,OAAI9E,EAAQ4C,EAAEhK,KAAKoK,EAAK8B,IAAQ,EACvBlC,EAAEhK,KAAKoK,EAAK8B,IAEdqC,EAAA9L,UAAUsF,UAAUX,EAAO4C,EAAEhK,KAAKoK,EAAK8B,OAEhDm9B,EAAOA,EAAKjjC,IAAI,SAACiB,EAAK6E,GACpB,OAAI7E,EAAM2C,EAAEhK,KAAKoK,EAAK8B,IAAQ,EACrBlC,EAAEhK,KAAKoK,EAAK8B,IAEdqC,EAAA9L,UAAUsF,UAAUV,EAAK2C,EAAEhK,KAAKoK,EAAK8B,OAE9C,IAAMvJ,EAAiB,GACjBq4C,EAA2B,GACjC5wC,EAAK6B,QAAQ,SAAC8d,EAAK7d,GACjBvJ,EAAKonB,GAAOsf,EAAKn9B,GAAOk9B,EAAOl9B,GAC/B8uC,EAAejxB,GAAOqf,EAAOl9B,KAE/B,IAAK,IAAIhP,EAAI,EAAGA,EAAI8M,EAAEhK,KAAKD,OAAQ7C,IACjCyF,EAAKzF,GAAKyF,EAAKzF,IAAM8M,EAAEhK,KAAK9C,GAC5B89C,EAAe99C,GAAK89C,EAAe99C,IAAM,EAG3C,IAAM+9C,EAAgB1sC,EAAA9L,UAAU6E,eAAe3E,GACzCu4C,EAAgB3sC,EAAA9L,UAAU6E,eAAe0C,EAAEhK,KAAOgK,EAAEhK,KAAO,CAACgK,EAAEwC,KAAKzM,SACnEi7B,EAAIhxB,EAAEwC,KACNuG,EAAS,IAAItT,EAAAmD,OAAOD,EAAMqH,EAAEnH,MAC5BwpC,EAAIt5B,EAAOvG,KACjB,IAAStP,EAAI,EAAGA,EAAImvC,EAAEtsC,SAAU7C,EAAG,CACjC,IACMm7C,EADkB9pC,EAAA9L,UAAUqF,gBAAgB5K,EAAG+9C,GACb70C,IAAI,SAACikC,EAAK9mC,GAAM,OAAA8mC,EAAM2Q,EAAez3C,KACvE+0C,EAAY/pC,EAAA9L,UAAUmF,gBAAgBywC,EAAiB6C,GAC7D7O,EAAEnvC,GAAK89B,EAAEsd,GAEX,OAAOvlC,EArDIlW,EAAAyoC,cAabzoC,EAAA6K,glBCzBA,IAAAi6B,EAAAtkC,EAAA,IACAoC,EAAApC,EAAA,GACAgf,EAAApE,EAAA5a,EAAA,IAGAmoC,EAAA,SAAA3rB,GAAA,SAAA2rB,mDAKA,OALgC1rB,EAAA0rB,EAAA3rB,GAC9B2rB,EAAAtmC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQw7C,EAAQx7C,EAAO,GAAIgP,KAAKzH,QAG3Cs+B,EALA,CAAgC7D,EAAA5D,SAOhC,SAAgBod,EAAQnxC,EAAW9C,GAajC,IAZA,IAAMirC,EAAkBnoC,EAAEhK,KACpB4D,EAAYuuC,EAAgBpyC,OAE5Bq7C,EAAgB/+B,EAAK5Z,UAAUsF,UAAUb,EAAMtD,GAC/CmB,EAAIsX,EAAK5Z,UAAU0E,gBAAgBgrC,EAAiBiJ,GACpDC,EAAIh/B,EAAK5Z,UAAUwE,kBAAkBkrC,EAAiBiJ,GAEtDpgB,EAAIhxB,EAAEuC,WAENwG,EAAS,IAAItT,EAAAmD,OAAOoH,EAAEhK,KAAMgK,EAAEnH,MAC9BwpC,EAAIt5B,EAAOxG,WAERrP,EAAI,EAAGA,EAAI6H,EAAG7H,IAAK,CAM1B,IAJA,IAAMmH,EAASnH,EAAIm+C,EAGf95C,EAAMoI,OAAOkqB,UACRtwB,EAAI,EAAGA,EAAI83C,EAAG93C,IACjBy3B,EAAE32B,EAASd,GAAKhC,IAClBA,EAAMy5B,EAAE32B,EAASd,IAKrB,IAAI03B,EAAQ,EACZ,IAAS13B,EAAI,EAAGA,EAAI83C,EAAG93C,IAAK,CAC1B,IAAMhF,EAAQy8B,EAAE32B,EAASd,GAAKhC,EAC9B8qC,EAAEhoC,EAASd,GAAKjC,KAAKqiC,IAAIplC,GACzB08B,GAAS35B,KAAKqiC,IAAIplC,GAIpB,IAASgF,EAAI,EAAGA,EAAI83C,EAAG93C,IACP,IAAV03B,EACFoR,EAAEhoC,EAASd,GAAK,EAEhB8oC,EAAEhoC,EAASd,IAAM03B,EAKvB,OAAOloB,EAlDIlW,EAAA2oC,aAOb3oC,EAAAs+C,yaCZA,IAAAvZ,EAAAvkC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAGAqoC,EAAA,SAAA7rB,GAAA,SAAA6rB,mDAKA,OALgC5rB,EAAA4rB,EAAA7rB,GAC9B6rB,EAAAxmC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ27C,EAAQ37C,EAAO,GAAIgP,KAAKvE,QAG3Cs7B,EALA,CAAgC9D,EAAA2H,SAOhC,SAAgB+R,EAAQtxC,EAAWI,GACjC,IAAMC,EAAakE,EAAA9L,UAAU0H,aAAaH,EAAEhK,KAAMoK,GAC5C2I,EAAS,IAAItT,EAAAmD,OAAOyH,EAAYL,EAAEnH,MAElCm4B,EAAIhxB,EAAEuC,WAKZ,OAJUwG,EAAOxG,WAEfzJ,IAAIk4B,GAECjoB,EAhBIlW,EAAA6oC,aAOb7oC,EAAAy+C,yaCZA,IAAAzZ,EAAAxkC,EAAA,IACAoC,EAAApC,EAAA,GAGAsoC,EAAA,SAAA9rB,GAAA,SAAA8rB,mDAKA,OAL4B7rB,EAAA6rB,EAAA9rB,GAC1B8rB,EAAAzmC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQq9B,EAAIr9B,KAGvBgmC,EALA,CAA4B9D,EAAA7D,KAO5B,SAAgBhB,EAAIhzB,GAIlB,IAHA,IAAM+I,EAAS,IAAItT,EAAAmD,OAAOoH,EAAE,GAAGhK,KAAMgK,EAAE,GAAGnH,MACpCF,EAAOqH,EAAE,GAAG8G,UAAU/Q,OACtBssC,EAAIt5B,EAAOjC,UACR5T,EAAI,EAAGA,EAAI8M,EAAEjK,OAAQ7C,IAE5B,IADA,IAAMwtB,EAAM1gB,EAAE9M,GAAG4T,UACRvN,EAAI,EAAGA,EAAIZ,IAAQY,EAC1B8oC,EAAE9oC,IAAMmnB,EAAInnB,GAIhB,OAAOwP,EAlBIlW,EAAA8oC,SAOb9oC,EAAAmgC,qaCdA,IAAA8E,EAAAzkC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAGAyoC,EAAA,SAAAjsB,GAAA,SAAAisB,mDAKA,OAL6BhsB,EAAAgsB,EAAAjsB,GAC3BisB,EAAA5mC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ47C,EAAK57C,EAAO,GAAIA,EAAO,MAG1CmmC,EALA,CAA6BhE,EAAA0H,MAO7B,SAAgB+R,EAAKvxC,EAAWwxC,GAI9B,IAHA,IAAMx7C,EAAOgK,EAAEhK,KAAOgK,EAAEhK,KAAO,CAACgK,EAAEwC,KAAKzM,QACjCwH,EAAOvH,EAAKD,OACZi4C,EAAU,IAAIv2C,MAAM8F,GACjBrK,EAAI,EAAGA,EAAIqK,EAAMrK,IACxB86C,EAAQ96C,GAAK8C,EAAK9C,GAAKs+C,EAAQjvC,WAAWrP,GAE5C,IAAMg7C,EAAc3pC,EAAA9L,UAAU6E,eAAetH,GACvCm4C,EAAiB5pC,EAAA9L,UAAU6E,eAAe0wC,GAC1CjlC,EAAS,IAAItT,EAAAmD,OAAOo1C,EAAShuC,EAAEnH,MAC/BwpC,EAAIt5B,EAAOxG,WAEXyuB,EAAIhxB,EAAEwC,KACZ,IAAStP,EAAI,EAAGA,EAAImvC,EAAEtsC,SAAU7C,EAAG,CAGjC,IAFA,IAAMk7C,EAAkB7pC,EAAA9L,UAAUqF,gBAAgB5K,EAAGi7C,GAC/CE,EAAkB,IAAI52C,MAAM8F,GACzBhE,EAAI,EAAGA,EAAIgE,IAAQhE,EAC1B80C,EAAgB90C,GAAK60C,EAAgB70C,GAAKyG,EAAEhK,KAAKuD,GAEnD,IAAM+0C,EAAY/pC,EAAA9L,UAAUmF,gBAAgBywC,EAAiBH,GAC7D7L,EAAEnvC,GAAK89B,EAAEsd,GAEX,OAAOvlC,EA7BIlW,EAAAipC,UAObjpC,EAAA0+C,saCTA,IAAAxZ,EAAA1kC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAGA0oC,EAAA,SAAAlsB,GAAA,SAAAksB,mDAKA,OALkCjsB,EAAAisB,EAAAlsB,GAChCksB,EAAA7mC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ8H,EAAU9H,EAAO,GAAIgP,KAAK9F,QAG7Ck9B,EALA,CAAkChE,EAAA0H,WAOlC,SAAgBhiC,EAAUuC,EAAWnB,GACnC,IAAMuE,EAAYpD,EAAEhK,KACduH,EAAO6F,EAAUrN,OAKnB07C,EAAY,IAAIh6C,MAAc8F,GAClC,GAAIsB,EAAK9I,SAAWwH,EAClBk0C,EAAY5yC,OAEZ,IAAK,IAAI3L,EAAI,EAAGA,EAAIqK,EAAMrK,IACxBu+C,EAAUv+C,GAAKqK,EAAOrK,EAAI,EAI9B,IAAMmN,EAAa,IAAI5I,MAAc8F,GAC/ByG,EAAS,IAAIvM,MAAc8F,GAKjC,IAASrK,EAAI,EAAGA,EAAIqK,EAAMrK,IAAK,CAC7B,IAAMw+C,EAASD,EAAUv+C,GACzBmN,EAAWnN,GAAKkQ,EAAUsuC,GAExB1tC,EAAO9Q,GADLw+C,EAAS,EAAIn0C,EACHgH,EAAA9L,UAAUwE,kBAAkBmG,EAAWsuC,EAAS,GAEhD,EAIhB,IAwE8BC,EAA4B53C,EAA0BC,EAxE9E+O,EAAS,IAAItT,EAAAmD,OAAOyH,EAAYL,EAAEnH,MAElCm4B,EAAIhxB,EAAE8G,UACNu7B,EAAIt5B,EAAOjC,UAIb8qC,EAAkB,EAClBC,EAAkB,EAClBC,EAAkB,EAClBC,GAAW,EACf,IAAS7+C,EAAIqK,EAAO,EAAGrK,GAAK,IAAKA,EAAG,CAClC,IAAM8+C,EAAUP,EAAUv+C,GACtB6+C,GAAaC,IAAY9+C,EAC3B2+C,GAAmBzuC,EAAU4uC,IAE7BD,GAAW,EACXD,GAAmB1uC,EAAU4uC,KAC3BJ,GAYN,OARwB,IAApBE,GAkD0BH,EAjDLE,EAiDiC93C,EAjDhBsoC,EAiD0CroC,EAjDvCg3B,EAkD7CzsB,EAAAzK,gBAAgBC,EAAQC,EAAQ,EAAG,EAAG23C,IAjDP,IAApBE,EA+Bb,SACII,EAAiBC,EAAsBC,EAAmBnuC,EAAkBjK,EAC5EC,GAKF,IAJA,IAAMC,EAAc,IAAIxC,MAAcw6C,GAAStxC,KAAK,GAEhDyxC,EAAmB,EAEdl/C,EAAI,EAAGA,EAAIi/C,IAAaj/C,EAAG,CAClC,IAAMm/C,EAAe9tC,EAAA9L,UAAUmF,gBAAgB3D,EAAa+J,EAAQiuC,GACpEl4C,EAAOq4C,KAAsBp4C,EAAOq4C,GACpC9tC,EAAA9L,UAAUwF,eAAehE,EAAai4C,EAAYD,IAxClDK,CAAmBV,EAAiBvxC,EAAYyxC,EAAiB9tC,EAAQq+B,EAAGrR,GAUhF,SACIihB,EAAiBC,EAAsBC,EAAmBR,EAA4B3tC,EACtFjK,EAA0BC,GAM5B,IALA,IAAMC,EAAc,IAAIxC,MAAcw6C,GAAStxC,KAAK,GAGhDyxC,EAAmB,EAEdl/C,EAAI,EAAGA,EAAIi/C,IAAaj/C,EAAG,CAClC,IAAMq/C,EAAahuC,EAAA9L,UAAUmF,gBAAgB3D,EAAa+J,EAAQiuC,GAClE1tC,EAAAzK,gBAAgBC,EAAQC,EAAQo4C,EALT,EAK8CG,EAAYZ,GAEjFptC,EAAA9L,UAAUwF,eAAehE,EAAai4C,EAAYD,GAClDG,GAAoBT,GArBpBa,CAAYZ,EAAiBvxC,EAAYyxC,EAAiBD,EAAiB7tC,EAAQq+B,EAAGrR,GAGjFjoB,EArEIlW,EAAAkpC,eAOblpC,EAAA4K,2aCZA,IAAAy6B,EAAA7kC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAGA2oC,EAAA,SAAAnsB,GAAA,SAAAmsB,mDAKA,OALkClsB,EAAAksB,EAAAnsB,GAChCmsB,EAAA9mC,UAAAunB,IAAA,SAAIC,EAAuC/mB,GAEzC,MAAO,CADQ88C,EAAU98C,EAAO,GAAIgP,KAAKvE,QAG7C47B,EALA,CAAkC9D,EAAA2H,WAOlC,SAAgB4S,EAAUzyC,EAAWI,GACnC,IAAMC,EAAakE,EAAA9L,UAAUiI,eAAeV,EAAEhK,KAAMoK,GAC9C2I,EAAS,IAAItT,EAAAmD,OAAOyH,EAAYL,EAAEnH,MAElCm4B,EAAIhxB,EAAEuC,WAKZ,OAJUwG,EAAOxG,WAEfzJ,IAAIk4B,GAECjoB,EAhBIlW,EAAAmpC,eAObnpC,EAAA4/C,kmDCVA,IAAA1kC,EAAA1a,EAAA,GAEAq/C,EAAAzkC,EAAA5a,EAAA,IAEAmuC,EAAAnuC,EAAA,KAMA8tC,EAAA,WAKE,SAAAA,IAIEx8B,KAAKguC,aAAc,EAInBhuC,KAAKyK,OAAS,EAEdzK,KAAK2J,YAAc,IA+BvB,OA7BQ6yB,EAAAjsC,UAAAq7B,WAAN,mGAEe,OADb5rB,KAAKiuC,2BACQ,GAAMjuC,KAAKkuC,0BACxB,OADal7C,EAAA6N,OAIb,IAAO,GAFL,IAAO,SAIX27B,EAAAjsC,UAAAusC,qBAAA,SAAqBzwB,GACnB,OAAO,IAAIwwB,EAAAsR,mBAAmBnuC,KAAMqM,EAASrM,KAAKguC,cAEpDxR,EAAAjsC,UAAAysC,QAAA,aACAR,EAAAjsC,UAAA09C,yBAAA,WACE,IAAKjzC,OAAOqU,SAASrP,KAAKyK,SAAWzP,OAAOme,MAAMnZ,KAAKyK,QACrD,MAAM,IAAIhV,MAASuK,KAAKyK,OAAM,mCAEhC,IAAKzP,OAAOC,UAAU+E,KAAKyK,QACzB,MAAM,IAAIhV,MAASuK,KAAKyK,OAAM,6DAG5B+xB,EAAAjsC,UAAA29C,gBAAN,yGAEI,gCAAMH,EAAYtkC,KAAKzJ,KAAKyK,OAAQzK,KAAK2J,qBACzC,OADA3W,EAAA6N,OACA,IAAO,UAGP,kBADAuI,EAAAxC,OAAOpB,QAAQ,cAAe,6CAA6C4oC,GAC3E,IAAO,0BAGb5R,EA9CA,GAAatuC,EAAAsuC,4CCoCb,IAAIjL,mDACJ,IAAIhoB,GAAc,EACdC,GAAe,EAOnBtb,EAAAub,KAAA,WACE,GAAIF,EACF,OAAOjB,QAAQC,UAEjB,GAAIiB,EACF,MAAM,IAAI/T,MAAM,wCAKlB,OAFA+T,GAAe,EAER,IAAIlB,QAAc,SAACC,EAASC,IAEjC+oB,EAAU7iC,EAAQ,KACV6iC,GAASlpB,KACb,WAEEE,IACAiB,GAAe,EACfD,GAAc,GAEhB,SAAAyB,GACExB,GAAe,EACfhB,EAAOwC,QAMjB,IAAAC,EAAA,WAGE,SAAAA,IACEjL,KAAKquC,KAAO,EACZruC,KAAKsuC,kBAAoB,EAqO7B,OA7NErjC,EAAA1a,UAAAg+C,MAAA,SAAMhjC,OAAsB,IAAAC,EAAA,GAAAta,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAsa,EAAAta,EAAA,GAAAC,UAAAD,GAC1B,IAAKqY,EACH,MAAM,IAAI9T,MAAM,2DAElB,IAAMqR,EAAY5Y,EAAA2Z,MAEZnS,EAAmB,GACnB1B,EAAOiX,EAAYQ,iBAAiB/V,EAAQ8V,GAC9CxX,EAAOgM,KAAKsuC,mBACdtuC,KAAKwuC,aAAax6C,GAEpBiX,EAAYS,eAAe6lB,EAASkd,OAAO/vB,SAAS1e,KAAKquC,KAAMruC,KAAKquC,KAAOr6C,GAAO0B,EAAQ8V,GAE1F,IAAMkjC,EAAgBxgD,EAAA2Z,MACtB7H,KAAKiI,KAAKsD,EAAcvL,KAAKquC,MAC7B,IAAMM,EAAczgD,EAAA2Z,MAKpB,OAHAoD,EAAYc,iBAAiBwlB,EAASkd,OAAO/vB,SAAS1e,KAAKquC,KAAMruC,KAAKquC,KAAOr6C,GAAO0B,EAAQ8V,GAGrF,CAAC1E,UAASA,EAAEG,QAFH/Y,EAAA2Z,MAEY6mC,cAAaA,EAAEC,YAAWA,IAKxD1jC,EAAA1a,UAAAq+C,SAAA,SAASrjC,EAAsB1N,GAC7B,IAAK0L,EACH,MAAM,IAAI9T,MAAM,2DAElB,IAAMqR,EAAY5Y,EAAA2Z,MAEZ7T,EAAO6J,EAAK2D,WACdxN,EAAOgM,KAAKsuC,mBACdtuC,KAAKwuC,aAAax6C,GAIpBu9B,EAASkd,OAAO/vB,SAAS1e,KAAKquC,KAAMruC,KAAKquC,KAAOr6C,GAAMG,IAAI0J,GAE1D,IAAM6wC,EAAgBxgD,EAAA2Z,MACtB7H,KAAKiI,KAAKsD,EAAcvL,KAAKquC,MAC7B,IAAMM,EAAczgD,EAAA2Z,MAMpB,OAHAhK,EAAK1J,IAAIo9B,EAASkd,OAAO/vB,SAAS1e,KAAKquC,KAAMruC,KAAKquC,KAAOr6C,IAGlD,CAAC8S,UAASA,EAAEG,QAFH/Y,EAAA2Z,MAEY6mC,cAAaA,EAAEC,YAAWA,IAG9C1jC,EAAA1a,UAAA0X,KAAV,SAAesD,EAAsB8iC,IAGnCpmC,EADcspB,EAAgBhmB,IACzB8iC,IAGApjC,EAAAQ,iBAAP,SAAwB/V,EAAkB8V,GAGxC,IADA,IAAIxX,EAAO,EAAI,EAAIwX,EAAOpa,OACjB7C,EAAI,EAAGA,EAAIid,EAAOpa,OAAQ7C,IAAK,CACtC,IAAMsgD,EAAQrjC,EAAOjd,GACfugD,EAAYD,EAAM,GAClBE,EAAYF,EAAM,GAClBG,EAAYH,EAAM,GAEpBt6B,EAAM,EACV,OAAQw6B,GACN,IAAK,OACL,IAAK,QACL,IAAK,UACHx6B,EAAM,EACN,MACF,IAAK,UACHA,EAAM,EACN,MACF,IAAK,UACH,IAAKu6B,EAAW,CAEdp5C,EAAOoG,KAAK,GACZ,SACK,IAAIhJ,MAAMqN,QAAQ2uC,KAAcvuC,YAAY+a,OAAOwzB,GAGxD,MAAM,IAAIr5C,MAAM,gDAFhB8e,EAAM,EAAI5hB,KAAKw3B,KAAK2kB,EAAU19C,OAAS,GAIzC,MACF,IAAK,WACL,IAAK,aACH,IAAK09C,EAAW,CAEdp5C,EAAOoG,KAAK,GACZ,SACK,GAAIhJ,MAAMqN,QAAQ2uC,GAAY,CACnC,GAAkB,UAAdE,GAAuC,QAAdA,EAC3B,MAAM,IAAIt0C,UAAU,+DAEtB6Z,EAAyB,EAAnBu6B,EAAU19C,WACX,KAAImP,YAAY+a,OAAOwzB,GAG5B,MAAM,IAAIp0C,UAAU,sCAFpB6Z,EAAMu6B,EAAUttC,WAIlB,MACF,QACE,MAAM,IAAI/L,MAAM,iCAAiCs5C,GAGrDr5C,EAAOoG,KAAK9H,GACZA,GAAQugB,EAGV,OAAOvgB,GAIFiX,EAAAS,eAAP,SAAsBujC,EAAoBv5C,EAAkB8V,GAC1D,IAAM0jC,EAAS,IAAIpsC,WAAWmsC,EAAO3tC,OAAQ2tC,EAAO1tC,YAC9C4tC,EAAU,IAAIpsC,YAAYksC,EAAO3tC,OAAQ2tC,EAAO1tC,YAChD6tC,EAAU,IAAIpsC,aAAaisC,EAAO3tC,OAAQ2tC,EAAO1tC,YAEvD4tC,EAAQ,GAAK3jC,EAAOpa,OAEpB,IAAK,IAAI7C,EAAI,EAAGA,EAAIid,EAAOpa,OAAQ7C,IAAK,CACtC,IAAMsgD,EAAQrjC,EAAOjd,GACfugD,EAAYD,EAAM,GAClBE,EAAYF,EAAM,GAClBG,EAAYH,EAAM,GAClBQ,EAAU35C,EAAOnH,GACjB+gD,EAAWD,GAAW,EAI5B,GAFAF,EAAQ5gD,EAAI,GAAK8gD,EAEC,QAAdL,GAAmC,IAAZK,EAI3B,OAAQN,GACN,IAAK,OACHE,EAAOI,IAA8D,IAAlDP,EAAyD,EAAI,EAChF,MACF,IAAK,QACHI,EAAOI,GAAYR,EACnB,MACF,IAAK,UACHM,EAAQE,GAAYR,EACpB,MACF,IAAK,UACH,IAAMS,EAAYT,EAElBG,EAAOvwB,SAAS2wB,EAASA,EAAUE,EAAUn+C,QAAQ+C,IAAI26C,GACzD,MACF,IAAK,WACH,IAAMU,EAAcV,EACpBI,EAAOxwB,SAAS4wB,EAAUA,EAAWE,EAAWp+C,QAAQ+C,IAAIq7C,GAC5D,MACF,IAAK,aACH,IAAMC,EAAgBX,EACtBM,EAAQ1wB,SAAS4wB,EAAUA,EAAWG,EAAar+C,QAAQ+C,IAAIs7C,GAC/D,MACF,QACE,MAAM,IAAIh6C,MAAM,iCAAiCs5C,MAMlD9jC,EAAAc,iBAAP,SAAwBzK,EAAoB5L,EAAkB8V,GAI5D,IAHA,IAAM4jC,EAAU,IAAIpsC,aAAa1B,EAAOA,OAAQA,EAAOC,YACjD0tC,EAAS,IAAIvsC,WAAWpB,EAAOA,OAAQA,EAAOC,YAE3ChT,EAAI,EAAGA,EAAIid,EAAOpa,OAAQ7C,IAAK,CACtC,IAAMsgD,EAAQrjC,EAAOjd,GACfugD,EAAYD,EAAM,GAClBE,EAAYF,EAAM,GAClBG,EAAYH,EAAM,GAClBQ,EAAU35C,EAAOnH,GAEjB+gD,EAAWD,GAAW,EAG5B,GAAkB,QAAdL,GAAqC,UAAdA,EAI3B,OAAQD,GACN,IAAK,aACH,IAAMU,EAAgBX,EACtBW,EAAat7C,IAAIi7C,EAAQ1wB,SAAS4wB,EAAUA,EAAWG,EAAar+C,SACpE,MACF,IAAK,UACH,IAAMm+C,EAAaT,EACnBS,EAAUp7C,IAAI86C,EAAOvwB,SAAS2wB,EAASA,EAAUE,EAAUn+C,SAC3D,MACF,QACE,MAAM,IAAIqE,MAAM,iCAAiCs5C,MAMjD9jC,EAAA1a,UAAAi+C,aAAR,SAAqBkB,GAQnB,GANkB,IAAd1vC,KAAKquC,MACP9c,EAASoe,MAAM3vC,KAAKquC,MAGtBruC,KAAKsuC,kBAAoB,EAAIoB,EAC7B1vC,KAAKquC,KAAO9c,EAASqe,QAAQ5vC,KAAKsuC,mBAChB,IAAdtuC,KAAKquC,KACP,MAAM,IAAI54C,MAAM,4DAIpBwV,EAAA1a,UAAAysC,QAAA,WACE,IAAKzzB,EACH,MAAM,IAAI9T,MAAM,2DAEA,IAAduK,KAAKquC,MACP9c,EAASoe,MAAM3vC,KAAKquC,OAG1BpjC,EA1OA,GAAa/c,EAAA+c,cA+OA/c,EAAA2Z,IAA8B,oBAAhBmB,aAA+BA,YAAYnB,IAAO,WAAM,OAAAmB,YAAYnB,OAAQrB,KAAKqB,oCCtU5G,IACAgoC,EADAvrB,GACAurB,EAAA,oBAAAC,mBAAAC,cAAAD,SAAAC,cAAAliC,SAAA3b,EACA,SACAoyB,GAGAA,OAAA,KAFAA,KAAA,IAEAA,EAAA,OAAwEp0B,EAAvB8/C,EAAA,GAA+B,IAAA9/C,KAAAo0B,EAAmBA,EAAA9zB,eAAAN,KAA+B8/C,EAAA9/C,GAAAo0B,EAAAp0B,IAAkCo0B,EAAA,aAAuBA,EAAA,6BAAuCA,EAAA,cAAA2rB,EAAAC,GAAwC,MAAAA,GAAe5rB,EAAA,UAAoBA,EAAA,WAAqB,IAA6D6rB,EAA8BC,EAA3FC,GAAA,EAA6BC,GAAA,EAA6FD,EAAA,iBAAA7hD,OAA4C8hD,EAAA,mBAAAC,cAAwDJ,EAAA,iBAAAhhC,IAA6DkhC,IAAAC,EAA2DF,GAAAC,IAAAF,IAAAG,EAAuF,IAAoNE,EAAWC,EAA/NC,EAAA,GAA8JP,GAAwBO,EAAAC,EAAA,IAAsDrsB,EAAA,cAAAssB,EAAAC,GAAoD,IAAAxwB,EAA4J,OAApJmwB,MAAkB9hD,EAAQ,KAAM+hD,MAAsB/hD,EAAQ,KAAQkiD,EAAAH,EAAA,UAAAG,GAAyCvwB,EAAAmwB,EAAA,aAAAI,GAAqCC,EAAAxwB,IAAA5e,YAAkC6iB,EAAA,oBAAAssB,GAAmD,IAAAvwB,EAAAiE,EAAA,KAAAssB,GAAA,GAAiG,OAA3DvwB,EAAA/e,SAAgB+e,EAAA,IAAA3d,WAAA2d,IAAwBywB,EAAAzwB,EAAA/e,QAAmB+e,GAAYlR,EAAA,KAAA/d,OAAA,IAA6BkzB,EAAA,YAAAnV,EAAA,QAAA6U,QAAA,YAA4DM,EAAA,UAAAnV,EAAA,KAAApW,MAAA,GAA6CoW,EAAA,gCAAA4hC,GAA+C,KAAAA,aAAAC,IAAgC,MAAAD,IAAY5hC,EAAA,wBAAA8hC,IAA0C3sB,EAAA,cAAA2rB,GAAgC9gC,EAAA,KAAA8gC,IAAyB3rB,EAAA,mBAA6B,qCAAoC8rB,GAA8B,oBAAAj0B,OAA6BmI,EAAA,cAAA5Q,GAAsC,OAAAyI,KAAAzI,KAAgB4Q,EAAA,oBAAA5Q,GAA4C,IAAA7V,EAAS,yBAAAqzC,WAAmC,IAAAxuC,WAAAwuC,WAAAx9B,KAA2Do9B,EAAA,iBAAtBjzC,EAAAse,KAAAzI,EAAA,YAAqD7V,IAAa,oBAAAszC,WAAmC7sB,EAAA,UAAA6sB,gBAA+B,IAAAhgD,YAAuCmzB,EAAA,UAAAnzB,WAA8B,mBAAAigD,OAA6B9sB,EAAA,cAAA2rB,GAAgCmB,KAAAnB,OAAeI,GAAAC,KAAmDA,EAA0BI,EAAA7hC,KAAAwiC,SAAAC,KAAmCxB,SAAAC,gBAAgCW,EAAAZ,SAAAC,cAAAliC,KAA2CgiC,IAAea,EAAAb,GAAoEa,EAAzC,IAAAA,EAAA70C,QAAA,SAAyC60C,EAAA/zB,OAAA,EAAA+zB,EAAA50B,YAAA,QAAkF,GAAmBwI,EAAA,cAAAitB,GAAwC,IAAAC,EAAA,IAAAC,eAAoE,OAAzCD,EAAAE,KAAA,MAAAH,GAAA,GAA0BC,EAAAG,KAAA,MAAeH,EAAAI,cAAyBtB,IAA0BhsB,EAAA,oBAAAitB,GAA8C,IAAAC,EAAA,IAAAC,eAAmG,OAAxED,EAAAE,KAAA,MAAAH,GAAA,GAA0BC,EAAAK,aAAA,cAA+BL,EAAAG,KAAA,MAAe,IAAAjvC,WAAA8uC,EAAApO,YAAqC9e,EAAA,mBAAAitB,EAAAO,EAAApnC,GAA2D,IAAA8mC,EAAA,IAAAC,eAA2BD,EAAAE,KAAA,MAAAH,GAAA,GAAyBC,EAAAK,aAAA,cAA+BL,EAAAM,OAAA,WAAiC,KAAAN,EAAAvB,QAAA,GAAAuB,EAAAvB,QAAAuB,EAAApO,SAAiD0O,EAAAN,EAAApO,UAA4B14B,KAAW8mC,EAAA9mC,UAAoB8mC,EAAAG,KAAA,OAAgBrtB,EAAA,wBAAAmM,GAAyCqf,SAAArf,UAA4B,IAAAnQ,EAAAgE,EAAA,4BAAAnf,gBAAAL,IAAA3U,KAAAgV,SAAA,oBAAA4sC,YAAA,MAAwH/mC,EAAAsZ,EAAA,+BAAA0tB,kBAAA,oBAAA7sC,iBAAA8sC,KAAA9hD,KAAAgV,UAAAmb,GAAmI,IAAApwB,KAAA8/C,EAA4BA,EAAAx/C,eAAAN,KAAwCo0B,EAAAp0B,GAAA8/C,EAAA9/C,IAAkC8/C,OAAA99C,EAA2wB,IAAAggD,EAAA,CAAqBC,UAAA,SAAA92C,EAAAC,GAAwB,OAAAD,EAAAC,GAAW82C,SAAA,cAAyD,IAAAt/C,MAAA,GAA63B,IAAoLu/C,EAApLC,EAAA,EAAeC,EAAA,SAAA3iD,GAAgC0iD,EAAA1iD,GAA4D,iBAAAw0B,aAAkCpZ,EAAA,mCAAoE,IAAAwnC,GAAA,EAAiC,SAAA1B,EAAA2B,EAAAC,GAAgCD,GAAexB,GAAA,qBAAAyB,GAAolD,IAA8vFpxC,EAAAqxC,EAAAlE,EAAAmE,EAA7uFC,EAAA,oBAAAC,YAAA,IAAAA,YAAA,aAAA5gD,EAAmF,SAAA6gD,EAAAC,EAAAtX,EAAAuX,GAAoG,IAA7C,IAAAC,EAAAxX,EAAAuX,EAA8BE,EAAAzX,EAAesX,EAAAG,SAAAD,MAAAC,EAAkD,GAAAA,EAAAzX,EAAA,IAAAsX,EAAAt0B,UAAAm0B,EAAiD,OAAAA,EAAAx+B,OAAA2+B,EAAAt0B,SAAAgd,EAAAyX,IAAwE,IAAX,IAAAhyC,EAAA,GAAWu6B,EAAAyX,GAAA,CAAkB,IAAAC,EAAAJ,EAAAtX,KAAsB,OAAA0X,EAAA,CAAoD,IAAAC,EAAA,GAAAL,EAAAtX,KAAyB,aAAA0X,GAAA,CAAmE,IAAAE,EAAA,GAAAN,EAAAtX,KAAqH,IAA1E0X,EAAlB,UAAAA,IAAkB,GAAAA,IAAA,GAAAC,GAAA,EAAAC,GAA6B,EAAAF,IAAA,GAAAC,GAAA,GAAAC,GAAA,KAAAN,EAAAtX,MAA6C,MAAav6B,GAAAoO,OAAA4O,aAAAi1B,OAA6B,CAAK,IAAAG,EAAAH,EAAA,MAAgBjyC,GAAAoO,OAAA4O,aAAA,MAAAo1B,GAAA,cAAAA,SAArOpyC,GAAAoO,OAAA4O,cAAA,GAAAi1B,IAAA,EAAAC,QAAjFlyC,GAAAoO,OAAA4O,aAAAi1B,GAA6W,OAAAjyC,EAAW,SAAAqyC,EAAAC,EAAAR,GAA0C,OAAAQ,EAAAV,EAAAtE,EAAAgF,EAAAR,GAAA,GAAq2D,SAAAS,EAAAr4C,EAAAs4C,GAAqE,OAAxCt4C,EAAAs4C,EAAA,IAAiBt4C,GAAAs4C,EAAAt4C,EAAAs4C,GAAuBt4C,EAA+E,SAAAu4C,IAAmCtvB,EAAA,MAAAquB,EAAA,IAAAhwC,UAAArB,GAA4CgjB,EAAA,WAAA1hB,WAAAtB,GAA+CgjB,EAAA,OAAAsuB,EAAA,IAAA9vC,WAAAxB,GAA+CgjB,EAAA,OAAAmqB,EAAA,IAAA/rC,WAAApB,GAA+CgjB,EAAA,YAAAzhB,YAAAvB,GAAkDgjB,EAAA,YAAAvhB,YAAAzB,GAAkDgjB,EAAA,YAAAthB,aAAA1B,GAAmDgjB,EAAA,YAAArhB,aAAA3B,GAAhrC,oBAAAwxC,aAAA,IAAAA,YAAA,YAAmuC,IAAAe,EAAA,KAAqFC,EAAAxvB,EAAA,uBAA6iB,SAAAyvB,EAAAC,GAAyC,KAAAA,EAAA5iD,OAAA,IAA0B,IAAA+xC,EAAA6Q,EAAAnpC,QAA+B,sBAAAs4B,EAAA,CAAoD,IAAAl7B,EAAAk7B,EAAAl7B,KAAuB,iBAAAA,OAA2B/V,IAAAixC,EAAA1oB,IAA6B6J,EAAA,UAAArc,GAA+Bqc,EAAA,WAAArc,EAAAk7B,EAAA1oB,KAA8CxS,OAAA/V,IAAAixC,EAAA1oB,IAAA,KAAA0oB,EAAA1oB,UAAhL0oB,KAArnB2Q,EAAlF,SAAkF9oC,EAAA,uDAAA8oC,EAAA,2BAAuJxvB,EAAA,OAAqBhjB,EAAAgjB,EAAA,OAA6B,iBAAAF,aAAA,mBAAAA,YAAA6vB,QAA0E5B,EAAA,IAAAjuB,YAAA6vB,OAAA,CAAmCC,QAAAJ,EAAxhC,QAAwkCxyC,EAAA+wC,EAAA/wC,QAA8BA,EAAA,IAAAf,YAAAuzC,GAA8CF,IAA0BhB,EAAAiB,GAAA,GAA3lB,QAAu+B,IAAAM,EAAA,GAAoBC,EAAA,GAAkBC,EAAA,GAAkBC,EAAA,GAAkBC,EAAA,GAAqBC,GAAA,EAA40B7hD,KAAA+gC,IAAsB/gC,KAAAw3B,KAAwBx3B,KAAAkC,MAA0BlC,KAAA8qB,IAAxE,IAA8Fg3B,EAAA,EAAsBC,EAAA,KAA8BC,EAAA,KAA2gBrwB,EAAA,mBAA6BA,EAAA,mBAA6B,IAAAswB,EAAA,wCAA0D,SAAAC,EAAAjE,GAA6B,OAAArhC,OAAAhf,UAAAukD,WAAAlE,EAAAkE,WAAAF,GAAA,IAAAhE,EAAA/0C,QAAA+4C,GAA0G,IAA1gZG,EAA0gZC,EAAA,iBAA6G,SAAAC,IAAqB,IAAI,GAAA3wB,EAAA,WAAyB,WAAA5hB,WAAA4hB,EAAA,YAA4C,GAAAA,EAAA,WAAyB,OAAAA,EAAA,WAAA0wB,GAAiD,uDAAwD,MAAAhqC,GAAWimC,GAAAjmC,IAA0b,SAAAkqC,EAAAvkB,GAAyB,IAAAprB,EAAA,CAAUorB,MAAAljB,OAAA,CAAoB0xB,QAAAvb,cAA4BuxB,cAAAxiD,KAAAyiD,SAAAlD,GAAgD,SAAAmD,EAAAhqC,EAAAld,GAA0C,IAAAD,EAAAmd,EAAAnd,QAA6Bo2B,EAAA,IAAAp2B,EAA3jD,SAAAonD,GAA0I,GAAzGb,IAAkBnwB,EAAA,wBAAqCA,EAAA,uBAAAmwB,GAAkD,GAAAA,IAAuB,OAAAC,IAAgCa,cAAAb,GAAoCA,EAAA,MAA0BC,GAAA,CAA0B,IAAAxR,EAAAwR,EAAmCA,EAAA,KAA2BxR,KAA0vCqS,GAA6E,GAAxwDf,IAAkBnwB,EAAA,wBAAqCA,EAAA,uBAAAmwB,GAAitDnwB,EAAA,gBAA8B,IAAI,OAAAA,EAAA,gBAAA/e,EAAA8vC,GAAuD,MAAAzsC,GAAsE,OAA7DoC,EAAA,sDAAApC,IAA6D,EAAc,SAAA6sC,EAAArxC,GAA2CixC,EAAAjxC,EAAA,UAAoC,SAAAsxC,EAAAC,IAA37BrxB,EAAA,aAAA+rB,IAAAC,GAAA,mBAAAsF,MAA+U,IAAAttC,QAAA,SAAAC,EAAAC,GAA4CD,EAAA0sC,OAAzRW,MAAAZ,EAAA,CAA6Ba,YAAA,gBAA0BxtC,KAAA,SAAA+6B,GAA0B,IAAAA,EAAA,GAAoB,4CAAA4R,EAAA,IAA+D,OAAA5R,EAAA,gBAAiC0S,MAAA,WAAmB,OAAAb,OAA2qB5sC,KAAA,SAAAwoC,GAAyC,OAAAzsB,YAAA2xB,YAAAlF,EAAAtrC,KAA4C8C,KAAAstC,EAAA,SAAAltC,GAAiCuC,EAAA,0CAAAvC,GAAsDwoC,GAAAxoC,KAA0e,OAA1d6b,EAAA,+BAAAF,YAAA4xB,sBAAAnB,EAAAG,IAAA,mBAAAY,MAAwaF,EAAAD,GAAjSrxB,YAAA4xB,qBAAAJ,MAAAZ,EAAA,CAAuDa,YAAA,gBAA0BtwC,GAAA8C,KAAAotC,EAAA,SAAAhtC,GAAwDuC,EAAA,kCAAAvC,GAA8CuC,EAAA,6CAAiD0qC,EAAAD,KAA2G,GAA2jB,SAAAQ,IAAsC,QAAAA,EAAAC,mBAAsD,SAAAC,EAAA1C,GAAoC,IAAI,OAAA9D,GAAA8D,GAAkB,MAAA7qC,KAAxqFisC,EAAAG,KAA9iZD,EAA6kZC,IAAnjZ1wB,EAAA,WAAyBA,EAAA,WAAAywB,EAAArE,GAAuDA,EAAAqE,GAAo6czwB,EAAA,aAAA7W,EAAAkjB,EAAAylB,GAAqP,OAAnMzlB,EAAA,OAAA0hB,EAAyB1hB,EAAA,UAAAvM,YAAAiyB,MAAA,CAA8CnC,QAAA,GAAAoC,QAAA,GAAA9zC,QAAA,YAAgDmuB,EAAA,mBAA0BA,EAAA,eAAsBukB,EAAAvkB,IAA0f,IAAA4lB,EAAA,CAAgBC,KAAA,EAAAC,OAAA,GAAAC,MAAA,GAAyBC,SAAA,SAAAC,GAA6B,IAAAA,GAAAL,EAAAG,MAAAE,GAAA,OAAAA,EAAyD,QAAA1mD,KAAAqmD,EAAAG,MAAwG,IAAvE,IAAAjD,GAAAvjD,EAAa2mD,EAAAN,EAAAG,MAAAjD,GAAAmD,SAAuCriC,EAAAsiC,EAAAzlD,OAAmB7C,EAAA,EAAYA,EAAAgmB,EAAMhmB,IAAK,GAAAsoD,EAAAtoD,KAAAqoD,EAAsB,OAAAnD,EAAa,OAAAmD,GAAgBE,OAAA,SAAArD,GAAsBA,GAAe8C,EAAAG,MAAAjD,GAA+BsD,YAAgBC,OAAA,SAAAvD,GAAsB,GAAAA,EAAA,CAAe,IAAAluC,EAAAgxC,EAAAG,MAAAjD,GAA+B3C,EAAAvrC,EAAAwxC,SAAA,GAAwBxxC,EAAAwxC,WAAgB,IAAAxxC,EAAAwxC,UAAAxxC,EAAA0xC,WAAsC1xC,EAAA2xC,YAAoB5yB,EAAA,WAAA/e,EAAA2xC,WAAAzD,UAA0C8C,EAAAG,MAAAjD,GAA6B0C,EAAA1C,MAA4B0D,SAAA,SAAA1D,GAAwBA,IAAe8C,EAAAG,MAAAjD,GAA+BsD,SAAA,KAA4vCK,EAAA,CAAcC,QAAA,aAAAC,UAAA,SAAAC,EAAAC,GAAqD,IAAAl2C,EAAA81C,EAAAC,QAAAE,GAAoC,IAAAC,GAAA,KAAAA,IAAwB,IAAAD,EAAAj3B,EAAAtV,GAAA+nC,EAAAzxC,EAAA,IAAkDA,EAAAlQ,OAAA,GAAqBkQ,EAAAxF,KAAA07C,IAAmBC,QAAA,EAAAjoD,IAAA,SAAAioD,GAA2F,OAA1DL,EAAAK,SAAA,EAAoB7E,EAAAwE,EAAAK,QAAA,OAAiDC,OAAA,WAAwD,OAArClE,EAAA4D,EAAA5nD,QAAgDmoD,MAAA,WAAkB,IAAA9iC,EAAAuiC,EAAA5nD,MAA2C,OAA3C4nD,EAAA5nD,MAA2CqlB,GAAW+iC,QAAA,WAAoBR,EAAA5nD,QAAwd,SAAAqoD,IAA+B,IAAAC,EAAAxzB,EAAA,QAA6BwzB,KAAA,GAAoB,IAAAT,EAAAD,EAAAC,QAA6BA,EAAA,GAAAjmD,QAAAgmD,EAAAE,UAAA,MAA8CD,EAAA,GAAAjmD,QAAAgmD,EAAAE,UAAA,MAAg4B,SAAAS,KAAqC,OAAApF,EAAAvhD,OAAiF,SAAA4mD,GAAAhkD,GAAiEA,EAAA0/C,EAAA1/C,EAAxB,OAAyD,IAAAikD,EAAA32C,EAAAE,WAA8B,IAAqD,WAAjD6wC,EAAA6F,MAAAlkD,EAAAikD,GAAA,OAAqE32C,EAAA+wC,EAAA/wC,OAAqC,KAAa,MAAAsH,GAAS,aAAa,SAAAuvC,GAAAC,GAAgD,IAAAH,EAAAF,KAAmG,GAAAK,EAAnC,WAA2D,SAA0F,IAA7E,IAA8BC,EAAA1lD,KAAAC,IAAAqlD,EAA9B,UAA6EI,EAAAD,GAAoDC,EAAvBA,GAAA,UAAuB3E,EAAA,EAAA2E,EAAjO,OAA+Q1lD,KAAA8qB,IAAAi2B,GAAA,EAAA2E,EAAA,cAA/Q,OAAwB,YAAgU,IAAAC,EAAAN,GAAAK,GAAmD,SAAAC,KAAA92C,YAAA62C,IAA+DzE,IAA0B,IAAoQU,EAAAx4C,KAAA+7C,GAAqC,IAAyCU,GAAA,CAAmBtH,SAAAsB,cAAAiG,YAA1uf,WAA2B,OAAAlG,GAA+sf2D,6BAAAwC,eAAhoL,SAAAhG,EAAA7B,EAAA8H,EAAAzwC,GAAsDgpC,GAAA,qBAAAuC,EAAAf,GAAA,UAAA7B,EAAA4C,EAAA5C,GAAA,mBAAA8H,EAAAzwC,EAAAurC,EAAAvrC,GAAA,sBAA0kL0wC,0BAAx6K,SAAA3kD,GAAyC,OAAA47C,GAAA57C,IAA+3K4kD,2BAA/4I,SAAAA,IAAsC,IAAAC,EAAAtC,EAAAC,KAA2B,IAAAqC,EAAY,UAAAtG,EAAA,MAA2B,IAAAhtC,EAAAgxC,EAAAG,MAAAmC,GAAkCC,EAAAvzC,EAAArR,KAAyB,IAAA4kD,EAAgB,UAAAvG,EAAA,GAAAsG,GAAgC,IAAAE,EAAAjmD,MAAAvC,UAAAwI,MAAAjK,KAAAqC,WAAoDmzB,EAAA,uBAAAw0B,GAAyDF,EAAAt3C,SAAAs3C,EAAAt3C,OAAAsuC,GAAA,IAAmFgD,EAAAgG,EAAAt3C,QAAA,GAAAu3C,EAAoDA,EAAAD,EAAAt3C,OAAyC,QAAA/S,EAAA,EAAYA,EAAAwqD,EAAA3nD,OAAmB7C,IAAK,GAAAwqD,EAAAxqD,IAAA+1B,EAAA,iBAAAy0B,EAAAxqD,GAAAuqD,EAAAD,GAAiI,OAApDA,EAAAjG,EAAAiG,GAAA,GAAyBtzC,EAAAqxC,SAAA96C,KAAA+8C,GAA2B,GAAAtG,EAAAwG,EAAAxqD,IAAAsqD,GAAqE,OAAzBA,EAAAjG,EAAAiG,GAAA,GAAyB,GAAAtG,EAAAuG,GAAAD,IAAqrH1C,wBAAA6C,aAA5oH,SAAAvF,EAAAv/C,EAAAgjD,GAAmV,MAAxSX,EAAAG,MAAAjD,GAAA,CAAuBA,MAAAmD,SAAA,CAAAnD,GAAAv/C,OAAAgjD,aAAAH,SAAA,EAAAN,QAAA,EAAAQ,UAAA,GAA+FV,EAAAC,KAAA/C,EAAoB,uBAAAwC,EAA8GA,EAAAC,qBAArDD,EAAAC,mBAAA,EAAqGzC,GAAyzGwF,sBAA/yG,aAA+yGC,QAA7wG,aAA6wGC,mBAAn+I,SAAA1F,GAA0E,MAAzC8C,EAAAC,OAAqBD,EAAAC,KAAA/C,GAAoBA,GAAy5I2F,YAAxN,SAAAxpD,GAA0G,OAA9E00B,EAAA,oBAAAsuB,EAAAtuB,EAAA,wBAAA10B,GAA8EA,GAA8GypD,cAA1wF,SAAAC,EAAA7B,GAAsCL,EAAAK,UAAyB,IAAI,IAAAF,EAAAH,EAAAmC,kBAAAC,GAAApC,EAAA5nD,MAAA4nD,EAAA5nD,OAAA0d,EAAAkqC,EAAA5nD,MAAAiqD,EAAArC,EAAA5nD,MAAuIkG,EAAA8jD,EAAwJ,OAAlIE,GAAAC,OAAApC,EAAA7hD,EAAA+jD,GAAgC7G,EAAA1lC,GAAA,GAAAqqC,EAAAqC,SAAkCrC,EAAAsC,UAAA,IAAAnkD,GAAA,IAAA+jD,IAAAlC,EAAAsC,SAAA,MAAgE,EAAS,MAAAjxC,GAA4E,MAAnE,oBAAA8wC,IAAA9wC,aAAA8wC,GAAAI,YAAA7I,GAAAroC,IAAmEA,EAAAmxC,QAAm1EC,cAA1nE,SAAAV,EAAA7B,GAAsCL,EAAAK,UAAyB,IAAiF,IAA7E,IAAAF,EAAAH,EAAA5nD,MAAAyqD,EAAA7C,EAAA5nD,MAAA0qD,EAAA9C,EAAA5nD,MAAmE6wB,EAAA,EAAU9xB,EAAA,EAAYA,EAAA2rD,EAAS3rD,IAAA,CAA+D,IAA1D,IAAAklD,EAAAb,EAAAqH,EAAA,EAAA1rD,GAAA,GAA2BgmB,EAAAq+B,EAAAqH,GAAA,EAAA1rD,EAAA,OAA+BqG,EAAA,EAAYA,EAAA2f,EAAM3f,IAAKwiD,EAAAE,UAAAC,EAAA9I,EAAAgF,EAAA7+C,IAAyCyrB,GAAA9L,EAAS,OAAA8L,EAAW,MAAAzX,GAA4E,MAAnE,oBAAA8wC,IAAA9wC,aAAA8wC,GAAAI,YAAA7I,GAAAroC,IAAmEA,EAAAmxC,QAAsvDI,aAAtuD,SAAAb,EAAA7B,GAAqCL,EAAAK,UAAyB,IAAI,SAAS,MAAA7uC,GAA4E,MAAnE,oBAAA8wC,IAAA9wC,aAAA8wC,GAAAI,YAAA7I,GAAAroC,IAAmEA,EAAAmxC,QAA+kDK,YAA/jD,SAAAd,EAAA7B,GAAoCL,EAAAK,UAAyB,IAAI,IAAAF,EAAAH,EAAAmC,kBAAuD,OAAjBG,GAAAW,MAAA9C,GAAiB,EAAS,MAAA3uC,GAA4E,MAAnE,oBAAA8wC,IAAA9wC,aAAA8wC,GAAAI,YAAA7I,GAAAroC,IAAmEA,EAAAmxC,QAAk3CO,UAAl2C,aAAk2CC,OAA50C,WAAkBj2B,EAAA,SAA0zCyzB,6BAAAyC,uBAApT,SAAAC,EAAA5sC,EAAA8wB,GAA8C8P,EAAAt6C,IAAAs6C,EAAA/vB,SAAA7Q,IAAA8wB,GAAA8b,IAAsQtC,2BAAAuC,WAAzV,WAAsBzJ,GAAA,UAAmU0J,wBAA/uC,SAAAvC,GAAgDnH,GAAA,QAA+rC+G,6BAAAH,sBAAA+C,cAAvpL,KAAupL/G,kBAA6+BgH,GAAAv2B,EAAA,IAAphC,GAAohCi0B,GAAAj3C,GAAyDgjB,EAAA,IAAAu2B,GAAkBv2B,EAAA,6BAA6D,OAAAA,EAAA,sBAAAlG,MAAA,KAAAjtB,YAAiEmzB,EAAA,oBAA2C,OAAAA,EAAA,aAAAlG,MAAA,KAAAjtB,YAAwDmzB,EAAA,mBAAyC,OAAAA,EAAA,YAAAlG,MAAA,KAAAjtB,YAAuDmzB,EAAA,6BAA6D,OAAAA,EAAA,sBAAAlG,MAAA,KAAAjtB,YAAiEmzB,EAAA,oCAA2E,OAAAA,EAAA,6BAAAlG,MAAA,KAAAjtB,YAAwEmzB,EAAA,qBAA6C,OAAAA,EAAA,cAAAlG,MAAA,KAAAjtB,YAAyDmzB,EAAA,qBAA6C,OAAAA,EAAA,cAAAlG,MAAA,KAAAjtB,YAAyDmzB,EAAA,oBAA2C,OAAAA,EAAA,aAAAlG,MAAA,KAAAjtB,YAAwDmzB,EAAA,sCAA+E,OAAAA,EAAA,+BAAAlG,MAAA,KAAAjtB,YAA0EmzB,EAAA,mBAAyC,OAAAA,EAAA,YAAAlG,MAAA,KAAAjtB,YAAnkC,IAA0nCw+C,GAAArrB,EAAA,iBAAqC,OAAAA,EAAA,UAAAlG,MAAA,KAAAjtB,YAAuTy+C,IAAlQtrB,EAAA,qBAA6C,OAAAA,EAAA,cAAAlG,MAAA,KAAAjtB,YAAyDmzB,EAAA,uCAAiF,OAAAA,EAAA,gCAAAlG,MAAA,KAAAjtB,YAA2EmzB,EAAA,mBAAyC,OAAAA,EAAA,YAAAlG,MAAA,KAAAjtB,aAA0oF,SAAA6/C,GAAAf,GAA4BjwC,KAAA9Q,KAAA,aAAuB8Q,KAAAkO,QAAA,gCAAA+hC,EAAA,IAAwDjwC,KAAAiwC,SAAgO,SAAAn4B,GAAA0Y,GAAkJ,SAAAsqB,IAAiBx2B,EAAA,YAA8BA,EAAA,aAAyBkuB,IAA7jegC,IAA6BA,GAAA,EAAwBT,EAAAK,IAAoDL,EAAAM,GAAkge/vB,EAAA,sBAAAA,EAAA,uBAAt5d,WAAmB,GAAAA,EAAA,QAAoG,IAA9E,mBAAAA,EAAA,UAAAA,EAAA,SAAAA,EAAA,UAA8EA,EAAA,QAAAlzB,QAA+J2pD,EAA/Hz2B,EAAA,QAAAzZ,QAAyJ0pC,EAAAyG,QAAAD,GAA1B,IAAAA,EAAtFhH,EAAAQ,GAAyxd0G,KAAxTzqB,KAAAlM,EAAA,UAA+BmwB,EAAA,IAA7oe,WAAkB,GAAAnwB,EAAA,OAAgG,IAA3E,mBAAAA,EAAA,SAAAA,EAAA,QAAAA,EAAA,SAA2EA,EAAA,OAAAlzB,QAA+jB2pD,EAAhiBz2B,EAAA,OAAAzZ,QAAyjBspC,EAAA6G,QAAAD,GAAzB,IAAAA,EAAzfhH,EAAAI,GAAk/d+G,GAASzG,EAAA,GAA4BnwB,EAAA,YAAiOA,EAAA,WAAwBA,EAAA,wBAAkCpa,WAAA,WAAsBA,WAAA,WAAsBoa,EAAA,eAAwB,GAAIw2B,KAAQ,IAASA,MAA2B,SAAA7J,GAAAkK,GAA2K,MAAtJ72B,EAAA,SAAsBA,EAAA,QAAA62B,QAAwBjpD,IAAAipD,GAAqB76B,EAAA66B,GAAUnwC,EAAAmwC,GAAUA,EAAAC,KAAAC,UAAAF,IAA+BA,EAAA,GAAQ3I,GAAA,EAAwB,SAAA2I,EAAA,+CAAwF,GAApqH72B,EAAA,uBAAiD,OAAAA,EAAA,gBAAAlG,MAAA,KAAAjtB,YAA2DmzB,EAAA,yBAAqD,OAAAA,EAAA,kBAAAlG,MAAA,KAAAjtB,YAA6DmzB,EAAA,mBAAyC,OAAAA,EAAA,YAAAlG,MAAA,KAAAjtB,YAAuDmzB,EAAA,mBAAyC,OAAAA,EAAA,YAAAlG,MAAA,KAAAjtB,YAAuDmzB,EAAA,oBAA2C,OAAAA,EAAA,aAAAlG,MAAA,KAAAjtB,YAAwDmzB,EAAA,kBAAuC,OAAAA,EAAA,WAAAlG,MAAA,KAAAjtB,YAAsDmzB,EAAA,sBAA+C,OAAAA,EAAA,eAAAlG,MAAA,KAAAjtB,YAA0DmzB,EAAA,iBAAqC,OAAAA,EAAA,UAAAlG,MAAA,KAAAjtB,YAAqDmzB,EAAA,wBAAmD,OAAAA,EAAA,iBAAAlG,MAAA,KAAAjtB,YAA4DmzB,EAAA,oBAA2C,OAAAA,EAAA,aAAAlG,MAAA,KAAAjtB,YAAwDmzB,EAAA,oBAA2C,OAAAA,EAAA,aAAAlG,MAAA,KAAAjtB,YAAwDmzB,EAAA,mBAAyC,OAAAA,EAAA,YAAAlG,MAAA,KAAAjtB,YAAuDmzB,EAAA,+BAAiE,OAAAA,EAAA,wBAAAlG,MAAA,KAAAjtB,YAAmEmzB,EAAA,sBAA+C,OAAAA,EAAA,eAAAlG,MAAA,KAAAjtB,YAA0DmzB,EAAA,wBAAmD,OAAAA,EAAA,iBAAAlG,MAAA,KAAAjtB,YAA4DmzB,EAAA,qBAA6C,OAAAA,EAAA,cAAAlG,MAAA,KAAAjtB,YAAyDmzB,EAAA,sBAA+C,OAAAA,EAAA,eAAAlG,MAAA,KAAAjtB,YAA0DmzB,EAAA,wBAAmD,OAAAA,EAAA,iBAAAlG,MAAA,KAAAjtB,YAA4DmzB,EAAA,qBAA6C,OAAAA,EAAA,cAAAlG,MAAA,KAAAjtB,YAAyDmzB,EAAA,sBAA+C,OAAAA,EAAA,eAAAlG,MAAA,KAAAjtB,YAA0DmzB,EAAA,yBAAqD,OAAAA,EAAA,kBAAAlG,MAAA,KAAAjtB,YAA6DmzB,EAAA,0BAAuD,OAAAA,EAAA,mBAAAlG,MAAA,KAAAjtB,YAA8DmzB,EAAA,2BAAyD,OAAAA,EAAA,oBAAAlG,MAAA,KAAAjtB,YAA+DmzB,EAAA,IAAAu2B,GAAkBv2B,EAAA,cAAArc,GAA8B,GAAAqc,EAAA,UAAwBrc,EAAAqc,OAAa,CAAK,IAAAg3B,EAAAh3B,EAAA,qBAAuCA,EAAA,gCAA0Cg3B,OAAarzC,EAAAqc,IAAc,OAAAA,GAA6I0sB,GAAAzgD,UAAA,IAAAkF,MAA+Bu7C,GAAAzgD,UAAA6P,YAAA4wC,GAA4C2D,EAAA,SAAA4G,IAA2Cj3B,EAAA,WAAAxM,KAA8BwM,EAAA,YAAAqwB,EAAA4G,IAA0iBj3B,EAAA,IAAAxM,GAA+PwM,EAAA,MAAA2sB,GAAsB3sB,EAAA,QAAoG,IAA9E,mBAAAA,EAAA,UAAAA,EAAA,SAAAA,EAAA,UAA8EA,EAAA,QAAAlzB,OAAA,GAAkCkzB,EAAA,QAAAvyB,KAAAuyB,GAGxk3B,OAHmm3BxM,KAGnm3BwM,IAKAn2B,EAAAD,QAAAo2B,2CCfA,SAAAnV,GAyBA,SAAAqsC,EAAAjd,EAAAkd,GAGA,IADA,IAAAC,EAAA,EACAntD,EAAAgwC,EAAAntC,OAAA,EAAgC7C,GAAA,EAAQA,IAAA,CACxC,IAAAioD,EAAAjY,EAAAhwC,GACA,MAAAioD,EACAjY,EAAAzsC,OAAAvD,EAAA,GACK,OAAAioD,GACLjY,EAAAzsC,OAAAvD,EAAA,GACAmtD,KACKA,IACLnd,EAAAzsC,OAAAvD,EAAA,GACAmtD,KAKA,GAAAD,EACA,KAAUC,IAAMA,EAChBnd,EAAAyc,QAAA,MAIA,OAAAzc,EAKA,IAAAod,EACA,gEACAC,EAAA,SAAAhL,GACA,OAAA+K,EAAAE,KAAAjL,GAAA73C,MAAA,IAuJA,SAAAsF,EAAAy9C,EAAApoC,GACA,GAAAooC,EAAAz9C,OAAA,OAAAy9C,EAAAz9C,OAAAqV,GAEA,IADA,IAAAxV,EAAA,GACA3P,EAAA,EAAmBA,EAAAutD,EAAA1qD,OAAe7C,IAClCmlB,EAAAooC,EAAAvtD,KAAAutD,IAAA59C,EAAApC,KAAAggD,EAAAvtD,IAEA,OAAA2P,EAxJAhQ,EAAAqa,QAAA,WAIA,IAHA,IAAAwzC,EAAA,GACAC,GAAA,EAEAztD,EAAA4C,UAAAC,OAAA,EAAoC7C,IAAA,IAAAytD,EAA8BztD,IAAA,CAClE,IAAAwmD,EAAAxmD,GAAA,EAAA4C,UAAA5C,GAAA4gB,EAAAqiB,MAGA,oBAAAujB,EACA,UAAAr6C,UAAA,6CACKq6C,IAILgH,EAAAhH,EAAA,IAAAgH,EACAC,EAAA,MAAAjH,EAAA7jC,OAAA,IAWA,OAAA8qC,EAAA,SAJAD,EAAAP,EAAAn9C,EAAA09C,EAAAp/C,MAAA,cAAAlM,GACA,QAAAA,KACGurD,GAAA9hC,KAAA,OAEH,KAKAhsB,EAAA+tD,UAAA,SAAAlH,GACA,IAAAmH,EAAAhuD,EAAAguD,WAAAnH,GACAoH,EAAA,MAAAx/B,EAAAo4B,GAAA,GAcA,OAXAA,EAAAyG,EAAAn9C,EAAA02C,EAAAp4C,MAAA,cAAAlM,GACA,QAAAA,KACGyrD,GAAAhiC,KAAA,OAEHgiC,IACAnH,EAAA,KAEAA,GAAAoH,IACApH,GAAA,MAGAmH,EAAA,QAAAnH,GAIA7mD,EAAAguD,WAAA,SAAAnH,GACA,YAAAA,EAAA7jC,OAAA,IAIAhjB,EAAAgsB,KAAA,WACA,IAAAkiC,EAAAtpD,MAAAvC,UAAAwI,MAAAjK,KAAAqC,UAAA,GACA,OAAAjD,EAAA+tD,UAAA59C,EAAA+9C,EAAA,SAAA3rD,EAAA2C,GACA,oBAAA3C,EACA,UAAAiK,UAAA,0CAEA,OAAAjK,IACGypB,KAAA,OAMHhsB,EAAAmuD,SAAA,SAAAh7C,EAAAi7C,GAIA,SAAAv4B,EAAAhI,GAEA,IADA,IAAAtjB,EAAA,EACUA,EAAAsjB,EAAA3qB,QACV,KAAA2qB,EAAAtjB,GAD8BA,KAK9B,IADA,IAAAC,EAAAqjB,EAAA3qB,OAAA,EACUsH,GAAA,GACV,KAAAqjB,EAAArjB,GADoBA,KAIpB,OAAAD,EAAAC,EAAA,GACAqjB,EAAAhjB,MAAAN,EAAAC,EAAAD,EAAA,GAfA4I,EAAAnT,EAAAqa,QAAAlH,GAAAsb,OAAA,GACA2/B,EAAApuD,EAAAqa,QAAA+zC,GAAA3/B,OAAA,GAsBA,IALA,IAAA4/B,EAAAx4B,EAAA1iB,EAAA1E,MAAA,MACA6/C,EAAAz4B,EAAAu4B,EAAA3/C,MAAA,MAEAvL,EAAAuB,KAAA8qB,IAAA8+B,EAAAnrD,OAAAorD,EAAAprD,QACAqrD,EAAArrD,EACA7C,EAAA,EAAiBA,EAAA6C,EAAY7C,IAC7B,GAAAguD,EAAAhuD,KAAAiuD,EAAAjuD,GAAA,CACAkuD,EAAAluD,EACA,MAIA,IAAAmuD,EAAA,GACA,IAAAnuD,EAAAkuD,EAA+BluD,EAAAguD,EAAAnrD,OAAsB7C,IACrDmuD,EAAA5gD,KAAA,MAKA,OAFA4gD,IAAAv9B,OAAAq9B,EAAAzjD,MAAA0jD,KAEAviC,KAAA,MAGAhsB,EAAAyuD,IAAA,IACAzuD,EAAA0uD,UAAA,IAEA1uD,EAAA2uD,QAAA,SAAA9H,GACA,IAAA7nC,EAAA0uC,EAAA7G,GACA/mD,EAAAkf,EAAA,GACA0O,EAAA1O,EAAA,GAEA,OAAAlf,GAAA4tB,GAKAA,IAEAA,IAAAe,OAAA,EAAAf,EAAAxqB,OAAA,IAGApD,EAAA4tB,GARA,KAYA1tB,EAAA4uD,SAAA,SAAA/H,EAAAt0B,GACA,IAAA/M,EAAAkoC,EAAA7G,GAAA,GAKA,OAHAt0B,GAAA/M,EAAAiJ,QAAA,EAAA8D,EAAArvB,UAAAqvB,IACA/M,IAAAiJ,OAAA,EAAAjJ,EAAAtiB,OAAAqvB,EAAArvB,SAEAsiB,GAIAxlB,EAAA6uD,QAAA,SAAAhI,GACA,OAAA6G,EAAA7G,GAAA,IAaA,IAAAp4B,EAAA,WAAAA,QAAA,GACA,SAAAxb,EAAA1I,EAAA8b,GAAkC,OAAApT,EAAAwb,OAAAlkB,EAAA8b,IAClC,SAAApT,EAAA1I,EAAA8b,GAEA,OADA9b,EAAA,IAAAA,EAAA0I,EAAA/P,OAAAqH,GACA0I,EAAAwb,OAAAlkB,EAAA8b,wCC7NApmB,EAAAD,QAAA,WACA,WAAAic,OAAoBzb,EAAA+B,EAAuB,oGCK3C,IAAAwsC,EAAAvuC,EAAA,IAEAyuC,EAAAzuC,EAAA,IAEAwuC,EAAAxuC,EAAA,KACAsuD,EAAAtuD,EAAA,KAEAy/C,EAAA,WAEE,SAAAA,EAAqBtc,EAA2BxlB,EAA0B4wC,GAArDj9C,KAAA6xB,UAA2B7xB,KAAAqM,UAC9CrM,KAAKk9C,eAAiBD,EAAmBD,EAAAG,sBAAsBh+B,OAAOge,EAAA3J,sBAAwBwpB,EAAAG,sBAclG,OAXEhP,EAAA59C,UAAA6sC,uBAAA,WACE,OAAO,IAAIF,EAAAkgB,qBAAqBp9C,KAAMA,KAAKqM,QAAQixB,WAGrD6Q,EAAA59C,UAAAysC,QAAA,aAEAmR,EAAA59C,UAAAgY,QAAA,SAAQoE,EAAkB4M,GACxB,IAAM5lB,EAAKspC,EAAA3jB,gBAAgB3M,EAAM4M,EAAQvZ,KAAKk9C,gBAE9C,OADAvpD,EAAGi4B,WAAWjf,EAAKkf,YACZl4B,GAEXw6C,EAjBA,GAAajgD,EAAAigD,oGCLb,IAAAiP,EAAA,WACE,SAAAA,EAA4B7f,EAA6CD,GAA7Ct9B,KAAAu9B,UAA6Cv9B,KAAAs9B,WAG3E,OADE8f,EAAA7sD,UAAAysC,QAAA,aACFogB,EAJA,GAAalvD,EAAAkvD,sGCHb,IAAAlrB,EAAAxjC,EAAA,KACAyjC,EAAAzjC,EAAA,KACA2uD,EAAA3uD,EAAA,KACA2jC,EAAA3jC,EAAA,KACA+jC,EAAA/jC,EAAA,KACAikC,EAAAjkC,EAAA,KACAu+B,EAAAv+B,EAAA,KACAmkC,EAAAnkC,EAAA,KACAskC,EAAAtkC,EAAA,KACAwkC,EAAAxkC,EAAA,KAEaR,EAAAivD,sBAA0D,CACrE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIhrB,EAAAmrB,aAAa,CAAC,WAAY,SACtD,CAAC,MAAO,GAAI,KAAM,WAAM,WAAInrB,EAAAmrB,aAAa,CAAC,QAAS,SACnD,CAAC,cAAe,GAAI,KAAM,WAAM,WAAIzqB,EAAA0qB,kBACpC,CAAC,qBAAsB,GAAI,KAAM,WAAM,WAAIrrB,EAAAsrB,yBAC3C,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIH,EAAAI,WAC7B,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIprB,EAAAqrB,WAC7B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIvrB,EAAAmrB,aAAa,CAAC,WAAY,SACtD,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI7qB,EAAAkrB,WAC7B,CAAC,oBAAqB,GAAI,KAAM,WAAM,WAAI9qB,EAAA+qB,wBAC1C,CAAC,gBAAiB,GAAI,KAAM,WAAM,WAAI/qB,EAAAgrB,oBACtC,CAAC,wBAAyB,GAAI,KAAM,WAAM,WAAIlrB,EAAAmrB,4BAC9C,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI7wB,EAAA8wB,aAC/B,CAAC,UAAW,GAAI,KAAM,WAAM,WAAIlrB,EAAAmrB,cAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI7rB,EAAAmrB,aAAa,CAAC,WAAY,SACtD,CAAC,KAAM,GAAI,KAAM,WAAM,WAAInrB,EAAAmrB,aAAa,CAAC,QAAS,QAClD,CAAC,QAAS,GAAI,KAAM,WAAM,WAAInrB,EAAAmrB,aAAa,CAAC,WAAY,WACxD,CAAC,UAAW,GAAI,KAAM,WAAM,WAAItqB,EAAAirB,cAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI9rB,EAAAmrB,aAAa,CAAC,WAAY,SACtD,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIpqB,EAAAgrB,UAC5B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI/rB,EAAAmrB,aAAa,CAAC,QAAS,yaCjCrD,IAAAprB,EAAAxjC,EAAA,IACAoC,EAAApC,EAAA,GACAyvD,EAAAzvD,EAAA,GAGA8uD,EAAA,SAAAtyC,GAAA,SAAAsyC,mDAkDA,OAlD4CryC,EAAAqyC,EAAAtyC,GAC1CsyC,EAAAjtD,UAAAunB,IAAA,SAAIC,EAAwC/mB,GAS1C,IARA,IAAMqK,EAAIrK,EAAO,GACXs7B,EAAQt7B,EAAO,GACfiB,EAAIjB,EAAO,GACXw7B,EAAOx7B,EAAO,GACduyC,EAAWvyC,EAAO,GAGpByyC,EAAc,EACTl1C,EAAI,EAAGA,EAAI8M,EAAEhK,KAAKD,OAAQ7C,IACjCk1C,GAAepoC,EAAEhK,KAAK9C,GAIxB,IAAM+M,EAAI,IAAIxK,EAAAmD,OAAOoH,EAAEhK,KAAMgK,EAAEnH,MAO/B,OANAiqD,EAAAlzC,YAAYG,cAAcmjC,MACtB,2BAA4B,CAAClzC,EAAE8G,UAAW,cAAe,CAAC7G,EAAE6G,UAAW,aAAc,OACrF,CAAC9G,EAAEhK,KAAK,GAAI,SAAU,CAACgK,EAAEhK,KAAK,GAAI,SAAU,CAACoyC,EAAa,SAAU,CAACnX,EAAMnqB,UAAW,cACtF,CAAClQ,EAAEkQ,UAAW,cAAe,CAACqqB,EAAKrqB,UAAW,cAAe,CAACohC,EAASphC,UAAW,cAClF,CAACnC,KAAK8rB,QAAS,YAEZ,CAACxwB,IAIVkiD,EAAAjtD,UAAA67B,gBAAA,SAAgBp7B,GACd,IAAMq7B,EAAIr7B,EAAO,GACXs7B,EAAQt7B,EAAO,GACfu7B,EAAIv7B,EAAO,GACXw7B,EAAOx7B,EAAO,GACdy7B,EAAOz7B,EAAO,GAIpB,QAAIq7B,EAAEh7B,KAAKD,OAAS,GAA2B,IAAtBk7B,EAAMj7B,KAAKD,QAAkC,IAAlBm7B,EAAEl7B,KAAKD,QAAqC,IAArBo7B,EAAKn7B,KAAKD,QAC5D,IAArBq7B,EAAKp7B,KAAKD,UAGVk7B,EAAMj7B,KAAK,KAAOg7B,EAAEh7B,KAAK,IAAMk7B,EAAEl7B,KAAK,KAAOg7B,EAAEh7B,KAAK,IAAMm7B,EAAKn7B,KAAK,KAAOg7B,EAAEh7B,KAAK,IAClFo7B,EAAKp7B,KAAK,KAAOg7B,EAAEh7B,KAAK,KAIb,YAAXg7B,EAAEn4B,MAAqC,YAAfo4B,EAAMp4B,MAAiC,YAAXq4B,EAAEr4B,MAAoC,YAAds4B,EAAKt4B,MACnE,YAAdu4B,EAAKv4B,QAKbspD,EAlDA,CAA4CtrB,EAAAvG,oBAA/Bz9B,EAAAsvD,wbCLb,IAAArrB,EAAAzjC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GACAyvD,EAAAzvD,EAAA,GAGA4uD,EAAA,SAAApyC,GACE,SAAAoyC,EAAY3wB,EAAgD/W,EAAgB/hB,UAC1EqX,EAAApc,KAAAkR,KAAM2sB,EAAgB/W,EAAQ/hB,IAAWmM,KA8E7C,OAhFkCmL,EAAAmyC,EAAApyC,GAKhCoyC,EAAA/sD,UAAAunB,IAAA,SAAIC,EAAwC/mB,GAC1C,IAAMW,EAAciO,EAAAzN,cAAcC,UAAUpB,EAAO,GAAGK,KAAML,EAAO,GAAGK,MAAM,GAC5E,IAAKM,EACH,MAAM,IAAI8D,MAAM,qBAElB,IAiDIyX,EAjDAyiB,EAAM,GAENyuB,EAAe,GACnB,OAAQp+C,KAAK4V,QACX,IAAK,MACoB,YAAnB5kB,EAAO,GAAGkD,OACZy7B,EAAM,WACNyuB,EAAe,uBAEjB,MACF,IAAK,MACoB,YAAnBptD,EAAO,GAAGkD,OACZy7B,EAAM,WACNyuB,EAAe,uBAEjB,MACF,IAAK,MACoB,YAAnBptD,EAAO,GAAGkD,OACZy7B,EAAM,WACNyuB,EAAe,uBAEjB,MACF,IAAK,MACoB,YAAnBptD,EAAO,GAAGkD,OACZy7B,EAAM,WACNyuB,EAAe,uBAEjB,MACF,IAAK,QACoB,YAAnBptD,EAAO,GAAGkD,OACZy7B,EAAM,aACNyuB,EAAe,uBAEjB,MACF,IAAK,MACHzuB,EAAM,UACNyuB,EAAe,gBACf,MACF,IAAK,KACHzuB,EAAM,SACNyuB,EAAe,gBACf,MACF,IAAK,MACHzuB,EAAM,UACNyuB,EAAe,gBACf,MACF,QACE,MAAM3oD,MAAM,6CAGhB,GAAqB,wBAAjB2oD,EACFlxC,EAAS,IAAIpc,EAAAmD,OAAOtC,EAAa,WACjCwsD,EAAAlzC,YAAYG,cAAcmjC,MACtB5e,EAAK,CAAC3+B,EAAO,GAAGmR,UAAW,cAAe,CAACnR,EAAO,GAAGK,KAAKD,OAAQ,SAAU,CAACJ,EAAO,GAAGK,KAAM,YAC7F,CAACL,EAAO,GAAGmR,UAAW,cAAe,CAACnR,EAAO,GAAGK,KAAKD,OAAQ,SAAU,CAACJ,EAAO,GAAGK,KAAM,YACxF,CAAC6b,EAAO/K,UAAW,aAAc,OAAQ,CAAC+K,EAAO/K,UAAU/Q,OAAQ,SAAU,CAACO,EAAYP,OAAQ,SAClG,CAACO,EAAa,iBACb,IAAqB,kBAAjBysD,EAST,MAAM,IAAI3oD,MAAM,kEARhByX,EAAS,IAAIpc,EAAAmD,OAAOtC,EAAa,QACjCwsD,EAAAlzC,YAAYG,cAAcmjC,MACtB5e,EAAK,CAAC3+B,EAAO,GAAGgnB,YAA2B,WAAY,CAAChnB,EAAO,GAAGK,KAAKD,OAAQ,SAC/E,CAACJ,EAAO,GAAGK,KAAM,YAAa,CAACL,EAAO,GAAGgnB,YAA2B,WACpE,CAAChnB,EAAO,GAAGK,KAAKD,OAAQ,SAAU,CAACJ,EAAO,GAAGK,KAAM,YACnD,CAAC6b,EAAO8K,YAA2B,UAAW,OAAQ,CAAC9K,EAAO8K,YAAY5mB,OAAQ,SAClF,CAACO,EAAYP,OAAQ,SAAU,CAACO,EAAa,aAInD,MAAO,CAACub,IAEZowC,EAhFA,CAAkCnrB,EAAAzF,UAArBx+B,EAAAovD,8aCNb,IAAAD,EAAA3uD,EAAA,IACAoC,EAAApC,EAAA,GACAyvD,EAAAzvD,EAAA,GAGA+uD,EAAA,SAAAvyC,GAAA,SAAAuyC,mDAyBA,OAzB8BtyC,EAAAsyC,EAAAvyC,GAC5BuyC,EAAAltD,UAAAunB,IAAA,SAAIC,EAAwC/mB,GAC1C,IAAMkc,EAAS,IAAIpc,EAAAmD,OAAOjD,EAAO,GAAGK,KAAML,EAAO,GAAGkD,MAC9CF,EAAOkZ,EAAO/K,UAAU/Q,OAC9B,GAAuB,YAAnBJ,EAAO,GAAGkD,KAOZ,MAAM,IAAIuB,MAAM,6CAElB,OARE0oD,EAAAlzC,YAAYG,cAAcmjC,MACtB,YAAa,CAACv9C,EAAO,GAAGmR,UAAW,cAAe,CAAC+K,EAAO/K,UAAW,aAAc,OAAQ,CAACnO,EAAM,SAClG,CAACgM,KAAKyd,IAAK,WAAY,CAACzd,KAAKpN,IAAK,YAMjC,CAACsa,IAIVuwC,EAAAltD,UAAA67B,gBAAA,SAAgBp7B,GAEd,MAAuB,YAAnBA,EAAO,GAAGkD,MAMlBupD,EAzBA,CAA8BJ,EAAAliB,MAAjBjtC,EAAAuvD,owDCLb,IAAAprB,EAAA3jC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GACAyvD,EAAAzvD,EAAA,GAIAgvD,EAAA,SAAAxyC,GAAA,SAAAwyC,mDAiGA,OAjG8BvyC,EAAAuyC,EAAAxyC,GACtBwyC,EAAAntD,UAAAunB,IAAN,SAAUC,EAAwC/mB,mIAMhD,GALMqK,EAAIrK,EAAO,GACX+zC,EAAI/zC,EAAO,GACXiB,EAAsB,IAAlBjB,EAAOI,OAAeJ,EAAO,QAAKkB,EAGZ,IAA5B8N,KAAKtB,YAAYtN,OAEnB,IADM4zC,EAAQh0C,EAAO,GAAGK,KACf9C,EAAI,EAAGA,EAAIy2C,EAAM5zC,SAAU7C,EAClCyR,KAAKtB,YAAY5C,KAAKkpC,EAAMz2C,WAK1BmN,EAAakE,EAAAtB,aAAaY,uBAC5B7D,EAAEhK,KAAM0zC,EAAE1zC,KAAM2O,KAAKnH,QAASmH,KAAKnB,UAAWmB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAKlB,SAC9ExD,EAAI,IAAIxK,EAAAmD,OAAOyH,EAAYL,EAAEnH,MAMhB,KAHbmqD,EAkFV,SAA6BvX,EAAmB/Z,EAAeuxB,EAAuBC,GAMpF,GAAkB,IAAdzX,GAA6B,IAAV/Z,GAAiC,IAAlBuxB,GAAuBC,GAAiB,EAC5E,OAAO,EAKT,OAAO5rD,KAAK8qB,IAAI6gC,EAAeC,EAAgB,GA9F1BC,CAAoBnjD,EAAEhK,KAAK,GAAI2O,KAAK+sB,MAAOgY,EAAE1zC,KAAK,GAAI8sD,EAAAlzC,YAAYwzC,eAGjF,OACFN,EAAAlzC,YAAYG,cAAcmjC,MACtB,YAAa,CAAClzC,EAAE8G,UAAW,cAAe,CAAC9G,EAAEhK,KAAM,YAAa,CAAC0zC,EAAE5iC,UAAW,cAC9E,CAAC4iC,EAAE1zC,KAAM,YAAa,CAACiK,EAAE6G,UAAW,aAAc,OAAQ,CAAC7G,EAAEjK,KAAM,YACnE,CAACY,EAAIA,EAAEkQ,UAAY,KAAM,cAAe,CAACnC,KAAKnB,UAAW,YAAa,CAACmB,KAAK+sB,MAAO,SACnF,CAAC/sB,KAAKrB,KAAM,YAAa,CAACqB,KAAKnH,QAAS,aAC5C,GAAO,CAACyC,YAwBR,KAlBMojD,EAAU3Z,EAAE1zC,KAAK0H,MAAM,IACrB,GAAKpG,KAAKkC,MAAMkwC,EAAE1zC,KAAK,GAAKgtD,GAC9BM,EAAUD,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,IAEzDE,EAAa7Z,EAAE1zC,KAAK0H,MAAM,IACrB,GAAKgsC,EAAE1zC,KAAK,IAAMgtD,EAAa,GAAKK,EAAQ,GAEjDG,EAAU,CAAC,EAAGH,EAAQ,GAAIhjD,EAAW,GAAIA,EAAW,IACpDojD,EAAUJ,EAAQ,GAAKhjD,EAAW,GAAKA,EAAW,GAElDqjD,EAAa,CAAC,EAAGH,EAAW,GAAIljD,EAAW,GAAIA,EAAW,IAE1DsjD,EAAS,IAAIlsD,MAAoBurD,GACjCY,EAAS,IAAInsD,MAAoBurD,GACjCa,EAAS,IAAIpsD,MAAoBurD,GACjCc,EAAc,IAAIrsD,MAAgCurD,EAAa,GAG5D9vD,EAAI,EAAGA,EAAI8vD,IAAc9vD,EAC5BA,IAAM8vD,EAAa,GACrBW,EAAOzwD,GAAKw2C,EAAE5iC,UAAUuc,SAASnwB,EAAIowD,GAAUpwD,EAAI,GAAKowD,GACxDM,EAAO1wD,GAAK+M,EAAE6G,UAAUuc,SAASnwB,EAAIuwD,GAAUvwD,EAAI,GAAKuwD,GACpD7sD,IACFitD,EAAO3wD,GAAK0D,EAAEkQ,UAAUuc,SAASnwB,EAAImwD,EAAQ,IAAKnwD,EAAI,GAAKmwD,EAAQ,KAErES,EAAY5wD,GAAK4vD,EAAAlzC,YAAYG,cAAcE,YACvC/c,EAAG,YAAa,CAAC8M,EAAE8G,UAAW,cAAe,CAAC9G,EAAEhK,KAAM,YAAa,CAAC2tD,EAAOzwD,GAAI,cAC/E,CAACmwD,EAAS,YAAa,CAACO,EAAO1wD,GAAI,aAAc,OAAQ,CAACswD,EAAS,YACnE,CAACK,EAAO9tD,OAAS,EAAI8tD,EAAO3wD,GAAK,KAAM,cAAe,CAACyR,KAAKnB,UAAW,YAAa,CAACmB,KAAK+sB,MAAO,SACjG,CAAC/sB,KAAKrB,KAAM,YAAa,CAACqB,KAAKnH,QAAS,eAE5CmmD,EAAOzwD,GAAKw2C,EAAE5iC,UAAUuc,SAASnwB,EAAIowD,GACrCM,EAAO1wD,GAAK+M,EAAE6G,UAAUuc,SAASnwB,EAAIuwD,GACjC7sD,IACFitD,EAAO3wD,GAAK0D,EAAEkQ,UAAUuc,SAASnwB,EAAImwD,EAAQ,KAE/CP,EAAAlzC,YAAYG,cAAcmjC,MACtB,YAAa,CAAClzC,EAAE8G,UAAW,cAAe,CAAC9G,EAAEhK,KAAM,YAAa,CAAC2tD,EAAOzwD,GAAI,cAC5E,CAACqwD,EAAY,YAAa,CAACK,EAAO1wD,GAAI,aAAc,OAAQ,CAACwwD,EAAY,YACzE,CAACG,EAAO9tD,OAAS,EAAI8tD,EAAO3wD,GAAK,KAAM,cAAe,CAACyR,KAAKnB,UAAW,YAAa,CAACmB,KAAK+sB,MAAO,SACjG,CAAC/sB,KAAKrB,KAAM,YAAa,CAACqB,KAAKnH,QAAS,cAIhD,SAAMyP,QAAQyC,IAAIo0C,WAClB,OADAnsD,EAAA6N,OACA,GAAO,CAACvF,UAKZoiD,EAAAntD,UAAA67B,gBAAA,SAAgBp7B,GAEd,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,OAIxB,IAAlBlD,EAAOI,QAAmC,YAAnBJ,EAAO,GAAGkD,OAMzCwpD,EAjGA,CAA8BrrB,EAAAzF,MAAjB1+B,EAAAwvD,utBCPb,IAAAjrB,EAAA/jC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GACAyvD,EAAAzvD,EAAA,GAGAivD,EAAA,SAAAzyC,GAAA,SAAAyyC,mDAiCA,OAjC8BxyC,EAAAwyC,EAAAzyC,GAC5ByyC,EAAAptD,UAAAunB,IAAA,SAAIC,EAAwC/mB,GAC1C,IAAM1C,EAAI0C,EAAO,GACXiB,EAAIjB,EAAO,GACXhC,EAAIgC,EAAO,GAEXgC,EAAAC,EAAA2M,EAAAjK,SAAAC,qBAAAtH,EAAA+C,KAAA2O,KAAA+tB,OAAA97B,EAAAZ,KAAA2O,KAAAguB,OAAAh/B,EAAAqC,MAAA,GAAC6E,EAAAlD,EAAA,GAAGoD,EAAApD,EAAA,GACJsI,EAAI,IAAIxK,EAAAmD,OAAO,CAACiC,EAAGE,GAAI9H,EAAE4F,MAC/B,IAAK0L,EAAAzN,cAAcuB,KAAK4H,EAAGtM,EAAG,SAACV,EAAG2D,GAAM,WAAK,GAC3C,MAAM,IAAIwD,MAAM,0EAQlB,OANA0oD,EAAAlzC,YAAYG,cAAcmjC,MACtB,YAAa,CAACvuC,KAAK+tB,OAAQ,QAAS,CAAC/tB,KAAKguB,OAAQ,QAAS,CAAChuB,KAAK+tB,OAASz/B,EAAE+C,KAAK,GAAK/C,EAAE+C,KAAK,GAAI,SACjG,CAAC2O,KAAKguB,OAAS/7B,EAAEZ,KAAK,GAAKY,EAAEZ,KAAK,GAAI,SAAU,CAAC2O,KAAK+tB,OAASz/B,EAAE+C,KAAK,GAAK/C,EAAE+C,KAAK,GAAI,SACtF,CAAC2O,KAAK1D,MAAO,WAAY,CAAChO,EAAE6T,UAAW,cAAe,CAAClQ,EAAEkQ,UAAW,cAAe,CAACnC,KAAKiuB,KAAM,WAC/F,CAAC3yB,EAAE6G,UAAW,aAAc,UAEzB,CAAC7G,IAIVqiD,EAAAptD,UAAA67B,gBAAA,SAAgBp7B,GAEd,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,OAIzElD,EAAO,GAAGkD,OAASlD,EAAO,GAAGkD,MAAUlD,EAAO,GAAGkD,OAASlD,EAAO,GAAGkD,OAM7EypD,EAjCA,CAA8BlrB,EAAA9D,MAAjBzgC,EAAAyvD,0aCNb,IAAAhrB,EAAAjkC,EAAA,IACAoC,EAAApC,EAAA,GACAyvD,EAAAzvD,EAAA,GAGAovD,EAAA,SAAA5yC,GAAA,SAAA4yC,mDA0CA,OA1C+C3yC,EAAA2yC,EAAA5yC,GAC7C4yC,EAAAvtD,UAAAunB,IAAA,SAAIC,EAAwC/mB,GAO1C,IANA,IAAMqK,EAAIrK,EAAO,GACXs7B,EAAQt7B,EAAO,GACfiB,EAAIjB,EAAO,GAGbyyC,EAAc,EACTl1C,EAAI,EAAGA,EAAI8M,EAAEhK,KAAKD,OAAQ7C,IACjCk1C,GAAepoC,EAAEhK,KAAK9C,GAIxB,IAAM+M,EAAI,IAAIxK,EAAAmD,OAAOoH,EAAEhK,KAAMgK,EAAEnH,MAM/B,OALAiqD,EAAAlzC,YAAYG,cAAcmjC,MACtB,8BAA+B,CAAClzC,EAAE8G,UAAW,cAAe,CAAC7G,EAAE6G,UAAW,aAAc,OACxF,CAAC9G,EAAEhK,KAAK,GAAI,SAAU,CAACgK,EAAEhK,KAAK,GAAI,SAAU,CAACoyC,EAAa,SAAU,CAACnX,EAAMnqB,UAAW,cACtF,CAAClQ,EAAEkQ,UAAW,cAAe,CAACnC,KAAK8rB,QAAS,YAEzC,CAACxwB,IAIVwiD,EAAAvtD,UAAA67B,gBAAA,SAAgBp7B,GACd,IAAMq7B,EAAIr7B,EAAO,GACXs7B,EAAQt7B,EAAO,GACfu7B,EAAIv7B,EAAO,GAIjB,QAAIq7B,EAAEh7B,KAAKD,OAAS,GAA2B,IAAtBk7B,EAAMj7B,KAAKD,QAAkC,IAAlBm7B,EAAEl7B,KAAKD,UAGvDk7B,EAAMj7B,KAAK,KAAOg7B,EAAEh7B,KAAK,IAAMk7B,EAAEl7B,KAAK,KAAOg7B,EAAEh7B,KAAK,KAIzC,YAAXg7B,EAAEn4B,MAAqC,YAAfo4B,EAAMp4B,MAAiC,YAAXq4B,EAAEr4B,QAK9D4pD,EA1CA,CAA+CnrB,EAAA2H,uBAAlCpsC,EAAA4vD,wuBCLb,IAAA7wB,EAAAv+B,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GACAyvD,EAAAzvD,EAAA,GAGAqvD,EAAA,SAAA7yC,GAAA,SAAA6yC,mDAmCA,OAnCgC5yC,EAAA4yC,EAAA7yC,GAC9B6yC,EAAAxtD,UAAAunB,IAAA,SAAIC,EAAwC/mB,GACpC,IAAAgC,EAAAC,EAAA2M,EAAAtO,WAAAC,sBAAAP,EAAA,GAAAK,KAAAL,EAAA,GAAAK,MAAA,GAACG,EAAAwB,EAAA,GAAOvB,EAAAuB,EAAA,GACRrB,EAAciO,EAAAzN,cAAcC,UAAUZ,EAAOC,GAAO,GAC1D,IAAKE,EAEH,MAAM,IAAI8D,MAAM,iDAGlB,IAAM81C,EAAa3rC,EAAA9L,UAAUE,KAAKrC,GAC5BytD,EAAa,IAAIp8C,aAAauoC,GACpC4S,EAAAlzC,YAAYG,cAAcmjC,MACtB,cAAe,CAACv9C,EAAO,GAAGmR,UAAW,cAAe,CAACnR,EAAO,GAAGK,KAAM,YACrE,CAACL,EAAO,GAAGK,KAAKD,OAAQ,SAAU,CAACJ,EAAO,GAAGmR,UAAW,cAAe,CAACnR,EAAO,GAAGK,KAAM,YACxF,CAACL,EAAO,GAAGK,KAAKD,OAAQ,SAAU,CAACguD,EAAY,aAAc,OAAQ,CAACA,EAAWhuD,OAAQ,SACzF,CAACO,EAAa,YAAa,CAACA,EAAYP,OAAQ,UACpDwO,EAAAtO,WAAWI,uBAAuBC,EAAyBX,EAAO,GAAGK,KAAKD,OAAQJ,EAAO,GAAGK,KAAKD,QACjG,IAAM8b,EAAS,IAAIpc,EAAAmD,OAAOtC,EAAaX,EAAO,GAAGkD,MAEjD,OADAgZ,EAAO/K,UAAUhO,IAAIirD,GACd,CAAClyC,IAIV6wC,EAAAxtD,UAAA67B,gBAAA,SAAgBp7B,GAEd,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MAI1ClD,EAAO,GAAGkD,OAASlD,EAAO,GAAGkD,MAMrC6pD,EAnCA,CAAgC9wB,EAAAG,QAAnBl/B,EAAA6vD,swDCNb,IAAAlrB,EAAAnkC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GACAyvD,EAAAzvD,EAAA,GAIA6uD,EAAA,SAAAryC,GAAA,SAAAqyC,mDASA,OATqCpyC,EAAAoyC,EAAAryC,GAEnCqyC,EAAAhtD,UAAA67B,gBAAA,SAAgBp7B,GACd,OAAOo7B,EAAgBp7B,IAGnBusD,EAAAhtD,UAAAunB,IAAN,SAAUC,EAAwC/mB,oEAChD,SAAO45C,EAAY55C,EAAO,GAAIgP,KAAKlB,QAASkB,KAAK8uB,gBAAiB9uB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAKnH,eAExG0kD,EATA,CAAqC1qB,EAAAhE,aAAxB3gC,EAAAqvD,kBAWb,IAAAK,EAAA,SAAA1yC,GAAA,SAAA0yC,mDASA,OAT2CzyC,EAAAyyC,EAAA1yC,GAEzC0yC,EAAArtD,UAAA67B,gBAAA,SAAgBp7B,GACd,OAAOo7B,EAAgBp7B,IAGnB4sD,EAAArtD,UAAAunB,IAAN,SAAUC,EAAwC/mB,oEAChD,SAAO65C,EAAkB75C,EAAO,UAEpC4sD,EATA,CAA2C/qB,EAAA7D,mBAA9B9gC,EAAA0vD,wBAWb,IAAAI,EAAA,SAAA9yC,GAAA,SAAA8yC,mDASA,OATiC7yC,EAAA6yC,EAAA9yC,GAE/B8yC,EAAAztD,UAAA67B,gBAAA,SAAgBp7B,GACd,OAAOo7B,EAAgBp7B,IAGnBgtD,EAAAztD,UAAAunB,IAAN,SAAUC,EAAwC/mB,oEAChD,SAAO85C,EAAQ95C,EAAO,GAAIgP,KAAKlB,QAASkB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAKnH,eAE9EmlD,EATA,CAAiCnrB,EAAA5D,SAApB/gC,EAAA8vD,cAWb,IAAAH,EAAA,SAAA3yC,GAAA,SAAA2yC,mDASA,OATuC1yC,EAAA0yC,EAAA3yC,GAErC2yC,EAAAttD,UAAA67B,gBAAA,SAAgBp7B,GACd,OAAOo7B,EAAgBp7B,IAGnB6sD,EAAAttD,UAAAunB,IAAN,SAAUC,EAAwC/mB,oEAChD,SAAO+5C,EAAc/5C,EAAO,UAEhC6sD,EATA,CAAuChrB,EAAA1D,eAYvC,SAAS/C,EAAgBp7B,GAEvB,MAAuB,YAAnBA,EAAO,GAAGkD,KAQhB,SAAe02C,EACX7sC,EAAee,EAAiBgwB,EAA0BpwB,EAAuBC,EACjF9F,oEACF,SAAO8V,GAAK,EAAO,EAAG5Q,EAAOe,EAASgwB,EAAiBpwB,EAAaC,EAAM9F,QAG5E,SAAegyC,EAAkB9sC,oEAC/B,SAAO4Q,GAAK,EAAM,EAAG5Q,EAAO,UAAU,EAAO,GAAI,GAAI,SAGvD,SAAe+sC,EACX/sC,EAAee,EAAiBJ,EAAuBC,EAAgB9F,oEACzE,SAAO8V,GAAK,EAAO,EAAG5Q,EAAOe,GAAS,EAAOJ,EAAaC,EAAM9F,QAGlE,SAAekyC,EAAchtC,oEAC3B,SAAO4Q,GAAK,EAAM,EAAG5Q,EAAO,UAAU,EAAO,GAAI,GAAI,SAiBvD,SAAe4Q,EACXnQ,EAA2B6gD,EAAkBthD,EAAee,EAAiBgwB,EAC7EpwB,EAAuBC,EAAgB9F,2HAGzC,OADIymD,EAAW,GACPD,GACN,KAAK,EACHC,EAAW,oBACX,MACF,KAAK,EACHA,EAAW,gBACX,MACF,QACE,MAAM,IAAI7pD,MAAM,4BAGpBmK,EAAAtB,aAAaC,qBAAqBC,EAAkBT,EAAM1M,KAAMqN,EAAa7F,EAAS8F,GAGhFjD,EACFkE,EAAAtB,aAAaU,uBAAuBR,EAAkBT,EAAM1M,KAAMwH,EAAS6F,EAAaC,EAAMG,GAG5FxD,EAAI,IAAIxK,EAAAmD,OAAOyH,EAAYqC,EAAM7J,MAMpB,KAHbmqD,EAyDR,SAA6BvX,EAAmByY,EAAqBhB,GAKnE,GAAkB,IAAdzX,GAAmC,IAAhByY,GAAqBhB,GAAiB,EAC3D,OAAO,EAKT,OAAO5rD,KAAK8qB,IAAI8hC,EAAahB,EAAgB,GApE1BC,CAAoBzgD,EAAM1M,KAAK,GAAI0M,EAAM1M,KAAK,GAAI8sD,EAAAlzC,YAAYwzC,eAG7E,OACFN,EAAAlzC,YAAYG,cAAcmjC,MACtB+Q,EAAU,CAAC5gD,EAAYtN,OAAQ,SAAU,CAACoN,EAAkB,QAAS,CAACT,EAAMoE,UAAW,cACvF,CAACpE,EAAM1M,KAAM,YAAa,CAACiK,EAAE6G,UAAW,aAAc,OAAQ,CAAC7G,EAAEjK,KAAM,YAAa,CAACqN,EAAa,YAClG,CAACC,EAAM,YAAa,CAAC9F,EAAS,YAAa,CAACi2B,EAAiB,uBA0BjE,KApBM0wB,EAAUzhD,EAAM1M,KAAK0H,MAAM,IACzB,GAAKpG,KAAKkC,MAAMkJ,EAAM1M,KAAK,GAAKgtD,GAClCoB,EAAU7/C,EAAA9L,UAAUE,KAAKwrD,IAEzBE,EAAa3hD,EAAM1M,KAAK0H,MAAM,IACzB,GAAKgF,EAAM1M,KAAK,IAAMgtD,EAAa,GAAKmB,EAAQ,IAErDX,EAAUnjD,EAAW3C,MAAM,IACzB,GAAKymD,EAAQ,GACfV,EAAUl/C,EAAA9L,UAAUE,KAAK6qD,IAEzBE,EAAarjD,EAAW3C,MAAM,IACzB,GAAK2mD,EAAW,GAErBP,EAAc,IAAIrsD,MAAgCurD,EAAa,GAE/DhyB,EAAItuB,EAAMoE,UACVu7B,EAAIpiC,EAAE6G,UAGH5T,EAAI,EAAGA,EAAI8vD,IAAc9vD,EAC5BA,IAAM8vD,EAAa,EACrBc,EAAY5wD,GAAK4vD,EAAAlzC,YAAYG,cAAcE,YACvC/c,EAAG+wD,EAAU,CAAC5gD,EAAYtN,OAAQ,SAAU,CAACoN,EAAkB,QAC/D,CAAC6tB,EAAE3N,SAASnwB,EAAIkxD,GAAUlxD,EAAI,GAAKkxD,GAAU,cAAe,CAACD,EAAS,YACtE,CAAC9hB,EAAEhf,SAASnwB,EAAIuwD,GAAUvwD,EAAI,GAAKuwD,GAAU,aAAc,OAAQ,CAACD,EAAS,YAC7E,CAACngD,EAAa,YAAa,CAACC,EAAM,YAAa,CAAC9F,EAAS,YAAa,CAACi2B,EAAiB,SAE5FqvB,EAAAlzC,YAAYG,cAAcmjC,MACtB+Q,EAAU,CAAC5gD,EAAYtN,OAAQ,SAAU,CAACoN,EAAkB,QAC5D,CAAC6tB,EAAE3N,UAAU2/B,EAAa,GAAKoB,GAAU,cAAe,CAACC,EAAY,YACrE,CAAChiB,EAAEhf,UAAU2/B,EAAa,GAAKS,GAAU,aAAc,OAAQ,CAACC,EAAY,YAC5E,CAACrgD,EAAa,YAAa,CAACC,EAAM,YAAa,CAAC9F,EAAS,YAAa,CAACi2B,EAAiB,SAIhG,SAAMxmB,QAAQyC,IAAIo0C,WAAlBnsD,EAAA6N,wBAGF,SAAO,CAACvF,SArIGpN,EAAA2vD,mbCxCb,IAAA7qB,EAAAtkC,EAAA,IACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GACAyvD,EAAAzvD,EAAA,GAGAuvD,EAAA,SAAA/yC,GAAA,SAAA+yC,mDAsBA,OAtBiC9yC,EAAA8yC,EAAA/yC,GAC/B+yC,EAAA1tD,UAAAunB,IAAA,SAAIC,EAAwC/mB,GAC1C,IAAMqK,EAAIrK,EAAO,GACXy7C,EAAgB7sC,EAAA9L,UAAUsF,UAAU4G,KAAKzH,KAAM8C,EAAEhK,KAAKD,QACtDgF,EAAIwJ,EAAA9L,UAAU0E,gBAAgB6C,EAAEhK,KAAMo7C,GACtCC,EAAI9sC,EAAA9L,UAAUwE,kBAAkB+C,EAAEhK,KAAMo7C,GACxCnxC,EAAI,IAAIxK,EAAAmD,OAAOoH,EAAEhK,KAAMgK,EAAEnH,MAI/B,OAHAiqD,EAAAlzC,YAAYG,cAAcmjC,MACtB,eAAgB,CAAClzC,EAAE8G,UAAW,cAAe,CAAC7G,EAAE6G,UAAW,aAAc,OAAQ,CAAC/L,EAAG,SAAU,CAACs2C,EAAG,UAEhG,CAACpxC,IAIV2iD,EAAA1tD,UAAA67B,gBAAA,SAAgBp7B,GAEd,MAAuB,YAAnBA,EAAO,GAAGkD,MAMlB+pD,EAtBA,CAAiCjrB,EAAA5D,SAApBlhC,EAAA+vD,00BCNb,IAAA/qB,EAAAxkC,EAAA,IACAoC,EAAApC,EAAA,GACAyvD,EAAAzvD,EAAA,GAGAwvD,EAAA,SAAAhzC,GAAA,SAAAgzC,mDA4BA,OA5B6B/yC,EAAA+yC,EAAAhzC,GAC3BgzC,EAAA3tD,UAAAunB,IAAA,SAAIC,EAAwC/mB,GAI1C,UAHMsK,EAAI,IAAIxK,EAAAmD,OAAOjD,EAAO,GAAGK,KAAML,EAAO,GAAGkD,MACzCF,EAAOhD,EAAO,GAAGmR,UAAU/Q,OAC3B2M,EAAQ,IAAIjL,MAAwB9B,EAAOI,QACxC7C,EAAI,EAAGA,EAAIyC,EAAOI,OAAQ7C,IACjCwP,EAAMxP,GAAK,CAACyC,EAAOzC,GAAG4T,UAAW,cAKnC,OAHAnP,EAAAmrD,EAAAlzC,YAAYG,eAAcmjC,MAAKnwB,MAAAprB,EAAAwoC,EAAA,CAC3B,WAAY,CAACxqC,EAAOI,OAAQ,SAAU,CAAC4C,EAAM,SAAU,CAACsH,EAAE6G,UAAW,aAAc,UAAapE,IAE7F,CAACzC,IAIV4iD,EAAA3tD,UAAA67B,gBAAA,SAAgBp7B,GAEd,GAAuB,YAAnBA,EAAO,GAAGkD,KACZ,OAAO,EAET,IAAK,IAAI3F,EAAI,EAAGA,EAAIyC,EAAOI,OAAQ7C,IACjC,GAAIyC,EAAO,GAAGkD,OAASlD,EAAOzC,GAAG2F,KAC/B,OAAO,EAIX,OAAO,GAEXgqD,EA5BA,CAA6BhrB,EAAA7D,KAAhBnhC,EAAAgwD,yFCHb,IAAA90C,EAAA1a,EAAA,GAGAmuC,EAAAnuC,EAAA,KAEAixD,EAAAjxD,EAAA,KASAguC,EAAA,oBAAAA,KA6BA,OAtBEA,EAAAnsC,UAAAq7B,WAAA,WACE,IASE,OARA5rB,KAAKkM,UAAYyzC,EAAAC,mBAAmB5/C,KAAK6/C,WACF,iBAA5B7/C,KAAK8/C,qBACd9/C,KAAK8/C,mBAAqB,IAES,iBAA1B9/C,KAAK+/C,mBACd//C,KAAK+/C,iBAAmB,QAE1B32C,EAAAxC,OAAOtB,QAAQ,eAAgB,gCAAgCtF,KAAKkM,YAC7D,EACP,MAAOtD,GAEP,OADAQ,EAAAxC,OAAOpB,QAAQ,eAAgB,sCAAsCoD,IAC9D,IAGX8zB,EAAAnsC,UAAAusC,qBAAA,SAAqBzwB,GACnB,OAAO,IAAIwwB,EAAAmjB,oBAAoBhgD,KAAMqM,IAEvCqwB,EAAAnsC,UAAAysC,QAAA,WACEh9B,KAAKkM,UAAU8wB,WAEnBN,EA7BA,GAAaxuC,EAAAwuC,8FCdb,IAAAtzB,EAAA1a,EAAA,GAEAuuC,EAAAvuC,EAAA,IAKAwuC,EAAAxuC,EAAA,KACAyuC,EAAAzuC,EAAA,KACAuxD,EAAAvxD,EAAA,KACAwxD,EAAAxxD,EAAA,KACAyxD,EAAAzxD,EAAA,KAGAsxD,EAAA,WAOE,SAAAA,EAA4BnuB,EAAuCxlB,GAAvCrM,KAAA6xB,UAAuC7xB,KAAAqM,UACjErM,KAAKogD,eAAiB,IAAIH,EAAAI,eAAergD,KAAKqM,QAAQixB,SAAUzL,EAAQ3lB,WACxElM,KAAKsgD,eAAiB,IAAIJ,EAAAK,+BAA+B1uB,EAAQ3lB,UAAUs0C,gBAC3ExgD,KAAKygD,eAAiB,IAAIN,EAAAO,eACtB7uB,EAAQ3lB,UAAWlM,KAAKsgD,eAAgBtgD,KAAKqM,QAAQixB,SACrD,CAACqjB,cAA4C,SAA7B9uB,EAAQkuB,mBAC5B//C,KAAK4gD,iBAAmB,IAAIC,IA+BhC,OA5BEb,EAAAzvD,UAAA6sC,uBAAA,WACE,OAAO,IAAIF,EAAA4jB,sBAAsB9gD,OAEnCggD,EAAAzvD,UAAAwwD,mBAAA,SAAmB1qC,GACjB,IAAM2qC,EAAe3qC,EAAM4qC,YAAY5iD,OAAO,SAAAlE,GAAK,OAAY,IAAZA,EAAEkH,MAAelH,EAAE2e,SAAQrhB,IAAI,SAAA0C,GAAK,OAAAA,EAAE2e,OAAQhb,SACjGkC,KAAKghD,aAAe,IAAIh0C,IAAIg0C,IAE9BhB,EAAAzvD,UAAA2wD,cAAA,SAAcC,GACZ,QAAOnhD,KAAKghD,cAAehhD,KAAKghD,aAAa1zC,IAAI6zC,IAEnDnB,EAAAzvD,UAAA6wD,eAAA,SAAeD,GACb,OAAOnhD,KAAK4gD,iBAAiBpxD,IAAI2xD,IAEnCnB,EAAAzvD,UAAA8wD,eAAA,SAAeF,EAAqBG,GAClCl4C,EAAAxC,OAAOtB,QAAQ,sBAAuB,iCACtCtF,KAAK4gD,iBAAiBzsD,IAAIgtD,EAAUG,IAEtCtB,EAAAzvD,UAAAysC,QAAA,eAAAt0B,EAAA1I,KACEA,KAAKogD,eAAepjB,UACpBh9B,KAAKygD,eAAec,sBACpBvhD,KAAK4gD,iBAAiBtjD,QAAQ,SAAAkkD,GAAM,OAAA94C,EAAK+3C,eAAegB,eAAeD,GAAI,KAC3ExhD,KAAK4gD,iBAAmB,IAAIC,KAE9Bb,EAAAzvD,UAAAgY,QAAA,SAAQoE,EAAkB4M,GACxB,IAAM5lB,EAAKspC,EAAA3jB,gBAAgB3M,EAAM4M,EAAQ4jB,EAAAukB,wBAEzC,OADA/tD,EAAGi4B,WAAWjf,EAAKkf,YACZl4B,GAEXqsD,EA5CA,GAAa9xD,EAAA8xD,0nBCfb,IAAA52C,EAAA1a,EAAA,GACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAEAizD,EAAAjzD,EAAA,KAKAkpB,EAAAlpB,EAAA,IAEAoyD,EAAA,WAEE,SAAAA,EAAmBvjB,GAAAv9B,KAAAu9B,UACjBv9B,KAAK4gD,iBAAmB,IAAIC,IAsKhC,OAnKEC,EAAAvwD,UAAAunB,IAAA,SAAInkB,EAAmB3C,GACrB,IAAI4wD,EAAW5hD,KAAKu9B,QAAQ6iB,eAAeyB,YAAYluD,GACvD,IAAKiuD,EAAU,CACb,IAAMz1C,EAAcxY,EAAGmuD,kBAAkB9hD,KAAMhP,GAC/C4wD,EAAW5hD,KAAKu9B,QAAQ6iB,eAAe7gB,MAAMpzB,GAC7CnM,KAAKu9B,QAAQ6iB,eAAe2B,YAAYpuD,EAAIiuD,GAE9C,IAAMI,EAAUruD,EAAGsuD,cAAcjiD,KAAM4hD,EAASz1C,YAAanb,GAE7D,OADAgP,KAAKu9B,QAAQ6iB,eAAetoC,IAAI8pC,EAAUI,GACnC,CAACA,EAAQE,kBAAkBppC,SAcpCgoC,EAAAvwD,UAAA6nB,uBAAA,SAAuBU,EAAgBqpC,GACrC,IAAIX,EAAKxhD,KAAKohD,eAAetoC,EAAOhb,QAWpC,OAVK0jD,EAQHp4C,EAAAxC,OAAOtB,QAAQ,mBAAoB,uCAAuCwT,EAAOznB,KAAI,MAPrF+X,EAAAxC,OAAOtB,QAAQ,mBAAoB,uCAAuCwT,EAAOznB,KAAI,KAChF8wD,IACHA,EAASniD,KAAKoiD,6BAA6BtpC,EAAOznB,KAAK0H,UAGzDyoD,EAAKxhD,KAAKqiD,kBAAkBF,EAAQrpC,EAAO5kB,KAAM4kB,EAAOlb,WAAYkb,EAAM,IAIrE0oC,GAQTV,EAAAvwD,UAAA+xD,4BAAA,SAA4BH,EAAuBlhD,GACjD,OAAOjB,KAAKqiD,kBAAkBF,EAAQlhD,IAYxC6/C,EAAAvwD,UAAAgyD,sCAAA,SACIJ,EAAuBlhD,EAA2BpD,EAAyBib,GAC7E,OAAO9Y,KAAKqiD,kBAAkBF,EAAQlhD,EAAUpD,EAAMib,EAAM,IAGtDgoC,EAAAvwD,UAAA8xD,kBAAR,SACIF,EAAuBlhD,EAA2BpD,EAA0Bib,EAC5E0pC,GACFp5C,EAAAxC,OAAOtB,QAAQ,mBAAoB,iCAAiC81C,KAAKC,UAAU8G,GAAO,KAC1F,IAAMtpC,EAAU7Y,KAAKu9B,QAAQkjB,eAAegC,wBAAwBxhD,EAAUkhD,EAAQtkD,EAAM2kD,GAC5F,OAAOxiD,KAAK0iD,6BAA6BP,EAAQlhD,EAAU4X,EAASC,IAUtEgoC,EAAAvwD,UAAAqoB,wBAAA,SAAwBupC,EAAuBlhD,EAA2B4X,EAAuBsoC,GAE/F,OAAOnhD,KAAK0iD,6BAA6BP,EAAQlhD,EAAU4X,OAAS3mB,EAAWivD,IAGzEL,EAAAvwD,UAAAmyD,6BAAR,SACIP,EAAuBlhD,EAA2B4X,EAAuBC,EAAiBqoC,GAD9F,IAAAz4C,EAAA1I,KAEQshD,EAAWqB,EAAA,GACZR,EAAM,CACTrpC,OAAQA,GACJ,IAAIhoB,EAAAmD,OACIkuD,EAAOxpC,cAAe1X,EACtB,SAACq0C,GACC,OAAO5sC,EAAKk6C,YAAYtB,SAE1BpvD,OAAWA,EAAWivD,GAClCtoC,QAAOA,IAGT,OADA7Y,KAAKqhD,eAAeC,EAAYxoC,OAAOhb,OAAQwjD,GACxCA,GAGTR,EAAAvwD,UAAA6wD,eAAA,SAAeD,GACb,OAAOnhD,KAAKu9B,QAAQ2jB,cAAcC,GAAYnhD,KAAKu9B,QAAQ6jB,eAAeD,GAC5BnhD,KAAK4gD,iBAAiBpxD,IAAI2xD,IAE1EL,EAAAvwD,UAAA8wD,eAAA,SAAeF,EAAqBK,GAC9BxhD,KAAKu9B,QAAQ2jB,cAAcC,GAC7BnhD,KAAKu9B,QAAQ8jB,eAAeF,EAAUK,GAEtCxhD,KAAK4gD,iBAAiBzsD,IAAIgtD,EAAUK,IAOxCV,EAAAvwD,UAAAsyD,yBAAA,SAAyB/pC,EAAgBR,EAAuBK,QAAvB,IAAAL,MAAA,GAEvC,IAAMkpC,EAAKxhD,KAAKohD,eAAetoC,EAAOhb,QACtC,OAAI0jD,GAGGxhD,KAAKoiD,6BACK,IAAb9pC,EAAiBQ,EAAOznB,KAAK0H,QAAU6e,EAAAW,eAAeO,EAAOznB,KAAK0H,SAAUuf,EAAUK,IAK5FmoC,EAAAvwD,UAAA6xD,6BAAA,SACIrtD,EAA8BujB,EAAuBK,EACrDmqC,QAD8B,IAAAxqC,MAAA,GAE1B,IAAAtlB,EAAAC,EAAA+M,KAAAu9B,QAAA+iB,eAAAyC,iBAAAhuD,EAAA+tD,GAAA,GAACpqC,EAAA1lB,EAAA,GAAOylB,EAAAzlB,EAAA,GACVqoC,EAAetmC,EAInB,GAHqB,IAAjBA,EAAM3D,SACRiqC,EAAe,CAAC,IAED,IAAb/iB,EAEFK,EAAgB5jB,OACX,IAAK4jB,EACV,MAAM,IAAIljB,MAAM,oDAElB,MAAO,CACLijB,MAAKA,EACLD,OAAMA,EACNH,SAAUA,GAAsB,EAChCvjB,MAAOsmC,EACPxiC,QAAS+G,EAAA9L,UAAU6E,eAAe0iC,GAClC1iB,cAAaA,IAIjBmoC,EAAAvwD,UAAAysC,QAAA,eAAAt0B,EAAA1I,KACEA,KAAKu9B,QAAQkjB,eAAec,sBAC5BvhD,KAAK4gD,iBAAiBtjD,QAAQ,SAAAkkD,GAAM,OAAA94C,EAAK60B,QAAQkjB,eAAegB,eAAeD,KAC/ExhD,KAAK4gD,iBAAmB,IAAIC,KAG9BC,EAAAvwD,UAAAqyD,YAAA,SAAYtB,GACV,IAAKthD,KAAKu9B,QAAQ1L,QAAQ3lB,UAAU82C,2BAA4B,CAC9D,IACMC,GADK,IAAItB,EAAAuB,kBACIC,YAAYnjD,KAAMshD,GACrC,OAAOthD,KAAKu9B,QAAQkjB,eAAe2C,wBAAwBH,GAE7D,OAAOjjD,KAAKu9B,QAAQkjB,eAAemC,YAAYtB,EAAaA,EAAYxoC,OAAO5kB,KAAMotD,EAAYhpC,WAErGwoC,EAzKA,GAAa5yD,EAAA4yD,wZCZb,IAAAlhD,EAAAlR,EAAA,GACA20D,EAAA30D,EAAA,GAIAw0D,EAAA,oBAAAA,KA6EA,OA5EEA,EAAA3yD,UAAA4yD,YAAA,SAAYprC,EAAyCha,GACnD,IAAMpM,EAAcoM,EAAMhJ,MACpB/B,EAAAC,EAAA8kB,EAAAwlB,QAAA+iB,eAAAyC,iBAAAhlD,EAAAhJ,OAAA,GACAuuD,EAA8B,CAClC5qC,MAFK1lB,EAAA,GAGLylB,OAHYzlB,EAAA,GAIZslB,SAAU,EACVvjB,MAAOpD,EACPkH,QAAS+G,EAAA9L,UAAU6E,eAAehH,GAClCgnB,cAAehnB,GAEX8S,EAAO4+C,EAAA9+C,QAAQwT,EAAiBwlB,QAAQ1L,QAAQ3lB,UAAUnI,SAqD1DoI,EAAc,CAACo3C,aAAc,CAACxlD,GAAQulD,aAAYA,EAAEE,SAAU,CAAC,KAAMC,aAhDtD,8sCA6CDh/C,EAAKN,UAAS,6BAC5BM,EAAKL,OAAM,oCAEwEs/C,SAAS,GAC5F9B,EAAW7pC,EAAiBwlB,QAAQ6iB,eAAe7gB,MAAMpzB,GAEzDw3C,EAAU5rC,EAAiBwlB,QAAQ1L,QAAQ3lB,UAAU03C,WAAW,OAAQ,GACxE/qC,EACFd,EAAiBwlB,QAAQ1L,QAAQ3lB,UAAU23C,gBAAgBP,EAAa5qC,MAAO4qC,EAAa7qC,OAAQkrC,GAElG3B,EAAU,CAAC8B,kBAAmB,CAAC/lD,GAAQmkD,kBADnBnqC,EAAiBa,wBAAwB0qC,EAAc,QAASzqC,EAAS,IACnCkrC,YAAa,IAG7E,OADAhsC,EAAiBwlB,QAAQ6iB,eAAetoC,IAAI8pC,EAAUI,GAC/CA,EAAQE,mBAEnBgB,EA7EA,GAAah1D,EAAAg1D,+QCLb,IAAAlxB,EAAAtjC,EAAA,GAGAwjC,EAAAxjC,EAAA,KACAs1D,EAAA16C,EAAA5a,EAAA,MACA2uD,EAAA3uD,EAAA,KACA0jC,EAAA1jC,EAAA,KACA2jC,EAAA3jC,EAAA,KACA4jC,EAAA5jC,EAAA,KACAu1D,EAAAv1D,EAAA,KACA6jC,EAAA7jC,EAAA,KACA8jC,EAAA9jC,EAAA,KACA+jC,EAAA/jC,EAAA,KACAgkC,EAAAhkC,EAAA,KACAw1D,EAAAx1D,EAAA,KACAu+B,EAAAv+B,EAAA,KACAy1D,EAAAz1D,EAAA,KACAmkC,EAAAnkC,EAAA,KACA01D,EAAA96C,EAAA5a,EAAA,MACAipB,EAAAjpB,EAAA,IACAqkC,EAAArkC,EAAA,KACAskC,EAAAtkC,EAAA,KACA21D,EAAA31D,EAAA,KACAukC,EAAAvkC,EAAA,KACAwkC,EAAAxkC,EAAA,KACAykC,EAAAzkC,EAAA,KACA0kC,EAAA1kC,EAAA,KACA2kC,EAAA/pB,EAAA5a,EAAA,MACA6kC,EAAA7kC,EAAA,KAEaR,EAAAwzD,uBAA2D,CACtE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIruB,EAASixB,aAAatyB,EAAA9f,aAAcmhB,EAASkxB,aACzE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIlxB,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAASmxB,cACzE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIR,EAAUS,cAAczyB,EAAA9f,aAAc8xC,EAAUU,aAC5E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIV,EAAUS,cAAc,CAAC,QAAST,EAAUW,aACxE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAItxB,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAASuxB,cACzE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIvxB,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAASwxB,cACzE,CAAC,cAAe,GAAI,KAAM,WAAM,WAAIhyB,EAAAiyB,mBACpC,CAAC,qBAAsB,GAAI,KAAM,WAAM,WAAI5yB,EAAA6yB,0BAC3C,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI1xB,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAAS2xB,cACzE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI3H,EAAA4H,YAC7B,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI7yB,EAAA8yB,cAC/B,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI7yB,EAAA8yB,YAC7B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI9xB,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAAS+xB,aACxE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIpB,EAAUS,cAAczyB,EAAA9f,aAAc8xC,EAAUqB,aAC5E,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI/yB,EAAAgzB,eAChC,CAAC,QAAS,GAAI,KAAM,WAAM,WAAItB,EAAUS,cAAczyB,EAAA9f,aAAc8xC,EAAUuB,iBAAarzD,EAAW,UACtG,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI+xD,EAAAuB,WAC5B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAInyB,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAASoyB,aACxE,CAAC,UAAW,GAAI,KAAM,WAAM,WAAIlzB,EAAAmzB,eAChC,CAAC,QAAS,GAAI,KAAM,WAAM,WAAIryB,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAASsyB,eAC1E,CAAC,SAAU,GAAI,KAAM,WAAM,WAAInzB,EAAAozB,cAC/B,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAInzB,EAAAozB,YAC7B,CAAC,oBAAqB,GAAI,KAAM,WAAM,WAAIhzB,EAAAizB,yBAC1C,CAAC,gBAAiB,GAAI,KAAM,WAAM,WAAIjzB,EAAAkzB,qBACtC,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI/B,EAAUS,cAAczyB,EAAA9f,aAAc8xC,EAAUgC,mBAAe9zD,EAAW,UAC1G,CAAC,WAAY,GAAI,KAAM,WAAM,WAAImhC,EAASixB,aAAatyB,EAAA9f,aAAcmhB,EAAS4yB,kBAC9E,CAAC,cAAe,GAAI,KAAM,WAAM,WAAIvzB,EAAAwzB,mBACpC,CAAC,YAAa,GAAI,KAAM,WAAM,WAAIhC,EAAAiC,iBAClC,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAInC,EAAUS,cAAczyB,EAAA9f,aAAc8xC,EAAUoC,gBAAYl0D,EAAW,UACpG,CAAC,MAAO,GAAI,KAAM,WAAM,WAAImhC,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAASgzB,aACxE,CAAC,SAAU,GAAI,KAAM,WAAM,WAAIp5B,EAAAq5B,cAC/B,CAAC,UAAW,GAAI,KAAM,WAAM,WAAIzzB,EAAA0zB,eAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIvC,EAAUS,cAAczyB,EAAA9f,aAAc8xC,EAAUwC,aAC5E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAInzB,EAASixB,aAAatyB,EAAA9f,aAAcmhB,EAASozB,aACzE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIpzB,EAASixB,aAAa,CAAC,QAASjxB,EAASqzB,aACrE,CAAC,KAAM,GAAI,KAAM,WAAM,WAAI1C,EAAUS,cAAc,CAAC,QAAST,EAAU2C,YACvE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIxC,EAAAyC,WAC5B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI5C,EAAUS,cAAczyB,EAAA5f,YAAa4xC,EAAU6C,aAC3E,CAAC,QAAS,GAAI,KAAM,WAAM,WAAI7C,EAAUS,cAAczyB,EAAA5f,YAAa4xC,EAAU8C,eAC7E,CAAC,eAAgB,GAAI,KAAM,WAAM,WAAI1C,EAAU2C,oBAC/C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI3C,EAAU4C,iBAC5C,CAAC,aAAc,GAAI,KAAM,WAAM,WAAI5C,EAAU6C,kBAC7C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI7C,EAAU8C,iBAC5C,CAAC,aAAc,GAAI,KAAM,WAAM,WAAI9C,EAAU+C,kBAC7C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI/C,EAAUgD,iBAC5C,CAAC,kBAAmB,GAAI,KAAM,WAAM,WAAIhD,EAAUiD,uBAClD,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIh0B,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAASi0B,cACzE,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI3vC,EAAAE,eAChC,CAAC,UAAW,GAAI,KAAM,WAAM,WAAIwb,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAASk0B,iBAC5E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIl0B,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAASm0B,aACxE,CAAC,QAAS,GAAI,MAAO,WAAM,WAAIz0B,EAAA00B,gBAC/B,CAAC,QAAS,GAAI,MAAO,WAAM,WAAI10B,EAAA20B,aAC/B,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI10B,EAAA20B,eAKhC,CAAC,QAAS,GAAI,KAAM,SAACh7C,GAAS,WAAI03C,EAAAuD,WAAWj7C,EAAKk7C,QAAQz2D,UAC1D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIiiC,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAASy0B,cACzE,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI70B,EAAA80B,eAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI/D,EAAUS,cAAczyB,EAAA9f,aAAc8xC,EAAUgE,aAC5E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI90B,EAAA+0B,WAC5B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI50B,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAAS60B,aACxE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI70B,EAASixB,aAAatyB,EAAA5f,YAAaihB,EAAS80B,cACzE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIh1B,EAAAi1B,YAC7B,CAAC,YAAa,GAAI,KAAM,WAAM,WAAIh1B,EAAAi1B,iBAClC,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI90B,EAAA+0B,iBAClC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAItE,EAAUS,cAAc,CAAC,QAAST,EAAUuE,6aClG1E,IAAAr2B,EAAAxjC,EAAA,IAEA20D,EAAA30D,EAAA,GAIAq2D,EAAA,SAAA75C,GAAA,SAAA65C,mDAiCA,OAjC6C55C,EAAA45C,EAAA75C,GAC3C65C,EAAAx0D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpC+zD,EAAAx0D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAMuyD,EAAevyD,EAAOyG,IAAI,SAAA5H,GAAK,OAAA24D,EAAQ3F,yBAAyBhzD,KAChE8B,EAAcX,EAAO,GAAGK,KAAK0H,QAC7BH,EAAOjH,EAAYP,OACnBk7B,EAAQi3B,EAAa,GACrB9+C,EAAO4+C,EAAA9+C,QAAQikD,EAAQjrB,QAAQ1L,QAAQ3lB,UAAUnI,SACjD0/C,EAAe,6BACC7qD,EAAI,oEACuB0zB,EAAM5T,MAAK,KAAK4T,EAAM7T,OAAM,6CACzChU,EAAKN,UAAS,6DACfM,EAAKN,UAAS,gEACVM,EAAKN,UAAS,6DACrBM,EAAKN,UAAS,4FAEsBnE,KAAK8rB,QAAO,qBAEhF,MAAO,CACLy3B,aAAYA,EACZD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAU,CAAC,IAAK,QAAS,IAAK,OAAQ,YACtCC,aAAYA,IAGhBsB,EAAAx0D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,IAAMy3D,EAAW,CAACD,EAAQpwC,uBAAuBpnB,EAAO,GAAImb,EAAYo3C,aAAa,KACrFvyD,EAAO+H,MAAM,GAAGuE,QAAQ,SAAAzN,GAAK,OAAA44D,EAAS3sD,KAAK0sD,EAAQpwC,uBAAuBvoB,MAC1E,IAAM64D,EAAWF,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MAClG,MAAO,CAAC4vD,kBAAmB2E,EAAUvG,kBAAmBwG,EAAU3E,YAAa,KAEnFgB,EAjCA,CAA6C7yB,EAAAvG,oBAAhCz9B,EAAA62D,ybCNb,IAAA5yB,EAAAzjC,EAAA,IAEAkR,EAAAlR,EAAA,GACAi6D,EAAAj6D,EAAA,GACA20D,EAAA30D,EAAA,GAIA+1D,EAAA,SAAAv5C,GACE,SAAAu5C,EACI93B,EAA0Di8B,EAA6BhzC,EACvF/hB,GAFJ,IAAA6U,EAGEwC,EAAApc,KAAAkR,KAAM2sB,EAAgB/W,EAAQ/hB,IAAWmM,YAFmB0I,EAAAkgD,aA+DhE,OAjEmCz9C,EAAAs5C,EAAAv5C,GAMjCu5C,EAAAl0D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpCyzD,EAAAl0D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAMuyD,EAAevyD,EAAOyG,IAAI,SAAA5H,GAAK,OAAA24D,EAAQ3F,yBAAyBhzD,KAEtE,IADqB+P,EAAA9L,UAAUC,SAAS/C,EAAO,GAAGK,KAAML,EAAO,GAAGK,MACjD,CACf,IAAMM,EAAciO,EAAAzN,cAAcC,UAAUpB,EAAO,GAAGK,KAAML,EAAO,GAAGK,MAAM,GAC5E,IAAKM,EACH,MAAM,IAAI8D,MAAM,gDAElB,IAAMozD,EAAal3D,EAAYP,OACzBQ,EAAkC,IAA1BZ,EAAO,GAAGK,KAAKD,OAAeJ,EAAO,GAAGK,KAAKD,OAAS,EAC9DS,EAAkC,IAA1Bb,EAAO,GAAGK,KAAKD,OAAeJ,EAAO,GAAGK,KAAKD,OAAS,EAC9D03D,EAAmC,IAA1B93D,EAAO,GAAGK,KAAKD,OAAe,qCAAuC,mBAC9E23D,EAAmC,IAA1B/3D,EAAO,GAAGK,KAAKD,OAAe,qCAAuC,mBAC9E43D,EAAe,WACnBhpD,KAAK4oD,SAASK,KAAI,qCACQJ,EAAU,8BACrBj3D,EAAK,4BACLC,EAAK,eAClBi3D,EAAM,aACNC,EAAM,oBACC/oD,KAAK4oD,SAAS15D,KAAI,uCAE7B,MAAO,CACLq0D,aAAYA,EACZD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAU,CAAC,IAAK,KAChBC,aAAYuF,GAGhB,IAAMvkD,EAAO4+C,EAAA9+C,QAAQikD,EAAQjrB,QAAQ1L,QAAQ3lB,UAAUnI,SACjD0/C,EAAe,SACnBzjD,KAAK4oD,SAASK,KAAI,wCAENxkD,EAAKN,UAAS,oCACdM,EAAKN,UAAS,wCACVnE,KAAK4oD,SAAS15D,KAAI,oBAChCuV,EAAKL,OAAM,0BAGf,MAAO,CACLs/C,SAAS,EACTH,aAAYA,EACZD,aAAckF,EAAQpG,6BAA6BpxD,EAAO,GAAGK,MAC7DmyD,SAAU,CAAC,IAAK,KAChBC,aAAYA,IAGhBgB,EAAAl0D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GAEtE,MAAO,CACL8yD,kBAFe9yD,EAAOyG,IAAI,SAAC5H,EAAGtB,GAAM,OAAAi6D,EAAQpwC,uBAAuBvoB,EAAGsc,EAAYo3C,aAAah1D,MAG/F2zD,kBAAmBsG,EAAQlG,4BACvBn2C,EAAYm3C,aAActjD,KAAKnM,WAAamM,KAAKnM,WAAa7C,EAAO,GAAGkD,MAC5E6vD,YAAa,KAGnBU,EAjEA,CAAmCtyB,EAAAzF,UAAtBx+B,EAAAu2D,gBAmEbv2D,EAAAw2D,QAAA,WAUE,MAAO,CAACuE,KARK,4HAQC/5D,KATD,OASOgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAAm3D,QAAA,WAUE,MAAO,CAAC4D,KARK,4HAQC/5D,KATD,OASOgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAAs4D,QAAA,WAUE,MAAO,CAACyC,KARK,4HAQC/5D,KATD,OASOgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAA85D,QAAA,WAUE,MAAO,CAACiB,KARK,4HAQC/5D,KATD,OASOgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAAq3D,UAAA,WAUE,MAAO,CAAC0D,KARK,iJAQC/5D,KATD,SASOgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAA83D,YAAA,WACE,IAAM92D,EAAO,WAYb,MAAO,CAAC+5D,KAXK,oNAWC/5D,KAAIA,EAAEgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAAk4D,SAAA,WAaE,MAAO,CAAC6C,KAXK,4OAWC/5D,KAZD,QAYOgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAAy2D,QAAA,WAeE,MAAO,CAACsE,KAbK,mTAaC/5D,KAdD,OAcOgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAAy4D,OAAA,WAeE,MAAO,CAACsC,KAbK,iTAaC/5D,KAdD,MAcOgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAAq6D,QAAA,WAeE,MAAO,CAACU,KAbK,mTAaC/5D,KAdD,OAcOgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAA24D,QAAA,WACE,OAoBF,SAA2BsC,GACzB,IAAMj6D,EAAUi6D,EAAK,IASrB,MAAO,CAACF,KARK,aACL/5D,EAAI,oCACDi6D,EAAK,wBAETj6D,EAAI,oCACAi6D,EAAK,qBAGFj6D,KAAIA,EAAEgF,KAAMy0D,EAAA38C,aAAak9C,YA9BhCE,CAAkB,QAE3Bl7D,EAAA44D,UAAA,WAeE,MAAO,CAACmC,KAbK,+SAaC/5D,KAdD,SAcOgF,KAAMy0D,EAAA38C,aAAak9C,4aC1OzC,IAAA7L,EAAA3uD,EAAA,IAEA20D,EAAA30D,EAAA,GAIAu2D,EAAA,SAAA/5C,GAAA,SAAA+5C,mDA+BA,OA/B+B95C,EAAA85C,EAAA/5C,GAC7B+5C,EAAA10D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpCi0D,EAAA10D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAMW,EAAcX,EAAO,GAAGK,KAAK0H,QAC7B0L,EAAO4+C,EAAA9+C,QAAQikD,EAAQjrB,QAAQ1L,QAAQ3lB,UAAUnI,SACjD0/C,EAAe,mCACOzjD,KAAKyd,IAAG,qCACRzd,KAAKpN,IAAG,8CAEpB6R,EAAKN,UAAS,8BACxBM,EAAKL,OAAM,gDAGjB,MAAO,CACLm/C,aAAc,CAACiF,EAAQ3F,yBAAyB7xD,EAAO,KACvDsyD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAU,CAAC,KACXC,aAAYA,EACZC,SAAS,IAGbuB,EAAA10D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,IAAMy3D,EAAW,CAACD,EAAQpwC,uBAAuBpnB,EAAO,GAAImb,EAAYo3C,aAAa,KACrF,MAAO,CACLO,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAa,KAGnBkB,EA/BA,CAA+B5H,EAAAliB,MAAlBjtC,EAAA+2D,2aCNb,IAKAC,EAAA,SAAAh6C,GAAA,SAAAg6C,mDA4IA,OA5IiC/5C,EAAA+5C,EAAAh6C,GAC/Bg6C,EAAA30D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpCk0D,EAAA30D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAMmzC,EAAanzC,EAAO,GAAGK,KAAK0H,QAClC,GAAIiH,KAAKzH,MAAQ4rC,EAAW/yC,QAAU4O,KAAKzH,MAAS,EAAI4rC,EAAW/yC,OACjE,MAAM,IAAIqE,MAAM,gEAEduK,KAAKzH,KAAO,IACdyH,KAAKzH,KAAO4rC,EAAW/yC,OAAS4O,KAAKzH,MAKvC,IADA,IAAM5G,EAAcwyC,EAAWprC,MAAM,GAC5BxK,EAAI,EAAGA,EAAIyC,EAAOI,OAAQ7C,IAEjC,IADA,IAAM81C,EAAarzC,EAAOzC,GAAG8C,KAAK0H,QACzBwrC,EAAY,EAAGA,EAAYJ,EAAW/yC,OAAQmzC,IAErD,GAAIA,IAAcvkC,KAAKzH,KACrB5G,EAAYqO,KAAKzH,OAAS8rC,EAAWE,QAGlC,GAAIJ,EAAWI,KAAeF,EAAWE,GAC5C,MAAM,IAAI9uC,MAAM,oCAKtB,IAAMmD,EAAOjH,EAAYP,OAErBi4D,EAAwC,GAG1CA,EADEr4D,EAAOI,OAAS,EACsB4O,KAAKspD,4CAA4Ct4D,EAAOI,QAExD4O,KAAKupD,4CAA4Cv4D,EAAOI,QAGlG,IAAMo4D,EAAoCxpD,KAAKwpD,kCAAkCx4D,EAAOI,OAAQwH,GAC1F6wD,EAA+BzpD,KAAKypD,6BAA6Bz4D,EAAOI,QACxEoyD,EAAWxyD,EAAOyG,IAAI,SAAC0C,EAAG5L,GAAM,UAAIA,IACpCk1D,EAAe,WACjB+F,EAAiC,WACjCC,EAA4B,WAC5BJ,EAAqC,qCACXzwD,EAAI,wEAC2BoH,KAAKzH,KAAI,6DAGtDyH,KAAKzH,KAAI,eACrByH,KAAKzH,KAAI,oKAKb,MAAO,CACLgrD,aAAcvyD,EAAOyG,IAAI,SAAA5H,GAAK,OAAA24D,EAAQ3F,yBAAyBhzD,KAC/DyzD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAQA,EACRkG,UAAW,CAAC,CAACx6D,KAAM,mBAAoBgF,KAAM,MAAOy1D,YAAa34D,EAAOI,SACxEqyD,aAAYA,IAGhByB,EAAA30D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GAItE,IAHA,IAAMy3D,EAAWz3D,EAAOyG,IAAI,SAAC5H,EAAGtB,GAAM,OAAAi6D,EAAQpwC,uBAAuBvoB,EAAGsc,EAAYo3C,aAAah1D,MAC3Fq7D,EAAmB,IAAI92D,MAAcqZ,EAAYo3C,aAAanyD,QAChEy4D,EAAc,EACTt7D,EAAI,EAAGA,EAAI4d,EAAYo3C,aAAanyD,SAAU7C,EACrDs7D,GAAe19C,EAAYo3C,aAAah1D,GAAGwG,MAAMiL,KAAKzH,MACtDqxD,EAAiBr7D,GAAKs7D,EAExB,IAAM9F,EAAc,CAAC6F,iBAAoBA,GACzC,MAAO,CACL9F,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAWA,IAGPmB,EAAA30D,UAAA+4D,4CAAR,SAAoDQ,GAClD,MAAO,qEACYA,EAAe,uHAS5B5E,EAAA30D,UAAAg5D,4CAAR,SAAoDO,GAClD,OAAO9pD,KAAKspD,4CAA4CQ,IAGlD5E,EAAA30D,UAAAi5D,kCAAR,SAA0CM,EAAyBzwD,GAEjE,IADA,IAAM0wD,EAAsB,CAAC,mEAAmE1wD,EAAU,QACjG9K,EAAI,EAAGA,EAAIu7D,IAAmBv7D,EAC3B,IAANA,EACFw7D,EAAUjuD,KACN,yBACuBvN,EAAC,gBAAgBA,EAAC,gBACpCA,IAAMu7D,EAAkB,EACjCC,EAAUjuD,KACN,qBACmBvN,EAAC,gBAExBw7D,EAAUjuD,KACN,8BAC4BvN,EAAC,gBAAgBA,EAAC,gBAMtD,OAHAw7D,EAAUjuD,KACN,OAEGiuD,EAAU7vC,KAAK,OAGhBgrC,EAAA30D,UAAAk5D,6BAAR,SAAqCO,GAEnC,IADA,IAAMD,EAAsB,CAAC,sCAAsCC,EAAS,mBACnEz7D,EAAI,EAAGA,EAAIy7D,IAAaz7D,EACrB,IAANA,EACFw7D,EAAUjuD,KACN,kBACgBvN,EAAC,kBAAkBA,EAAC,QAC/BA,IAAMy7D,EAAY,EAC3BD,EAAUjuD,KACN,uBACqBvN,EAAC,QAE1Bw7D,EAAUjuD,KACN,uBACqBvN,EAAC,kBAAkBA,EAAC,QAOjD,OAJAw7D,EAAUjuD,KACN,OAGGiuD,EAAU7vC,KAAK,OAE1BgrC,EA5IA,CALAx2D,EAAA,IAKiC+qC,QAApBvrC,EAAAg3D,00BCLb,IAAA97C,EAAA1a,EAAA,GACA2jC,EAAA3jC,EAAA,IAEAkR,EAAAlR,EAAA,GACA20D,EAAA30D,EAAA,GAKAy2D,EAAA,SAAAj6C,GAAA,SAAAi6C,IAAA,IAAAz8C,EAAA,OAAAwC,KAAAkT,MAAApe,KAAA7O,YAAA6O,YAgRY0I,EAAAuhD,SAAW,EACXvhD,EAAAlT,UAAY,KACxB,OAlR+B2V,EAAAg6C,EAAAj6C,GAC7Bi6C,EAAA50D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,IAAMovD,EAAiBroC,EAAiBwlB,QAAQ6iB,eAChD,IAAKpgD,KAAKkqD,UAAW,CACnBlqD,KAAKkqD,UAAY,GAEjB,IADA,IAAMC,EAAenqD,KAAKoqD,mBAAmBryC,EAAkB/mB,GACtDzC,EAAI,EAAGA,EAAI47D,EAAa/4D,SAAU7C,EAAG,CAC5C,IAAMqzD,EAAW7pC,EAAiBwlB,QAAQ6iB,eAAe7gB,MAAM4qB,EAAa57D,IAC5EyR,KAAKkqD,UAAUpuD,KAAK8lD,IAGxB,IAAMyI,EAAWrqD,KAAKsqD,eAAevyC,EAAkB/X,KAAKkqD,UAAUzyD,IAAI,SAAAnJ,GAAK,OAAAA,EAAE6d,cAAcnb,GAG/F,OAFAovD,EAAetoC,IAAI9X,KAAKkqD,UAAU,GAAIG,EAAS,IAC/CjK,EAAetoC,IAAI9X,KAAKkqD,UAAU,GAAIG,EAAS,IACxC,CAACA,EAAS,GAAGnI,kBAAkBppC,SAExCqsC,EAAA50D,UAAA65D,mBAAA,SAAmBryC,EAAyC/mB,GAC1D,IAAMu5D,EAASv5D,EAAO,GAAGK,KAAK0H,QACxByxD,EAASx5D,EAAO,GAAGK,KAAK0H,QAE9B,GAAgC,IAA5BiH,KAAKtB,YAAYtN,OAEnB,IADA,IAAM4zC,EAAQh0C,EAAO,GAAGK,KACf9C,EAAI,EAAGA,EAAIy2C,EAAM5zC,SAAU7C,EAClCyR,KAAKtB,YAAY5C,KAAKkpC,EAAMz2C,IAGhCqR,EAAAtB,aAAaM,yBACT5N,EAAO,GAAGK,KAAM2O,KAAKnH,QAASmH,KAAKnB,UAAWmB,KAAKtB,YAAasB,KAAKrB,KAAMqB,KAAKlB,SACpFsK,EAAAxC,OAAOtB,QACH,OACA,WAAWtF,KAAKlB,QAAO,eAAekB,KAAKnB,UAAS,WAAWmB,KAAK+sB,MAAK,iBACrE/sB,KAAKtB,YAAW,UAAUsB,KAAKrB,KAAI,aAAaqB,KAAKnH,SAC7D,IAAMlH,EAAcwzD,EAAUsF,gBAAgBF,EAAQC,EAAQxqD,KAAKnB,UAAWmB,KAAKrB,KAAMqB,KAAKnH,SACxF6xD,EAAoB1qD,KAAK2qD,wBAAwB5yC,EAAkB/mB,EAAQW,GAGjF,MAAO,CAAC+4D,EADJ1qD,KAAK4qD,4BAA4B7yC,EAAkB2yC,EAAkBpH,aAActyD,EAAQW,KAGjGwzD,EAAA50D,UAAA+5D,eAAA,SAAevyC,EAAyCoyC,EAA6Bn5D,GACnF,IAAMwI,EAAIxI,EAAO,GACXiB,EAAIjB,EAAOI,QAAU,EAAIJ,EAAO,QAAKkB,EACvC24D,EAAM9yC,EAAiBqpC,eAAe5nD,EAAEsE,QAC5C,IAAK+sD,EAAK,CACRzhD,EAAAxC,OAAOtB,QAAQ,OAAQ,uEACvB,IAAMwlD,EACF3F,EAAU4F,wBAAwBvxD,EAAEnI,KAAK0H,QAASiH,KAAK+sB,MAAO,EAAGvzB,EAAE2I,WAEvE0oD,EAAM9yC,EAAiBwqC,sCACnB4H,EAAa,GAAG5G,aAAa,GAAI/pD,EAAEtF,KAAM42D,EAAetxD,GAE9D,IAAMwxD,EAAiB,CACrBlH,kBAAmB,CAAC/rC,EAAiBK,uBAAuBpnB,EAAO,KACnEkxD,kBAAmBnqC,EAAiBuqC,4BAA4B6H,EAAa,GAAG7G,aAActyD,EAAO,GAAGkD,MACxG6vD,YAAa,IAET0E,EAAW,CAACuC,EAAe9I,kBAAmB2I,GAuCpD,OAtCI54D,GACFw2D,EAAS3sD,KAAKic,EAAiBK,uBAAuBnmB,IAqCjD,CAAC+4D,EAlCkB,CACxBlH,kBAAmB2E,EACnBvG,kBAHenqC,EAAiBuqC,4BAA4B6H,EAAa,GAAG7G,aAActyD,EAAO,GAAGkD,MAIpG6vD,YAAa,GACbkH,KAAM,SAAC/+C,EAAyB01C,GAM9B,IALA,IAAMsJ,EAAKh/C,EAAUg/C,GACfC,EAAYvJ,EAASz1C,YAAYX,OAAQ2/C,UACzCC,EAAoBxJ,EAASz1C,YAAYX,OAAQ4/C,kBACjDC,EAA0BzJ,EAAS0J,iBAAiBC,KAAK,SAAA38D,GAAK,MAAW,oBAAXA,EAAEM,OAA6BmiD,SAC/Fma,GAAQ,EACHC,EAAI,EAAGA,EAAIN,EAAWM,GAAKL,EAClChiD,EAAAxC,OAAOtB,QAAQ,WAAY,OAAOmmD,EAAC,gBAAgBN,EAAS,gBAAgBC,GAExEK,IAAML,IACRI,GAAQ,EACRN,EAAGQ,OAAOR,EAAGS,OACbz/C,EAAU0/C,aACVV,EAAGW,cAAcX,EAAGY,UACpB5/C,EAAU0/C,aACVV,EAAGa,UAAUb,EAAGplC,IAAKolC,EAAGplC,KACxB5Z,EAAU0/C,cAGZV,EAAGc,UAAUX,EAAyBI,GACtCv/C,EAAU0/C,aACV1/C,EAAU++C,OAGRO,IACFN,EAAGe,QAAQf,EAAGS,OACdz/C,EAAU0/C,kBAMlBzG,EAAA50D,UAAAo6D,wBAAA,SAAwB5yC,EAAyC/mB,EAAkBW,GAEjF,IAAM44D,EAASv5D,EAAO,GAAGK,KAAK0H,QACxByxD,EAASx5D,EAAO,GAAGK,KAAK0H,QAExBH,EAAOjH,EAAYP,OACnB86D,EAAa/G,EAAUgH,eAAe5B,EAAQC,EAAQ74D,EAAa,GACnE2xD,EAAevrC,EAAiBqqC,6BAClC8J,EAAY,EAAG,CAACA,EAAW,GAAIA,EAAW,GAAIA,EAAW,GAAoB,EAAhBA,EAAW,IAAS,CAACE,UAAW,IAC3F3I,EAAe,0BACF8G,EAAO,GAAE,2BACTA,EAAO,GAAE,2BACTA,EAAO,GAAE,2BACTvqD,KAAKtB,YAAY,GAAE,2BACnBsB,KAAKtB,YAAY,GAAE,kCACZsB,KAAKnB,UAAU,GAAE,kCACjBmB,KAAKnB,UAAU,GAAE,gCACnBmB,KAAKnH,QAAQ,GAAE,gCACfmH,KAAKnH,QAAQ,GAAE,6BAClBmH,KAAKrB,KAAK,GAAE,6BACZqB,KAAKrB,KAAK,GAAE,gJAKJ/F,EAAI,qlBAajB2xD,EAAOn5D,OAAM,qVAiB7B,MAAO,CACLmyD,aAAc,CAACxrC,EAAiBqqC,6BAA6BmI,IAC7DjH,aAAYA,EACZE,SAAU,CAAC,KACXC,aAAYA,IAGhB0B,EAAA50D,UAAAq6D,4BAAA,SACI7yC,EAAyCs0C,EAA6Br7D,EACtEW,GACF,IAMI26D,EANE/B,EAASv5D,EAAO,GAAGK,KAAK0H,QACxByxD,EAASx5D,EAAO,GAAGK,KAAK0H,QACxBwzD,EAAsB,CAAC/B,EAAO,GAAI73D,KAAKw3B,KAAMogC,EAAO,GAAKC,EAAO,GAAKA,EAAO,GAAM,IAClFgC,EAAUz0C,EAAiBqqC,6BAC7BmK,EAAqB,EAAG,CAACA,EAAoB,GAA6B,EAAzBA,EAAoB,IAAS,CAACH,UAAW,IAGxFxzD,EAAOjH,EAAYP,OAEnBmyD,EAAe,CAAC8I,EAAcG,GACd,IAAlBx7D,EAAOI,SACTk7D,EAAUv0C,EAAiBqqC,6BAA6BpxD,EAAO,GAAGK,KAAK0H,SACvEwqD,EAAaznD,KAAKwwD,IAEpB,IAAMhJ,EAAevrC,EAAiBqqC,6BAA6BzwD,GAC7D86D,EAAaz7D,EAAOI,OAAS,EAAK,MAAQ,QAC1C+5D,EAAYkB,EAAat3D,MAAM,GAE/Bq2D,EADerzC,EAAiBwlB,QAAQ1L,QAAQ3lB,UAAUwgD,kBACtB30C,EAAiBwlB,QAAQ1L,QAAQiuB,mBACvE9/C,KAAK2sD,sBAAsB50C,EAAiBwlB,QAAQ1L,QAAQiuB,mBAAoBqL,GAChFA,EACE3H,EAAW,CAAC,SAAU,KACN,IAAlBxyD,EAAOI,QACToyD,EAAS1nD,KAAK,KAEhB,IAAM2I,EAAO4+C,EAAA9+C,QAAQwT,EAAiBwlB,QAAQ1L,QAAQ3lB,UAAUnI,SAC1D0/C,EAAe,mCACO7qD,EAAI,qEAGjByzD,EAAat3D,MAAM3D,OAAM,yIAILi7D,EAAaxzD,QAAQ,GAAE,kBACtDwzD,EAAaxzD,QAAQ,GAAE,kBAAkBwzD,EAAaxzD,QAAQ,GAAE,8DAChC2zD,EAAQ3zD,QAAQ,GAAE,iEACf4zD,EAAS,sCACxBrB,EAAiB,sEACciB,EAAa3zC,MAAK,KAAK2zC,EAAa5zC,OAAM,gEAC1C+zC,EAAQ9zC,MAAK,KAAK8zC,EAAQ/zC,OAAM,0BACtEhU,EAAKN,UAAS,2BAA2BM,EAAKN,UAAS,2GAMxE,MAAO,CACLo/C,aAAgC,IAAlBvyD,EAAOI,OAAe,CAACi7D,EAAcG,EAASF,GAAY,CAACD,EAAcG,GACvFlJ,aAAYA,EACZG,aAAYA,EACZD,SAAQA,EACRkG,UAAW,CAAC,CAACx6D,KAAM,kBAAmBgF,KAAM,QAC5CsX,OAAQ,CAAC2/C,UAAaA,EAAWC,kBAAqBA,KAGnDjG,EAAA4F,wBAAP,SAA+Bh2D,EAAiBg4B,EAAezU,EAAkB/Y,GAC/E,GAAc,IAAVwtB,IAA6B,IAAbzU,GAAmBvjB,EAAM,GAAKA,EAAM,GAAMujB,GAAa,GACzE,OAAO/Y,EAST,IAPA,IAAM1G,EAAU+G,EAAA9L,UAAU6E,eAAe5D,GACnC63D,EAAa73D,EAAM,GAAKA,EAAM,GAAKA,EAAM,GACzC83D,EAAal6D,KAAKw3B,KAAKyiC,EAAat0C,GAAYA,EAChD+/B,EAAUtjD,EAAM,GAAK83D,EACrBvrD,EAAS,IAAI0B,aAAaq1C,GAE1ByU,EAAS,IAAI9pD,aAAa6pD,GACvBn5C,EAAI,EAAGA,EAAI3e,EAAM,KAAM2e,EAAG,CACjC,IAAMi2B,EAAYj2B,EAAI7a,EAAQ,GAC9Bi0D,EAAO34D,IAAIoL,EAAOxG,MAAM4wC,EAAWA,EAAYijB,GAAa,GAC5D,IAAMG,EAAYr5C,EAAIm5C,EACtBvrD,EAAOnN,IAAI24D,EAAQC,GAErB,OAAOzrD,GAEF6jD,EAAAgH,eAAP,SAAsBhoB,EAAsBzlC,EAAuB/M,EAAuB2mB,GACxF,YADwF,IAAAA,MAAA,GACjF,CACL3mB,EAAY,GAAIA,EAAY,GAAIA,EAAY,GAC5CgB,KAAKw3B,KAAKga,EAAW,GAAKzlC,EAAY,GAAKA,EAAY,GAAK4Z,KAGzD6sC,EAAAsF,gBAAP,SACItmB,EAAsBzlC,EAAuBG,EAAqBmuD,EAClEn0D,SACIiuC,EAAY3C,EAAW,GACvB8oB,EAAoB9oB,EAAWprC,MAAM,GACrCi0B,EAAcigC,EAAkB77D,OAChC87D,EAAcxuD,EAAY,GAE1ByuD,EADqBzuD,EAAY3F,MAAM,GACCtB,IAAI,SAAC0C,EAAG5L,GAAM,OAAA4L,GAAKA,EAAI,IAAM0E,EAAUtQ,GAAK,KAEpF6+D,EAD2BH,EAAkBx1D,IAAI,SAAC0C,EAAG5L,GAAM,OAAA4L,EAAI6yD,EAAWz+D,GAAKy+D,EAAWz+D,EAAIy+B,KAEvEv1B,IAAI,SAAC0C,EAAG5L,GAAM,OAAAoE,KAAKkC,OAAOsF,EAAIgzD,EAAmB5+D,GAAKsK,EAAQtK,IAAMsK,EAAQtK,MAEzG,OADoByE,EAAA,CAAC8zC,EAAWomB,IAAa/tC,OAAMf,MAAAprB,EAAAwoC,EAAI4xB,KAG/CjI,EAAA50D,UAAAo8D,sBAAV,SAAgCU,EAA4BlC,GAC1D,OAAIkC,GAAsB,GAAKlC,EAAYkC,GAAsBlC,EAAYkC,GAAuB,EAC3FlC,EAEFkC,GAEClI,EAAA50D,UAAA+8D,cAAV,SAAwBhK,GAGtB,KAAIA,EAAa7qC,OAFS,IAK1B,MAAO,CAJmB,GADA,KAU9B0sC,EAlRA,CAA+B9yB,EAAAzF,MAAlB1+B,EAAAi3D,2aCTb,IAKAG,EAAA,SAAAp6C,GAAA,SAAAo6C,mDAaA,OAbkCn6C,EAAAm6C,EAAAp6C,GAChCo6C,EAAA/0D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,GAAIgP,KAAKg6B,SACP,MAAO,CAAChpC,EAAO,IAEjB,MAAM,IAAIyE,MAAM,iDAElB6vD,EAAA/0D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,MAAM,IAAIyE,MAAM,iDAElB6vD,EAAA/0D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,MAAM,IAAIyE,MAAM,iDAEpB6vD,EAbA,CALA52D,EAAA,IAKkCorC,SAArB5rC,EAAAo3D,8aCLb,IAAArB,EAAAv1D,EAAA,KAEA20D,EAAA30D,EAAA,GAIA82D,EAAA,SAAAt6C,GAAA,SAAAs6C,mDA6BA,OA7B8Br6C,EAAAq6C,EAAAt6C,GAC5Bs6C,EAAAj1D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpCw0D,EAAAj1D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAMW,EAAcX,EAAO,GAAGK,KAAK0H,QAC7B0L,EAAO4+C,EAAA9+C,QAAQikD,EAAQjrB,QAAQ1L,QAAQ3lB,UAAUnI,SACjD0/C,EAAe,4CAELh/C,EAAKN,UAAS,8BACxBM,EAAKL,OAAM,0CAA0CpE,KAAK1D,MAAMixD,gBAAe,gDAGrF,MAAO,CACLhK,aAAc,CAACiF,EAAQ3F,yBAAyB7xD,EAAO,KACvDsyD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAU,CAAC,KACXC,aAAYA,EACZC,SAAS,IAGb8B,EAAAj1D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,IAAMy3D,EAAW,CAACD,EAAQpwC,uBAAuBpnB,EAAO,GAAImb,EAAYo3C,aAAa,KACrF,MAAO,CACLO,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAa,KAGnByB,EA7BA,CAA8BvB,EAAAuJ,KAAjBt/D,EAAAs3D,0FCDb,IAAAgI,EAAA,oBAAAA,KAwBA,OArBEA,EAAAj9D,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAK1D,MAAQuvB,EAAWE,SAAS,QAAS,IAG5CyhC,EAAAj9D,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpBw8D,EAAAj9D,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MAQlDs5D,EAxBA,GAAsBt/D,EAAAs/D,qaCLtB,IAAAj7B,EAAA7jC,EAAA,IAEAkR,EAAAlR,EAAA,GAGAipB,EAAAjpB,EAAA,IAEAg3D,EAAA,SAAAx6C,GAAA,SAAAw6C,mDAMA,OANkCv6C,EAAAu6C,EAAAx6C,GAChCw6C,EAAAn1D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,IAAM0K,EAAakE,EAAA9L,UAAUoH,aAAalK,EAAO,GAAGK,KAAM2O,KAAKzH,MAE/D,MAAO,CAACof,EAAAM,QAAQF,EAAkB/mB,EAAO,GAAI0K,KAEjDgqD,EANA,CAAkCnzB,EAAA0H,SAArB/rC,EAAAw3D,8aCRb,IAKAE,EAAA,SAAA16C,GAAA,SAAA06C,mDA6DA,OA7DiCz6C,EAAAy6C,EAAA16C,GAC/B06C,EAAAr1D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAGpC40D,EAAAr1D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAMmzC,EAAanzC,EAAO,GAAGK,KAAK0H,QAC5B00D,EAAiBz8D,EAAO,GAAGK,KAAK0H,QAChCpH,EAAc,IAAImB,MAAMqxC,EAAW/yC,OAASq8D,EAAer8D,OAAS,GAE1E,GAA2B,IAAvBO,EAAYP,OACd,MAAMqE,MAAM,iDAId,IADA,IAAMi4D,EAAyB,GACtBn/D,EAAI,EAAGA,EAAIoD,EAAYP,OAAQ7C,IAMlCA,EAAIyR,KAAKzH,MACX5G,EAAYpD,GAAK41C,EAAW51C,GAC5Bm/D,EAAa5xD,KAAK,YAAYvN,EAAC,iBAAiBA,EAAC,OAE7CA,EAAIyR,KAAKzH,KAAOk1D,EAAer8D,QACjCO,EAAYpD,GAAKk/D,EAAel/D,EAAIyR,KAAKzH,MACzCm1D,EAAa5xD,KAAK,iBAAgBvN,EAAIyR,KAAKzH,MAAI,iBAAiBhK,EAAC,QAEjEoD,EAAYpD,GAAK41C,EAAW51C,EAAIk/D,EAAer8D,OAAS,GACxDs8D,EAAa5xD,KAAK,aAAYvN,EAAIk/D,EAAer8D,OAAS,GAAC,iBAAiB7C,EAAC,OAKnF,IAGMk1D,EAAe,uCAHP9xD,EAAYP,OAIW,8BAHvB+yC,EAAW/yC,OAID,gCAHTq8D,EAAer8D,OAID,eACvBs8D,EAAaxzC,KAAK,cAAa,sBACtBla,KAAKzH,KAAI,oEAGxB,MAAO,CACLgrD,aAAcvyD,EAAOyG,IAAI,SAAA5H,GAAK,OAAA24D,EAAQ3F,yBAAyBhzD,KAC/DyzD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAU,CAAC,IAAK,KAChBC,aAAYA,IAGhBmC,EAAAr1D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,IAAMy3D,EAAWz3D,EAAOyG,IAAI,SAAC5H,EAAGtB,GAAM,OAAAi6D,EAAQpwC,uBAAuBvoB,EAAGsc,EAAYo3C,aAAah1D,MACjG,MAAO,CACLu1D,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAa,KAGnB6B,EA7DA,CALAl3D,EAAA,IAKiCwrC,QAApBhsC,EAAA03D,0tBCJb,IAAAnzB,EAAA/jC,EAAA,IAEAkR,EAAAlR,EAAA,GAIAm3D,EAAA,SAAA36C,GAAA,SAAA26C,mDAoEA,OApE+B16C,EAAA06C,EAAA36C,GAC7B26C,EAAAt1D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpC60D,EAAAt1D,UAAAuxD,kBAAA,SAAkB/pC,EAAyC/mB,GACzD,IAAM28D,EAAS38D,EAAO,GAAGK,KAAK0H,QACxB60D,EAAS58D,EAAO,GAAGK,KAAK0H,QACxB80D,EAAS78D,EAAO,GAAGK,KAAK0H,QACxB/F,EAAAC,EAAA2M,EAAAjK,SAAAC,qBAAA+3D,EAAA3tD,KAAA+tB,OAAA6/B,EAAA5tD,KAAAguB,OAAA6/B,GAAA,GACAC,EAAS,CADR96D,EAAA,GAAGA,EAAA,IAEV,IAAK86D,EACH,MAAM,IAAIr4D,MAAM,uCAElB,IAAI01D,EAAYwC,EAAOA,EAAOv8D,OAAS,GACnCsnD,EAAO,GACP14C,KAAK+tB,SACPo9B,EAAYwC,EAAO,IAEjB3tD,KAAK+tB,QAAU/tB,KAAKguB,OACtB0qB,EAAO,8BACE14C,KAAK+tB,SAAW/tB,KAAKguB,OAC9B0qB,EAAO,6BACG14C,KAAK+tB,QAAU/tB,KAAKguB,OAC9B0qB,EAAO,4BACG14C,KAAK+tB,QAAW/tB,KAAKguB,SAC/B0qB,EAAO,2BAET,IAAM9/C,EAAOk1D,EAAO18D,OAEdqyD,EAAe,qCACS7qD,EAAI,yBACpBA,EAAI,uBACJA,EAAI,uBAJJi1D,EAAOz8D,OAKF,0KAOK+5D,EAAS,8BACnBvyD,EAAO,GAAC,4BACRA,EAAO,GAAC,yBACV8/C,EAAI,wHAQhB,MAAO,CACL6K,aAFmBvyD,EAAOyG,IAAI,SAAA5H,GAAK,OAAAkoB,EAAiB8qC,yBAAyBhzD,KAG7EyzD,aAAcvrC,EAAiBqqC,6BAA6B0L,GAC5DtK,SAAU,CAAC,IAAK,IAAK,KACrBkG,UAAW,CAAC,CAACx6D,KAAM,QAASgF,KAAM,SAAU,CAAChF,KAAM,OAAQgF,KAAM,UACjEuvD,aAAYA,IAGhBoC,EAAAt1D,UAAA0xD,cAAA,SAAclqC,EAAyC5L,EAA0Bnb,GAC/E,IAAMy3D,EAAWz3D,EAAOyG,IAAI,SAAC5H,EAAGtB,GAAM,OAAAwpB,EAAiBK,uBAAuBvoB,EAAGsc,EAAYo3C,aAAah1D,MAC1G,MAAO,CACLu1D,kBAAmB2E,EACnBvG,kBACInqC,EAAiBuqC,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MAC9F6vD,YAAa,CAACznD,MAAS0D,KAAK1D,MAAO2xB,KAAQjuB,KAAKiuB,QAGtD43B,EApEA,CAA+BpzB,EAAA9D,MAAlBzgC,EAAA23D,2aCNb,IAKAK,EAAA,SAAAh7C,GAAA,SAAAg7C,mDAmDA,OAnDsC/6C,EAAA+6C,EAAAh7C,GACpCg7C,EAAA31D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpCk1D,EAAA31D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAMW,EAAcX,EAAO,GAAGK,KAAK0H,QAC7BH,EAAOjH,EAAYP,OAEnBqyD,EAAe,WADCzjD,KAAK+tD,oBAAoB/tD,KAAKo6B,KAAKhpC,QAExC,qCACawH,EAAI,iFAGlC,MAAO,CACL2qD,aAAc,CAACiF,EAAQ3F,yBAAyB7xD,EAAO,KACvDsyD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAU,CAAC,KACXkG,UAAW,CAAC,CAACx6D,KAAM,OAAQgF,KAAM,QAASy1D,YAAa3pD,KAAKo6B,KAAKhpC,QAAS,CAAClC,KAAM,QAASgF,KAAM,UAChGuvD,aAAYA,IAGhByC,EAAA31D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,IAAMy3D,EAAW,CAACD,EAAQpwC,uBAAuBpnB,EAAO,GAAImb,EAAYo3C,aAAa,KACrF,MAAO,CACLO,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAa,CAAC3pB,KAAQp6B,KAAKo6B,KAAM9N,MAAStsB,KAAKssB,SAG3C45B,EAAA31D,UAAAw9D,oBAAR,SAA4BxO,GAE1B,IADA,IAAMwK,EAAsB,CAAC,4BAA4BxK,EAAW,qBAC3DhxD,EAAI,EAAGA,EAAIgxD,IAAehxD,EACvB,IAANA,EACFw7D,EAAUjuD,KACN,oBACkBvN,EAAC,mBAAmBA,EAAC,QAClCA,IAAMgxD,EAAc,EAC7BwK,EAAUjuD,KACN,wBACsBvN,EAAC,QAE3Bw7D,EAAUjuD,KACN,yBACuBvN,EAAC,mBAAmBA,EAAC,QAMpD,OAHAw7D,EAAUjuD,KACN,OAEGiuD,EAAU7vC,KAAK,OAE1BgsC,EAnDA,CALAx3D,EAAA,IAKsCyrC,aAAzBjsC,EAAAg4D,kbCLb,IAAAhC,EAAAx1D,EAAA,KAEA20D,EAAA30D,EAAA,GAIAy3D,EAAA,SAAAj7C,GAAA,SAAAi7C,mDA6BA,OA7BoCh7C,EAAAg7C,EAAAj7C,GAClCi7C,EAAA51D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpCm1D,EAAA51D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAMW,EAAcX,EAAO,GAAGK,KAAK0H,QAC7B0L,EAAO4+C,EAAA9+C,QAAQikD,EAAQjrB,QAAQ1L,QAAQ3lB,UAAUnI,SACjD0/C,EAAe,4CAELh/C,EAAKN,UAAS,8BACxBM,EAAKL,OAAM,+BAA+BpE,KAAK1D,MAAK,2BAG1D,MAAO,CACLonD,SAAS,EACTH,aAAc,CAACiF,EAAQ3F,yBAAyB7xD,EAAO,KACvDsyD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAU,CAAC,KACXC,aAAYA,IAGhB0C,EAAA51D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,IAAMy3D,EAAW,CAACD,EAAQpwC,uBAAuBpnB,EAAO,GAAImb,EAAYo3C,aAAa,KACrF,MAAO,CACLO,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAa,KAGnBoC,EA7BA,CAAoCjC,EAAA8J,WAAvB9/D,EAAAi4D,gGCDb,IAAA6H,EAAA,oBAAAA,KAwBA,OArBEA,EAAAz9D,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAK1D,MAAQuvB,EAAWE,SAAS,QAAS,MAG5CiiC,EAAAz9D,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpBg9D,EAAAz9D,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MAQlD85D,EAxBA,GAAsB9/D,EAAA8/D,2aCLtB,IAAA/gC,EAAAv+B,EAAA,IAEAkR,EAAAlR,EAAA,GAIA43D,EAAA,SAAAp7C,GAAA,SAAAo7C,mDA6CA,OA7CiCn7C,EAAAm7C,EAAAp7C,GAC/Bo7C,EAAA/1D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpCs1D,EAAA/1D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAM28D,EAAS38D,EAAO,GAAGK,KACnBu8D,EAAS58D,EAAO,GAAGK,KACnBM,EAAciO,EAAAzN,cAAcC,UAAUu7D,EAAQC,GAAQ,GAC5D,IAAKj8D,EACH,MAAM,IAAI8D,MAAM,yCAElB,IAAMmD,EAAOjH,EAAYP,OACnBoB,EAAQm7D,EAAOv8D,OACfqB,EAAQm7D,EAAOx8D,OAEfqyD,EAAe,qCACS7qD,EAAI,yBACpBpG,EAAK,uBACLC,EAAK,qJAJDk7D,EAAOA,EAAOv8D,OAAS,GASR,8BACnBoB,EAAQ,GAAC,4BACTC,EAAQ,GAAC,+FAKvB,MAAO,CACL8wD,aAAcvyD,EAAOyG,IAAI,SAAA5H,GAAK,OAAA24D,EAAQ3F,yBAAyBhzD,KAC/DyzD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAU,CAAC,IAAK,KAChBC,aAAYA,IAGhB6C,EAAA/1D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,IAAMy3D,EAAWz3D,EAAOyG,IAAI,SAAC5H,EAAGtB,GAAM,OAAAi6D,EAAQpwC,uBAAuBvoB,EAAGsc,EAAYo3C,aAAah1D,MACjG,MAAO,CACLu1D,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAa,KAGnBuC,EA7CA,CAAiCr5B,EAAAG,QAApBl/B,EAAAo4D,6aCNb,IAAAnC,EAAAz1D,EAAA,KAEAkR,EAAAlR,EAAA,GACA20D,EAAA30D,EAAA,GAIAk4D,EAAA,SAAA17C,GAAA,SAAA07C,mDA+BA,OA/B8Bz7C,EAAAy7C,EAAA17C,GAC5B07C,EAAAr2D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpC41D,EAAAr2D,UAAAuxD,kBAAA,SAAkB/pC,EAAyC/mB,GACzD,IAAMW,EAAciO,EAAA9L,UAAUsG,SAASpJ,EAAO,GAAGK,KAAK0H,QAASiH,KAAKrB,MAC9D/F,EAAOjH,EAAYP,OACnB68D,EAAUl2C,EAAiB8qC,yBAAyB7xD,EAAO,IAG3DyyD,EAAe,WAFDyK,EAChB7K,EAAA9+C,QAAQwT,EAAiBwlB,QAAQ1L,QAAQ3lB,UAAUnI,SAAU,IAAKkqD,EAASjuD,KAAKlQ,KAAMkQ,KAAKrB,KAAMqB,KAAKpQ,OAE3F,6BACOgJ,EAAI,yDAG1B,MAAO,CACL2qD,aAAc,CAAC0K,GACf3K,aAAcvrC,EAAiBqqC,6BAA6BzwD,GAC5D6xD,SAAU,CAAC,KACXC,aAAYA,IAGhBmD,EAAAr2D,UAAA0xD,cAAA,SAAclqC,EAAyC5L,EAA0Bnb,GAC/E,IAAMy3D,EAAW,CAAC1wC,EAAiBK,uBAAuBpnB,EAAO,GAAImb,EAAYo3C,aAAa,KAC9F,MAAO,CACLO,kBAAmB2E,EACnBvG,kBACInqC,EAAiBuqC,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MAC9F6vD,YAAa,KAGnB6C,EA/BA,CAA8BzC,EAAAgK,KAgC9B,SAAgBD,EACZzpD,EAAYvV,EAAck/D,EAA4Bt+D,EAAc6O,EAAgB/O,GACtF,OAAQE,GACN,IAAK,WACH,OAYN,SACI2U,EAAYvV,EAAc6F,EAA8B8D,EAAgC6f,EACxFD,EAAgB9Z,EAAgB/O,GAGlC,IAFA,IAAMgJ,EAAO7D,EAAM3D,OACfi9D,EAAQ,GACH9/D,EAAIqK,EAAO,EAAGrK,GAAK,IAAKA,EAC/B8/D,GAAS,qBACK9/D,EAAC,OAAOoQ,EAAKpQ,GAAE,iEAEZwG,EAAMxG,GAAE,+CACHsK,EAAQtK,GAAE,gBAGlC,MAAO,sBACUW,EAAI,UAAU0J,EAAI,gDACIhJ,EAAK,kEAGlCy+D,EAAK,oDACgC31C,EAAK,KAAKD,EAAM,+CACvBhU,EAAKN,UAAS,IAAIjV,EAAI,4DAhCnDo/D,CACH7pD,EAAMvV,EAAMk/D,EAAYr5D,MAAOq5D,EAAYv1D,QAASu1D,EAAY11C,MAAO01C,EAAY31C,OAAQ9Z,EAAM/O,GACvG,IAAK,UACH,OAkCN,SACI6U,EAAYvV,EAAc6F,EAA8B8D,EAAgC6f,EACxFD,EAAgB9Z,GAIlB,IAHA,IAAM/F,EAAO7D,EAAM3D,OAEfi9D,EAAQ,GACH9/D,EAAIqK,EAAO,EAAGrK,GAAK,IAAKA,EAC/B8/D,GAAS,mBACG9/D,EAAC,OAAOoQ,EAAKpQ,GAAE,6EAGD,GAAKwG,EAAMxG,GAAK,GAAE,8EAE5BwG,EAAMxG,GAAE,0DAEJsK,EAAQtK,GAAE,cAGhC,MAAO,oBACQW,EAAI,UAAU0J,EAAI,8DAGzBy1D,EAAK,kDACgC31C,EAAK,KAAKD,EAAM,6CACvBhU,EAAKN,UAAS,IAAIjV,EAAI,sDA1DjDq/D,CACH9pD,EAAMvV,EAAMk/D,EAAYr5D,MAAOq5D,EAAYv1D,QAASu1D,EAAY11C,MAAO01C,EAAY31C,OAAQ9Z,GACjG,IAAK,OACH,OA4DN,SACI8F,EAAYvV,EAAc6F,EAA8B8D,EAAgC6f,EACxFD,EAAgB9Z,GAIlB,IAHA,IAAM/F,EAAO7D,EAAM3D,OAEfi9D,EAAQ,GACH9/D,EAAIqK,EAAO,EAAGrK,GAAK,IAAKA,EAC/B8/D,GAAS,iBACC9/D,EAAC,OAAOoQ,EAAKpQ,GAAE,+CAEZwG,EAAMxG,GAAE,UAASwG,EAAMxG,GAAK,GAAC,0BACxBsK,EAAQtK,GAAE,YAG9B,MAAO,kBACMW,EAAI,UAAU0J,EAAI,wDAGzBy1D,EAAK,gDACgC31C,EAAK,KAAKD,EAAM,2CACvBhU,EAAKN,UAAS,IAAIjV,EAAI,gDAhF/Cs/D,CACH/pD,EAAMvV,EAAMk/D,EAAYr5D,MAAOq5D,EAAYv1D,QAASu1D,EAAY11C,MAAO01C,EAAY31C,OAAQ9Z,GACjG,QACE,MAAM,IAAIlJ,MAAM,iBA7CTvH,EAAA04D,WAgCb14D,EAAAggE,gGClCA,IAAAC,EAAA,oBAAAA,KA4BA,OAzBEA,EAAA59D,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKlQ,KAAO+7B,EAAWgB,UAAU,OAAQ,YACzC7sB,KAAKpQ,MAAQi8B,EAAWE,SAAS,QAAS,GAC1C/rB,KAAKrB,KAAOktB,EAAWiB,QAAQ,SAGjCqhC,EAAA59D,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpBm9D,EAAA59D,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,YAAnBA,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MAUlDi6D,EA5BA,GAAsBjgE,EAAAigE,qaCLtB,IAAAt7B,EAAAnkC,EAAA,IAEAkR,EAAAlR,EAAA,GAIAo3D,EAAA,SAAA56C,GAAA,SAAA46C,mDAiBA,OAjB4C36C,EAAA26C,EAAA56C,GAC1C46C,EAAAv1D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpC80D,EAAAv1D,UAAAuxD,kBAAA,SAAkB/pC,EAAyC/mB,GACzD,OAAOy9D,EACH12C,EAAkB/mB,GAAQ,EAAMgP,KAAKtB,YAAasB,KAAKlB,QAASkB,KAAKnH,QAASmH,KAAKrB,KAAMqB,KAAK8uB,kBAEpGg3B,EAAAv1D,UAAA0xD,cAAA,SAAclqC,EAAyC5L,EAA0Bnb,GAC/E,IAAMy3D,EAAW,CAAC1wC,EAAiBK,uBAAuBpnB,EAAO,GAAImb,EAAYo3C,aAAa,KAC9F,MAAO,CACLO,kBAAmB2E,EACnBvG,kBACInqC,EAAiBuqC,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MAC9F6vD,YAAa,KAGnB+B,EAjBA,CAA4CjzB,EAAA7D,mBAA/B9gC,EAAA43D,yBAmBb,IAAAhB,EAAA,SAAA55C,GAAA,SAAA45C,mDAiBA,OAjBsC35C,EAAA25C,EAAA55C,GACpC45C,EAAAv0D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpC8zD,EAAAv0D,UAAAuxD,kBAAA,SAAkB/pC,EAAyC/mB,GACzD,OAAOy9D,EACH12C,EAAkB/mB,GAAQ,EAAOgP,KAAKtB,YAAasB,KAAKlB,QAASkB,KAAKnH,QAASmH,KAAKrB,KAAMqB,KAAK8uB,kBAErGg2B,EAAAv0D,UAAA0xD,cAAA,SAAclqC,EAAyC5L,EAA0Bnb,GAC/E,IAAMy3D,EAAW,CAAC1wC,EAAiBK,uBAAuBpnB,EAAO,GAAImb,EAAYo3C,aAAa,KAC9F,MAAO,CACLO,kBAAmB2E,EACnBvG,kBACInqC,EAAiBuqC,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MAC9F6vD,YAAa,KAGnBe,EAjBA,CAAsCjyB,EAAAhE,aAkBtC,SAAS4/B,EACL12C,EAAyC/mB,EAAkBwN,EAA2BE,EACtFI,EAAcjG,EAAwB8F,EAAqBmwB,QAD2B,IAAApwB,MAAA,SACtF,IAAAI,MAAA,SAAc,IAAAjG,MAAA,SAAwB,IAAA8F,MAAA,IACxC,IAAMwlC,EAAanzC,EAAO,GAAGK,KAAK0H,QAClC6G,EAAAtB,aAAaC,qBAAqBC,EAAkB2lC,EAAYzlC,EAAa7F,EAAS8F,GACtF,IAAMhN,EACFiO,EAAAtB,aAAaU,uBAAuBR,EAAkB2lC,EAAYtrC,EAAS6F,EAAaC,EAAMG,GAC5FssC,EAAaxrC,EAAA9L,UAAUE,KAAK0K,GAE9BrB,EAAM,GAERA,GADEyxB,EACK,kBAAkBsc,EAAU,KAE5B,kBAAkBA,EAAU,WAErC,IAAMgjB,EAAcr2C,EAAiB8qC,yBAAyB7xD,EAAO,IAE/DyyD,EAAe,WADDiL,EAAoBN,EAAa1vD,EAAaC,EAAM9F,EAR5D,kBAQ0EwE,EAAK,OAE1E,SAEjB,MAAO,CACLkmD,aAAc,CAAC6K,GACf9K,aAAcvrC,EAAiBqqC,6BAA6BzwD,GAC5D6xD,SAAU,CAAC,KACXC,aAAYA,GA1CHv1D,EAAA42D,mBA8Cb,IAAAiB,EAAA,SAAA76C,GAAA,SAAA66C,mDAiBA,OAjBwC56C,EAAA46C,EAAA76C,GACtC66C,EAAAx1D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpC+0D,EAAAx1D,UAAAuxD,kBAAA,SAAkB/pC,EAAyC/mB,GACzD,OAAO29D,EACH52C,EAAkB/mB,GAAQ,EAAMgP,KAAKtB,YAAasB,KAAKlB,QAASkB,KAAKnH,QAASmH,KAAKrB,OAEzFonD,EAAAx1D,UAAA0xD,cAAA,SAAclqC,EAAyC5L,EAA0Bnb,GAC/E,IAAMy3D,EAAW,CAAC1wC,EAAiBK,uBAAuBpnB,EAAO,KACjE,MAAO,CACL8yD,kBAAmB2E,EACnBvG,kBACInqC,EAAiBuqC,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MAC9F6vD,YAAa,KAGnBgC,EAjBA,CAAwClzB,EAAA1D,eAA3BjhC,EAAA63D,qBAmBb,IAAAQ,EAAA,SAAAr7C,GAAA,SAAAq7C,mDAiBA,OAjBkCp7C,EAAAo7C,EAAAr7C,GAChCq7C,EAAAh2D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpCu1D,EAAAh2D,UAAAuxD,kBAAA,SAAkB/pC,EAAyC/mB,GACzD,OAAO29D,EACH52C,EAAkB/mB,GAAQ,EAAOgP,KAAKtB,YAAasB,KAAKlB,QAASkB,KAAKnH,QAASmH,KAAKrB,OAE1F4nD,EAAAh2D,UAAA0xD,cAAA,SAAclqC,EAAyC5L,EAA0Bnb,GAC/E,IAAMy3D,EAAW,CAAC1wC,EAAiBK,uBAAuBpnB,EAAO,KACjE,MAAO,CACL8yD,kBAAmB2E,EACnBvG,kBACInqC,EAAiBuqC,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MAC9F6vD,YAAa,KAGnBwC,EAjBA,CAAkC1zB,EAAA5D,SAkBlC,SAAS0/B,EACL52C,EAAyC/mB,EAAkBwN,EAA2BE,EACtFI,EAAcjG,EAAwB8F,QADgD,IAAAD,MAAA,SACtF,IAAAI,MAAA,SAAc,IAAAjG,MAAA,SAAwB,IAAA8F,MAAA,IACxC,IAAMwlC,EAAanzC,EAAO,GAAGK,KAAK0H,QAClC6G,EAAAtB,aAAaC,qBAAqBC,EAAkB2lC,EAAYzlC,EAAa7F,EAAS8F,GACtF,IAAMhN,EACFiO,EAAAtB,aAAaU,uBAAuBR,EAAkB2lC,EAAYtrC,EAAS6F,EAAaC,EAAMG,GAK5FsvD,EAAcr2C,EAAiBqqC,6BAA6Bje,GAE5Dsf,EAAe,SADDiL,EAAoBN,EAAa1vD,EAAaC,EAAM9F,EAL5D,qDAGA,GAE+E,QAE5E,OAEf,MAAO,CACL0qD,aAAc,CAAC6K,GACf9K,aAAcvrC,EAAiBqqC,6BAA6BzwD,GAC5D6xD,SAAU,CAAC,KACXC,aAAYA,GAIhB,SAAgBiL,EACZrzD,EAAkBqD,EAAuBC,EAAgB9F,EAAmBuE,EAAaC,EACzF4tC,GACF,IAAMxsC,EAAYpD,EAAEtG,MACd6D,EAAOyC,EAAEtG,MAAM3D,OACrB,GAAIsN,EAAYtN,QAAU,EAAG,CAC3B,IAAMw3C,EAAKlqC,EAAYA,EAAYtN,OAAS,GACtCw9D,EAAK/1D,EAAQA,EAAQzH,OAAS,GAC9By9D,EAAUlwD,EAAKA,EAAKvN,OAAS,EAAI,GACjC09D,EAAQnwD,EAAKA,EAAKvN,OAAS,GAC3B29D,EAAOtwD,EAAU7F,EAAO,GAC1Bo2D,EAAQ,GACRC,EAAQ,GACRC,EAAW,GAmBf,GAjBEF,EADEH,EAAUC,IAAU,EACd,yCACwBlmB,EAAE,iCAClBhwC,EAAI,mBAAmBA,EAAI,WAAWg2D,EAAE,MAAMC,EAAO,kCACjDj2D,EAAI,kBAAkBA,EAAI,YAAYm2D,EAAI,0GAIhD3xD,EAAG,sBAGT,yCACwBwrC,EAAE,iCAClBhwC,EAAI,mBAAmBA,EAAI,WAAWg2D,EAAE,MAAMC,EAAO,4BACvDzxD,EAAG,sBAIQ,IAAvBsB,EAAYtN,OAAc,CAC5B,IAAMu3C,EAAKjqC,EAAYA,EAAYtN,OAAS,GACtC+9D,EAAKt2D,EAAQA,EAAQzH,OAAS,GAC9Bg+D,EAAUzwD,EAAKA,EAAKvN,OAAS,EAAI,GACjCi+D,EAAQ1wD,EAAKA,EAAKvN,OAAS,GAC3Bk+D,EAAO7wD,EAAU7F,EAAO,GAE5Bq2D,EADEG,EAAUC,IAAU,EACd,uCACoB1mB,EAAE,+BAClB/vC,EAAI,mBAAmBA,EAAI,WAAWu2D,EAAE,MAAMC,EAAO,gCACjDx2D,EAAI,kBAAkBA,EAAI,YAAY02D,EAAI,gCACxC1mB,EAAE,kEAKZ,yCACsBD,EAAE,iCAClB/vC,EAAI,mBAAmBA,EAAI,WAAWu2D,EAAE,MAAMC,EAAO,0BAGrEF,EAAW,kCAmBb,MAdoB,2CACgBt2D,EAAI,6BACtBA,EAAI,yEAGIqyC,EAAQ,gDAEtBgkB,EAAK,mBACLD,EAAK,mBACLE,EAAQ,mBACR7xD,EAAG,2DAMf,IAAM+tC,EAAaxrC,EAAA9L,UAAUE,KAAK0K,GAC5B2sC,EAAgBzrC,EAAA9L,UAAU6E,eAAe+F,GACzC4sC,EAAcD,EAAcj6C,OAC5Bm+D,EAAW5wD,EAAKvN,OAChBo+D,EAA0Br2D,EAAgBmyC,GAC1CmkB,EAAgBC,EAAUjxD,EAAW,aACrCkxD,EAAWD,EAAU/wD,EAAM,QAC3BixD,EAAoBF,EAAUrkB,EAAe,iBAkDnD,MA9BoB,iBACVmkB,EAAuB,2CACG52D,EAAI,+BACpBA,EAAI,wEAEC0yC,EAAW,gCACbikB,EAAQ,qCACH32D,EAAI,yCACA0yC,EAAW,mCACjBA,EAAW,uBACvBqkB,EAAQ,qBACRF,EAAa,qBA9BPC,EAAU72D,EAAS,WA+Bd,qBACX+2D,EAAiB,qCAEH3kB,EAAQ,6GAGFG,EAAU,kJAGbxyC,EAAI,MAAM0yC,EAAW,SAAS1yC,EAAI,mEACbA,EAAI,MAAM0yC,EAAW,2CACtC1yC,EAAI,MAAM0yC,EAAW,4CAzCxC3sC,EAAKvD,OAAO,SAACizB,EAAKwhC,GAAQ,OAAAxhC,EAAMwhC,IAGpC,oOAQEzyD,EAAG,oBAGL,4CAEIA,GA0BW,wCAEbC,EAAG,mDAQrB,SAAgBqyD,EAAUxtD,EAA8B4tD,GAEtD,IADA,IAAIzB,EAAQ,GACH9/D,EAAI,EAAGA,EAAI2T,EAAM9Q,OAAQ7C,IAChC8/D,GAAS,WACLyB,EAAS,IAAIvhE,EAAC,OAAO2T,EAAM3T,GAAE,UAGnC,OAAO8/D,EAGT,SAAgBl1D,EAAgBP,GAC9B,MAAO,8CACkCA,EAAI,sBAAsBA,EAAI,2BAC7DA,EAAI,iEAGYA,EAAI,+HAIhBA,EAAI,yBArMP1K,EAAAq4D,eA0Cbr4D,EAAAwgE,sBAuIAxgE,EAAAwhE,YAUAxhE,EAAAiL,ibCtRA,IAKA42D,EAAA,SAAA7kD,GAAA,SAAA6kD,mDAgEA,OAhE0C5kD,EAAA4kD,EAAA7kD,GAGxC6kD,EAAAx/D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpC++D,EAAAx/D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAShD,IARA,IAAMW,EAAwB,GACxBq+D,EAAQh/D,EAAO,GAAGK,KAAKD,QAAU,EAEjC6+D,EAAU,GAEVC,EAAMlwD,KAAKmwD,OAAOn/D,GACpBozD,EAAY8L,EAAI,GAEX12D,EAAI,EAAGA,EAAIxI,EAAO,GAAGK,KAAKD,OAAQoI,IAErCwG,KAAKvE,KAAKI,QAAQrC,IAAM,GAA0B,IAArBwG,KAAKvE,KAAKrK,QACrC4O,KAAK5B,UACPzM,EAAYmK,KAAK,GAInBsoD,EAAY,sBACD5qD,EAAC,UAAUA,EAAC,MAAMxI,EAAO,GAAGK,KAAKmI,GAAE,MAAMA,EAAC,6BACxCA,EAAC,QAAQA,EAAC,gBACnB4qD,EAAS,0BAIb6L,EAAQn0D,KAAK,YAAYtC,EAAC,iBAAiB7H,EAAYP,OAAM,MAE7DO,EAAYmK,KAAK9K,EAAO,GAAGK,KAAKmI,KAIpC,IAEMiqD,EAAe,wCAFP9xD,EAAYP,QAAU,GAGC,oFAElB4+D,EAAK,6CAClBC,EAAQ/1C,KAAK,MAAK,aAClBg2C,EAAI,GAAE,kDACN9L,EAAS,aACT8L,EAAI,GAAE,8EAIZ,MAAO,CACL3M,aAAcvyD,EAAOyG,IAAI,SAAA5H,GAAK,OAAA24D,EAAQ3F,yBAAyBhzD,KAC/DyzD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAU,CAAC,KACXC,aAAYA,IAGhBsM,EAAAx/D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,IAAMy3D,EAAWz3D,EAAOyG,IAAI,SAAC5H,EAAGtB,GAAM,OAAAi6D,EAAQpwC,uBAAuBvoB,EAAGsc,EAAYo3C,aAAah1D,MACjG,MAAO,CACLu1D,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAa,KAGnBgM,EAhEA,CALArhE,EAAA,IAK0C6rC,YAkE1C6sB,EAAA,SAAAl8C,GAAA,SAAAk8C,mDAIA,OAJoCj8C,EAAAi8C,EAAAl8C,GAClCk8C,EAAA72D,UAAA4/D,OAAA,SAAOn/D,GACL,MAAO,CAAC,eAAgB,yBAA0B,KAEtDo2D,EAJA,CAAoC2I,GAAvB7hE,EAAAk5D,iBAMb,IAAAH,EAAA,SAAA/7C,GAAA,SAAA+7C,mDAWA,OAXqC97C,EAAA87C,EAAA/7C,GACnC+7C,EAAA12D,UAAA4/D,OAAA,SAAOn/D,GAEL,IADA,IAAIgD,EAAO,EACFwF,EAAI,EAAGA,EAAIxI,EAAO,GAAGK,KAAKD,OAAQoI,KACrCwG,KAAKvE,KAAKI,QAAQrC,IAAM,GAA0B,IAArBwG,KAAKvE,KAAKrK,UACzC4C,GAAQhD,EAAO,GAAGK,KAAKmI,IAI3B,MAAO,CAAC,eAAgB,yBAA0B,YAAYxF,EAAI,OAEtEizD,EAXA,CAAqC8I,GAAxB7hE,EAAA+4D,kBAab,IAAAD,EAAA,SAAA97C,GAAA,SAAA87C,mDAWA,OAXoC77C,EAAA67C,EAAA97C,GAClC87C,EAAAz2D,UAAA4/D,OAAA,SAAOn/D,GAEL,IADA,IAAMo/D,EAAU,GACP52D,EAAI,EAAGA,EAAIxI,EAAO,GAAGK,KAAKD,OAAQoI,KACrCwG,KAAKvE,KAAKI,QAAQrC,IAAM,GAA0B,IAArBwG,KAAKvE,KAAKrK,SACzCg/D,EAAQt0D,KAAK,YAAYtC,EAAC,UAI9B,MAAO,CAAI42D,EAAQl2C,KAAK,MAAK,0BAA2B,oCAAqC,KAEjG8sC,EAXA,CAAoC+I,GAAvB7hE,EAAA84D,iBAab,IAAAE,EAAA,SAAAh8C,GAAA,SAAAg8C,mDAWA,OAXoC/7C,EAAA+7C,EAAAh8C,GAClCg8C,EAAA32D,UAAA4/D,OAAA,SAAOn/D,GAEL,IADA,IAAMo/D,EAAU,GACP52D,EAAI,EAAGA,EAAIxI,EAAO,GAAGK,KAAKD,OAAQoI,KACrCwG,KAAKvE,KAAKI,QAAQrC,IAAM,GAA0B,IAArBwG,KAAKvE,KAAKrK,SACzCg/D,EAAQt0D,KAAK,YAAYtC,EAAC,UAI9B,MAAO,CAAI42D,EAAQl2C,KAAK,MAAK,0BAA2B,oCAAqC,KAEjGgtC,EAXA,CAAoC6I,GAAvB7hE,EAAAg5D,iBAab,IAAAC,EAAA,SAAAj8C,GAAA,SAAAi8C,mDAIA,OAJqCh8C,EAAAg8C,EAAAj8C,GACnCi8C,EAAA52D,UAAA4/D,OAAA,SAAOn/D,GACL,MAAO,CAAC,eAAgB,yBAA0B,KAEtDm2D,EAJA,CAAqC4I,GAAxB7hE,EAAAi5D,kBAMb,IAAAJ,EAAA,SAAA77C,GAAA,SAAA67C,mDAIA,OAJuC57C,EAAA47C,EAAA77C,GACrC67C,EAAAx2D,UAAA4/D,OAAA,SAAOn/D,GACL,MAAO,CAAC,eAAgB,yBAA0B,wBAEtD+1D,EAJA,CAAuCgJ,GAA1B7hE,EAAA64D,oBAMb,IAAAM,EAAA,SAAAn8C,GAAA,SAAAm8C,mDAIA,OAJ0Cl8C,EAAAk8C,EAAAn8C,GACxCm8C,EAAA92D,UAAA4/D,OAAA,SAAOn/D,GACL,MAAO,CAAC,wBAAyB,oCAAqC,KAE1Eq2D,EAJA,CAA0C0I,GAA7B7hE,EAAAm5D,sbChIb,IAAAt0B,EAAArkC,EAAA,IAEAkR,EAAAlR,EAAA,GAIAg5D,EAAA,SAAAx8C,GAAA,SAAAw8C,mDAWA,OAXgCv8C,EAAAu8C,EAAAx8C,GAC9Bw8C,EAAAn3D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAGpC02D,EAAAn3D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,OAAO8wD,EAAkB0G,EAASx3D,EAAO,GAAIgP,KAAKy6B,OAAQz6B,KAAK06B,KAAM16B,KAAKvE,OAE5EisD,EAAAn3D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,OAAOixD,EAAcuG,EAASr8C,EAAanb,IAE/C02D,EAXA,CAAgC30B,EAAAyH,OAAnBtsC,EAAAw5D,aAab,IAAAD,EAAA,SAAAv8C,GAAA,SAAAu8C,mDAwBA,OAxBmCt8C,EAAAs8C,EAAAv8C,GACjCu8C,EAAAl3D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAGpCy2D,EAAAl3D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAKw3D,EAAQjrB,QAAQ2jB,cAAclwD,EAAO,GAAG8M,UAAY0qD,EAAQjrB,QAAQ2jB,cAAclwD,EAAO,GAAG8M,SAC5F9M,EAAOI,QAAU,IAAMo3D,EAAQjrB,QAAQ2jB,cAAclwD,EAAO,GAAG8M,SAC/D9M,EAAOI,QAAU,IAAMo3D,EAAQjrB,QAAQ2jB,cAAclwD,EAAO,GAAG8M,QAClE,MAAM,IAAIrI,MAAM,4CAElB,GAAIzE,EAAOI,QAAU,GAAKJ,EAAO,GAAGgnB,YAAYrc,KAAK,SAACpN,GAAc,OAAM,IAANA,IAClE,MAAM,IAAIkH,MAAM,oDAElB,IAAMglC,EAAS3nC,MAAMuO,KAAKrQ,EAAO,GAAGgnB,aAC9B0iB,EAAO5nC,MAAMuO,KAAKrQ,EAAO,GAAGgnB,aAC5Bvc,EAAOzK,EAAOI,QAAU,EAAI0B,MAAMuO,KAAKrQ,EAAO,GAAGgnB,aAAe,GAEtE,OAAO8pC,EAAkB0G,EAASx3D,EAAO,GAAIypC,EAAQC,EAAMj/B,IAG7DgsD,EAAAl3D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,OAAOixD,EAAcuG,EAASr8C,EAAanb,IAE/Cy2D,EAxBA,CAAmC10B,EAAA4H,UA0BnC,SAASmnB,EACL0G,EAAgCntD,EAAWo/B,EAA+BC,EAC1Ej/B,GACkB,IAAhBA,EAAKrK,SACPqK,EAAOJ,EAAEhK,KAAK0H,MAAM,GAAGtB,IAAI,SAAC2jB,EAAK7d,GAAQ,OAAAA,KAE3C9B,EAAOA,EAAKhE,IAAI,SAAAc,GAAQ,OAAAqH,EAAA9L,UAAUsF,UAAUb,EAAM8C,EAAEhK,KAAKD,UACzDqpC,EAASA,EAAOhjC,IAAI,SAACgB,EAAO8E,GAC1B,OAAI9E,EAAQ4C,EAAEhK,KAAKoK,EAAK8B,IAAQ,EACvBlC,EAAEhK,KAAKoK,EAAK8B,IAEdqC,EAAA9L,UAAUsF,UAAUX,EAAO4C,EAAEhK,KAAKoK,EAAK8B,OAEhDm9B,EAAOA,EAAKjjC,IAAI,SAACiB,EAAK6E,GACpB,OAAI7E,EAAM2C,EAAEhK,KAAKoK,EAAK8B,IAAQ,EACrBlC,EAAEhK,KAAKoK,EAAK8B,IAEdqC,EAAA9L,UAAUsF,UAAUV,EAAK2C,EAAEhK,KAAKoK,EAAK8B,OAM9C,IAHA,IAAM5L,EAAc0J,EAAEhK,KAAK0H,QAErBs3D,EAAqB,GAClB9hE,EAAI,EAAGA,EAAIkN,EAAKrK,OAAQ7C,IAC/BoD,EAAY8J,EAAKlN,IAAMmsC,EAAKnsC,GAAKksC,EAAOlsC,GACpCksC,EAAOlsC,GAAK,GACd8hE,EAASv0D,KAAK,aAAaL,EAAKlN,GAAE,QAAQksC,EAAOlsC,GAAE,KAIvD,IACMk1D,EAAe,uCADR9xD,EAAYP,OAEa,iBAC9Bi/D,EAASn2C,KAAK,YAAW,2CAGjC,MAAO,CACLqpC,aAAc,CAACiF,EAAQ3F,yBAAyBxnD,IAChDioD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAU,CAAC,KACXC,aAAYA,GAIhB,SAASxB,EAAcuG,EAAgCr8C,EAA0Bnb,GAC/E,IAAMy3D,EAAW,CAACD,EAAQpwC,uBAAuBpnB,EAAO,GAAImb,EAAYo3C,aAAa,KACrF,MAAO,CACLO,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAa,IA3EJ71D,EAAAu5D,40BClBb,IAAAz0B,EAAAtkC,EAAA,IAEAkR,EAAAlR,EAAA,GACA20D,EAAA30D,EAAA,GAIAi5D,EAAA,SAAAz8C,GACE,SAAAy8C,WACEz8C,EAAApc,KAAAkR,OAAOA,KAyMX,OA3MkCmL,EAAAw8C,EAAAz8C,GAIhCy8C,EAAAp3D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAA7C,IAAA0X,EAAA1I,KACOA,KAAKkqD,YACRlqD,KAAKkqD,UAAY,GACIlqD,KAAKoqD,mBAAmBryC,EAAkB/mB,GAClDsM,QAAQ,SAACgzD,EAAI/hE,GACxB,IAAMqzD,EAAW7pC,EAAiBwlB,QAAQ6iB,eAAe7gB,MAAM+wB,GAC/D5nD,EAAKwhD,UAAUpuD,KAAK8lD,MAIxB,IAAMyI,EAAWrqD,KAAKsqD,eAAevyC,EAAkB/X,KAAKkqD,UAAUzyD,IAAI,SAAAnJ,GAAK,OAAAA,EAAE6d,cAAcnb,GAG/F,OAFAq5D,EAAS/sD,QAAQ,SAACnD,EAAG5L,GAAM,OAAAwpB,EAAiBwlB,QAAQ6iB,eAAetoC,IAAIpP,EAAKwhD,UAAU37D,GAAI4L,KAEnF,CAACkwD,EAASA,EAASj5D,OAAS,GAAG8wD,kBAAkBppC,SAE1D6uC,EAAAp3D,UAAAggE,yBAAA,SACIx4C,EAAyCha,EAAe3H,EAAWs2C,EACnE8jB,EAAwCC,GAC1C,IAAMtsB,EAAapmC,EAAM1M,KAAK0H,QACxBq1D,EAAcr2C,EAAiBqqC,6BAA6Bje,GAC5DxyC,EAAcwyC,EACdvrC,EAAOjH,EAAYP,OACnBs/D,EAAetC,EAAY11C,MAC3Bi4C,EAAgBvC,EAAY31C,OAElC,GAAIriB,EAAI,GAAKs2C,EAAI,EACf,MAAM,IAAIj3C,MAAM,8EAGlB,GAA6C,IAAzC+6D,EAAwBz7D,MAAM3D,QAA4D,IAA5Cq/D,EAA2B17D,MAAM3D,OACjF,MAAM,IAAIqE,MAAM,0DAGlB,GAAI+6D,EAAwBz7D,MAAM,KAAOqB,GAAKq6D,EAA2B17D,MAAM,KAAOqB,EACpF,MAAM,IAAIX,MAAM,0EAGlB,IAAMguD,EAAe,2BACD7qD,EAAI,kKAGmB83D,EAAY,KAAKC,EAAa,kIAIrCjkB,EAAC,sTAYrC,MAAO,CACL6W,aAAc,CAAC6K,EAAaoC,EAAyBC,GACrDnN,aAAcvrC,EAAiBqqC,6BAA6BzwD,GAC5D6xD,SAAU,CAAC,IAAK,MAAO,QACvBC,aAAYA,IAOhBkE,EAAAp3D,UAAAqgE,6BAAA,SACI74C,EAAyC1c,EAAWjF,EAAWs2C,EAAW8jB,EAC1E7+D,GACF,IAAMk/D,EAAU94C,EAAiBqqC,6BAA6B/mD,EAAEhK,KAAK0H,SAC/DH,EAAOjH,EAAYP,OACnBs/D,EAAeG,EAAQn4C,MACvBi4C,EAAgBE,EAAQp4C,OAE9B,GAAIriB,EAAI,GAAKs2C,EAAI,EACf,MAAM,IAAIj3C,MAAM,8EAGlB,GAA2B,IAAvB9D,EAAYP,OACd,MAAM,IAAIqE,MAAM,4CAGlB,GAAI9D,EAAY,KAAOyE,EACrB,MAAM,IAAIX,MAAM,4DAGlB,GAA6C,IAAzC+6D,EAAwBz7D,MAAM3D,OAChC,MAAM,IAAIqE,MAAM,0DAGlB,GAAI+6D,EAAwBz7D,MAAM,KAAOqB,EACvC,MAAM,IAAIX,MAAM,0EAGlB,IACMguD,EAAe,2BACD7qD,EAAI,qEAEwB8zC,EAAC,+FAI9BA,EAAC,+DARP2W,EAAA9+C,QAAQwT,EAAiBwlB,QAAQ1L,QAAQ3lB,UAAUnI,SAUlBI,UAAS,oDACnDusD,EAAY,KAAKC,EAAa,2DAKlC,MAAO,CACLpN,aAAc,CAACsN,EAASL,GACxBlN,aAAcvrC,EAAiBqqC,6BAA6BzwD,GAC5D6xD,SAAU,CAAC,IAAK,OAChBC,aAAYA,IAMhBkE,EAAAp3D,UAAAugE,4BAAA,SACI/4C,EAAyC1c,EAAWjF,EAAWs2C,EAAW/6C,GAC5E,IAAMk/D,EAAU94C,EAAiBqqC,6BAA6B/mD,EAAEhK,KAAK0H,SAC/DH,EAAOjH,EAAYP,OACnBs/D,EAAeG,EAAQn4C,MACvBi4C,EAAgBE,EAAQp4C,OAE9B,GAAIriB,EAAI,GAAKs2C,EAAI,EACf,MAAM,IAAIj3C,MAAM,8EAGlB,GAA2B,IAAvB9D,EAAYP,OACd,MAAM,IAAIqE,MAAM,4CAGlB,GAAI9D,EAAY,KAAOyE,EACrB,MAAM,IAAIX,MAAM,4DAGlB,IAAMgP,EAAO4+C,EAAA9+C,QAAQwT,EAAiBwlB,QAAQ1L,QAAQ3lB,UAAUnI,SAC1D0/C,EAAe,+BACG7qD,EAAI,yEAEwB8zC,EAAC,8CAEjBjoC,EAAKN,UAAS,gDAAgDusD,EAAY,KAC1GC,EAAa,mCACMjkB,EAAC,oEAEkBjoC,EAAKN,UAAS,oDACpDusD,EAAY,KAAKC,EAAa,qHAOlC,MAAO,CACLpN,aAAc,CAACsN,GACfvN,aAAcvrC,EAAiBqqC,6BAA6BzwD,GAC5D6xD,SAAU,CAAC,KACXC,aAAYA,IAGhBkE,EAAAp3D,UAAA65D,mBAAA,SAAmBryC,EAAyC/mB,GAC1D,IAAMmzC,EAAanzC,EAAO,GAAGK,KAAK0H,QAC5B0zC,EAAgB7sC,EAAA9L,UAAUsF,UAAU4G,KAAKzH,KAAM4rC,EAAW/yC,QAC1DgF,EAAIwJ,EAAA9L,UAAU0E,gBAAgB2rC,EAAYsI,GAC1CC,EAAI9sC,EAAA9L,UAAUwE,kBAAkB6rC,EAAYsI,GAC5CskB,EAAwB/wD,KAAK8wD,4BAA4B/4C,EAAkB/mB,EAAO,GAAIoF,EAAGs2C,EAAG,CAACt2C,IAC7F46D,EACFhxD,KAAK4wD,6BAA6B74C,EAAkB/mB,EAAO,GAAIoF,EAAGs2C,EAAGqkB,EAAsBzN,aAAc,CAACltD,IAK9G,MADoC,CAAC26D,EAAuBC,EAHjChxD,KAAKuwD,yBAC5Bx4C,EAAkB/mB,EAAO,GAAIoF,EAAGs2C,EAAGqkB,EAAsBzN,aAAc0N,EAAwB1N,gBAKrGqE,EAAAp3D,UAAA+5D,eAAA,SAAevyC,EAAyCoyC,EAA6Bn5D,GACnF,IAAMiQ,EAAWjQ,EAAO,GAAGkD,KACrBikB,EAAUJ,EAAiBK,uBAAuBpnB,EAAO,GAAIm5D,EAAa,GAAG5G,aAAa,IAC1F8G,EAAsB,GAC5BA,EAASvuD,KAAK,CACZgoD,kBAAmB,CAAC3rC,GACpB+pC,kBAAmBnqC,EAAiBuqC,4BAA4B6H,EAAa,GAAG7G,aAAcriD,GAC9F8iD,YAAa,KAEf,IAAK,IAAIx1D,EAAI,EAAGA,EAAI47D,EAAa/4D,SAAU7C,EACzC87D,EAASvuD,KAAK,CACZgoD,kBAAiBtoB,EAAM6uB,EAAS97D,EAAI,GAAGu1D,kBAAiB,CAAEuG,EAAS97D,EAAI,GAAG2zD,oBAC1EA,kBAAmBnqC,EAAiBuqC,4BAA4B6H,EAAa57D,GAAG+0D,aAAcriD,GAC9F8iD,YAAa,KAGjB,OAAOsG,GAGX1C,EA3MA,CAAkC30B,EAAA5D,SAArBlhC,EAAAy5D,2tBCPb,IAAAtD,EAAA31D,EAAA,KAEAkR,EAAAlR,EAAA,GAIAk5D,EAAA,SAAA18C,GAAA,SAAA08C,mDAmDA,OAnDgCz8C,EAAAy8C,EAAA18C,GAC9B08C,EAAAr3D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAA7C,IAAA0X,EAAA1I,KACQixD,EAAQjxD,KAAKkxD,gBAAgBn5C,EAAkB/mB,GACrD,IAAKgP,KAAKkqD,UAAW,CACnBlqD,KAAKkqD,UAAY,GACjB,IAAK,IAAI37D,EAAI,EAAGA,EAAI0iE,IAAS1iE,EAAG,CAC9B,IAAM4d,EAAcnM,KAAK8hD,kBAAkB/pC,EAAkB/mB,EAAO,GAAIzC,GAClEqzD,EAAW7pC,EAAiBwlB,QAAQ6iB,eAAe7gB,MAAMpzB,GAC/DnM,KAAKkqD,UAAUpuD,KAAK8lD,IAGxB,IAAMuP,EAAoB,GAO1B,OALAnxD,KAAKkqD,UAAU5sD,QAAQ,SAAAskD,GACrB,IAAMwP,EAAU1oD,EAAKu5C,cAAclqC,EAAkB6pC,EAASz1C,YAAanb,GAC3E+mB,EAAiBwlB,QAAQ6iB,eAAetoC,IAAI8pC,EAAUwP,GACtDD,EAAQr1D,KAAKs1D,EAAQlP,kBAAkBppC,UAElCq4C,GAETvJ,EAAAr3D,UAAA2gE,gBAAA,SAAgBn5C,EAAyC/mB,GAEvD,OADMiC,EAAA2M,EAAAnD,UAAAC,WAAA1L,EAAA,GAAAK,KAAA2O,KAAAzH,KAAAyH,KAAArD,MAAAqD,KAAApD,YAAA,GAAG,GACMxL,QAEjBw2D,EAAAr3D,UAAAuxD,kBAAA,SAAkB/pC,EAAyCha,EAAe3K,GAClE,IAAAJ,EAAAC,EAAA2M,EAAAnD,UAAAC,WAAAqB,EAAA1M,KAAA2O,KAAAzH,KAAAyH,KAAArD,MAAAqD,KAAApD,YAAA,GAACE,EAAA9J,EAAA,GACD0C,EADS1C,EAAA,GACQI,GACjBzB,EAAcmL,EAAO1J,GAErBqwD,EAAe,qCADR9xD,EAAYP,OAES,yBACpB4O,KAAKzH,KAAI,QAAQ7C,EAAM,0CAGrC,MAAO,CACL6tD,aAAc,CAACxrC,EAAiB8qC,yBAAyB9kD,IACzDulD,aAAcvrC,EAAiBqqC,6BAA6BzwD,GAC5D6xD,SAAU,CAAC,KACXC,aAAYA,IAGhBmE,EAAAr3D,UAAA0xD,cAAA,SAAclqC,EAAyC5L,EAA0Bnb,GAC/E,IAAMy3D,EAAW,CAAC1wC,EAAiBK,uBAAuBpnB,EAAO,GAAImb,EAAYo3C,aAAa,KAC9F,MAAO,CACLO,kBAAmB2E,EACnBvG,kBACInqC,EAAiBuqC,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MAC9F6vD,YAAa,KAInB6D,EAnDA,CAAgCvD,EAAAgN,OAAnBnjE,EAAA05D,4FCDb,IAAAyJ,EAAA,WACE,SAAAA,EAAsBz0D,GAAAoD,KAAApD,aA6BxB,OAzBEy0D,EAAA9gE,UAAAq7B,WAAA,SAAWC,GACT7rB,KAAKzH,KAAOszB,EAAWK,OAAO,OAAQ,GACtClsB,KAAKrD,MAAQkvB,EAAWiB,QAAQ,QAAS,KAG3CukC,EAAA9gE,UAAA47B,YAAA,SAAYn7B,GACV,SAAKA,GAA4B,IAAlBA,EAAOI,SAIf4O,KAAKosB,gBAAgBp7B,IAGpBqgE,EAAA9gE,UAAA67B,gBAAV,SAA0Bp7B,GACxB,MAAuB,SAAnBA,EAAO,GAAGkD,MAAsC,UAAnBlD,EAAO,GAAGkD,MAAuC,UAAnBlD,EAAO,GAAGkD,MAClD,WAAnBlD,EAAO,GAAGkD,MAAwC,UAAnBlD,EAAO,GAAGkD,MAAuC,WAAnBlD,EAAO,GAAGkD,MACpD,YAAnBlD,EAAO,GAAGkD,MAAyC,YAAnBlD,EAAO,GAAGkD,MAAyC,SAAnBlD,EAAO,GAAGkD,MASlFm9D,EA9BA,GAAsBnjE,EAAAmjE,uaCLtB,IAAAp+B,EAAAvkC,EAAA,IAEAkR,EAAAlR,EAAA,GAEAipB,EAAAjpB,EAAA,IAEAq5D,EAAA,SAAA78C,GAAA,SAAA68C,mDAKA,OALkC58C,EAAA48C,EAAA78C,GAChC68C,EAAAx3D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,IAAM0K,EAAakE,EAAA9L,UAAU0H,aAAaxK,EAAO,GAAGK,KAAM2O,KAAKvE,MAC/D,MAAO,CAACkc,EAAAM,QAAQF,EAAkB/mB,EAAO,GAAI0K,KAEjDqsD,EALA,CAAkC90B,EAAA2H,SAArB1sC,EAAA65D,8aCNb,IAAA70B,EAAAxkC,EAAA,IAEA20D,EAAA30D,EAAA,GAIAu5D,EAAA,SAAA/8C,GAAA,SAAA+8C,mDA6BA,OA7B8B98C,EAAA88C,EAAA/8C,GAC5B+8C,EAAA13D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpCi3D,EAAA13D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAMyT,EAAO4+C,EAAA9+C,QAAQikD,EAAQjrB,QAAQ1L,QAAQ3lB,UAAUnI,SACjDpS,EAAcX,EAAO,GAAGK,KAAK0H,QAC7Bu4D,EAAUtgE,EAAOyG,IAAI,SAAC0C,EAAG5L,GAAM,OAAGkW,EAAKN,UAAS,KAAK5V,EAAC,gBAAe2rB,KAAK,OAC1EspC,EAAWxyD,EAAOyG,IAAI,SAAC0C,EAAG5L,GAAM,UAAIA,IAC1C,MAAO,CACLg1D,aAAcvyD,EAAOyG,IAAI,SAAA5H,GAAK,OAAA24D,EAAQ3F,yBAAyBhzD,KAC/DyzD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAQA,EACRC,aAAc,gDAEI6N,EAAO,cACrB7sD,EAAKL,OAAM,sBAEfs/C,SAAS,IAGbuE,EAAA13D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,IAAMy3D,EAAWz3D,EAAOyG,IAAI,SAAC5H,EAAGtB,GAAM,OAAAi6D,EAAQpwC,uBAAuBvoB,EAAGsc,EAAYo3C,aAAah1D,MACjG,MAAO,CACLu1D,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAa,KAGnBkE,EA7BA,CAA8B/0B,EAAA7D,KAAjBnhC,EAAA+5D,0aCPb,IAKAG,EAAA,SAAAl9C,GAAA,SAAAk9C,mDAqCA,OArC+Bj9C,EAAAi9C,EAAAl9C,GAC7Bk9C,EAAA73D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAGpCo3D,EAAA73D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAKhD,IAJA,IAAMmzC,EAAanzC,EAAO,GAAGK,KAAK0H,QAC5BpH,EAAc,IAAImB,MAAMqxC,EAAW/yC,QAEnCmgE,EAAoB,GACjBhjE,EAAI,EAAGA,EAAI41C,EAAW/yC,OAAQ7C,IACrCoD,EAAYpD,GAAK41C,EAAW51C,GAAKyC,EAAO,GAAG4M,WAAWrP,GACtDgjE,EAAQz1D,KAAK,YAAYvN,EAAC,+BAA+BA,EAAC,OAAO41C,EAAW51C,GAAE,QAGhF,IAAMqK,EAAOjH,EAAYP,OACnBqyD,EAAe,qCACS7qD,EAAI,4BACjBA,EAAI,aACjB24D,EAAQr3C,KAAK,MAAK,sCAGtB,MAAO,CACLqpC,aAAcvyD,EAAOyG,IAAI,SAAA5H,GAAK,OAAA24D,EAAQ3F,yBAAyBhzD,KAC/DyzD,aAAckF,EAAQpG,6BAA6BzwD,GACnD6xD,SAAU,CAAC,KACXC,aAAYA,IAGhB2E,EAAA73D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,IAAMy3D,EAAWz3D,EAAOyG,IAAI,SAAC5H,EAAGtB,GAAM,OAAAi6D,EAAQpwC,uBAAuBvoB,EAAGsc,EAAYo3C,aAAah1D,MACjG,MAAO,CACLu1D,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAa,KAGnBqE,EArCA,CALA15D,EAAA,IAK+BmsC,MAAlB3sC,EAAAk6D,w0BCJb,IAAAh1B,EAAA1kC,EAAA,IAEAkR,EAAAlR,EAAA,GACAi6D,EAAAj6D,EAAA,GAIA25D,EAAA,SAAAn9C,GAAA,SAAAm9C,mDA+DA,OA/DoCl9C,EAAAk9C,EAAAn9C,GAClCm9C,EAAA93D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpCq3D,EAAA93D,UAAAihE,eAAA,SAAeC,GACb,IAAMv3D,EAAO8F,KAAK0xD,gBAAgBD,EAAY,IAC9C,OAAO7xD,EAAA9L,UAAUmG,gBAAgBw3D,EAAY,GAAIv3D,IAEnDmuD,EAAA93D,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAMygE,EAAczgE,EAAOyG,IAAI,SAAA5H,GAAK,OAAAA,EAAEwB,KAAK0H,UACrCmB,EAAO8F,KAAK0xD,gBAAgBD,EAAY,IACxCE,EAAsB3xD,KAAKwxD,eAAeC,GAC1C74D,EAAO5H,EAAO,GAAGK,KAAKD,OAItBqyD,EAAe,WACjBzjD,KAAK4xD,oBAAoB,OAAQ13D,EAAMtB,GAAK,qCAClBA,EAAI,uBACtBA,EAAI,gEAIV0qD,EAAekF,EAAQpG,6BAA6BuP,EAAqB,EAAGA,GAClF,MAAO,CAACpO,aAAc,CAACiF,EAAQ3F,yBAAyB7xD,EAAO,KAAMsyD,aAAYA,EAAEE,SAAU,CAAC,KAAMC,aAAYA,IAElH4E,EAAA93D,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,IAAMy3D,EAAW,CAACD,EAAQpwC,uBAAuBpnB,EAAO,GAAImb,EAAYo3C,aAAa,KACrF,MAAO,CACLO,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAa,KAGjBsE,EAAA93D,UAAAshE,sBAAA,SAAsBrJ,EAAgCrkB,EAAsBj1C,GAC1E,IAAMyC,EAAcqO,KAAKwxD,eAAe,CAACrtB,IAIzC,OAHKj1C,IACHA,EAAO,QAEF,CACLA,KAAIA,EACJ+5D,KAAMjpD,KAAK4xD,oBAAoB1iE,EAAM8Q,KAAK0xD,gBAAgBvtB,GAAaxyC,EAAYP,QACnF8C,KAAMy0D,EAAA38C,aAAa8lD,WACnB3tB,WAAUA,EACVxyC,YAAWA,IAGL02D,EAAA93D,UAAAmhE,gBAAV,SAA0BvtB,GACxB,IAAIjqC,EAAO8F,KAAK9F,KAIhB,OAHIA,GAAQA,EAAK9I,SAAW+yC,EAAW/yC,SACrC8I,EAAOshC,EAAK2I,EAAWp2B,QAAS/U,WAE3BkB,GAECmuD,EAAA93D,UAAAqhE,oBAAV,SAA8B1iE,EAAcgL,EAAgBtB,GAC1D,IAAMm5D,EAAc,GACpBA,EAAYj2D,KAAK,QAAQ5M,EAAI,cAAc0J,EAAI,cAAcA,EAAI,QACjE,IAAK,IAAIrK,EAAI,EAAGA,EAAIqK,IAAQrK,EAC1BwjE,EAAYj2D,KAAK,OAAO5B,EAAK3L,GAAE,SAASA,EAAC,MAG3C,OADAwjE,EAAYj2D,KAAK,OACVi2D,EAAY73C,KAAK,OAE5BmuC,EA/DA,CAAoCj1B,EAAA0H,WAAvB5sC,EAAAm6D,gbCPb,IAAA/0B,EAAA5kC,EAAA,IAEAi6D,EAAAj6D,EAAA,GACA20D,EAAA30D,EAAA,GAIA41D,EAAA,SAAAp5C,GACE,SAAAo5C,EAAsB33B,EAA0Di8B,GAAhF,IAAAlgD,EACEwC,EAAApc,KAAAkR,KAAM2sB,IAAe3sB,YADD0I,EAAAikB,iBAA0DjkB,EAAAkgD,aA6BlF,OA9BkCz9C,EAAAm5C,EAAAp5C,GAIhCo5C,EAAA/zD,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,OAAO+mB,EAAiBD,IAAI9X,KAAMhP,IAEpCszD,EAAA/zD,UAAAuxD,kBAAA,SAAkB0G,EAAgCx3D,GAChD,IAAMW,EAAcX,EAAO,GAAGK,KAAK0H,QAC7Bq1D,EAAc5F,EAAQ3F,yBAAyB7xD,EAAO,IACtDyT,EAAO4+C,EAAA9+C,QAAQikD,EAAQjrB,QAAQ1L,QAAQ3lB,UAAUnI,SACjD0/C,EAAe,WACjBzjD,KAAK4oD,SAASK,KAAI,2CAEPxkD,EAAKN,UAAS,gCACnBnE,KAAK4oD,SAAS15D,KAAI,iBACtBuV,EAAKL,OAAM,yBAIjB,MAAO,CAACm/C,aAAc,CAAC6K,GAAc9K,aADhBkF,EAAQpG,6BAA6BzwD,GACP6xD,SAAU,CAAC,KAAMC,aAAYA,EAAEC,SAAS,IAE7FY,EAAA/zD,UAAA0xD,cAAA,SAAcuG,EAAgCr8C,EAA0Bnb,GACtE,IAAMy3D,EAAW,CAACD,EAAQpwC,uBAAuBpnB,EAAO,GAAImb,EAAYo3C,aAAa,KACrF,MAAO,CACLO,kBAAmB2E,EACnBvG,kBAAmBsG,EAAQlG,4BAA4Bn2C,EAAYm3C,aAAcmF,EAAS,GAAG3vC,OAAO5kB,MACpG6vD,YAAa,KAGnBO,EA9BA,CAAkChxB,EAAA2H,SAsJlC,SAAS+2B,EAAiB7I,GACxB,IAAMj6D,EAAUi6D,EAAK,IASrB,MAAO,CAACF,KARK,aACL/5D,EAAI,2BACDi6D,EAAK,qBAETj6D,EAAI,0BACAi6D,EAAK,gBAGFj6D,KAAIA,EAAEgF,KAAMy0D,EAAA38C,aAAak9C,YAhK5Bh7D,EAAAo2D,eAgCbp2D,EAAAq2D,QAAA,WACE,OAAOyN,EAAiB,QAE1B9jE,EAAAs2D,SAAA,WACE,OAAOwN,EAAiB,SAE1B9jE,EAAA02D,SAAA,WACE,OAAOoN,EAAiB,SAE1B9jE,EAAA22D,SAAA,WACE,OAAOmN,EAAiB,SAE1B9jE,EAAA82D,SAAA,WACE,OAAOgN,EAAiB,SAE1B9jE,EAAAk3D,QAAA,WACE,OAAO4M,EAAiB,QAE1B9jE,EAAAu3D,QAAA,WACE,OAAOuM,EAAiB,QAE1B9jE,EAAAy3D,UAAA,WACE,OAAOqM,EAAiB,UAE1B9jE,EAAA+3D,aAAA,WACE,IAAM/2D,EAAO,aASb,MAAO,CAAC+5D,KARK,2GAQC/5D,KAAIA,EAAEgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAAm4D,QAAA,WACE,OAAO2L,EAAiB,QAE1B9jE,EAAAu4D,QAAA,WAUE,MAAO,CAACwC,KARK,iGAQC/5D,KATD,OASOgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAAw4D,QAAA,WAgBE,MAAO,CAACuC,KAdK,wRAcC/5D,KAfD,OAeOgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAAs5D,QAAA,WACE,OAAOwK,EAAiB,QAE1B9jE,EAAAo5D,SAAA,WAUE,MAAO,CAAC2B,KARK,yHAQC/5D,KATD,QASOgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAAq5D,YAAA,WACE,IAAMr4D,EAAO,WASb,MAAO,CAAC+5D,KARK,+IAQC/5D,KAAIA,EAAEgF,KAAMy0D,EAAA38C,aAAak9C,aAEzCh7D,EAAA45D,SAAA,WACE,OAAOkK,EAAiB,SAE1B9jE,EAAAg6D,QAAA,WACE,OAAO8J,EAAiB,QAE1B9jE,EAAAi6D,SAAA,WAcE,MAAO,CAACc,KAZK,yOAYC/5D,KAbD,QAaOgF,KAAMy0D,EAAA38C,aAAak9C,4aC3JzC,IAAA31B,EAAA7kC,EAAA,IAEAkR,EAAAlR,EAAA,GAEAipB,EAAAjpB,EAAA,IAEA45D,EAAA,SAAAp9C,GAAA,SAAAo9C,mDAKA,OALoCn9C,EAAAm9C,EAAAp9C,GAClCo9C,EAAA/3D,UAAAunB,IAAA,SAAIC,EAAyC/mB,GAC3C,IAAM0K,EAAakE,EAAA9L,UAAUiI,eAAe/K,EAAO,GAAGK,KAAM2O,KAAKvE,MACjE,MAAO,CAACkc,EAAAM,QAAQF,EAAkB/mB,EAAO,GAAI0K,KAEjD4sD,EALA,CAAoC/0B,EAAA2H,WAAvBhtC,EAAAo6D,sgBCNb,IAAA2J,EAAAvjE,EAAA,IACA0a,EAAA1a,EAAA,GAEAwjE,EAAAxjE,EAAA,KACA20D,EAAA30D,EAAA,GAaA2xD,EAAA,WAKE,SAAAA,EAAmB/iB,EAAqCpxB,GAArClM,KAAAs9B,WAAqCt9B,KAAAkM,YACtDlM,KAAKmyD,KAAO,IAAItR,IAChB7gD,KAAKoyD,iBAAkB,EAwJ3B,OAtJE/R,EAAA9vD,UAAAsxD,YAAA,SAAY3xD,GACV,OAAO8P,KAAKmyD,KAAK3iE,IAAIU,IAEvBmwD,EAAA9vD,UAAAwxD,YAAA,SAAY7xD,EAAS0xD,GACnB5hD,KAAKmyD,KAAKh+D,IAAIjE,EAAK0xD,IAErBvB,EAAA9vD,UAAAunB,IAAA,SAAIu6C,EAAyBrQ,GAA7B,IAAAt5C,EAAA1I,KACEA,KAAKs9B,SAASt1B,MAAM,UAAW,qBAAsB,WACnD,IAAMkjD,EAAKxiD,EAAKwD,UAAUg/C,GACpBoH,EAAUD,EAAcC,QAC9BpH,EAAGqH,WAAWD,GACd,IACE5pD,EAAK8pD,WAAWxQ,EAAQE,mBACnBx5C,EAAK0pD,iBACR1pD,EAAK+pD,eAAeJ,EAAcK,iBAEpChqD,EAAKiqD,aAAaN,EAAc/G,iBAAkBtJ,EAAQ+B,YAAa/B,EAAQ8B,mBAC/E,MAAO94C,GAEP,MADA5B,EAAAxC,OAAOnB,MAAM,iBAAkB4sD,EAAclmD,YAAYs3C,cACnDz4C,EAERtC,EAAK40B,SAASt1B,MAAM,UAAW,mBAAoB,WACjDU,EAAKkqD,OAAOP,EAAerQ,GAC3BkJ,EAAGviD,aAIT03C,EAAA9vD,UAAAysC,QAAA,eAAAt0B,EAAA1I,KACMA,KAAK6yD,cACP7yD,KAAKkM,UAAU4mD,aAAa9yD,KAAK6yD,cAEnC7yD,KAAKmyD,KAAK70D,QAAQ,SAAAhP,GAAK,OAAAoa,EAAKwD,UAAU6mD,cAAczkE,EAAEgkE,YAExDjS,EAAA9vD,UAAAgvC,MAAA,SAAMpzB,GAAN,IAAAzD,EAAA1I,KACE,OAAOA,KAAKs9B,SAASt1B,MAAM,UAAW,uBAAwB,WAC5D,IAAMgrD,EAAe,IAAId,EAAAe,iBAAiBvqD,EAAKwD,UAAWC,GACpD+mD,EAAaF,EAAaG,aAC1Bb,EAAU5pD,EAAK0qD,QAAQF,GAQ7B,MAPiB,CACf/mD,YAAWA,EACXmmD,QAAOA,EACPhH,iBAAkB5iD,EAAK2qD,oBACnBf,EAASU,EAAa3mD,QAAQF,YAAYq3C,SAAUwP,EAAa3mD,QAAQF,YAAYu9C,WACzFgJ,gBAAiBhqD,EAAK4qD,mBAAmBhB,OAKrCjS,EAAA9vD,UAAAqiE,OAAV,SAAiBhR,EAAoBI,GAC/BA,EAAQiJ,MACV7hD,EAAAxC,OAAOtB,QAAQ,iBAAkB,wBACjC08C,EAAQiJ,KAAKjrD,KAAKkM,UAAW01C,IAE7B5hD,KAAKkM,UAAU++C,QAGT5K,EAAA9vD,UAAA6iE,QAAV,SAAkBG,GAChB,IAAKvzD,KAAK6yD,aAAc,CACtBzpD,EAAAxC,OAAOtB,QAAQ,kBAAmB,0DAClC,IAAMkuD,EAAqBnQ,EAAA7+C,sBAAsBxE,KAAKkM,UAAUnI,SAChE/D,KAAK6yD,aAAe7yD,KAAKkM,UAAUunD,cAAcD,EAAoBxzD,KAAKkM,UAAUg/C,GAAGwI,eAErFzB,EAAAthC,IAAImB,OACN1oB,EAAAxC,OAAOtB,QAAQ,kBAAmB,gBACtCiuD,EAAgB,MAGd,IAAMI,EAAa3zD,KAAKkM,UAAUunD,cAAcF,EAAkBvzD,KAAKkM,UAAUg/C,GAAG0I,iBAC9EtB,EAAUtyD,KAAKkM,UAAU2nD,cAAc7zD,KAAK6yD,aAAcc,GAEhE,OADA3zD,KAAKkM,UAAU4mD,aAAaa,GACrBrB,GAETjS,EAAA9vD,UAAAiiE,WAAA,SAAWhR,GACTp4C,EAAAxC,OAAOtB,QACH,kBACA,8CAA8Ck8C,EAAG9oC,MAAK,IAAI8oC,EAAG/oC,OAAM,WAAW+oC,EAAGzsD,MAAK,UAClFysD,EAAG1oC,OAAO5kB,MAClB8L,KAAKkM,UAAU4nD,kBAAkBtS,EAAG3oC,QAAS2oC,EAAG9oC,MAAO8oC,EAAG/oC,SAE5D4nC,EAAA9vD,UAAAkiE,eAAA,SAAeC,GACb,IAAMqB,EAAiBrB,EAAgB9Y,SACjCoa,EAAqBtB,EAAgBuB,aAC3Cj0D,KAAKkM,UAAUgoD,oBAAoBH,EAAgBC,GACnDh0D,KAAKoyD,iBAAkB,GAEzB/R,EAAA9vD,UAAAoiE,aAAA,SAAarH,EAA6CvH,EAA0BoQ,WAC5EjJ,EAAKlrD,KAAKkM,UAAUg/C,GACtBkJ,EAAkB,MACtB,IAAkD,IAAAC,EAAAz5D,EAAA0wD,GAAgBgJ,EAAAD,EAAAv5D,QAAAw5D,EAAAv5D,KAAAu5D,EAAAD,EAAAv5D,OAAE,CAAzD,IAAA8F,EAAA0zD,EAAA1kE,MAAC2kE,EAAA3zD,EAAA1R,KAAMgF,EAAA0M,EAAA1M,KAAMsgE,EAAA5zD,EAAAywC,SAAUsY,EAAA/oD,EAAA+oD,YAChC,OAAQz1D,GACN,IAAK,YACH8L,KAAKy0D,YAAYN,EAASC,GAAkBI,EAAUJ,GACtDA,IACA,MACF,IAAK,QACCzK,EACFuB,EAAGwJ,WAAWF,EAAUzQ,EAAYwQ,IAEpCrJ,EAAGyJ,UAAUH,EAAUzQ,EAAYwQ,IAErC,MACF,IAAK,MACC5K,EACFuB,EAAG0J,WAAWJ,EAAUzQ,EAAYwQ,IAEpCrJ,EAAGc,UAAUwI,EAAUzQ,EAAYwQ,IAErC,MACF,QACE,MAAM,IAAI9+D,MAAM,4BAA4BvB,wGAIpDmsD,EAAA9vD,UAAAkkE,YAAA,SAAYjT,EAAiBqT,EAAqCjb,GAChE55C,KAAKkM,UAAU4oD,qBAAqBtT,EAAG3oC,QAAS+gC,EAAUib,IAE5DxU,EAAA9vD,UAAA+iE,mBAAA,SAAmBhB,GACjB,MAAO,CACL1Y,SAAU55C,KAAK+0D,kBAAkBzC,EAAS,YAC1C2B,aAAcj0D,KAAK+0D,kBAAkBzC,EAAS,kBAGlDjS,EAAA9vD,UAAA8iE,oBAAA,SAAoBf,EAAuB9O,EAAqBkG,eAExD4B,EAA8C,GACpD,GAAI9H,MACF,IAAsB,IAAAwR,EAAAp6D,EAAA4oD,GAAQyR,EAAAD,EAAAl6D,QAAAm6D,EAAAl6D,KAAAk6D,EAAAD,EAAAl6D,OAAE,CAA3B,IAAMo6D,EAAOD,EAAArlE,MAChB07D,EAAiBxvD,KAAK,CAAC5M,KAAMgmE,EAAShhE,KAAM,YAAam9C,SAAUrxC,KAAKm1D,mBAAmB7C,EAAS4C,uGAGxG,GAAIxL,MACF,IAAuB,IAAA0L,EAAAx6D,EAAA8uD,GAAS2L,EAAAD,EAAAt6D,QAAAu6D,EAAAt6D,KAAAs6D,EAAAD,EAAAt6D,OAAE,CAA7B,IAAMw6D,EAAQD,EAAAzlE,MACjB07D,EAAiBxvD,KAAI6mD,EAAA,GAAK2S,EAAQ,CAAEjkB,SAAUrxC,KAAKm1D,mBAAmB7C,EAASgD,EAASpmE,2GAG5F,OAAOo8D,GAETjL,EAAA9vD,UAAA4kE,mBAAA,SAAmB7C,EAAuBpjE,GACxC,IACMqmE,EADKv1D,KAAKkM,UAAUg/C,GACLiK,mBAAmB7C,EAASpjE,GACjD,GAAkB,OAAdqmE,EACF,MAAM,IAAI9/D,MAAM,WAAWvG,EAAI,eAEjC,OAAOqmE,GAETlV,EAAA9vD,UAAAwkE,kBAAA,SAAkBzC,EAAuBpjE,GAGvC,OAFW8Q,KAAKkM,UAAUg/C,GACW6J,kBAAkBzC,EAASpjE,IAGpEmxD,EA/JA,GAAanyD,EAAAmyD,mCCpBb,SAAAlyD,EAAAsf,GAAA,IAAA+nD;;;;;;IAMC,WACD,aAGA,IAAAC,EAAA,CACAC,UAAA,EACArlE,QAAA,GAIArC,EAAAynE,SAAAjnE,iBAAAwR,KAMA21D,EAAAF,SAAAvnE,MAGA0nE,EAAAH,SAAAtnE,UAAA0nE,UAAA1nE,EAGA2nE,EAAAH,GAAAC,GAAA,iBAAAnoD,MACAqoD,KAAAroD,SAAAqoD,KAAAtnE,SAAAsnE,KAAAjnD,OAAAinD,IACA9nE,EAAA8nE,GAQA,IAAAC,EAAApjE,KAAAyJ,IAAA,QAGA45D,EAAA,UAMAC,EAAA5mE,OAAAkB,UAGAC,EAAAylE,EAAAzlE,eAGAiR,EAAAw0D,EAAAx0D,SAWA,SAAAy0D,EAAApiD,GAEA,OADAA,EAAAvE,OAAAuE,IACA5C,OAAA,GAAAilD,cAAAriD,EAAA/a,MAAA,GAuFA,SAAAq9D,EAAAtiD,GAEA,OADAA,EAAAiQ,EAAAjQ,GACA,uBAAA+rB,KAAA/rB,GACAA,EACAoiD,EAAApiD,GAUA,SAAAuiD,EAAAhmE,EAAA8yC,GACA,QAAAjzC,KAAAG,EACAG,EAAA1B,KAAAuB,EAAAH,IACAizC,EAAA9yC,EAAAH,KAAAG,GAYA,SAAAimE,EAAA1mE,GACA,aAAAA,EACAsmE,EAAAtmE,GACA6R,EAAA3S,KAAAc,GAAAmJ,MAAA,MA0BA,SAAAw9D,EAAAziD,GACA,OAAAvE,OAAAuE,GAAAkQ,QAAA,sBAWA,SAAA5oB,EAAA8G,EAAAihC,GACA,IAAAqzB,EAAA,KAIA,OA/FA,SAAAnmE,EAAA8yC,GACA,IAAA/vC,GAAA,EACAhC,EAAAf,IAAAe,OAAA,EAEA,oBAAAA,MAAA,GAAAA,GAAA2kE,EACA,OAAA3iE,EAAAhC,GACA+xC,EAAA9yC,EAAA+C,KAAA/C,QAGAgmE,EAAAhmE,EAAA8yC,GAmFAszB,CAAAv0D,EAAA,SAAAtS,EAAAwD,GACAojE,EAAArzB,EAAAqzB,EAAA5mE,EAAAwD,EAAA8O,KAEAs0D,EAUA,SAAAzyC,EAAAjQ,GACA,OAAAvE,OAAAuE,GAAAkQ,QAAA,eAw7BA,IAAA2N,EA36BA,SAAA+kC,EAAAC,GAGA,IAAAtqD,EAAAre,EAGA4oE,EAAAD,GAAA,iBAAAA,GAAA,UAAAL,EAAAK,GAGAC,IACAvqD,EAAAsqD,EACAA,EAAA,MAIA,IAAAE,EAAAxqD,EAAAyqD,WAAA,GAGAC,EAAAF,EAAAE,WAAA,GAEAJ,MAAAI,GAGA,IA4CAl5D,EAkBAm5D,EA3IA3mE,EAAAC,EACA4D,EA+EA+iE,EAAAL,IACAC,EAAAI,WACA,aAAAp3B,KAAA82B,KAAA,eAAA92B,KAAAp+B,cAIAy1D,EAAAN,EADA,SACA,4BACAO,EAAAP,EAFA,SAEA,cACAQ,EAAAR,GAAAvqD,EAAAgrD,KAAA,cAAAf,EAAAjqD,EAAAgrD,MACAC,EAAAV,EAJA,SAIA,gBAGAS,EAAA,SAAAx3B,KAAAu3B,IAAA/qD,EAAAgrD,KAGAE,EAAAF,GAAAf,EAAAjqD,EAAAmrD,cAAAL,EAGA76D,EAAA+6D,EAAA,QAGAppC,EAAAopC,EAAA,QAGAI,EAAAprD,EAAAyjC,UAAA,GAOA4nB,EAAArrD,EAAAsrD,WAAAtrD,EAAAqrD,MAGAE,EAAA5B,EAAAn2B,KAAA+3B,EAAAhB,GAAAc,IAAA,aAAApB,EAAAoB,IACAE,EACAF,EAAA,KAQAG,EAAAlB,EAGAmB,EAAA,GAGAC,EAAA,KAGAC,EAAArB,GAAAI,EAGAhzD,EAAAi0D,GAAAN,GAAA,mBAAAA,EAAA3zD,SAAA2zD,EAAA3zD,UAMAo+C,EA+JA/mD,EA/JA,CACA,CAAO68D,MAAA,WAAAC,QAAA,QACP,UACA,CAAOD,MAAA,SAAAC,QAAA,eACP,OACA,SACA,WACA,SACA,QACA,SAsJA,SAAAhrD,EAAAirD,GACA,OAAAjrD,GAAAkrD,OAAA,OACAD,EAAAD,SAAA3B,EAAA4B,IACA,WAAAtc,KAAA8a,KAAAwB,EAAAF,OAAAE,KArJAjpE,EAkLA,SAAAmpE,GACA,OAAAj9D,EAAAi9D,EAAA,SAAAnrD,EAAAirD,GACA,OAAAjrD,GAAAkrD,OAAA,OACAD,EAAAD,SAAA3B,EAAA4B,IACA,WAAAtc,KAAA8a,KAAAwB,EAAAF,OAAAE,KAtLAG,CAAA,CACA,YACA,QACA,gBACA,SACA,SACA,WACA,WACA,SACA,QACA,SACA,eACA,OACA,YACA,WACA,YACA,YACA,UACA,CAAOL,MAAA,iBAAAC,QAAA,QACP,SACA,eACA,WACA,YACA,QACA,SACA,WACA,CAAOD,MAAA,mBAAAC,QAAA,kBACP,YACA,CAAOD,MAAA,OAAAC,QAAA,+BACP,WACA,cACA,CAAOD,MAAA,cAAAC,QAAA,QACP,UACA,WACA,WACA,cACA,aACA,CAAOD,MAAA,aAAAC,QAAA,SACP,QACA,CAAOD,MAAA,QAAAC,QAAA,OACP,SACA,CAAOD,MAAA,gBAAAC,QAAA,kBACP,CAAOD,MAAA,UAAAC,QAAA,yBACP,CAAOD,MAAA,kBAAAC,QAAA,SACP,CAAOD,MAAA,KAAAC,QAAA,YACP,CAAOD,MAAA,KAAAC,QAAA,QACP,WAIAK,EAAAC,EAAA,CACA,CAAOP,MAAA,aAAAC,QAAA,QACP,aACA,CAAOD,MAAA,WAAAC,QAAA,YACP,CAAOD,MAAA,YAAAC,QAAA,YACP,CAAOD,MAAA,YAAAC,QAAA,YACP,CAAOD,MAAA,YAAAC,QAAA,YACP,CAAOD,MAAA,YAAAC,QAAA,WACP,CAAOD,MAAA,YAAAC,QAAA,WACP,CAAOD,MAAA,iBAAAC,QAAA,WACP,CAAOD,MAAA,YAAAC,QAAA,WACP,CAAOD,MAAA,iBAAAC,QAAA,WACP,YACA,QACA,OACA,OACA,SACA,SACA,CAAOD,MAAA,cAAAC,QAAA,+BACP,QACA,OACA,WACA,mBACA,cACA,WACA,cACA,CAAOD,MAAA,QAAAC,QAAA,QACP,MACA,WACA,CAAOD,MAAA,WAAAC,QAAA,QACP,SAIAO,EA4EA,SAAAJ,GACA,OAAAj9D,EAAAi9D,EAAA,SAAAnrD,EAAAtd,EAAAM,GAEA,OAAAgd,IACAtd,EAAA2oE,IACA3oE,EAAA,0BAAAisD,KAAA0c,KACAH,OAAA,MAAA7B,EAAArmE,GAAA,uBAAA2rD,KAAA8a,KACAzmE,IAnFAwoE,CAAA,CACAC,MAAA,CAAgBC,KAAA,EAAAC,OAAA,EAAAC,KAAA,GAChBC,OAAA,GACAC,OAAA,CAAiBC,OAAA,EAAAC,cAAA,GACjBC,KAAA,CAAeC,YAAA,GACfC,iBAAA,CAAyBC,KAAA,GACzBC,WAAA,CAAqBC,SAAA,GACrBC,OAAA,CAAiBC,YAAA,EAAAC,MAAA,GACjBC,GAAA,CAAaC,SAAA,GACbC,IAAA,GACAC,GAAA,GACAC,UAAA,CAAoBC,KAAA,EAAAC,WAAA,GACpBC,SAAA,CAAmBC,KAAA,GACnBC,SAAA,CAAmBC,QAAA,EAAAC,IAAA,GACnBC,MAAA,CAAgBC,MAAA,GAChBC,QAAA,CAAkBC,WAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,YAAA,GAClBC,KAAA,CAAeC,YAAA,EAAAC,mBAAA,KAIfC,EAyFA,SAAA7C,GACA,OAAAj9D,EAAAi9D,EAAA,SAAAnrD,EAAAirD,GACA,IAAAD,EAAAC,EAAAD,SAAA3B,EAAA4B,GAMA,OALAjrD,MACAkrD,OAAA,MAAAF,EAAA,6BAAArc,KAAA8a,MAEAzpD,EA3dA,SAAAguD,EAAAhD,EAAAD,GAIA,IAAAp6D,EAAA,CACAs9D,OAAA,KACAC,IAAA,uBACAC,IAAA,MACAC,IAAA,IACAC,IAAA,qBACAC,MAAA,sBACAC,IAAA,0BACAC,IAAA,KACAC,KAAA,WACAC,MAAA,OACAC,MAAA,KACAC,OAAA,MA8BA,OA3BA5D,GAAAD,GAAA,QAAAp4B,KAAAq7B,KAAA,mBAAAr7B,KAAAq7B,KACAr9D,IAAA,UAAAg+C,KAAAqf,OACAA,EAAA,WAAAr9D,GAGAq9D,EAAA3rD,OAAA2rD,GAEAhD,GAAAD,IACAiD,IAAAl3C,QAAAo0C,OAAAF,EAAA,KAAAD,IAGAiD,EAAA9E,EACA8E,EAAAl3C,QAAA,eACAA,QAAA,gBACAA,QAAA,0BACAA,QAAA,qBACAA,QAAA,0BACAA,QAAA,uBACAA,QAAA,gBACAA,QAAA,UACAA,QAAA,iCACAA,QAAA,0BACAA,QAAA,+BACAA,QAAA,mCACArnB,MAAA,YAgbAo/D,CAAA7uD,EAAAgrD,EAAAC,EAAAF,OAAAE,IAEAjrD,IAjGA8uD,CAAA,CACA,gBACA,UACA,SACA,CAAO/D,MAAA,YAAAC,QAAA,QACP,SACA,SACA,UACA,SACA,QACA,UACA,aACA,UACA,UACA,OACA,SACA,UACA,SACA,aACA,QACA,SACA,QACA,YACA,QACA,QACA,WACA,YACA,MACA,cACA,aA+EA,SAAAM,EAAAH,GACA,OAAAj9D,EAAAi9D,EAAA,SAAAnrD,EAAAirD,GACA,IAAAD,EAAAC,EAAAD,SAAA3B,EAAA4B,GAiBA,OAhBAjrD,MACAkrD,OAAA,MAAAF,EAAA,sBAAArc,KAAA8a,IACAyB,OAAA,MAAAF,EAAA,qBAAArc,KAAA8a,IACAyB,OAAA,MAAAF,EAAA,6CAA8E,KAAArc,KAAA8a,OAG9EzpD,EAAAqC,OAAA4oD,EAAAF,QAAAG,OAAAF,EAAA,KAAAr4B,KAAAs4B,EAAAF,OAAAE,EAAAF,MAAA/qD,GAAAvQ,MAAA,oBAAAkjC,KAAA3yB,EAAA,MACAA,EAAA,QAAAA,EAAA,IAGAirD,IAAAF,OAAAE,EACAjrD,EAAAkpD,EAAAlpD,EAAA,GACA8W,QAAAo0C,OAAAF,EAAA,KAAAC,GACAn0C,QAAAo0C,OAAA,SAA8BD,EAAA,mBAC9Bn0C,QAAAo0C,OAAA,IAAAD,EAAA,+BAEAjrD,IAuJA,GAvHAi1C,MAAA,CAAAA,IAGAsW,IAAAF,IACAA,EAAAC,EAAA,CAAAC,MAGA56D,EAAA,gBAAAg+C,KAAA0c,MACAA,EAAA16D,EAAA,IAGA,iBAAAgiC,KAAA82B,KACA4B,OAAA,qBAGA,cAAArpE,GAAA,YAAA2wC,KAAA82B,IACAmB,EAAAh8D,KAAA,sCAGA,MAAA5M,GAAA,qBAAA2wC,KAAA82B,IAEA8B,GADA56D,EAAA64D,EAAAC,EAAA3yC,QAAA,uBACAy0C,aACAF,EAAA16D,EAAA06D,SAGA,MAAA14B,KAAA04B,IACArpE,MAAA,UACAgsE,EAAA,QAAAr9D,EAAA,gBAAAg+C,KAAA8a,IACA,IAAA94D,EAAA,GAAAmmB,QAAA,UACA,KAGA,aAAA90B,GAAA,SAAA2wC,KAAAq7B,GAIAzC,GAAA,UAAAA,IACA,SAAA54B,KAAA3wC,KAAA,qBAAA2wC,KAAA82B,IAAA,WAAA92B,KAAA04B,KACA,cAAA14B,KAAAq7B,IAAA,UAAAr7B,KAAA3wC,IAAA,eAAA2wC,KAAA82B,IACAznE,EAAA,kBACAgsE,EAAA,cAAAr7B,KAAAq7B,KAAA,WAGA,QAAAhsE,GACA,UAAA2wC,KAAA82B,KACAuE,EAAA,UACApD,EAAA9c,QAAA,iBAEA,wBAAAnb,KAAA82B,IACAmB,EAAA9c,QAAA,gBAIA,YAAA9rD,IAAA2O,EAAA,wBAAAg+C,KAAA8a,IACAmB,EAAAh8D,KAAA,0BAAA+B,EAAA,IAGA,WAAA3O,IAAA2O,EAAA,0BAAAg+C,KAAA8a,KACAuE,MAAA,cACA3C,MAAA16D,EAAA,MAGA3O,IAAA2O,GAAA,iBAAAgiC,KAAA82B,IAAA,yBAAA9a,KAAA3sD,KAEAA,IAAAqpE,GAAA,kBAAA14B,KAAA82B,EAAA59D,MAAA49D,EAAA96D,QAAAgC,EAAA,WAEA3O,EAAA,OAGA2O,EAAA06D,GAAAE,GAAAyC,KACA3C,GAAAE,GAAA,6CAAA54B,KAAAq7B,MACAhsE,EAAA,mBAAA2sD,KAAA,cAAAhc,KAAAq7B,KAAAr9D,GAAA,aAIA,YAAA3O,IAAA2O,GAAA,uBAAAg+C,KAAA8a,IAAA,QACAmB,EAAAh8D,KAAA,YAAA+B,GA3CAq9D,EAAA,UA8CAn3D,IACAA,EApGA3I,EAoGA,CACA,8GACA,UACAm7D,EAAArnE,GACA,kCAxGA,SAAAge,EAAAgrD,GACA,OAAAhrD,IAAAkrD,OAAAF,EACA,2DAA6D,KAAArc,KAAA8a,IAAA,gBA0G7D94D,GACA,QAAAskD,GAAA8Z,WAAAl4D,GAAA,WACA,YAAA87B,KAAA3wC,KAAA,UAAA2wC,KAAA82B,GAAA,oBACA,8BAAA92B,KAAA82B,KAAA,yBAAA92B,KAAAsiB,IAAA,WACAA,GAAA,YAAAtiB,KAAA82B,KAAA,UAAAuE,EAAA,qBACA,UAAA/Y,GAAA,8BAAAtiB,KAAA3wC,IAAA,cAEAizD,EAAA,CAAAtkD,IAGA,MAAA3O,IAAA2O,GAAA,4BAAmCg+C,KAAA8a,IAAA,QACnCznE,GAAA,UACAgsE,EAAA,wBAAAr7B,KAAAhiC,OAAA,MACAi6D,EAAA9c,QAAA,iBAGA,iBAAAnb,KAAA82B,IACAznE,EAAA,YACAgsE,EAAA,oBACApD,EAAA9c,QAAA,gBACAj3C,OAAA,gBAAA83C,KAAA8a,IAAA,QAGA,MAAAznE,GAAA,WAAAizD,IAAAtkD,EAAA,gBAAAg+C,KAAA8a,MACAznE,GACA4oE,EAAAh8D,KAAA,kBAAA5M,GAAA6U,EAAA,IAAAA,EAAA,KAEA7U,EAAA,KACA6U,EAAAlG,EAAA,IAGAm6D,EAAA,CAGA,GA5hBA1nE,EA4hBA,SA3hBA4D,EAAA,OADA7D,EA4hBAgc,UA3hBAhc,EAAAC,GAAA,SACA,wCAAAuvC,KAAA3rC,IACA,UAAAA,IAAA7D,EAAAC,GAskBAgmE,EAAAz4D,EAAAwO,EAAA6vD,UAAAhF,GACAhoE,EAAA,YACAgsE,EAAAr9D,EAAAs+D,MAAAC,OAAAC,aAAAnB,IAGA5E,EAAAz4D,EAAAwO,EAAAiwD,UAAAhF,GACApoE,EAAA,YACA6U,GAAAlG,IAAAkG,SAAA,OAAAlG,EAAA0+D,MAAA,IAAA1+D,EAAA2+D,MAAA,IAAA3+D,EAAA4+D,OAGA,iBAAAhF,EAAAiF,eAAA7+D,EAAA,oBAAAg+C,KAAA8a,KAGA5yD,EAAA,CAAAA,EAAA0zD,EAAAiF,eACA7+D,KAAA,OAAAkG,EAAA,KACA+zD,EAAAh8D,KAAA,MAAAiI,EAAA,YACAo+C,MAAA,OACAp+C,EAAA,GAAAlG,GAEAkG,EAAA,MAAA7U,EAAAqgB,OAAAxL,EAAA,GAAA8E,QAAA,IAAA9E,EAAA,IAGA,iBAAA0zD,EAAAiF,cAAA,wBAAA78B,KAAA3wC,KACA4oE,EAAAh8D,KAAA,cAAA5M,EAAA,IAAA6U,GACA7U,EAAA,KACA6U,EAAA,OACAo+C,EAAA,YACA+Y,EAAA,gBAlEA,GALA7D,IAEAQ,GADAh6D,EAAAw5D,EAAAsF,KAAAC,QACAC,YAAA,WACA3B,KAAAr9D,EAAAg/D,YAAA,eAAAh/D,EAAAg/D,YAAA,eAEAtF,EAAA,CACA,IACAxzD,EAAAsI,EAAAywD,QAAA,gBAAA/4D,QAAAmW,KAAA,KACAhrB,EAAA,UACW,MAAA0Z,IACX/K,EAAAwO,EAAA+vD,SAAAv+D,EAAA4P,OAAA2uD,QAAA/vD,EAAA+vD,SACAltE,EAAA,UACAgsE,MAAAr9D,EAAA,GAAAq9D,IAAA,OAGAhsE,IACAA,EAAA,aAIA,iBAAAmd,EAAA8C,UAAA9C,EAAA8C,QAAAuhB,UACA7yB,EAAAwO,EAAA8C,WAEA,iBAAAtR,EAAAuR,WACA,iBAAAvR,EAAAuR,SAAA2tD,UACAjF,EAAAh8D,KAAA,QAAA+B,EAAAuR,SAAAzC,MACAzd,EAAA,WACA6U,EAAAlG,EAAAuR,SAAA2tD,UACa,iBAAAl/D,EAAAuR,SAAA4tD,KACblF,EAAAh8D,KAAA,YAAAiI,EAAA,QAAAlG,EAAAuR,SAAAzC,MACAzd,EAAA,QACA6U,EAAAlG,EAAAuR,SAAA4tD,KAGA9tE,IACAA,EAAA,UACA2oE,EAAAh6D,EAAAg6D,KACAqD,EAAAr9D,EAAA8zB,SAEA5tB,GADAA,EAAA,SAAA83C,KAAAh+C,EAAAkG,UACAA,EAAA,UAkCAm3D,KAAA9E,EAAA8E,GAaA,GAVAn3D,IAAAlG,EACA,0CAAAg+C,KAAA93C,IACA,2BAAA83C,KAAA8a,EAAA,KAAiDqB,GAAAnB,EAAAoG,mBACjD,iBAAAp9B,KAAA82B,IAAA,OAEAoB,EAAA,KAAAl4B,KAAAhiC,GAAA,eACAkG,IAAAigB,QAAAo0C,OAAAv6D,EAAA,cACA,QAAAk6D,EAAA9pC,EAAA3xB,IAAA,SAAAu/C,KAAAh+C,IAAA,KAGA,UAAA3O,GAAA,WAAAA,GAAA,6BAAA2wC,KAAAq7B,GACAhsE,EAAA,sBAGA,cAAAA,GAAA6U,EACAA,IAAAigB,QAAA,sBAGA,eAAA6b,KAAA04B,GACA,YAAAA,IACA2C,EAAA,MAEA,YAAA3C,GAAA,eAAA14B,KAAA82B,IACAmB,EAAA9c,QAAA,oBAIA,4BAAAnb,KAAA3wC,SAAAqpE,GAAA,eAAA14B,KAAA3wC,KACA,cAAAgsE,IAAA,QAAAr7B,KAAA82B,GAIA,SAAAznE,GAAA8oE,EACA,IACA,OAAA3rD,EAAA6wD,UACApF,EAAA9c,QAAA,oBAEO,MAAApyC,GACPkvD,EAAA9c,QAAA,iBAKA,iBAAAnb,KAAA04B,IAAA,WAAA14B,KAAA82B,MAAA94D,GACAu6D,OAAAG,EAAAv0C,QAAA,8BAAA63B,KAAA8a,IAAA,OACA5yD,IAGAm3D,IADAr9D,EAAA,CAAAA,EAAA,OAAAgiC,KAAA82B,KACA,IAAA4B,EAAA,KAAAE,EAAA,qCAAA56D,EAAA,GACAkG,EAAA,MAIA/D,MAAAq2D,GAAA,OAAAkC,IACAP,GAAAN,GACA,QAAA73B,KAAA3wC,IAAA,wBAAA2wC,KAAA82B,IACA,WAAAznE,GAAA,uBAAqD2wC,KAAAq7B,IACrD,MAAAhsE,IACAgsE,IAAA,OAAAr7B,KAAAq7B,IAAAn3D,EAAA,KACA,iBAAA87B,KAAAq7B,IAAAn3D,EAAA,GACA,GAAAA,IAAA,cAAA87B,KAAA82B,OAEAX,EAAAn2B,KAAAhiC,EAAA64D,EAAA5nE,KAAAunE,EAAAM,EAAA3yC,QAAAgyC,EAAA,WAAkFn4D,EAAA3O,OAElF2O,EAAA,UAAAA,EAAA3O,OAAA2O,IAAAkG,SAAA,IAAAlG,EAAA,IACAm4D,EAAAn2B,KAAA3wC,IACA,SAAA2wC,KAAAhiC,IAAA,UAAAq9D,IACAA,EAAA,MAEAr9D,EAAA,WAAAA,IAIAA,EAAA,OAAAA,EAEA3O,EADA0oE,EACAxB,EAAAwB,EAAA5zC,QAAA,4BAEA,QAEA,SAAA6b,KAAAhiC,KACAq9D,EAAA,MAEAlD,IACAj0D,EAAA,OAGAo+C,EAAA,WACA2V,EAAAh8D,KAAA+B,SA1DA3O,GAAA,WA6DA2O,GAAA,8BAAAg+C,KAAA8a,IAAA,SAGA94D,EAAA,CAAAo+D,WAAAp+D,EAAAmmB,QAAA,mBAAAnmB,GAEA,UAAA3O,GAAA,KAAA2O,EAAA,GAAA9E,OAAA,IACA7J,EAAA,iBACA6oE,EAAA,QACAh0D,EAAAlG,EAAA,GAAA9E,MAAA,OAGAgL,GAAAlG,EAAA,IACAkG,IAAAlG,EAAA,6BAAAg+C,KAAA8a,IAAA,SACA5yD,EAAA,MAGAlG,EAAA,0BAAAg+C,KAAA8a,IAAA,MAEA,QAAA94D,EAAA,YAAAA,EAAA,IAAAo+D,WAAAp+D,EAAA,mBAAAskD,IACAA,EAAA,WAIA6V,IAAAf,GAAAp5D,EAAA,KAIAskD,MAAA,kBACAtkD,IAAA,MAAAA,IAAA,UAAAA,EAAA,MAAAA,EAAA,SAAAA,EAAA,MAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,UAAAA,EAAA,SAAAA,EAAA,UAAAA,EAAA,aAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,SAAAA,EAAA,UAAAA,EAAA,aAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,UAAAA,EAAA,mBAAAskD,EAAA,aAJAA,MAAA,kBACAtkD,OAAA,UAAAA,EAAA,MAAAA,EAAA,MAAAA,EAAA,MAAAA,EAAA,SAAAA,EAAA,MAAAA,EAAA,MAAAA,EAAA,MAAAA,EAAA,WAMAskD,MAAA,SAAAtkD,GAAA,iBAAAA,EAAA,YAAAgiC,KAAAhiC,GAAA,SAEA,UAAA3O,KAAA6U,GAAAkR,SAAAlR,GAAA,MACAA,EAAAlG,IAIA,SAAA3O,IAAA2O,EAAA,eAAAg+C,KAAAqf,KACAhsE,GAAA,IACA4oE,EAAA9c,QAAA,gBACA,QAAAn9C,GACA3O,GAAA,OACA6U,EAAA,MAEA7U,GAAA,SAEAgsE,IAAAl3C,QAAAo0C,OAAA,KAAAv6D,EAAA,UAGA,UAAA3O,GAAA,aAAA2sD,KAAAsG,KAAA,MACA2V,EAAA9c,QAAA,gBACA9rD,EAAA,gBACA6U,EAAA,KAEA,WAAA87B,KAAAq7B,IACAzC,EAAA,QACAyC,EAAA,YAEAA,EAAA,MAIAn3D,GAAA,GAAAA,EAAAlI,QAAAgC,EAAA,UAAAg+C,KAAAqf,KACAvE,EAAA96D,QAAA,IAAAgC,EAAA,UACAq9D,EAAAn3C,EAAAm3C,EAAAl3C,QAAAnmB,EAAA,MAGAskD,IAAA,qBAAAtiB,KAAA3wC,KACA,4BAAA2wC,KAAA3wC,IACA,UAAAA,GAAA,OAAA2wC,KAAAq7B,IAAA,aAAAr7B,KAAAsiB,EAAA,KACA,yFAAAtiB,KAAA3wC,IAAAizD,EAAA,MAEAtkD,EAAAskD,IAAA/wD,OAAA,KAAA0mE,EAAAh8D,KAAA+B,GAGAi6D,EAAA1mE,SACA0mE,EAAA,KAAAA,EAAA59C,KAAA,MAA8C,MAG9Cu+C,GAAAF,KAAA18D,QAAA48D,GAAA,GACAX,EAAAh8D,KAAA,MAAA28D,GAGAF,GACAT,EAAAh8D,MAAA,OAAA+jC,KAAAi4B,IAAA1mE,OAAA,cAAAmnE,GAGA2C,IACAr9D,EAAA,cAAAg+C,KAAAqf,GACAlE,EAAAn5D,GAAA,KAAAq9D,EAAAhqD,OAAAgqD,EAAA9pE,OAAAyM,EAAA,GAAAzM,OAAA,GACA8pE,EAAA,CACAiC,aAAA,GACAC,OAAAv/D,IAAAm5D,EAAAkE,EAAAl3C,QAAAnmB,EAAA,OAAAq9D,EACAn3D,QAAAlG,IAAA,QACA4D,SAAA,WACA,IAAAsC,EAAA/D,KAAA+D,QACA,OAAA/D,KAAAo9D,QAAAr5D,IAAAizD,EAAA,IAAAjzD,EAAA,SAAA/D,KAAAm9D,aAAA,kBAKAt/D,EAAA,mCAAAg+C,KAAAgc,MAAA,YAAAh4B,KAAAg4B,IACAqD,IACAA,EAAAiC,aAAA,GACAjC,EAAAkC,OAAAlC,EAAAkC,OAAAp5C,QAAAo0C,OAAA,KAAAv6D,GAAA,KAGA3O,IAAA,aAAA2wC,KAAA82B,IACAqB,GAAA,eAAAn4B,KAAAg3B,EAAAwG,UAAAxG,EAAAllC,YAAA,kBAAyFkO,KAAA82B,KAEzFmB,EAAA9c,QAAA,WAKAkgB,GAAA,QAAAr7B,KAAAq7B,EAAAkC,SACA,UAAAluE,GAAA+sE,WAAAl4D,IAAA,KAEAm3D,EAAAiC,aAAA,IAGAxG,MAAA,MAUA,IAAAhlC,EAAA,GAoJA,OA5IAA,EAAAmmC,YAAAnB,EAWAhlC,EAAAwwB,YAAA,GAaAxwB,EAAA8mC,eAgBA9mC,EAAAziC,OAQAyiC,EAAAomC,aAaApmC,EAAA4mC,UAQA5mC,EAAAglC,KAQAhlC,EAAA5tB,QAAA7U,GAAA6U,EAQA4tB,EAAAupC,MAAA,CAQAiC,aAAA,KAaAC,OAAA,KAQAr5D,QAAA,KAQAtC,SAAA,WAA8B,eAG9BkwB,EAAA+kC,QACA/kC,EAAAlwB,SAljBA,WACA,OAAAzB,KAAA83D,aAAA,IAmjBAnmC,EAAA5tB,SACA+zD,EAAA9c,QAAAj3C,GAEA4tB,EAAAziC,MACA4oE,EAAA9c,QAAA9rD,GAEAgsE,GAAAhsE,IAAAgsE,GAAA3rD,OAAA2rD,GAAAv+D,MAAA,SAAAu+D,GAAAhsE,EAAAyN,MAAA,UAAA47D,IACAT,EAAAh8D,KAAAy8D,EAAA,IAAA2C,EAAA,UAAAA,GAEApD,EAAA1mE,SACAugC,EAAAmmC,cAAA59C,KAAA,MAEAyX,EAMA+kC,GAOA1oE,EAAA2jC,gBAKKz/B,KAFDsjE,EAAA,WACJ,OAAA7jC,GACK7iC,KAAAZ,EAAAQ,EAAAR,EAAAC,QAAAD,QAAAsnE,KAaJ1mE,KAAAkR,iDChsCD7R,EAAAD,QAAA,SAAAC,GAoBA,OAnBAA,EAAAmvE,kBACAnvE,EAAAovE,UAAA,aACApvE,EAAAiuD,MAAA,GAEAjuD,EAAAqvE,WAAArvE,EAAAqvE,SAAA,IACAnuE,OAAAC,eAAAnB,EAAA,UACAoB,YAAA,EACAC,IAAA,WACA,OAAArB,EAAAS,KAGAS,OAAAC,eAAAnB,EAAA,MACAoB,YAAA,EACAC,IAAA,WACA,OAAArB,EAAAI,KAGAJ,EAAAmvE,gBAAA,GAEAnvE,oRCjBA,IAAAw6D,EAAAj6D,EAAA,GACA+uE,EAAA/uE,EAAA,KACAgvE,EAAAhvE,EAAA,KACA20D,EAAA30D,EAAA,GAYAukE,EAAA,WAKE,SAAAA,EAAY/mD,EAAyBC,GAArC,IAAAzD,EAAA1I,KAHSA,KAAA29D,KAAkC,GAClC39D,KAAA49D,8BAA6E,GAGpF59D,KAAKqM,QAAU,IAAIs8C,EAAA18C,YAAYC,EAAWC,GAG1C9c,OAAO0e,KAAK2vD,EAAAG,cAAcvgE,QAAQ,SAACpO,GACjC,IAAM4uE,EAAM,IAAIJ,EAAAG,aAAa3uE,GAAMwZ,EAAK2D,SACxC3D,EAAKi1D,KAAKzuE,GAAQ4uE,IAIpB,IAAMrmE,EAAMuI,KAAK49D,8BACjB,IAAK,IAAMG,KAAW/9D,KAAK29D,KAAM,CAC/B,IACMK,EADMh+D,KAAK29D,KAAKI,GACIE,eAC1B,IAAK,IAAMC,KAAWF,EAAe,CACnC,IAAM9tE,EAAM6tE,EAAU,IAAMG,EACxBC,OAAW,EACX1mE,EAAIvH,IACNiuE,EAAc1mE,EAAIvH,IACNqc,YAAcyxD,EAAcE,GAAS3xD,aAEjD4xD,EAAc,IAAIxV,EAAAl8C,mBAAmBvc,EAAK8tE,EAAcE,GAAS3xD,aACjE9U,EAAIvH,GAAOiuE,GAEb,IAAM3xD,EAAewxD,EAAcE,GAAS1xD,aAC5C,GAAIA,EACF,IAAK,IAAIje,EAAI,EAAGA,EAAIie,EAAapb,SAAU7C,EACzC,GAAKkJ,EAAI+U,EAAaje,IAKpB4vE,EAAYzxD,cAAcjV,EAAI+U,EAAaje,SALlB,CACzB,IAAMoe,EAAO,IAAIg8C,EAAAl8C,mBAAmBD,EAAaje,IACjDkJ,EAAI+U,EAAaje,IAAMoe,EACvBwxD,EAAYzxD,cAAcC,MA2ExC,OAjEEsmD,EAAA1iE,UAAA4iE,WAAA,WACE,IAAMhnD,EAAcnM,KAAKqM,QAAQF,YAC7B9W,EAAS8W,EAAYs3C,aAWzB,OARKzjD,KAAKqM,QAAQF,YAAYu3C,UAC5BruD,EAAYA,EAAM,WAChBguD,EAAA1+C,yBAAyB3E,KAAKqM,QAAQH,UAAUnI,QAASoI,EAAYm3C,aAAavuD,MAAM3D,SAG5FiE,EAASooE,EAAAW,eAAe/oE,GAGdguD,EAAA3+C,sBAAsB1E,KAAKqM,QAAQH,UAAUnI,SAAQ,SAC7D/D,KAAKq+D,YAAYlyD,EAAYq3C,SAAUr3C,EAAYu9C,WAAU,SAC7D1pD,KAAKs+D,WAAWjpE,GAAO,SACvBA,GAGM49D,EAAA1iE,UAAA+tE,WAAV,SAAqBC,GACnB,IAAMC,EAAmBx+D,KAAKy+D,kCAAkCF,GAEhE,GAAgC,IAA5BC,EAAiBptE,OACnB,MAAO,GAIT,IADA,IAAIstE,EAAW,GACNnwE,EAAI,EAAGA,EAAIiwE,EAAiBptE,SAAU7C,EAAG,CAChD,IAAIiwE,EAAiBjwE,GAAGge,YAGtB,MAAM,IAAI9W,MAAM,8CAA8C+oE,EAAiBjwE,GAAGW,MAFlFwvE,GAAYF,EAAiBjwE,GAAGge,YAAc,KAMlD,OAAOmyD,GAEDzL,EAAA1iE,UAAAkuE,kCAAR,SAA0CF,GAA1C,IAAA71D,EAAA1I,KACQ8M,EAA8B,GASpC,OAPAzd,OAAO0e,KAAK/N,KAAK49D,+BAA+BtgE,QAAQ,SAAAqhE,GACtD,IAAMT,EAAUS,EAAgBhiE,MAAM,KAAK,IACV,IAA7B4hE,EAAO1iE,QAAQqiE,IACjBpxD,EAAMhR,KAAK4M,EAAKk1D,8BAA8Be,MAI3ChW,EAAA/7C,4BAA4BC,mBAAmBC,IAG9CmmD,EAAA1iE,UAAA8tE,YAAV,SAAsB7a,EAAqBkG,eACnCkV,EAAyB,GAC/B,GAAIpb,MACF,IAAsB,IAAAwR,EAAAp6D,EAAA4oD,GAAQyR,EAAAD,EAAAl6D,QAAAm6D,EAAAl6D,KAAAk6D,EAAAD,EAAAl6D,OAAE,CAA3B,IAAMo6D,EAAOD,EAAArlE,MAChBgvE,EAAa9iE,KAAK,qBAAqBo5D,EAAO,uGAGlD,GAAIxL,MACF,IAAuB,IAAA0L,EAAAx6D,EAAA8uD,GAAS2L,EAAAD,EAAAt6D,QAAAu6D,EAAAt6D,KAAAs6D,EAAAD,EAAAt6D,OAAE,CAA7B,IAAMw6D,EAAQD,EAAAzlE,MACjBgvE,EAAa9iE,KACT,WAAWw5D,EAASphE,KAAI,IAAIohE,EAASpmE,MAAOomE,EAAS3L,YAAc,IAAI2L,EAAS3L,YAAW,IAAM,IAAE,uGAG3G,OAAOiV,EAAa1kD,KAAK,OAE7B+4C,EA9GA,GAAa/kE,EAAA+kE,kGCfb,IAAM4L,EACF,qFACEC,EAAkB,6DAIxB5wE,EAAAkwE,eAAA,SAA+BG,GAG7B,IAFA,IACIz+C,EADEi/C,EAAiG,GAE/C,QAAhDj/C,EAAQ++C,EAAsBhjB,KAAK0iB,KAAmB,CAC5D,IAAM/yD,EAASsU,EAAM,GACDnjB,MAAM,KACNlF,IAAI,SAAA/G,GACH,IAAMsuE,EAAStuE,EAAEqzB,OAAOpnB,MAAM,KAC9B,OAAIqiE,GAA4B,IAAlBA,EAAO5tE,OACZ,CAAC8C,KAAM8qE,EAAO,GAAI9vE,KAAM8vE,EAAO,IAEjC,OAER3gE,OAAO,SAAAlE,GAAK,OAAM,OAANA,IAChC4kE,EAAWj/C,EAAM,IAAM,CAACtU,OAAMA,EAAEy9C,KAAMnpC,EAAM,IAE9C,IAAK,IAAMy0C,KAAQwK,EAGjB,IAFA,IAAME,EAAcH,EAAgB96C,QAAQ,WAAYuwC,GAClD2K,EAAQ,IAAI9G,OAAO6G,EAAa,mBAEpC,IAAM/qE,EAAO4rB,EAAM,GACbw1C,EAAWx1C,EAAM,GACjBtU,EAASsU,EAAM,GAAGnjB,MAAM,KACxBwiE,EAAW,EAAYjrE,EAAI,IAAIohE,EAAQ,IAAM,GAC/C8J,EAAkBL,EAAWxK,GAAMtL,KACnCoW,EAAiB,GACrBN,EAAWxK,GAAM/oD,OAAOlO,QAAQ,SAACnD,EAAG5L,GAC9B4L,IACFklE,GAAqBllE,EAAEjG,KAAI,IAAIiG,EAAEjL,KAAI,MAAMsc,EAAOjd,GAAE,SAKxD,IAAM+pD,EAAc,WAClB6mB,EAAQ,uBAFVC,GADAA,EAAaC,EAAc,MAAMD,GACfp7C,QAAQ,SAAasxC,EAAQ,QAIpC,oBAGXiJ,EAASA,EAAOv6C,QAAQlE,EAAM,GAAIw4B,IApBI,QAAhCx4B,EAAQo/C,EAAMrjB,KAAK0iB,SAwB7B,OADAA,EAASA,EAAOv6C,QAAQ66C,EAAuB,oFChDjD,IAAAS,EAAA5wE,EAAA,KAEA6wE,EAAA7wE,EAAA,KACA8wE,EAAA9wE,EAAA,KACA+wE,EAAA/wE,EAAA,KACAgxE,EAAAhxE,EAAA,KAEaR,EAAA2vE,aAAwE,CACnF7rD,SAAYutD,EAAAI,gBACZC,UAAaJ,EAAAK,iBACbC,IAAOJ,EAAAK,WACPC,WAAcP,EAAAQ,kBACdC,YAAeZ,EAAAa,kpBCZjB,IAAAxX,EAAAj6D,EAAA,GACA20D,EAAA30D,EAAA,GAMAyxE,EAAA,SAAAj1D,GAGE,SAAAi1D,EAAY9zD,UACVnB,EAAApc,KAAAkR,KAAMqM,IAAQrM,KA0HlB,OA9HmCmL,EAAAg1D,EAAAj1D,GAMjCi1D,EAAA5vE,UAAA0tE,aAAA,WACE,OAAAtb,EAAA,GAAW3iD,KAAKogE,iBAAqBpgE,KAAKqgE,iBAAqBrgE,KAAKsgE,QAAYtgE,KAAKugE,cAEvFJ,EAAA5vE,UAAAiwE,eAAA,WACE,MAAO,IAMCL,EAAA5vE,UAAA6vE,eAAV,WAEE,MAAO,CACLA,eAAgB,IAAIzX,EAAAr8C,eAAe,6PAc7B6zD,EAAA5vE,UAAA8vE,eAAV,WAEE,MAAO,CACLA,eAAgB,IAAI1X,EAAAr8C,eAAe,uPAgB7B6zD,EAAA5vE,UAAA+vE,MAAV,WAQE,IAPA,IAAMl8D,EAASpE,KAAKqM,QAAQF,YAAYm3C,aAClC1qD,EAAOwL,EAAOrP,MAAM3D,OACpByH,EAAUuL,EAAOvL,QACjB4nE,EAASr8D,EAAOsU,MAChBgoD,EAASt8D,EAAOqU,OAEhBkoD,EAAe,GACZpyE,EAAI,EAAGA,EAAIqK,EAAO,IAAKrK,EAC9BoyE,EAAa7kE,KAAK,eACZvN,EAAC,gBAAgBsK,EAAQtK,GAAE,KACjCoyE,EAAa7kE,KAAK,yBACFvN,EAAC,OAAOsK,EAAQtK,GAAE,KAEpCoyE,EAAa7kE,KAAK,gBACVlD,EAAO,GAAC,eAChB,IAAMqwD,EAAO,gDAC4BrwD,EAAI,wDACA6nE,EAAM,KAAKC,EAAM,eACxDC,EAAazmD,KAAK,IAAG,qDAEUthB,EAAI,iBACnC+nE,EAAazmD,KAAK,IAAG,kBAG3B,MAAO,CAAComD,MAAO,IAAI3X,EAAAr8C,eAAe28C,EAAM,CAAC,iCAQjCkX,EAAA5vE,UAAAgwE,UAAV,eAAA73D,EAAA1I,KACQmM,EAAcnM,KAAKqM,QAAQF,YAC3Be,EAA2C,GAcjD,OAbAlN,KAAKqM,QAAQF,YAAYq3C,SAASlmD,QAAQ,SAACpO,EAAMX,GAC/C,IAAM4zD,EAASh2C,EAAYo3C,aAAah1D,GAElCqK,EADQupD,EAAOptD,MACF3D,OACfwvE,EAAW,IAAI1xE,EACnBge,EAAO0zD,GAAY,IAAIjY,EAAAr8C,eACnB5D,EAAKm4D,mBAAmB3xE,EAAM0J,EAAMupD,EAAOzpC,MAAOypC,EAAO1pC,QAAQ,GACjE,CAAC,6BAA6BmoD,EAAY,6BAA8B,8BAE5E1zD,EADA0zD,GAAsB,MACH,IAAIjY,EAAAr8C,eACnB5D,EAAKm4D,mBAAmB3xE,EAAM0J,EAAMupD,EAAOzpC,MAAOypC,EAAO1pC,QAAQ,GACjE,CAAC,6BAA6BmoD,EAAY,6BAA8B,gCAEvE1zD,GASCizD,EAAA5vE,UAAAswE,mBAAV,SAA6BC,EAAiBloE,EAAc8f,EAAeD,EAAgB3f,GAEzF,IAAI5J,EAAO,IAAI4xE,EAKf,OAJIhoE,IACF5J,GAAc,MAGT,mBACKA,EAAI,UAAU0J,EAAI,+CACM1J,EAAI,wDACKwpB,EAAK,KAAKD,EAAM,+CAJhD4qC,EAAA9+C,QAAQvE,KAAKqM,QAAQH,UAAUnI,SAKDI,UAAS,IAAI28D,EAAO,6DAKnEX,EA9HA,CAAmCxX,EAAAv8C,SAAtBle,EAAAiyE,mpBCPb,IAAAxX,EAAAj6D,EAAA,GAMAixE,EAAA,SAAAz0D,GACE,SAAAy0D,EAAYtzD,UACVnB,EAAApc,KAAAkR,KAAMqM,IAAQrM,KAuFlB,OAzFqCmL,EAAAw0D,EAAAz0D,GAInCy0D,EAAApvE,UAAA0tE,aAAA,WACE,OAAAtb,EAAA,GAAW3iD,KAAK+gE,gBAAoB/gE,KAAKghE,kBAE3CrB,EAAApvE,UAAAiwE,eAAA,WACE,MAAO,IAECb,EAAApvE,UAAAwwE,cAAV,WACE,MAAO,CACLptD,OAAQ,IAAIg1C,EAAAr8C,eAAe,mGAMrBqzD,EAAApvE,UAAAywE,cAAV,WACE,MAAO,CACL3sD,OAAQ,IAAIs0C,EAAAr8C,eAAe,sFAUrBqzD,EAAApvE,UAAA0wE,YAAV,WACE,IAAMC,EAAavB,EAAgBwB,iBAAmB,uBAAyB,GAC/E,MAAO,CACLxtD,OAAQ,IAAIg1C,EAAAr8C,eAAe,kmBAYvB40D,EAAU,oHAWRvB,EAAApvE,UAAA6wE,YAAV,WACE,IAAMF,EAAavB,EAAgBwB,iBAAmB,uBAAyB,GAC/E,MAAO,CACL9sD,OAAQ,IAAIs0C,EAAAr8C,eAAe,uJAGrB40D,EAAU,uYAcbvB,EAAAwB,eAAP,WACE,IAAMlvE,EAAI,IAAIsO,YAAY,GACpBjS,EAAI,IAAIyU,YAAY9Q,GACpBjD,EAAI,IAAI0T,WAAWzQ,GAEzB,GADA3D,EAAE,GAAK,WACM,MAATU,EAAE,GACJ,OAAO,EAET,GAAa,MAATA,EAAE,GACJ,OAAO,EAET,MAAM,IAAIyG,MAAM,uBAEpBkqE,EAzFA,CAAqChX,EAAAv8C,SAAxBle,EAAAyxE,qpBCNb,IAAAhX,EAAAj6D,EAAA,GACA20D,EAAA30D,EAAA,GAOAmxE,EAAA,SAAA30D,GACE,SAAA20D,EAAYxzD,UACVnB,EAAApc,KAAAkR,KAAMqM,IAAQrM,KA+BlB,OAjCsCmL,EAAA00D,EAAA30D,GAIpC20D,EAAAtvE,UAAA0tE,aAAA,WACE,OAAAtb,EAAA,GAAW3iD,KAAKqhE,eAAmBrhE,KAAKshE,oBAE1CzB,EAAAtvE,UAAAiwE,eAAA,WACE,MAAO,IAECX,EAAAtvE,UAAA8wE,aAAV,WACE,IAAM58D,EAAO4+C,EAAA9+C,QAAQvE,KAAKqM,QAAQH,UAAUnI,SAC5C,MAAO,CACLs9D,aAAc,IAAI1Y,EAAAr8C,eACd,2DAEI7H,EAAKL,OAAM,yCAGf,CAAC,sBAGCy7D,EAAAtvE,UAAA+wE,gBAAV,WACE,MAAO,CACLA,gBAAiB,IAAI3Y,EAAAr8C,eACjB,wGAKA,CAAC,sBAGXuzD,EAjCA,CAAsClX,EAAAv8C,SAAzBle,EAAA2xE,spBCRb,IAAAlX,EAAAj6D,EAAA,GAMAuxE,EAAA,SAAA/0D,GACE,SAAA+0D,EAAY5zD,UACVnB,EAAApc,KAAAkR,KAAMqM,IAAQrM,KA+JlB,OAjKuCmL,EAAA80D,EAAA/0D,GAIrC+0D,EAAA1vE,UAAA0tE,aAAA,WACE,OAAAtb,EAAA,GACK3iD,KAAKuhE,aACLvhE,KAAKwhE,mBACLxhE,KAAK7G,kBACL6G,KAAK/G,kBACL+G,KAAKyhE,qBAGZxB,EAAA1vE,UAAAiwE,eAAA,WACE,MAAO,IAECP,EAAA1vE,UAAAgxE,WAAV,WACE,IAAMp1D,EAAcnM,KAAKqM,QAAQF,YAC3B08C,EAAa18C,EAAYm3C,aAAavuD,MAAM3D,OAC5C8b,EAA2C,GAqBjD,OApBAlN,KAAKqM,QAAQF,YAAYq3C,SAASlmD,QAAQ,SAACpO,EAAMX,GAC/C,IAAMwG,EAAQoX,EAAYo3C,aAAah1D,GAAGwG,MAC1C,GAAIA,EAAM3D,QAAUy3D,EAAY,CAK9B,IAJA,IAAMjwD,EAAO7D,EAAM3D,OACbqC,EAAYo1D,EAAajwD,EACzBgoE,EAAW,gBAAgB1xE,EAC7Bm/D,EAAQ,GACHqT,EAAI,EAAGA,EAAI9oE,IAAQ8oE,EAC1BrT,GAAS,2BACKqT,EAAC,sCAAqCjuE,EAAYiuE,GAAC,OAAO3sE,EAAM2sE,GAAE,qBAGlF,IAAMzY,EAAO,kBACN2X,EAAQ,wBAAwB/X,EAAU,0BAA0BjwD,EAAI,mBAC3Ey1D,EAAK,wBAGTnhD,EAAO0zD,GAAY,IAAIjY,EAAAr8C,eAAe28C,MAGnC/7C,GAEC+yD,EAAA1vE,UAAAixE,iBAAV,WACE,IAAMr1D,EAAcnM,KAAKqM,QAAQF,YAC3B08C,EAAa18C,EAAYm3C,aAAavuD,MAAM3D,OAC5C8b,EAA2C,GAuBjD,OAtBAlN,KAAKqM,QAAQF,YAAYq3C,SAASlmD,QAAQ,SAACpO,EAAMX,GAC/C,IAAMwG,EAAQoX,EAAYo3C,aAAah1D,GAAGwG,MAC1C,KAAMA,EAAM3D,OAAS,GAAK2D,EAAM3D,OAASy3D,GAAa,CAKpD,IAJA,IAAMjwD,EAAO7D,EAAM3D,OACbqC,EAAYo1D,EAAajwD,EACzBgoE,EAAW,sBAAsB1xE,EACnCm/D,EAAQ,GACHsT,EAAI,EAAGA,EAAI/oE,EAAO,IAAK+oE,EAC9BtT,GAAS,2BACKsT,EAAC,sCAAqCluE,EAAYkuE,GAAC,OAAO5sE,EAAM4sE,GAAE,qBAGlF,IAAM1Y,EAAO,kBACN2X,EAAQ,uBAAuB/X,EAAU,0BAA0BjwD,EAAI,mBAC1Ey1D,EAAK,4BACOz1D,EAAO,GAAC,uBAAsBiwD,EAAa,GAAC,8BAC5CjwD,EAAO,GAAC,uBAAsBiwD,EAAa,GAAC,0BAG5D37C,EAAO0zD,GAAY,IAAIjY,EAAAr8C,eAAe28C,MAGnC/7C,GAEC+yD,EAAA1vE,UAAA0I,gBAAV,WACE,IAAMkT,EAAcnM,KAAKqM,QAAQF,YAC3Be,EAA2C,GAWjD,OAVAlN,KAAKqM,QAAQF,YAAYq3C,SAASlmD,QAAQ,SAACpO,EAAMX,GAC/C,IAAMwG,EAAQoX,EAAYo3C,aAAah1D,GAAGwG,MACpC8D,EAAUsT,EAAYo3C,aAAah1D,GAAGsK,QACtCD,EAAO7D,EAAM3D,OACfwvE,EAAW,mBAAmB1xE,EAClCge,EAAO0zD,GAAY,IAAIjY,EAAAr8C,eAAe2zD,EAAkB2B,oBAAoBhB,EAAUhoE,EAAMC,IAE5FqU,EADA0zD,EAAW,mBAAmB1xE,EAAI,MAE9B,IAAIy5D,EAAAr8C,eAAe2zD,EAAkB2B,oBAAoBhB,EAAUhoE,EAAMC,EAAQE,QAAQC,cAExFkU,GAEF+yD,EAAA2B,oBAAP,SAA2B1yE,EAAc0J,EAAcC,GAErD,IADA,IAAIw1D,EAAQ,GACH9/D,EAAIqK,EAAO,EAAGrK,GAAK,IAAKA,EAC/B8/D,GAAS,+BACa9/D,EAAC,OAAOsK,EAAQtK,GAAE,cAG1C,MAAO,eACCW,EAAI,gBAAgB0J,EAAI,0CAE1By1D,EAAK,6CAKH4R,EAAA1vE,UAAA4I,gBAAV,WACE,IAAMgT,EAAcnM,KAAKqM,QAAQF,YAC3Be,EAA2C,GAWjD,OAVAlN,KAAKqM,QAAQF,YAAYq3C,SAASlmD,QAAQ,SAACpO,EAAMX,GAC/C,IAAMwG,EAAQoX,EAAYo3C,aAAah1D,GAAGwG,MACpC8D,EAAUsT,EAAYo3C,aAAah1D,GAAGsK,QACtCD,EAAO7D,EAAM3D,OACfwvE,EAAW,mBAAmB1xE,EAClCge,EAAO0zD,GAAY,IAAIjY,EAAAr8C,eAAe2zD,EAAkB4B,sBAAsBjB,EAAUhoE,EAAMC,IAE9FqU,EADA0zD,EAAW,mBAAmB1xE,EAAI,MAE9B,IAAIy5D,EAAAr8C,eAAe2zD,EAAkB4B,sBAAsBjB,EAAUhoE,EAAMC,EAAQE,QAAQC,cAE1FkU,GAEF+yD,EAAA4B,sBAAP,SAA6B3yE,EAAc0J,EAAcC,GAEvD,IADA,IAAM8nE,EAAe,GACZpyE,EAAI,EAAGA,EAAIqK,EAAO,IAAKrK,EAC9BoyE,EAAa7kE,KAAK,mBACRvN,EAAC,gBAAgBsK,EAAQtK,GAAE,KACrCoyE,EAAa7kE,KAAK,+BACIvN,EAAC,OAAOsK,EAAQtK,GAAE,KAI1C,OAFAoyE,EAAa7kE,KAAK,oBACNlD,EAAO,GAAC,eACb,gBACE1J,EAAI,gCAAgC0J,EAAI,iBAC3C+nE,EAAazmD,KAAK,IAAG,qBAInB+lD,EAAA1vE,UAAAkxE,iBAAV,WACE,IAAMt1D,EAAcnM,KAAKqM,QAAQF,YAC3Be,EAA2C,GA0BjD,OAzBAlN,KAAKqM,QAAQF,YAAYq3C,SAASlmD,QAAQ,SAACpO,EAAMX,GAK/C,IAJA,IAAMwG,EAAQoX,EAAYo3C,aAAah1D,GAAGwG,MACpC6D,EAAO7D,EAAM3D,OACbwvE,EAAW,oBAAoB1xE,EACjC4yE,EAAY,GACPC,EAAI,EAAGA,EAAInpE,IAAQmpE,EAC1BD,GAAa,mBACLC,EAAC,OAAOhtE,EAAMgtE,GAAE,IAE1B,IAAM9Y,EAAO,kBACJ2X,EAAQ,8BAA8BhoE,EAAI,6BACnCA,EAAI,iBACdkpE,EAAS,4BACGlpE,EAAI,sOAUtBsU,EAAO0zD,GAAY,IAAIjY,EAAAr8C,eAAe28C,KAEjC/7C,GAEX+yD,EAjKA,CAAuCtX,EAAAv8C,SAA1Ble,EAAA+xE,upBCNb,IAAAtX,EAAAj6D,EAAA,GAOAqxE,EAAA,SAAA70D,GACE,SAAA60D,EAAY1zD,UACVnB,EAAApc,KAAAkR,KAAMqM,IAAQrM,KAoGlB,OAtGgCmL,EAAA40D,EAAA70D,GAI9B60D,EAAAxvE,UAAAiwE,eAAA,WACE,MAAO,IAETT,EAAAxvE,UAAA0tE,aAAA,WACE,OAAAtb,EAAA,GAAW3iD,KAAKgiE,qBAAyBhiE,KAAKiiE,UAAcjiE,KAAKkiE,aAAiBliE,KAAKmiE,eAE/EpC,EAAAxvE,UAAAyxE,mBAAV,WACE,IACMppE,EADeoH,KAAKqM,QAAQF,YAAYm3C,aACpBvuD,MAAM3D,OAC1BgxE,EAAoC,CAAC70D,IAAK,KAAMuV,IAAK,KAAMtmB,IAAK,KAAM+pB,IAAK,MAC3ErZ,EAA4C,GAClD,IAAK,IAAMqnD,KAAQ6N,EAAQ,CAGzB,IAFA,IAAMjZ,EAAWoL,EAAI,MACjB8N,EAAkB,GACb9zE,EAAI,EAAGA,EAAIqK,IAAQrK,EAC1B8zE,GAAmB,oBACV9zE,EAAC,KAAK6zE,EAAO7N,GAAK,QAAQhmE,EAAC,iBAGtC,IAAM06D,EAAO,kBACJE,EAAK,YAAYvwD,EAAI,mBAAmBA,EAAI,mBAC/CypE,EAAe,wBAGrBn1D,EAAOi8C,GAAS,IAAIR,EAAAr8C,eAAe28C,GAGrC,OAAO/7C,GAEC6yD,EAAAxvE,UAAA0xE,QAAV,WAIE,IAHA,IACMrpE,EADeoH,KAAKqM,QAAQF,YAAYm3C,aACpBvuD,MAAM3D,OAC5BixE,EAAkB,GACb9zE,EAAI,EAAGA,EAAIqK,IAAQrK,EAC1B8zE,GAAmB,kBACV9zE,EAAC,WAAWA,EAAC,eAGxB,IAAM06D,EAAO,gCACYrwD,EAAI,mBAAmBA,EAAI,iBAC9CypE,EAAe,oBAGrB,MAAO,CAACJ,QAAS,IAAItZ,EAAAr8C,eAAe28C,KAG5B8W,EAAAxvE,UAAA2xE,WAAV,WASE,IARA,IACMtpE,EADeoH,KAAKqM,QAAQF,YAAYm3C,aACpBvuD,MAAM3D,OAC5Bi9D,EAAQ,+CAEKz1D,EAAI,0EAIZrK,EAAI,EAAGA,EAAIqK,EAAO,IAAKrK,EAC9B8/D,GAAS,+BACa9/D,EAAC,oBACbA,EAAC,2BAOb,IAAM06D,EAAO,qCACiBrwD,EAAI,wCALlCy1D,GAAS,kCAEGz1D,EAAO,GAAC,wBAIT,sBAGX,MAAO,CAACspE,WAAY,IAAIvZ,EAAAr8C,eAAe28C,KAE/B8W,EAAAxvE,UAAA4xE,WAAV,WASE,IARA,IACMvpE,EADeoH,KAAKqM,QAAQF,YAAYm3C,aACpBvuD,MAAM3D,OAC5Bi9D,EAAQ,gDAEMz1D,EAAI,uEAIbrK,EAAI,EAAGA,EAAIqK,EAAO,IAAKrK,EAC9B8/D,GAAS,+BACa9/D,EAAC,2BACNA,EAAC,aAOpB,IAAM06D,EAAO,gCACYrwD,EAAI,6BAL7By1D,GAAS,yCAEUz1D,EAAO,GAAC,gBAIhB,kBAGX,MAAO,CAACupE,WAAY,IAAIxZ,EAAAr8C,eAAe28C,KAE3C8W,EAtGA,CAAgCpX,EAAAv8C,SAAnBle,EAAA6xE,4FCPb,IAAA32D,EAAA1a,EAAA,GAiBA6xD,EAAA,WACE,SAAAA,EAAmBC,GAAAxgD,KAAAwgD,iBAoCrB,OAnCED,EAAAhwD,UAAAwyD,iBAAA,SAAiBhuD,EAA8B+tD,GAE7C,GAAqB,IAAjB/tD,EAAM3D,OACR,MAAO,CAAC,EAAG,GAEb,IAAMovD,EAAiBxgD,KAAKwgD,eAC5B,GAAIsC,EAAO,CAET,IAAMwf,EAAQxf,EAAMsJ,WAAar3D,EAAM3D,OAAS,EAAI2D,EAAMgE,MAAM+pD,EAAMsJ,WAAWhxD,OAAO,SAAC9M,EAAG2D,GAAM,OAAA3D,EAAI2D,IAChGswE,EAAQzf,EAAMsJ,WAAa,EAAI,EAAIr3D,EAAMgE,MAAM,EAAG+pD,EAAMsJ,WAAWhxD,OAAO,SAAC9M,EAAG2D,GAAM,OAAA3D,EAAI2D,IAC9F,KAAIqwE,EAAQ9hB,GAAkB+hB,EAAQ/hB,GAOpC,MAAO,CAAC8hB,EAAOC,GAJfn5D,EAAAxC,OAAOtB,QACH,gBACA,2DAA2DvQ,EAAK,eAAe+tD,EAAMsJ,WAS7F,IAJA,IAAMoW,EAAYztE,EAAMqG,OAAO,SAAC9M,EAAG2D,GAAM,OAAA3D,EAAI2D,IAEzCymB,EAAQ/lB,KAAKkC,MAAMlC,KAAKmkC,KAAK0rC,IAE1B9pD,EAAQ8nC,GAAkB9nC,EAAQ8pD,GACnCA,EAAY9pD,GAAU,EADwBA,KAMpD,GAAIA,GAAS8nC,GAAkBgiB,EAAY9pD,GAAU,EACnD,MAAM,IAAIjjB,MAAM,2DAA4DV,GAE9E,MAAO,CAAC2jB,EAAO8pD,EAAY9pD,IAE/B6nC,EArCA,GAAaryD,EAAAqyD,gHCjBb,IAAAn3C,EAAA1a,EAAA,GAsBAgyD,EAAA,WAKE,SAAAA,EACWx0C,EAAgCo0C,EAA8ChjB,EAC7E/2B,GADDvG,KAAAkM,YAAgClM,KAAAsgD,iBAA8CtgD,KAAAs9B,WAC7Et9B,KAAAuG,SACNA,EAAOo6C,gBACT3gD,KAAKyiE,cAAgB,IAAI5hB,IACzB7gD,KAAK0iE,aAAe,IAAI7hB,IACxB7gD,KAAK2iE,cAAgB,IAAI9hB,KA+J/B,OA5JEH,EAAAnwD,UAAAkyD,wBAAA,SACIxhD,EAA2BkhD,EAAuBtkD,EAA0B2kD,GAC9E,IAIItyD,EACAuyE,EALEG,EAAkB5iE,KAAK6iE,cAAc5hE,GAErC0iD,EAAU3jD,KAAKkM,UAAU03C,WAAWgf,EAAiBzgB,EAAO7pC,UAAY,EAAGkqC,GAIjF,GAAIxiD,KAAKuG,OAAOo6C,cAAe,CAC7BzwD,EAASiyD,EAAOzpC,MAAK,IAAIypC,EAAO1pC,OAAM,IAAIkrC,EAAQyS,OAAM,IAAIzS,EAAQmf,eAAc,IAAInf,EAAQof,aAC9FN,EAAgBziE,KAAKyiE,cAAcjzE,IAAIU,MAErCuyE,EAAgB,GAChBziE,KAAKyiE,cAActuE,IAAIjE,EAAKuyE,IAG9B,IAAMC,EAAe1iE,KAAK0iE,aAAalzE,IAAIU,GAC3C,GAAIwyE,GAAgBA,EAAatxE,OAAS,EAAG,CAC3C,IAAM4xE,EAAUN,EAAa3wE,MAM7B,OALA0wE,EAAc3mE,KAAKknE,GACV,IAALxgB,GACFxiD,KAAKkM,UAAU+2D,cACXD,EAAS7gB,EAAOzpC,MAAOypC,EAAO1pC,OAAQkrC,EAAS3jD,KAAKkjE,cAAcjiE,EAAUpD,IAE3EmlE,GAIX55D,EAAAxC,OAAOtB,QAAQ,iBAAkB,gCAAgC68C,EAAOzpC,MAAK,IAAIypC,EAAO1pC,QACxF,IAAMI,EACF7Y,KAAKkM,UAAU23C,gBAAgB1B,EAAOzpC,MAAOypC,EAAO1pC,OAAQkrC,EAAS3jD,KAAKkjE,cAAcjiE,EAAUpD,IAMtG,OAJImC,KAAKuG,OAAOo6C,gBACd8hB,EAAe3mE,KAAK+c,GACpB7Y,KAAK2iE,cAAcxuE,IAAI0kB,EAAS3oB,IAE3B2oB,GAET6nC,EAAAnwD,UAAAqyD,YAAA,SAAYpB,EAAiBvgD,EAA2BqX,GAAxD,IAAA5P,EAAA1I,KAIE,OAHKsY,IACHA,EAAW,GAENtY,KAAKs9B,SAASt1B,MAAM,UAAW,6BAA8B,WAClE,IAAMg/B,EAAWwa,EAAGzsD,MAAMqG,OAAO,SAAC9M,EAAG2D,GAAM,OAAA3D,EAAI2D,IAAKqmB,EAC9Cza,EAAO6K,EAAKwD,UAAU02C,YACxBpB,EAAG3oC,QAAS2oC,EAAG9oC,MAAO8oC,EAAG/oC,OAAQuuB,EAAUt+B,EAAKm6D,cAAc5hE,GAAWqX,GAC7E,OAAO5P,EAAKy6D,aAAaliE,EAAUpD,MAGvC6iD,EAAAnwD,UAAA6yD,wBAAA,SAAwB5B,GAAxB,IAAA94C,EAAA1I,KACE,OAAOA,KAAKs9B,SAASt1B,MAAM,UAAW,yCAA0C,WAC9E,IAAMg/B,EAAWwa,EAAGzsD,MAAMqG,OAAO,SAAC9M,EAAG2D,GAAM,OAAA3D,EAAI2D,IACzC4L,EAAO6K,EAAKwD,UAAU02C,YAAYpB,EAAG3oC,QAAS2oC,EAAG9oC,MAAO8oC,EAAG/oC,OAAmB,EAAXuuB,EAAc,OAAQ,GAC/F,OAAO,IAAIhkC,aAAanF,EAAKyD,OAAQzD,EAAK0D,WAAYylC,MAG1D0Z,EAAAnwD,UAAAkxD,eAAA,SAAeH,EAA0B8hB,GACvC,IAAIlzE,EACJ,GAAI8P,KAAKuG,OAAOo6C,gBACdzwD,EAAM8P,KAAK2iE,cAAcnzE,IAAI8xD,EAAYzoC,UAChC,CACHuqD,GACFpjE,KAAK2iE,cAAcn1D,OAAOtd,GAE5B,IAAMuyE,EAAgBziE,KAAKyiE,cAAcjzE,IAAIU,GAC7C,GAAIuyE,EAAe,CACjB,IAAMrvE,EAAQqvE,EAAc5mE,QAAQylD,EAAYzoC,SAChD,IAAe,IAAXzlB,EAAc,CAChBqvE,EAAc3wE,OAAOsB,EAAO,GAC5B,IAAIsvE,EAAe1iE,KAAK0iE,aAAalzE,IAAIU,GACpCwyE,IACHA,EAAe,GACf1iE,KAAK0iE,aAAavuE,IAAIjE,EAAKwyE,IAE7BA,EAAa5mE,KAAKwlD,EAAYzoC,WAMjC3oB,IAAOkzE,IACVh6D,EAAAxC,OAAOtB,QAAQ,iBAAkB,4BAA4Bg8C,EAAY5oC,MAAK,IAAI4oC,EAAY7oC,QAC9FzY,KAAKkM,UAAUk3D,cAAc9hB,EAAYzoC,WAG7C6nC,EAAAnwD,UAAA4yE,aAAA,SAAaliE,EAA2BpD,GACtC,OAAQA,EAAKuC,cAAgB4C,aAAgBnF,EAAuB,IAAImF,aAAanF,IAyBvF6iD,EAAAnwD,UAAA2yE,cAAA,SAAcjiE,EAA2BpD,GACvC,GAAKA,EAGL,OAAQA,EAAKuC,cAAgB4C,aAAgBnF,EAAuB,IAAImF,aAAanF,IAoBvF6iD,EAAAnwD,UAAAsyE,cAAA,SAAc5hE,GACZ,MAAO,SAiBTy/C,EAAAnwD,UAAAgxD,oBAAA,WACEvhD,KAAKkM,UAAUq1C,uBAEnBb,EA1KA,GAAaxyD,EAAAwyD,gGCtBb,IAAAt3C,EAAA1a,EAAA,GAEA20E,EAAA30E,EAAA,KAEMqR,EAA6C,GAuCnD,SAAgBujE,EAAsBzjB,GACpC,IAUIqL,EAVEqY,EAsCR,WACE,IAAMA,EAA4BzzB,SAAS0zB,cAAc,UAGzD,OAFAD,EAAO7qD,MAAQ,EACf6qD,EAAO9qD,OAAS,EACT8qD,EA1CQE,GAWTC,EAV4C,CAChDpnE,OAAO,EACPqnE,OAAO,EACPC,WAAW,EACXC,SAAS,EACTC,uBAAuB,EACvBC,oBAAoB,EACpBC,8BAA8B,GAIhC,KAAKnkB,GAA2B,WAAdA,KAChBqL,EAAKqY,EAAOU,WAAW,SAAUP,IAE/B,IACE,OAAO,IAAIL,EAAAa,aAAahZ,EAAI,GAC5B,MAAOlgD,GACP5B,EAAAxC,OAAOpB,QAAQ,mBAAoB,kEAAkEwF,GAI3G,KAAK60C,GAA2B,UAAdA,KAChBqL,EAAKqY,EAAOU,WAAW,QAASP,IAAOH,EAAOU,WAAW,qBAAsBP,IAE7E,IACE,OAAO,IAAIL,EAAAa,aAAahZ,EAAI,GAC5B,MAAOlgD,GACP5B,EAAAxC,OAAOpB,QACH,mBACA,yFAAyFwF,GAKnG,MAAM,IAAIvV,MAAM,0BApElBvH,EAAA0xD,mBAAA,SAAgBA,EAAmBC,GACjC,IAAIxzC,IACEwzC,GAA2B,WAAdA,IAA2B,WAAY9/C,EACxDsM,EAAUtM,EAAMokE,SACLtkB,GAA2B,UAAdA,IAA0B,UAAW9/C,IAC7DsM,EAAUtM,EAAM08B,OAGlBpwB,EAAUA,GAAWi3D,EAAsBzjB,GAC3CA,EAAYA,GAAiC,IAApBxzC,EAAQtI,QAAgB,QAAU,SAC3D,IAAMmnD,EAAK7+C,EAAQ6+C,GAInB,OAFAnrD,EAAM8/C,GAAaxzC,EAEf6+C,EAAGkZ,wBACErkE,EAAM8/C,GACND,EAAmBC,KAG5BqL,EAAGe,QAAQf,EAAGmZ,YACdnZ,EAAGe,QAAQf,EAAGoZ,cACdpZ,EAAGe,QAAQf,EAAGS,OACdT,EAAGe,QAAQf,EAAGqZ,QACdrZ,EAAGe,QAAQf,EAAGsZ,qBACdtZ,EAAGe,QAAQf,EAAGuZ,iBACdvZ,EAAGQ,OAAOR,EAAGwZ,cACbxZ,EAAGQ,OAAOR,EAAGyZ,WACbzZ,EAAG0Z,SAAS1Z,EAAG2Z,MAERx4D,IAGTne,EAAAo1E,oRC3CA,IAAArR,EAAAvjE,EAAA,IAEAo2E,EAAAx7D,EAAA5a,EAAA,MAMAw1E,EAAA,WAoCE,SAAAA,EAAYhZ,EAA2BnnD,GAF/B/D,KAAA+kE,kBAAmB,EAGzB/kE,KAAKkrD,GAAKA,EACVlrD,KAAK+D,QAAUA,EAEf/D,KAAKglE,gBACLhlE,KAAKilE,aAAejlE,KAAKklE,qBACzBllE,KAAKmlE,YAAcnlE,KAAKolE,oBACxBplE,KAAKqlE,uBA4ZT,OAzZEnB,EAAA3zE,UAAAszD,gBAAA,SAAgBnrC,EAAeD,EAAgBkrC,EAAsB9lD,GACnE,IAAMqtD,EAAKlrD,KAAKkrD,GAEVryC,EAAUqyC,EAAGoa,gBAEnBpa,EAAGuJ,YAAYvJ,EAAGqa,WAAY1sD,GAC9BqyC,EAAGsa,cAActa,EAAGqa,WAAYra,EAAGua,mBAAoBva,EAAGwa,SAC1Dxa,EAAGsa,cAActa,EAAGqa,WAAYra,EAAGya,mBAAoBza,EAAGwa,SAC1Dxa,EAAGsa,cAActa,EAAGqa,WAAYra,EAAG0a,eAAgB1a,EAAG2a,eACtD3a,EAAGsa,cAActa,EAAGqa,WAAYra,EAAG4a,eAAgB5a,EAAG2a,eACtD,IAAMvkE,EAASzD,EAAO8lD,EAAQhwC,OAAO9V,EAAM6a,EAAQD,GAAU,KAQ7D,OAPAyyC,EAAG6a,WACC7a,EAAGqa,WACH,EACA5hB,EAAQmf,eAAgBpqD,EAAOD,EAC/B,EACAkrC,EAAQyS,OAAQzS,EAAQof,YAAazhE,GACzCtB,KAAK4rD,aACE/yC,GAETqrD,EAAA3zE,UAAA0yE,cAAA,SACIpqD,EAAuBH,EAAeD,EAAgBkrC,EAAsB9lD,GAC9E,IAAMqtD,EAAKlrD,KAAKkrD,GAChBA,EAAGuJ,YAAYvJ,EAAGqa,WAAY1sD,GAC9B,IAAMvX,EAASqiD,EAAQhwC,OAAO9V,EAAM6a,EAAQD,GAC5CyyC,EAAG8a,cACC9a,EAAGqa,WACH,EACA,EACA,EACA7sD,EAAOD,EAAQkrC,EAAQyS,OAAQzS,EAAQof,YAAazhE,GACxDtB,KAAK4rD,cAEPsY,EAAA3zE,UAAAujE,kBAAA,SAAkBj7C,EAAuBH,EAAeD,GACtD,IAAMyyC,EAAKlrD,KAAKkrD,GAEhBA,EAAGuJ,YAAYvJ,EAAGqa,WAAY1sD,GAC9BqyC,EAAG+a,gBAAgB/a,EAAGgb,YAAalmE,KAAKmlE,aACxCja,EAAGib,qBACCjb,EAAGgb,YAAahb,EAAGkb,kBAAmBlb,EAAGqa,WAAY1sD,EACrD,GACJ7Y,KAAK4rD,aACLV,EAAGmb,SAAS,EAAG,EAAG3tD,EAAOD,GACzByyC,EAAGob,QAAQ,EAAG,EAAG5tD,EAAOD,IAE1ByrD,EAAA3zE,UAAAqyD,YAAA,SACI/pC,EAAuBH,EAAeD,EAAgBuuB,EAAkB/lC,EACxEqX,GACF,IAAM4yC,EAAKlrD,KAAKkrD,GACX5yC,IACHA,EAAW,GAERtY,KAAK+kE,kBACR/kE,KAAK8zD,kBAAkBj7C,EAASH,EAAOD,GAEzC,IAAMkrC,EAAU3jD,KAAK4jD,WAAW3iD,EAAUqX,GACpChX,EAASqiD,EAAQ4iB,SAAS7tD,EAAQD,GAUxC,OARAyyC,EAAGuJ,YAAYvJ,EAAGqa,WAAY1sD,GAC9BqyC,EAAGib,qBACCjb,EAAGgb,YAAahb,EAAGkb,kBAAmBlb,EAAGqa,WAAY1sD,EACrD,GAEJqyC,EAAGsb,WAAW,EAAG,EAAG9tD,EAAOD,EAAQyyC,EAAGub,KAAM9iB,EAAQof,YAAazhE,GACjEtB,KAAK4rD,aAEEjI,EAAQtvC,OAAO/S,EAAQ0lC,IAEhCk9B,EAAA3zE,UAAAm2E,mBAAA,WAEE,OAAO,GAETxC,EAAA3zE,UAAAo2E,iBAAA,WACE,IAAMzb,EAAKlrD,KAAKkrD,GAEhB,MAAO,WADGA,EAAG0b,aAAa5mE,KAAKkrD,GAAG2b,gBACZ3b,EAAG4b,WAE3B5C,EAAA3zE,UAAAw2E,kBAAA,WACE,OAAO/mE,KAAKkrD,GAAG0b,aAAa5mE,KAAKkrD,GAAG8b,qBAEtC9C,EAAA3zE,UAAA02E,sBAAA,WACE,OAAOjnE,KAAKkrD,GAAG0b,aAAa5mE,KAAKkrD,GAAGgc,sBAEtChD,EAAA3zE,UAAA2jE,oBAAA,SAAoBH,EAAwBC,GAC1C,IAAM9I,EAAKlrD,KAAKkrD,GAChBA,EAAGic,oBAAoBpT,EAAgB,EAAG7I,EAAG/zD,OAAO,EAAO,GAAI,GAC/D+zD,EAAGkc,wBAAwBrT,IACC,IAAxBC,IACF9I,EAAGic,oBAAoBnT,EAAoB,EAAG9I,EAAG/zD,OAAO,EAAO,GAAI,IACnE+zD,EAAGkc,wBAAwBpT,IAE7Bh0D,KAAK4rD,cAEPsY,EAAA3zE,UAAAsjE,cAAA,SACIhB,EACAc,GAEF,IAAMzI,EAAKlrD,KAAKkrD,GACVoH,EAAUpH,EAAG2I,gBAMnB,OAHA3I,EAAGmc,aAAa/U,EAASO,GACzB3H,EAAGmc,aAAa/U,EAASqB,GACzBzI,EAAGoc,YAAYhV,GACRA,GAET4R,EAAA3zE,UAAAkjE,cAAA,SAAchQ,EAAsB8jB,GAClC,IAAMrc,EAAKlrD,KAAKkrD,GACVsc,EAAStc,EAAGuc,aAAaF,GAC/B,IAAKC,EACH,MAAM,IAAI/xE,MAAM,0CAA0C8xE,GAK5D,GAFArc,EAAGzH,aAAa+jB,EAAQ/jB,GACxByH,EAAGuI,cAAc+T,IACwC,IAArDtc,EAAGwc,mBAAmBF,EAAQtc,EAAGyc,gBACnC,MAAM,IAAIlyE,MAAM,6BAA6By1D,EAAG0c,iBAAiBJ,IAEnE,OAAOA,GAETtD,EAAA3zE,UAAAuiE,aAAA,SAAa0U,GACXxnE,KAAKkrD,GAAG4H,aAAa0U,IAEvBtD,EAAA3zE,UAAAukE,qBAAA,SAAqBj8C,EAAuB+gC,EAAkBib,GAC5D,IAAM3J,EAAKlrD,KAAKkrD,GAChBA,EAAG2c,cAAc3c,EAAG4b,SAAWltB,GAC/B55C,KAAK4rD,aACLV,EAAGuJ,YAAYvJ,EAAGqa,WAAY1sD,GAC9B7Y,KAAK4rD,aACLV,EAAGc,UAAU6I,EAAejb,GAC5B55C,KAAK4rD,cAEPsY,EAAA3zE,UAAA06D,KAAA,WACEjrD,KAAKkrD,GAAG4c,WAAW9nE,KAAKkrD,GAAG6c,eAAgB,EAAG,GAC9C/nE,KAAK4rD,cAEPsY,EAAA3zE,UAAAq7D,WAAA,WACE,GAAIqG,EAAAthC,IAAImB,MAAO,CACb,IAAMo5B,EAAKlrD,KAAKkrD,GACVzlD,EAAQylD,EAAG8c,WACb/P,EAAQ,GACZ,OAAQxyD,GACN,KAAMylD,EAAW,SACf,OACF,KAAMA,EAAe,aACnB+M,EAAQ,eACR,MACF,KAAM/M,EAAgB,cACpB+M,EAAQ,gBACR,MACF,KAAM/M,EAAoB,kBACxB+M,EAAQ,oBACR,MACF,KAAM/M,EAAgC,8BACpC+M,EAAQ,gCACR,MACF,KAAM/M,EAAgB,cACpB+M,EAAQ,gBACR,MACF,KAAM/M,EAAqB,mBACzB+M,EAAQ,qBACR,MACF,QACEA,EAAQ,wBAA0BxyD,EAAMhE,SAAS,IAErD,MAAM,IAAIhM,MAAMwiE,KAGpBiM,EAAA3zE,UAAA6yE,cAAA,SAAcvqD,GACZ7Y,KAAKkrD,GAAGkY,cAAcvqD,IAExBqrD,EAAA3zE,UAAAwiE,cAAA,SAAcT,GACZtyD,KAAKkrD,GAAG6H,cAAcT,IAExB4R,EAAA3zE,UAAAqzD,WAAA,SAAW3iD,EAA4BqX,EAAkBkqC,GACvD,QADuD,IAAAA,MAAA,GAClC,IAAjBxiD,KAAK+D,QACP,OAAO,IAAI+gE,EAAamD,sBAAsBjoE,KAAKkrD,GAA8B5yC,GAGnF,OAAQrX,GACN,IAAK,QACH,OAAS,IAALuhD,GAAsCxiD,KAAKkoE,yBACtC,IAAIpD,EAAaqD,qBAAqBnoE,KAAKkrD,GAAI5yC,GAE/C,IAAIwsD,EAAaqD,qBACpBnoE,KAAKkrD,GAAI5yC,EAAUtY,KAAKooE,0BAA2BC,gBAE3D,IAAK,MACH,MAAM,IAAI5yE,MAAM,mBAClB,IAAK,OACH,OAAO,IAAIqvE,EAAawD,iBAAiBtoE,KAAKkrD,GAAI5yC,GACpD,QACE,MAAM,IAAI7iB,MAAM,qBAAqBwL,KAG3CijE,EAAA3zE,UAAAgxD,oBAAA,WAEE,IADA,IAAM2J,EAAKlrD,KAAKkrD,GACPqd,EAAO,EAAGA,EAAOvoE,KAAKwoE,uBAAwBD,EACrDrd,EAAG2c,cAAc3c,EAAG4b,SAAWyB,GAC/Brd,EAAGuJ,YAAYvJ,EAAGqa,WAAY,OAGlCrB,EAAA3zE,UAAAysC,QAAA,WACE,IAAIh9B,KAAKyoE,SAAT,CAGA,IAAMvd,EAAKlrD,KAAKkrD,GAChBA,EAAG+a,gBAAgB/a,EAAGgb,YAAa,MACnChb,EAAGwd,kBAAkB1oE,KAAKmlE,aAC1Bja,EAAGyd,WAAWzd,EAAG0d,aAAc,MAC/B1d,EAAG2d,aAAa7oE,KAAKilE,cACrB/Z,EAAGyd,WAAWzd,EAAG4d,qBAAsB,MACvC5d,EAAGvyB,SACH34B,KAAKyoE,UAAW,IAGVvE,EAAA3zE,UAAAw4E,sBAAR,WAEE,OAAO,IAAI/lE,aAAa,EACrB,EAAK,EAAM,EAAK,EAAK,GACrB,GAAM,EAAK,EAAK,EAAK,EACtB,EAAM,EAAM,EAAK,EAAK,EACtB,GAAO,EAAK,EAAK,EAAK,KAGlBkhE,EAAA3zE,UAAA20E,mBAAR,WACE,IAAMha,EAAKlrD,KAAKkrD,GACV5pD,EAAS4pD,EAAG5wC,eAClB,IAAKhZ,EACH,MAAM,IAAI7L,MAAM,gCAElB,IAAMuzE,EAAWhpE,KAAK+oE,wBAItB,OAHA7d,EAAGyd,WAAWzd,EAAG0d,aAActnE,GAC/B4pD,EAAG+d,WAAW/d,EAAG0d,aAAcI,EAAU9d,EAAGge,aAC5ClpE,KAAK4rD,aACEtqD,GAED4iE,EAAA3zE,UAAA60E,kBAAR,WACE,IAAM+D,EAAKnpE,KAAKkrD,GAAGka,oBACnB,IAAK+D,EACH,MAAM,IAAI1zE,MAAM,mCAElB,OAAO0zE,GAGDjF,EAAA3zE,UAAA80E,qBAAR,WACE,IAAMna,EAAKlrD,KAAKkrD,GAMhB,GAJAlrD,KAAKopE,sCAAwCppE,KAAKqpE,2CAClDrpE,KAAKkoE,yBAA2BloE,KAAKspE,qBACrCtpE,KAAKgjD,2BAA6BhjD,KAAKupE,uBAElB,IAAjBvpE,KAAK+D,UAAkB/D,KAAKooE,4BAA8BpoE,KAAKkoE,yBACjE,MAAM,IAAIzyE,MAAM,0DAGlBuK,KAAK0sD,kBAAoB1sD,KAAKkoE,0BAA4BloE,KAAKwpE,oBAG/DxpE,KAAKwgD,eAAiB0K,EAAG0b,aAAa1b,EAAGue,kBACzCzpE,KAAKwoE,qBAAuBtd,EAAG0b,aAAa1b,EAAGwe,yBAM3C1pE,KAAK+D,SAOHmgE,EAAA3zE,UAAAy0E,cAAR,WACuB,IAAjBhlE,KAAK+D,QACP/D,KAAK2pE,0BAA4B3pE,KAAKkrD,GAAG0e,aAAa,2BAEtD5pE,KAAK6pE,sBAAwB7pE,KAAKkrD,GAAG0e,aAAa,qBAClD5pE,KAAKooE,0BAA4BpoE,KAAKkrD,GAAG0e,aAAa,4BAIlD1F,EAAA3zE,UAAA84E,yCAAR,WAGE,IAAMne,EAAKlrD,KAAKkrD,GACVryC,EAAUqyC,EAAGoa,gBACnBpa,EAAGuJ,YAAYvJ,EAAGqa,WAAY1sD,GAC9B,IAAMiqD,EAAkC,IAAjB9iE,KAAK+D,QAAiBmnD,EAAoC4e,QAAU5e,EAAGub,KAC9Fvb,EAAG6a,WAAW7a,EAAGqa,WAAY,EAAGzC,EAAgB,EAAG,EAAG,EAAG5X,EAAGub,KAAMvb,EAAG/zD,MAAO,MAE5E,IAAM4yE,EAAc7e,EAAGka,oBACvBla,EAAG+a,gBAAgB/a,EAAGgb,YAAa6D,GAEnC7e,EAAGib,qBAAqBjb,EAAGgb,YAAahb,EAAGkb,kBAAmBlb,EAAGqa,WAAY1sD,EAAS,GAEtF,IAAMmxD,EAAa9e,EAAG+e,uBAAuB/e,EAAGgb,eAAiBhb,EAAGgf,qBAKpE,OAJAhf,EAAGuJ,YAAYvJ,EAAGqa,WAAY,MAC9Bra,EAAG+a,gBAAgB/a,EAAGgb,YAAa,MACnChb,EAAGkY,cAAcvqD,GACjBqyC,EAAGwd,kBAAkBqB,GACdC,GAGD9F,EAAA3zE,UAAA+4E,mBAAR,WACE,GAAqB,IAAjBtpE,KAAK+D,SACP,IAAK/D,KAAK2pE,0BACR,OAAO,OAGT,IAAK3pE,KAAK6pE,sBACR,OAAO,EAGX,OAAO7pE,KAAKopE,uCAGNlF,EAAA3zE,UAAAg5E,qBAAR,WACE,GAAqB,IAAjBvpE,KAAK+D,SACP,IAAK/D,KAAK2pE,0BACR,OAAO,MAEJ,CACL,IAAK3pE,KAAK6pE,sBACR,OAAO,EAET,IAAK7pE,KAAKkrD,GAAG0e,aAAa,4BACxB,OAAO,EAGX,OAAO5pE,KAAKopE,uCAMNlF,EAAA3zE,UAAAi5E,kBAAR,WAIE,IAEI3wD,EACAkxD,EACAlX,EACAsX,EACA7X,EANEpH,EAAKlrD,KAAKkrD,GAQhB,IACEryC,EAAUqyC,EAAGoa,gBACbyE,EAAc7e,EAAGka,oBACjBla,EAAGuJ,YAAYvJ,EAAGqa,WAAY1sD,GAE9B,IAAMiqD,EAAkC,IAAjB9iE,KAAK+D,QAAiBmnD,EAAoC4e,QAAU5e,EAAGub,KAS9F,OARAvb,EAAG6a,WAAW7a,EAAGqa,WAAY,EAAGzC,EAAgB,EAAG,EAAG,EAAG5X,EAAGub,KAAMvb,EAAG/zD,MAAO,MAE5E+zD,EAAG+a,gBAAgB/a,EAAGgb,YAAa6D,GACnC7e,EAAGib,qBAAqBjb,EAAGgb,YAAahb,EAAGkb,kBAAmBlb,EAAGqa,WAAY1sD,EAAS,GAEtFqyC,EAAGQ,OAAOR,EAAGS,QAEbkH,EAAe3H,EAAGuc,aAAavc,EAAGwI,iBAIlCxI,EAAGzH,aAAaoP,EAAc,iBAC9B3H,EAAGuI,cAAcZ,MAEjBsX,EAAiBjf,EAAGuc,aAAavc,EAAG0I,oBAIpC1I,EAAGzH,aAAa0mB,EAAgB,8DAChCjf,EAAGuI,cAAc0W,MAEjB7X,EAAUpH,EAAG2I,mBAIb3I,EAAGmc,aAAa/U,EAASO,GACzB3H,EAAGmc,aAAa/U,EAAS6X,GACzBjf,EAAGoc,YAAYhV,GACfpH,EAAGqH,WAAWD,GAEdpH,EAAG4c,WAAW5c,EAAGkf,OAAQ,EAAG,GACrBlf,EAAG8c,aAAe9c,EAAGmf,aAtBnB,UAyBTnf,EAAGe,QAAQf,EAAGS,OAEV2G,GACFpH,EAAG6H,cAAcT,GAEfO,GACF3H,EAAG4H,aAAaD,GAEdsX,GACFjf,EAAG4H,aAAaqX,GAEdJ,IACF7e,EAAG+a,gBAAgB/a,EAAGgb,YAAa,MACnChb,EAAGwd,kBAAkBqB,IAEnBlxD,IACFqyC,EAAGuJ,YAAYvJ,EAAGqa,WAAY,MAC9Bra,EAAGkY,cAAcvqD,MAIzBqrD,EAvcA,GAAah2E,EAAAg2E,8FCRb,IAAA96D,EAAA1a,EAAA,GAoCAu5E,EAAA,WAKE,SAAAA,EAAY/c,EAA4B5yC,GACtC,QADsC,IAAAA,MAAA,GACrB,IAAbA,EACFtY,KAAK8iE,eAAiB5X,EAAGof,KACzBtqE,KAAKo2D,OAASlL,EAAGqf,IACjBvqE,KAAK+iE,YAAc7X,EAAG/zD,MACtB6I,KAAKyjC,YAAcnrB,MACd,IAAiB,IAAbA,EAMT,MAAM,IAAI7iB,MAAM,+BAA+B6iB,GAL/CtY,KAAK8iE,eAAiB5X,EAAG4e,QACzB9pE,KAAKo2D,OAASlL,EAAGub,KACjBzmE,KAAK+iE,YAAc7X,EAAG/zD,MACtB6I,KAAKyjC,YAAcnrB,GAiCzB,OA5BE2vD,EAAA13E,UAAAojB,OAAA,SAAO9F,EAA4B28D,GACjC,IAAIt9D,EACA7X,EAcJ,OAbIwY,EAAIzN,cAAgB4C,eACtBoG,EAAAxC,OAAOpB,QAAQ,UAAW,2DAC1BnQ,EAAS,IAAI2N,aAAa6K,IAExB28D,EAAcxqE,KAAKyjC,YAAc51B,EAAIzc,QACvCgY,EAAAxC,OAAOpB,QAAQ,UAAW,kDAC1BnQ,EAASwY,EACTX,EAASlN,KAAKumE,SAASiE,EAAcxqE,KAAKyjC,aAC1CpuC,EAAOiI,QAAQ,SAACnD,EAAG5L,GAAM,OAAA2e,EAAO3e,GAAK4L,KAGrC+S,EADA7X,EAASwY,EAGJX,GAET+6D,EAAA13E,UAAAg2E,SAAA,SAASvyE,GACP,OAAO,IAAIgP,aAAoB,EAAPhP,IAE1Bi0E,EAAA13E,UAAA8jB,OAAA,SAAO/S,EAA+B0lC,GACpC,OAAyB,IAArBhnC,KAAKyjC,YACeniC,EAAwBjD,OAAO,SAACzO,EAAOwD,GAAU,OAAAA,EAAQ,GAAM,IAAGsrB,SAAS,EAAGsoB,GAG/F1lC,EAAOod,SAAS,EAAGsoB,IAE9BihC,EAhDA,GAAa/5E,EAAA+5E,wBAoDb,IAAAE,EAAA,WAKE,SAAAA,EAAYjd,EAA2B5yC,EAAcyqD,GACnD,QADqC,IAAAzqD,MAAA,GACpB,IAAbA,GAA+B,IAAbA,EACpB,MAAM,IAAI7iB,MAAM,+BAA+B6iB,GAEjDtY,KAAK8iE,eAAiB5X,EAAGub,KACzBzmE,KAAKo2D,OAASlL,EAAGub,KACjBzmE,KAAKyjC,YAAcnrB,EACnBtY,KAAK+iE,YAAcA,GAAe7X,EAAG/zD,MAqBzC,OAnBEgxE,EAAA53E,UAAAojB,OAAA,SAAO9F,EAAmB28D,GACxB,IAAI/vB,EAAO5sC,EAMX,OALyB,IAArB7N,KAAKyjC,cACPr6B,EAAAxC,OAAOtB,QAAQ,UAAW,iCAC1Bm1C,EAAOz6C,KAAKumE,SAASiE,GACrB38D,EAAIvQ,QAAQ,SAACnD,EAAG5L,GAAM,OAAAksD,EAAS,EAAJlsD,GAAS4L,KAE/BsgD,GAET0tB,EAAA53E,UAAAg2E,SAAA,SAASvyE,GACP,OAAO,IAAIgP,aAAoB,EAAPhP,IAE1Bm0E,EAAA53E,UAAA8jB,OAAA,SAAO/S,EAA+B0lC,GACpC,OAAyB,IAArBhnC,KAAKyjC,YACeniC,EAAwBjD,OAAO,SAACzO,EAAOwD,GAAU,OAAAA,EAAQ,GAAM,IAAGsrB,SAAS,EAAGsoB,GAG/F1lC,EAAOod,SAAS,EAAGsoB,IAE9BmhC,EAjCA,GAAaj6E,EAAAi6E,uBAmCb,IAAAG,EAAA,WAKE,SAAAA,EAAYpd,EAA2B5yC,GACrC,QADqC,IAAAA,MAAA,GADvCtY,KAAAyjC,YAAc,EAEK,IAAbnrB,EACFtY,KAAK8iE,eAAiB5X,EAAGuf,MACzBzqE,KAAKo2D,OAASlL,EAAGuf,MACjBzqE,KAAK+iE,YAAc7X,EAAGwf,cACtB1qE,KAAKyjC,YAAcnrB,MACd,IAAiB,IAAbA,EAMT,MAAM,IAAI7iB,MAAM,+BAA+B6iB,GAL/CtY,KAAK8iE,eAAiB5X,EAAGub,KACzBzmE,KAAKo2D,OAASlL,EAAGub,KACjBzmE,KAAK+iE,YAAc7X,EAAGwf,cACtB1qE,KAAKyjC,YAAcnrB,GAiBzB,OAZEgwD,EAAA/3E,UAAAojB,OAAA,SAAO9F,EAAiB28D,GACtB,OAAO,IAAI9nE,WAAWmL,EAAIvM,OAAQuM,EAAItM,WAAYsM,EAAIrM,aAExD8mE,EAAA/3E,UAAAg2E,SAAA,SAASvyE,GACP,OAAO,IAAI0O,WAAW1O,EAAOgM,KAAKyjC,cAEpC6kC,EAAA/3E,UAAA8jB,OAAA,SAAO/S,EAA+B0lC,GACpC,GAAI1lC,EAAOlB,cAAgBsC,WACzB,OAAOpB,EAAOod,SAAS,EAAGsoB,GAE5B,MAAM,IAAIvxC,MAAM,uBAAuB6L,EAAOlB,cAElDkoE,EAhCA,GAAap6E,EAAAo6E,kGC3Hb,IAAArW,EAAAvjE,EAAA,IAIAiuC,EAAA,oBAAAA,KAOA,OANEttC,OAAAC,eAAWqtC,EAAApsC,UAAA,QAAK,KAGhB,WACE,OAAO0hE,EAAAthC,IAAImB,WAJb,SAAiBliC,GACfqiE,EAAAthC,IAAImB,MAAQliC,mCAKhB+sC,EAPA,GASazuC,EAAA0uC,QAAU,IAAID,8PCoF3B,IAAAguC,EAAArhE,EAAA5a,EAAA,KACaR,EAAA+F,OAA4B02E,EAAW12E,mQCiBpD,IAAA22E,EAAAthE,EAAA5a,EAAA,MACaR,EAAA28E,iBAAgDD,EAAqBC,umDCpHlF,IAAAC,EAAAp8E,EAAA,KAMAq8E,EAAAzhE,EAAA5a,EAAA,KAMAm8E,EAAA,WAEE,SAAAA,EAAYtkE,GACVvG,KAAKu9B,QAAU,IAAIutC,EAAAE,QAAQzkE,GAwD/B,OAlDEskE,EAAAt6E,UAAA06E,UAAA,SAAUhlE,EAA0C1E,EAAqBnQ,GACvE,GAAoB,iBAAT6U,EACT,OAAOjG,KAAKu9B,QAAQ0tC,UAAUhlE,GACzB,GAAoB,oBAATilE,MAAyBjlE,aAAgBilE,KAAO,CAEhE,IAAM35B,EAAM45B,IAAIC,gBAAgBnlE,GAChC,OAAOjG,KAAKu9B,QAAQ0tC,UAAU15B,GACzB,GAAItrC,aAAgB1F,YAEzB,OAAOP,KAAKu9B,QAAQ0tC,UAAUhlE,EAAM1E,EAAYnQ,GAC3C,GAAImP,YAAY+a,OAAOrV,GAE5B,OAAOjG,KAAKu9B,QAAQ0tC,UAAUhlE,GAE9B,MAAM,IAAIxQ,MAAM,iCAIdo1E,EAAAt6E,UAAAunB,IAAN,SAAUuzD,EAAsBl2D,kHAC1B/Q,EAAS,IAAIy8C,IACbwqB,aAAqBxqB,KACjByqB,EAAiB,IAAIzqB,IAC3BwqB,EAAU/tE,QAAQ,SAAC1N,EAAkBM,GACnCo7E,EAAen3E,IAAIjE,EAAKN,EAAM0rC,kBAEvB,GAAMt7B,KAAKu9B,QAAQzlB,IAAIwzD,KAL9B,oBAKFlnE,EAASpR,EAAA6N,2BACA/N,MAAMqN,QAAQkrE,IACjBE,EAAmC,GACzCF,EAAU/tE,QAAQ,SAAC1N,GACjB27E,EAAezvE,KAAKlM,EAAM0rC,kBAEnB,GAAMt7B,KAAKu9B,QAAQzlB,IAAIyzD,KALvB,oBAKTnnE,EAASpR,EAAA6N,oBAGT,IAAW0zD,KADLiX,EAAiB,IAAI3qB,IACRwqB,EACjBG,EAAer3E,IAAIogE,EAAO8W,EAAmD9W,GAAMj5B,iCAOvF,OAJMmwC,EAAuD,IAAI5qB,IACjEz8C,EAAO9G,QAAQ,SAAC1N,EAAOM,GACrBu7E,EAAgBt3E,IAAIjE,EAAK66E,EAAYlvC,mBAAmBjsC,MAE1D,GAAO67E,SAETZ,EAAAt6E,UAAAm7E,eAAA,WACE1rE,KAAKu9B,QAAQmuC,kBAEfb,EAAAt6E,UAAAo7E,aAAA,WACE3rE,KAAKu9B,QAAQouC,gBAEjBd,EA3DA,GAAa38E,EAAA28E,68CCZb,IAAAe,EAAAl9E,EAAA,IACAkR,EAAAlR,EAAA,KAEAm9E,EAAAn9E,EAAA,KACAo9E,EAAAp9E,EAAA,KAEA0a,EAAA1a,EAAA,GACAq9E,EAAAr9E,EAAA,KAiBAs8E,EAAA,WACE,SAAAA,EAAYzkE,QAAA,IAAAA,MAAA,IACVvG,KAAKgsE,cAAe,EACpBhsE,KAAKisE,YAAc1lE,EAAO0lE,YAC1BjsE,KAAKs9B,SAAWl0B,EAAAlC,SAASjX,OAAOsW,EAAO+2B,UACvCt9B,KAAKqM,QAAU,CAACixB,SAAUt9B,KAAKs9B,SAAU4uC,gBAAiB,GAAIC,eAAgB,IAyNlF,OAtNEnB,EAAAz6E,UAAAm7E,eAAA,WACE1rE,KAAKs9B,SAAS7kC,SAGhBuyE,EAAAz6E,UAAAo7E,aAAA,WACE3rE,KAAKs9B,SAASx1B,QAMVkjE,EAAAz6E,UAAA06E,UAAN,SAAgBxwD,EAAoClZ,EAAqBnQ,sGACvE,SAAM4O,KAAKs9B,SAASt1B,MAAM,UAAW,oBAAqB,kBAAAokE,EAAA1jE,OAAA,+EAExC,SAAMmjE,EAAAQ,QAAQrsE,KAAKisE,4BAA7Bp6C,EAAU7+B,EAAA6N,OAChBb,KAAKssE,eAAiBz6C,EAAQiL,qBAAqB98B,KAAKqM,SAExDrM,KAAKusE,OAAS,IAAIR,EAAAS,MACC,iBAAR/xD,EAAP,MACmB,oBAAVm7B,MAAP,MAEU,GAAMh2C,EAAA6sE,UAAUb,EAAAc,SAAV9sE,CAAoB6a,kBAAhCna,EAAMtN,EAAA6N,OACZb,KAAK4rB,WAAWxqB,EAAOC,KAAKf,iBAGX,SAAMs1C,MAAMn7B,WACjB,SADKznB,EAAA6N,OACU8rE,sBAArBrsE,EAAMtN,EAAA6N,OACZb,KAAK4rB,WAAWxqB,EAAOC,KAAKf,wCAEpBC,YAAY+a,OAAOb,GAM7Bza,KAAK4rB,WAAWxqB,EAAOC,KAAKoZ,KAJtBsB,EAAM,IAAIrZ,WAAW+X,EAAKlZ,GAAc,EAAGnQ,GAAUqpB,EAAIjZ,YAC/DxB,KAAK4rB,WAAWxqB,EAAOC,KAAK0a,sDApBhC/oB,EAAA6N,iBA4BMmqE,EAAAz6E,UAAAq7B,WAAR,SAAmBghD,GAAnB,IAAAlkE,EAAA1I,KACE,GAAIA,KAAKgsE,aACP,MAAM,IAAIv2E,MAAM,uBAGlBuK,KAAKs9B,SAASt1B,MAAM,UAAW,qBAAsB,WAEnD,IAAM6kE,EACFnkE,EAAK4jE,eAAeQ,eAAiBpkE,EAAK4jE,oBAAsCp6E,EACpFwW,EAAK6jE,OAAOQ,KAAKH,EAAgBC,GAG7BnkE,EAAK4jE,eAAevrB,oBACtBr4C,EAAK4jE,eAAevrB,mBAAmBr4C,EAAK6jE,OAAOl2D,OAGrD3N,EAAKskE,cAActkE,EAAK6jE,OAAOl2D,OAG/B3N,EAAKukE,eAAiB,IAAInB,EAAAoB,cAAcxkE,EAAK6jE,OAAOl2D,MAAO3N,EAAKykE,KAAMzkE,EAAK40B,YAG7Et9B,KAAKgsE,cAAe,GAGtBhB,EAAAz6E,UAAAunB,IAAA,SAAI9mB,GAAJ,IAAA0X,EAAA1I,KACE,IAAKA,KAAKgsE,aACR,MAAM,IAAIv2E,MAAM,+BAGlB,OAAOuK,KAAKs9B,SAASt1B,MAAM,UAAW,cAAe,kBAAAokE,EAAA1jE,OAAA,6EAG7B,OAFhB0kE,EAAeptE,KAAKqtE,2BAA2Br8E,GAE/B,GAAMgP,KAAKitE,eAAeK,QAAQttE,KAAKssE,eAAgBc,WAE7E,OAFMG,EAAgBv6E,EAAA6N,OAEtB,GAAOb,KAAKwtE,aAAaD,YAIrBvC,EAAAz6E,UAAA88E,2BAAR,SAAmCr8E,GACjC,IAAMy8E,EAAkBztE,KAAKusE,OAAOl2D,MAAMq3D,gBAI1C,GAAI56E,MAAMqN,QAAQnP,IAChB,GAAIA,EAAOI,SAAWq8E,EAAgBr8E,OACpC,MAAM,IAAIqE,MAAM,0CAA0Cg4E,EAAgBr8E,OAAM,YAAYJ,EAAOI,YAKlG,CACH,GAAIJ,EAAOgD,OAASy5E,EAAgBr8E,OAClC,MAAM,IAAIqE,MAAM,sCAAsCg4E,EAAgBr8E,OAAM,YAAYJ,EAAOgD,MAKjG,IAFA,IAAM25E,EAAe,IAAI76E,MAAc9B,EAAOgD,MAC1C45E,EAAoB,EACfr/E,EAAI,EAAGA,EAAIk/E,EAAgBr8E,SAAU7C,EAAG,CAC/C,IAAMuqB,EAAS9nB,EAAOxB,IAAIi+E,EAAgBl/E,IAC1C,IAAKuqB,EACH,MAAM,IAAIrjB,MAAM,8BAA8BvG,KAAI,KAEpDy+E,EAAaC,KAAuB90D,EAGtC9nB,EAAS28E,EAKX,GAAK3tE,KAAKqM,QAAQ6/D,iBAA2D,IAAxClsE,KAAKqM,QAAQ6/D,gBAAgB96E,QAAiB4O,KAAKqM,QAAQ8/D,gBACrD,IAAvCnsE,KAAKqM,QAAQ8/D,eAAe/6E,OAqB9B4O,KAAK6tE,wBAAwB7tE,KAAKqM,QAAQ8/D,eAAgBn7E,GAAQ,OArBtB,CAC5C,IAAM88E,EAAoB9tE,KAAKusE,OAAOl2D,MAAM03D,kBACtCC,EAAchuE,KAAKusE,OAAOl2D,MAAM4qC,YAEhCkrB,EAAiB,IAAIr5E,MAA6Bg7E,EAAkB18E,QAE1E,IAAS7C,EAAI,EAAGA,EAAIu/E,EAAkB18E,SAAU7C,EAAG,CACjD,IAAM0/E,EAAaD,EAAYF,EAAkBv/E,IACjD49E,EAAe59E,GAAK0/E,EAAW/5E,KAAMa,MAAM1D,KAI3C2O,KAAKqM,QAAQ6/D,gBAAiBpwE,KAAKmyE,EAAW/5E,KAAM6D,YACpDiI,KAAKqM,QAAQ8/D,eAAgBrwE,KAAK9K,EAAOzC,GAAG8C,MAG9C2O,KAAK6tE,wBAAwB1B,EAAgBn7E,GAAQ,GAWvD,OAFAgP,KAAKkuE,yBAAyBluE,KAAKqM,QAAQ6/D,gBAAkBl7E,GAEtDA,GAGDg6E,EAAAz6E,UAAA29E,yBAAR,SAAiChC,EAAoCiC,GACnE,IAAK,IAAI5/E,EAAI,EAAGA,EAAI4/E,EAAY/8E,OAAQ7C,IAAK,CAC3C,IAAM6/E,EAAelC,EAAgB39E,GAC/B8/E,EAAaF,EAAY5/E,GAAG2F,KAClC,GAAIk6E,IAAiBC,EACnB,MAAM,IAAI54E,MAAM,gBAAgBlH,EAAC,kCAAkC6/E,EAAY,aAAaC,KAK1FrD,EAAAz6E,UAAAs9E,wBAAR,SACI1B,EAA8CgC,EAAuBG,GACvE,IAAK,IAAI//E,EAAI,EAAGA,EAAI4/E,EAAY/8E,OAAQ7C,IAAK,CAC3C,IAAMggF,EAAepC,EAAe59E,GAC9BigF,EAAaL,EAAY5/E,GAAG8C,KAClC,IAAK2O,KAAKyuE,kBAAkBF,EAAcC,EAAYF,GACpD,MAAM,IAAI74E,MAAM,gBAAgBlH,EAAC,oCAAoCggF,EAAar0D,KAAK,KAAI,eACvFs0D,EAAWt0D,KAAK,KAAI,OAKtB8wD,EAAAz6E,UAAAk+E,kBAAR,SACIF,EAAqCC,EAAmCF,GAC1E,GAAIC,EAAan9E,SAAWo9E,EAAWp9E,OACrC,OAAO,EAGT,IAAK,IAAI7C,EAAI,EAAGA,EAAIggF,EAAan9E,SAAU7C,EACzC,GAAIggF,EAAahgF,KAAOigF,EAAWjgF,MAAQ+/E,GAAwC,IAApBC,EAAahgF,IAE1E,OAAO,EAIX,OAAO,GAGDy8E,EAAAz6E,UAAAi9E,aAAR,SAAqBD,GACnB,IAAMmB,EAAmB1uE,KAAKusE,OAAOl2D,MAAMs4D,iBAC3C,GAAIpB,EAAcn8E,SAAWs9E,EAAiBt9E,OAC5C,MAAM,IAAIqE,MAAM,uEAIlB,IADA,IAAM2O,EAAS,IAAIy8C,IACVtyD,EAAI,EAAGA,EAAImgF,EAAiBt9E,SAAU7C,EAC7C6V,EAAOjQ,IAAIu6E,EAAiBngF,GAAIg/E,EAAch/E,IAGhD,OAAO6V,GAGD4mE,EAAAz6E,UAAAy8E,cAAR,SAAsB32D,GACpB,IAAMvJ,EAAQuJ,EAAMu4D,WACpB5uE,KAAKmtE,KAAO,IAAIr6E,MAAMga,EAAM1b,QAE5B,IAAK,IAAI7C,EAAI,EAAGA,EAAIue,EAAM1b,OAAQ7C,IAChCyR,KAAKmtE,KAAK5+E,GAAKyR,KAAKssE,eAAe/jE,QAAQuE,EAAMve,GAAIyR,KAAKusE,OAAOhzD,SAevEyxD,EA9NA,GAAa98E,EAAA88E,sDC3Bb,SAAA77D,GAqBA,IAAA0/D,EAAAx/E,OAAAw/E,2BACA,SAAAl/D,GAGA,IAFA,IAAA5B,EAAA1e,OAAA0e,KAAA4B,GACAm/D,EAAA,GACAvgF,EAAA,EAAmBA,EAAAwf,EAAA3c,OAAiB7C,IACpCugF,EAAA/gE,EAAAxf,IAAAc,OAAA0/E,yBAAAp/D,EAAA5B,EAAAxf,IAEA,OAAAugF,GAGAE,EAAA,WACA9gF,EAAAkoE,OAAA,SAAA1iD,GACA,IAAApE,EAAAoE,GAAA,CAEA,IADA,IAAAu7D,EAAA,GACA1gF,EAAA,EAAmBA,EAAA4C,UAAAC,OAAsB7C,IACzC0gF,EAAAnzE,KAAA+jB,EAAA1uB,UAAA5C,KAEA,OAAA0gF,EAAA/0D,KAAA,KAGA3rB,EAAA,EAmBA,IAnBA,IACAiiC,EAAAr/B,UACAojB,EAAAic,EAAAp/B,OACA+P,EAAAoO,OAAAmE,GAAAsQ,QAAAgrD,EAAA,SAAA3zE,GACA,UAAAA,EAAA,UACA,GAAA9M,GAAAgmB,EAAA,OAAAlZ,EACA,OAAAA,GACA,gBAAAkU,OAAAihB,EAAAjiC,MACA,gBAAAyM,OAAAw1B,EAAAjiC,MACA,SACA,IACA,OAAA6sD,KAAAC,UAAA7qB,EAAAjiC,MACS,MAAA2gF,GACT,mBAEA,QACA,OAAA7zE,KAGAA,EAAAm1B,EAAAjiC,GAAuBA,EAAAgmB,EAASlZ,EAAAm1B,IAAAjiC,GAChC4gF,EAAA9zE,KAAAmU,EAAAnU,GACA8F,GAAA,IAAA9F,EAEA8F,GAAA,IAAA0e,EAAAxkB,GAGA,OAAA8F,GAOAjT,EAAAqvE,UAAA,SAAA/lC,EAAA43C,GACA,YAAAjgE,IAAA,IAAAA,EAAAkgE,cACA,OAAA73C,EAIA,YAAAroB,EACA,kBACA,OAAAjhB,EAAAqvE,UAAA/lC,EAAA43C,GAAAhxD,MAAApe,KAAA7O,YAIA,IAAAm+E,GAAA,EAeA,OAdA,WACA,IAAAA,EAAA,CACA,GAAAngE,EAAAogE,iBACA,UAAA95E,MAAA25E,GACOjgE,EAAAqgE,iBACPrqE,QAAAsqE,MAAAL,GAEAjqE,QAAAM,MAAA2pE,GAEAE,GAAA,EAEA,OAAA93C,EAAApZ,MAAApe,KAAA7O,aAOA,IACAu+E,EADAC,EAAA,GA6BA,SAAA9vD,EAAAlQ,EAAAigE,GAEA,IAAAnwC,EAAA,CACAowC,KAAA,GACAC,QAAAC,GAkBA,OAfA5+E,UAAAC,QAAA,IAAAquC,EAAAkkC,MAAAxyE,UAAA,IACAA,UAAAC,QAAA,IAAAquC,EAAAuwC,OAAA7+E,UAAA,IACA8+E,EAAAL,GAEAnwC,EAAAywC,WAAAN,EACGA,GAEH1hF,EAAAiiF,QAAA1wC,EAAAmwC,GAGAQ,EAAA3wC,EAAAywC,cAAAzwC,EAAAywC,YAAA,GACAE,EAAA3wC,EAAAkkC,SAAAlkC,EAAAkkC,MAAA,GACAyM,EAAA3wC,EAAAuwC,UAAAvwC,EAAAuwC,QAAA,GACAI,EAAA3wC,EAAA4wC,iBAAA5wC,EAAA4wC,eAAA,GACA5wC,EAAAuwC,SAAAvwC,EAAAqwC,QAAAQ,GACAC,EAAA9wC,EAAA9vB,EAAA8vB,EAAAkkC,OAoCA,SAAA2M,EAAAnvE,EAAAqvE,GACA,IAAAC,EAAA5wD,EAAA6wD,OAAAF,GAEA,OAAAC,EACA,KAAA5wD,EAAAmwD,OAAAS,GAAA,OAAAtvE,EACA,KAAA0e,EAAAmwD,OAAAS,GAAA,OAEAtvE,EAKA,SAAA4uE,EAAA5uE,EAAAqvE,GACA,OAAArvE,EAeA,SAAAovE,EAAA9wC,EAAA7vC,EAAA+gF,GAGA,GAAAlxC,EAAA4wC,eACAzgF,GACAghF,EAAAhhF,EAAAiwB,UAEAjwB,EAAAiwB,UAAA3xB,EAAA2xB,WAEAjwB,EAAAwQ,aAAAxQ,EAAAwQ,YAAA7P,YAAAX,GAAA,CACA,IAAAywB,EAAAzwB,EAAAiwB,QAAA8wD,EAAAlxC,GAIA,OAHAnwB,EAAA+Q,KACAA,EAAAkwD,EAAA9wC,EAAApf,EAAAswD,IAEAtwD,EAIA,IAAAwwD,EA+FA,SAAApxC,EAAA7vC,GACA,GAAAwgF,EAAAxgF,GACA,OAAA6vC,EAAAqwC,QAAA,yBACA,GAAAxgE,EAAA1f,GAAA,CACA,IAAAkhF,EAAA,IAAA11B,KAAAC,UAAAzrD,GAAAo0B,QAAA,aACAA,QAAA,YACAA,QAAA,gBACA,OAAAyb,EAAAqwC,QAAAgB,EAAA,UAEA,GAAAC,EAAAnhF,GACA,OAAA6vC,EAAAqwC,QAAA,GAAAlgF,EAAA,UACA,GAAAqgF,EAAArgF,GACA,OAAA6vC,EAAAqwC,QAAA,GAAAlgF,EAAA,WAEA,GAAAu/E,EAAAv/E,GACA,OAAA6vC,EAAAqwC,QAAA,eA9GAkB,CAAAvxC,EAAA7vC,GACA,GAAAihF,EACA,OAAAA,EAIA,IAAA9iE,EAAA1e,OAAA0e,KAAAne,GACAqhF,EApCA,SAAA/uE,GACA,IAAAyO,EAAA,GAMA,OAJAzO,EAAA5E,QAAA,SAAA8d,EAAAsgB,GACA/qB,EAAAyK,IAAA,IAGAzK,EA6BAugE,CAAAnjE,GAQA,GANA0xB,EAAAywC,aACAniE,EAAA1e,OAAA8hF,oBAAAvhF,IAKAwhF,EAAAxhF,KACAme,EAAAlS,QAAA,eAAAkS,EAAAlS,QAAA,mBACA,OAAAw1E,EAAAzhF,GAIA,OAAAme,EAAA3c,OAAA,CACA,GAAAw/E,EAAAhhF,GAAA,CACA,IAAAV,EAAAU,EAAAV,KAAA,KAAAU,EAAAV,KAAA,GACA,OAAAuwC,EAAAqwC,QAAA,YAAA5gF,EAAA,eAEA,GAAAoiF,EAAA1hF,GACA,OAAA6vC,EAAAqwC,QAAA1X,OAAA7nE,UAAAkR,SAAA3S,KAAAc,GAAA,UAEA,GAAA2hF,EAAA3hF,GACA,OAAA6vC,EAAAqwC,QAAAtpE,KAAAjW,UAAAkR,SAAA3S,KAAAc,GAAA,QAEA,GAAAwhF,EAAAxhF,GACA,OAAAyhF,EAAAzhF,GAIA,IA2CAwU,EA3CAotE,EAAA,GAAAtvE,GAAA,EAAAuvE,EAAA,KAA4C,MAG5CtxE,EAAAvQ,KACAsS,GAAA,EACAuvE,EAAA,WAIAb,EAAAhhF,MAEA4hF,EAAA,cADA5hF,EAAAV,KAAA,KAAAU,EAAAV,KAAA,IACA,KAkBA,OAdAoiF,EAAA1hF,KACA4hF,EAAA,IAAApZ,OAAA7nE,UAAAkR,SAAA3S,KAAAc,IAIA2hF,EAAA3hF,KACA4hF,EAAA,IAAAhrE,KAAAjW,UAAAmhF,YAAA5iF,KAAAc,IAIAwhF,EAAAxhF,KACA4hF,EAAA,IAAAH,EAAAzhF,IAGA,IAAAme,EAAA3c,QAAA8Q,GAAA,GAAAtS,EAAAwB,OAIAu/E,EAAA,EACAW,EAAA1hF,GACA6vC,EAAAqwC,QAAA1X,OAAA7nE,UAAAkR,SAAA3S,KAAAc,GAAA,UAEA6vC,EAAAqwC,QAAA,uBAIArwC,EAAAowC,KAAA/zE,KAAAlM,GAIAwU,EADAlC,EAsCA,SAAAu9B,EAAA7vC,EAAA+gF,EAAAM,EAAAljE,GAEA,IADA,IAAA3J,EAAA,GACA7V,EAAA,EAAAK,EAAAgB,EAAAwB,OAAmC7C,EAAAK,IAAOL,EAC1CiC,EAAAZ,EAAA2f,OAAAhhB,IACA6V,EAAAtI,KAAA61E,EAAAlyC,EAAA7vC,EAAA+gF,EAAAM,EACA1hE,OAAAhhB,IAAA,IAEA6V,EAAAtI,KAAA,IASA,OANAiS,EAAAzQ,QAAA,SAAApN,GACAA,EAAA4vB,MAAA,UACA1b,EAAAtI,KAAA61E,EAAAlyC,EAAA7vC,EAAA+gF,EAAAM,EACA/gF,GAAA,MAGAkU,EArDAwtE,CAAAnyC,EAAA7vC,EAAA+gF,EAAAM,EAAAljE,GAEAA,EAAAtW,IAAA,SAAAvH,GACA,OAAAyhF,EAAAlyC,EAAA7vC,EAAA+gF,EAAAM,EAAA/gF,EAAAgS,KAIAu9B,EAAAowC,KAAA99E,MA6GA,SAAAqS,EAAAotE,EAAAC,GAQA,GANArtE,EAAAhJ,OAAA,SAAAy2E,EAAAhiB,GAGA,OAFAiiB,EACAjiB,EAAAh0D,QAAA,UAAAi2E,EACAD,EAAAhiB,EAAA7rC,QAAA,sBAAA5yB,OAAA,GACG,GAEH,GACA,OAAAqgF,EAAA,IACA,KAAAD,EAAA,GAAAA,EAAA,OACA,IACAptE,EAAA8V,KAAA,SACA,IACAu3D,EAAA,GAGA,OAAAA,EAAA,GAAAD,EAAA,IAAAptE,EAAA8V,KAAA,UAAAu3D,EAAA,GA5HAM,CAAA3tE,EAAAotE,EAAAC,IAxBAA,EAAA,GAAAD,EAAAC,EAAA,GA+CA,SAAAJ,EAAAzhF,GACA,UAAA6F,MAAAlF,UAAAkR,SAAA3S,KAAAc,GAAA,IAwBA,SAAA+hF,EAAAlyC,EAAA7vC,EAAA+gF,EAAAM,EAAA/gF,EAAAgS,GACA,IAAAhT,EAAAiS,EAAA6wE,EAsCA,IArCAA,EAAA3iF,OAAA0/E,yBAAAn/E,EAAAM,IAAA,CAAyDN,QAAAM,KACzDV,IAEA2R,EADA6wE,EAAA79E,IACAsrC,EAAAqwC,QAAA,6BAEArwC,EAAAqwC,QAAA,sBAGAkC,EAAA79E,MACAgN,EAAAs+B,EAAAqwC,QAAA,uBAGAt/E,EAAAygF,EAAA/gF,KACAhB,EAAA,IAAAgB,EAAA,KAEAiR,IACAs+B,EAAAowC,KAAAh0E,QAAAm2E,EAAApiF,OAAA,GAEAuR,EADAguE,EAAAwB,GACAJ,EAAA9wC,EAAAuyC,EAAApiF,MAAA,MAEA2gF,EAAA9wC,EAAAuyC,EAAApiF,MAAA+gF,EAAA,IAEA90E,QAAA,WAEAsF,EADAe,EACAf,EAAAxE,MAAA,MAAAlF,IAAA,SAAAihD,GACA,WAAAA,IACWx+B,KAAA,MAAAyC,OAAA,GAEX,KAAAxb,EAAAxE,MAAA,MAAAlF,IAAA,SAAAihD,GACA,YAAAA,IACWx+B,KAAA,OAIX/Y,EAAAs+B,EAAAqwC,QAAA,yBAGAM,EAAAlhF,GAAA,CACA,GAAAgT,GAAAhS,EAAA4vB,MAAA,SACA,OAAA3e,GAEAjS,EAAAksD,KAAAC,UAAA,GAAAnrD,IACA4vB,MAAA,iCACA5wB,IAAAytB,OAAA,EAAAztB,EAAAkC,OAAA,GACAlC,EAAAuwC,EAAAqwC,QAAA5gF,EAAA,UAEAA,IAAA80B,QAAA,YACAA,QAAA,YACAA,QAAA,gBACA90B,EAAAuwC,EAAAqwC,QAAA5gF,EAAA,WAIA,OAAAA,EAAA,KAAAiS,EA2BA,SAAAhB,EAAA8xE,GACA,OAAAn/E,MAAAqN,QAAA8xE,GAIA,SAAAhC,EAAAx1D,GACA,wBAAAA,EAIA,SAAA00D,EAAA10D,GACA,cAAAA,EASA,SAAAs2D,EAAAt2D,GACA,uBAAAA,EAIA,SAAAnL,EAAAmL,GACA,uBAAAA,EASA,SAAA21D,EAAA31D,GACA,gBAAAA,EAIA,SAAA62D,EAAAY,GACA,OAAA1iE,EAAA0iE,IAAA,oBAAAC,EAAAD,GAIA,SAAA1iE,EAAAiL,GACA,uBAAAA,GAAA,OAAAA,EAIA,SAAA82D,EAAAtiF,GACA,OAAAugB,EAAAvgB,IAAA,kBAAAkjF,EAAAljF,GAIA,SAAAmiF,EAAAxoE,GACA,OAAA4G,EAAA5G,KACA,mBAAAupE,EAAAvpE,iBAAAnT,OAIA,SAAAm7E,EAAAn2D,GACA,yBAAAA,EAgBA,SAAA03D,EAAA/iF,GACA,OAAAC,OAAAkB,UAAAkR,SAAA3S,KAAAM,GAIA,SAAAiL,EAAAjK,GACA,OAAAA,EAAA,OAAAA,EAAAqR,SAAA,IAAArR,EAAAqR,SAAA,IApbAvT,EAAAkkF,SAAA,SAAAj+E,GAIA,GAHAi8E,EAAAV,KACAA,EAAAvgE,EAAAwhB,IAAA0hD,YAAA,IACAl+E,IAAAgiE,eACAwZ,EAAAx7E,GACA,OAAAikE,OAAA,MAAAjkE,EAAA,WAAA0rC,KAAA6vC,GAAA,CACA,IAAA4C,EAAAnjE,EAAAmjE,IACA3C,EAAAx7E,GAAA,WACA,IAAAi7E,EAAAlhF,EAAAkoE,OAAAh4C,MAAAlwB,EAAAiD,WACAgU,QAAAM,MAAA,YAAAtR,EAAAm+E,EAAAlD,SAGAO,EAAAx7E,GAAA,aAGA,OAAAw7E,EAAAx7E,IAoCAjG,EAAA2xB,UAIAA,EAAAmwD,OAAA,CACAuC,KAAA,OACAC,OAAA,OACAC,UAAA,OACAC,QAAA,OACAC,MAAA,QACAC,KAAA,QACAC,MAAA,QACAC,KAAA,QACAC,KAAA,QACAC,MAAA,QACAC,QAAA,QACAC,IAAA,QACAC,OAAA,SAIAtzD,EAAA6wD,OAAA,CACA0C,QAAA,OACAC,OAAA,SACAC,QAAA,SACAphF,UAAA,OACAqhF,KAAA,OACAz/D,OAAA,QACA0/D,KAAA,UAEAC,OAAA,OAkRAvlF,EAAAiS,UAKAjS,EAAA+hF,YAKA/hF,EAAAihF,SAKAjhF,EAAAwlF,kBAHA,SAAAj5D,GACA,aAAAA,GAOAvsB,EAAA6iF,WAKA7iF,EAAAohB,WAKAphB,EAAAylF,SAHA,SAAAl5D,GACA,uBAAAA,GAOAvsB,EAAAkiF,cAKAliF,EAAAojF,WAKApjF,EAAAshB,WAKAthB,EAAAqjF,SAMArjF,EAAAkjF,UAKAljF,EAAA0iF,aAUA1iF,EAAA0lF,YARA,SAAAn5D,GACA,cAAAA,GACA,kBAAAA,GACA,iBAAAA,GACA,iBAAAA,GACA,iBAAAA,QACA,IAAAA,GAIAvsB,EAAA+sB,SAAmBvsB,EAAQ,KAY3B,IAAAmlF,EAAA,uDACA,mBA6CA,SAAArjF,EAAAmf,EAAAC,GACA,OAAAvgB,OAAAkB,UAAAC,eAAA1B,KAAA6gB,EAAAC,GAjCA1hB,EAAA4W,IAAA,WAVA,IACA7V,EACA6kF,EASA3uE,QAAAL,IAAA,WAVA7V,EAAA,IAAAuX,KACAstE,EAAA,CAAAz5E,EAAApL,EAAA8kF,YACA15E,EAAApL,EAAA+kF,cACA35E,EAAApL,EAAAglF,eAAA/5D,KAAA,KACA,CAAAjrB,EAAAilF,UAAAL,EAAA5kF,EAAAklF,YAAAL,GAAA55D,KAAA,MAMAhsB,EAAAkoE,OAAAh4C,MAAAlwB,EAAAiD,aAiBAjD,EAAAkmF,SAAmB1lF,EAAQ,KAE3BR,EAAAiiF,QAAA,SAAAkE,EAAA9mE,GAEA,IAAAA,IAAAiC,EAAAjC,GAAA,OAAA8mE,EAIA,IAFA,IAAAtmE,EAAA1e,OAAA0e,KAAAR,GACAhf,EAAAwf,EAAA3c,OACA7C,KACA8lF,EAAAtmE,EAAAxf,IAAAgf,EAAAQ,EAAAxf,IAEA,OAAA8lF,GAOA,IAAAC,EAAA,oBAAA5kF,cAAA,8BAAAwC,EA0DA,SAAAqiF,EAAA9rE,EAAAsyC,GAKA,IAAAtyC,EAAA,CACA,IAAA+rE,EAAA,IAAA/+E,MAAA,2CACA++E,EAAA/rE,SACAA,EAAA+rE,EAEA,OAAAz5B,EAAAtyC,GAlEAva,EAAAu+E,UAAA,SAAAgI,GACA,sBAAAA,EACA,UAAA/5E,UAAA,oDAEA,GAAA45E,GAAAG,EAAAH,GAAA,CACA,IAAA98C,EACA,sBADAA,EAAAi9C,EAAAH,IAEA,UAAA55E,UAAA,iEAKA,OAHArL,OAAAC,eAAAkoC,EAAA88C,EAAA,CACA1kF,MAAA4nC,EAAAjoC,YAAA,EAAAmlF,UAAA,EAAA31D,cAAA,IAEAyY,EAGA,SAAAA,IAQA,IAPA,IAAAm9C,EAAAC,EACAC,EAAA,IAAAvsE,QAAA,SAAAC,EAAAC,GACAmsE,EAAApsE,EACAqsE,EAAApsE,IAGAgoB,EAAA,GACAjiC,EAAA,EAAmBA,EAAA4C,UAAAC,OAAsB7C,IACzCiiC,EAAA10B,KAAA3K,UAAA5C,IAEAiiC,EAAA10B,KAAA,SAAAkP,EAAApb,GACAob,EACA4pE,EAAA5pE,GAEA2pE,EAAA/kF,KAIA,IACA6kF,EAAAr2D,MAAApe,KAAAwwB,GACK,MAAAxlB,GACL4pE,EAAA5pE,GAGA,OAAA6pE,EAQA,OALAxlF,OAAAylF,eAAAt9C,EAAAnoC,OAAA0lF,eAAAN,IAEAH,GAAAjlF,OAAAC,eAAAkoC,EAAA88C,EAAA,CACA1kF,MAAA4nC,EAAAjoC,YAAA,EAAAmlF,UAAA,EAAA31D,cAAA,IAEA1vB,OAAA2lF,iBACAx9C,EACAq3C,EAAA4F,KAIAvmF,EAAAu+E,UAAAwI,OAAAX,EAiDApmF,EAAAgnF,YAlCA,SAAAT,GACA,sBAAAA,EACA,UAAA/5E,UAAA,oDAMA,SAAAy6E,IAEA,IADA,IAAA3kD,EAAA,GACAjiC,EAAA,EAAmBA,EAAA4C,UAAAC,OAAsB7C,IACzCiiC,EAAA10B,KAAA3K,UAAA5C,IAGA,IAAA6mF,EAAA5kD,EAAAz+B,MACA,sBAAAqjF,EACA,UAAA16E,UAAA,8CAEA,IAAAmU,EAAA7O,KACA+6C,EAAA,WACA,OAAAq6B,EAAAh3D,MAAAvP,EAAA1d,YAIAsjF,EAAAr2D,MAAApe,KAAAwwB,GACAnoB,KAAA,SAAAgY,GAA2BlR,EAAAohB,SAAAwqB,EAAA,KAAA16B,IAC3B,SAAAg1D,GAA2BlmE,EAAAohB,SAAAgkD,EAAAc,EAAAt6B,KAM3B,OAHA1rD,OAAAylF,eAAAK,EAAA9lF,OAAA0lF,eAAAN,IACAplF,OAAA2lF,iBAAAG,EACAtG,EAAA4F,IACAU,qCC5rBAhnF,EAAAD,QAAA,SAAAusB,GACA,OAAAA,GAAA,iBAAAA,GACA,mBAAAA,EAAAU,MACA,mBAAAV,EAAAze,MACA,mBAAAye,EAAA6G,0BCJA,mBAAAjyB,OAAAY,OAEA9B,EAAAD,QAAA,SAAAonF,EAAAC,GACAD,EAAAE,OAAAD,EACAD,EAAA/kF,UAAAlB,OAAAY,OAAAslF,EAAAhlF,UAAA,CACA6P,YAAA,CACAxQ,MAAA0lF,EACA/lF,YAAA,EACAmlF,UAAA,EACA31D,cAAA,MAMA5wB,EAAAD,QAAA,SAAAonF,EAAAC,GACAD,EAAAE,OAAAD,EACA,IAAAE,EAAA,aACAA,EAAAllF,UAAAglF,EAAAhlF,UACA+kF,EAAA/kF,UAAA,IAAAklF,EACAH,EAAA/kF,UAAA6P,YAAAk1E,8mDCwDA,IAAMI,EAAsC,IAAI70B,IA4BhD,SAAe80B,EAAe1J,iHAGW,KAFjC2J,EAAan/E,KAAKo7B,SAEFo6C,IAiBxB,SAAmBt8D,GAEjB,IAAMvgB,EAAIugB,EAGV,GACI,eAAgBvgB,GAA6B,mBAAjBA,EAAEw8B,YAC9B,yBAA0Bx8B,GAAuC,mBAA3BA,EAAE0tC,sBACxC,YAAa1tC,GAA0B,mBAAdA,EAAE4tC,QAE7B,OAAO,EAGT,OAAO,EA9B+C64C,CAAUD,EAAW3J,IACpE2J,EAAW3J,GAAa6J,SAAzB,OACIjkD,EAAU+jD,EAAW3J,GAEP,iBADhBxiE,EAAOooB,EAAQjG,eACa,SAAUniB,EACjC,GAAMA,GADX,OAJJ,aAKEA,EAAOzW,EAAA6N,wBAET,GAAI4I,EAEF,OADAisE,EAAcvhF,IAAI83E,EAAap6C,GAC/B,GAAOA,oBAKb,cAAO3/B,QAvCThE,EAAAm+E,QAAA,SAAsBA,EAAQ0J,wHACvBA,EAAD,MACF,GAAO1J,EAAQ,CAAC,QAAS,OAAQ,gBAE3B2J,EAAwB,iBAATD,EAAoB,CAACA,GAAQA,0CAExBE,EAAAr7E,EAAAo7E,GAAKE,EAAAD,EAAAn7E,6CAApBmxE,EAAWiK,EAAAtmF,OACdmQ,EAAQ21E,EAAclmF,IAAIy8E,IAE9B,GAAOlsE,GAGO,GAAM41E,EAAe1J,YACrC,GADMp6C,EAAUjxB,EAAAC,OAEd,SAAOgxB,qMAKb,MAAM,IAAIp8B,MAAM,6iEChGlB,IAAA2T,EAAA1a,EAAA,GAIAynF,EAAA,WAEA,OADE,SAAmBxiF,EAAqBgZ,GAArB3M,KAAArM,KAAqBqM,KAAA2M,QAD1C,GAIAugE,EAAA,WACE,SAAAA,EAAoB72D,EAAc65C,EAAyB5yB,GAAvCt9B,KAAAqW,QAAuCrW,KAAAs9B,WACzDt9B,KAAK4rB,WAAWskC,GAmJpB,OAhJEgd,EAAA38E,UAAAq7B,WAAA,SAAWskC,GAAX,IAAAxnD,EAAA1I,KACEA,KAAKs9B,SAASt1B,MAAM,UAAW,2BAA4B,WACzD,IAAMoF,EAAa1E,EAAK2N,MAAMu4D,WAC9B,GAAIxhE,EAAWhc,SAAW8+D,EAAI9+D,OAC5B,MAAM,IAAIqE,MAAM,2CAGlBiT,EAAKykE,KAAOjd,EAAIz4D,IAAI,SAAC9D,EAAIpF,GAAM,WAAI4nF,EAASxiF,EAAIyZ,EAAW7e,MAC3Dma,EAAKhC,QAGLgC,EAAK0tE,SAAW,GAChB1tE,EAAKykE,KAAK7vE,QAAQ,SAAC3J,EAAIpF,WACjB8nF,GAAW,MACf,IAAoB,IAAAz1E,EAAAhG,EAAAjH,EAAGgZ,KAAK3b,QAAMslF,EAAA11E,EAAA9F,QAAAw7E,EAAAv7E,KAAAu7E,EAAA11E,EAAA9F,OAAE,CAA/B,IAAMiD,EAAKu4E,EAAA1mF,MACd,IACK8Y,EAAK6tE,QAAQx4E,KACsC,IAAjD2K,EAAK2N,MAAM03D,kBAAkBlyE,QAAQkC,GAC1C,CACAs4E,GAAW,EACX,yGAGAA,GACF3tE,EAAK0tE,SAASt6E,KAAKvN,QAM3B2+E,EAAA38E,UAAAmW,MAAA,WACE1G,KAAKu2E,QAAUv2E,KAAKqW,MAAM4qC,YAAYxpD,IAAI,SAAAlJ,GAAK,OAAAA,EAAEuqB,UAGnDo0D,EAAA38E,UAAA+8E,QAAA,SAAQhB,EAAgCkK,GAAxC,IAAA9tE,EAAA1I,KACE,OAAOA,KAAKs9B,SAASt1B,MAAM,UAAW,wBAAyB,kBAAAokE,EAAA1jE,OAAA,kGAS7D,GAPA1I,KAAK0G,QAGCqR,EAAmBu0D,EAAelvC,yBAGlCq5C,EAAcz2E,KAAKqW,MAAM03D,kBAC3ByI,EAAYplF,SAAWqlF,EAAYrlF,OACrC,MAAM,IAAIqE,MAAM,kFACZ+gF,EAAYplF,OAAM,cAAcqlF,EAAYrlF,QAGlDolF,EAAYl5E,QAAQ,SAACS,EAAOxP,GAC1B,IAAM6E,EAAQqjF,EAAYloF,GAC1Bma,EAAK6tE,QAAQnjF,GAAS2K,IAIlB24E,EAAqB12E,KAAKo2E,SAASr9E,MAAM,GAGzC49E,EAAc32E,KAAKqW,MAAM4qC,YACzB7zC,EAAapN,KAAKqW,MAAMu4D,WAE1BgI,EAAO,gFAOT,GALMC,EAAcH,EAASE,KACvBE,EAASC,EAAK5J,KAAK0J,IAIa,KADhCG,EAAYF,EAAOnqE,KAAK3b,OAAOyG,IAAI,SAAAlJ,GAAK,OAAAma,EAAK6tE,QAAQhoF,MAC7CsN,aAAQ3J,GACpB,MAAM,IAAIuD,MAAM,kCAAkCqhF,EAAOnqE,MAUxC,OANbygE,EAAe4J,EACrB5tE,EAAAxC,OAAOtB,QACH,WACA,aAAawxE,EAAOnqE,KAAKzd,KAAI,KACzBk+E,EAAa31E,IAAI,SAAC5H,EAAGtB,GAAM,UAAIuoF,EAAOnqE,KAAK3b,OAAOzC,GAAE,MAAMsB,EAAEqE,KAAI,IAAIrE,EAAEwB,KAAK6oB,KAAK,KAAI,MAAKA,KAAK,MAAK,KAExF,GAAM68D,EAAKz5C,SAASt1B,MAAM,OAAQ8uE,EAAOnqE,KAAKzd,KAAM,kBAAAk9E,EAAA1jE,OAAA,oDAErE,KADM/U,EAAKmjF,EAAOnjF,IACVw4B,YAAYihD,GAClB,MAAM,IAAI33E,MAAM,gCAAgCqhF,EAAOnqE,KAAKzd,MAK9D,SAFeyE,EAAGmkB,IAAIC,EAAkBq1D,kBAM1C,IAZM6J,EAAajkF,EAAA6N,QAYJzP,SAAW0lF,EAAOnqE,KAAKk7C,QAAQz2D,OAC5C,MAAM,IAAIqE,MAAM,8DAIlBwhF,EAAW35E,QAAQ,SAAC8G,EAAQ7V,GAC1B,IAAMqG,EAAIkiF,EAAOnqE,KAAKk7C,QAAQt5D,GAC9B,GAAIma,EAAK6tE,QAAQ3hF,GACf,MAAM,IAAIa,MAAM,WAAWb,EAAC,2BAA2BkiF,EAAOnqE,KAAKzd,MAErEwZ,EAAK6tE,QAAQ3hF,GAAKwP,IAId8yE,EAAkB,IAAIlqE,IAC5BiqE,EAAW35E,QAAQ,SAAC8G,EAAQ7V,eACpBqG,EAAIkiF,EAAOnqE,KAAKk7C,QAAQt5D,OAC9B,IAAyC,IAAA+nF,GAAAv8D,OAAA,EAAAnf,EAAA+7E,EAAY/hF,GAAG0nD,KAAE66B,EAAAb,EAAAx7E,QAAAq8E,EAAAp8E,KAAAo8E,EAAAb,EAAAx7E,OAAE,CAAvD,IAAMs8E,EAA0BD,EAAAvnF,MAC7BynF,EAAwBjqE,EAAWgqE,GACrCf,GAAW,MACf,IAAgB,IAAAiB,GAAAC,OAAA,EAAA38E,EAAAy8E,EAAsBrmF,SAAMwmF,EAAAF,EAAAx8E,QAAA08E,EAAAz8E,KAAAy8E,EAAAF,EAAAx8E,OAAE,CAAzC,IAAMtB,EAACg+E,EAAA5nF,MACV,IAAK8Y,EAAK6tE,QAAQ/8E,GAAI,CACpB68E,GAAW,EACX,yGAGAA,GACFa,EAAgB3pE,IAAI6pE,wGAI1BV,EAAS56E,KAAIsiB,MAAbs4D,EAAQl7C,EAAS07C,2CA5DZN,EAAOF,EAAStlF,eAAM,0CA2E7B,OAZMgT,EAAmB,GACzBpE,KAAKqW,MAAMohE,mBAAmBn6E,QAAQ,SAACo6E,EAAanpF,GAClD,IAAMopF,EAAYjvE,EAAK6tE,QAAQmB,GAC/B,QAAkBxlF,IAAdylF,EACF,MAAM,IAAIliF,MAAM,oBAAoBiiF,EAAW,yBAGjDC,EAAU95E,KACVuG,EAAOtI,KAAK67E,KAEdvuE,EAAAxC,OAAOtB,QAAQ,WAAY,iCAC3ByS,EAAiBilB,UACjB,GAAO54B,WAOb8oE,EArJA,GAAah/E,EAAAg/E,+FCVb,IAAAr8E,EAAAnC,EAAA,GAEAkpF,EAAAlpF,EAAA,KAEAkR,EAAAlR,EAAA,GAEA89E,EAAA,WAEE,SAAAA,KAyBF,OAvBEA,EAAAj8E,UAAAw8E,KAAA,SAAKzsE,EAAausE,GAChB,IAAMgL,EAAahnF,EAAA4F,KAAKqf,WAAWzB,OAAO/T,GAE1C,GADkBV,EAAAzH,SAASC,aAAay/E,EAAW5hE,WACnC,EACd,MAAM,IAAIxgB,MAAM,8CAGlBuK,KAAK83E,QAAUD,EAAW9hE,YAAYte,IAAI,SAAAlJ,GACxC,MAAO,CAACsnB,OAAQtnB,EAAEsnB,OAAkB9R,QAASnE,EAAAzH,SAASC,aAAa7J,EAAEwV,YAGvE/D,KAAK+3E,OAASH,EAAAI,MAAM32E,KAAKw2E,EAAWxhE,MAAQw2D,IAI9Cx9E,OAAAC,eAAIk9E,EAAAj8E,UAAA,QAAK,KAAT,WACE,OAAOyP,KAAK+3E,wCAId1oF,OAAAC,eAAIk9E,EAAAj8E,UAAA,SAAM,KAAV,WACE,OAAOyP,KAAK83E,yCAEhBtL,EA3BA,GAAat+E,EAAAs+E,yRCJb,IAAAyL,EAAAvpF,EAAA,KACAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAiEaR,EAAA8pF,MAAQ,CAInB32E,KAAM,SAAC62E,EAA8BvhE,GAAoC,WAAIwhE,EAAUD,EAAYvhE,KAGrG,IAAAyhE,EAAA,WACE,SAAAA,EAAYxhE,GACV5W,KAAKq4E,WAAQnmF,EACb8N,KAAKs4E,IAAM,GACXt4E,KAAK8Y,YAAS5mB,EACd8N,KAAK9L,UAAOhC,EAER0kB,IACF5W,KAAK9L,KAAO0L,EAAAtJ,UAAUuB,yBAAyB+e,EAAU1iB,KAAM6D,aAcrE,OATE1I,OAAAC,eAAI8oF,EAAA7nF,UAAA,OAAI,KAAR,WACE,OAAOyP,KAAKq4E,uCAGdhpF,OAAAC,eAAI8oF,EAAA7nF,UAAA,KAAE,KAAN,WACE,OAAOyP,KAAKs4E,qCAIhBF,EAtBA,GAwBAG,EAAA,WAgBA,OAfE,SAAYC,GACVx4E,KAAK9Q,KAAOspF,EAAWtpF,KACvB8Q,KAAK4V,OAAS4iE,EAAW5iE,OACzB5V,KAAKhP,OAAS,GACdgP,KAAK6nD,QAAU,GACf7nD,KAAK6rB,WAAa,IAAIosD,EAAAQ,UAAUD,EAAWx0E,WAC3ChE,KAAK04E,aAAc,GAPvB,GAkBAP,EAAA,WAWE,SAAAA,EAAY9hE,EAAyBw2D,GACnC,IAAKx2D,EACH,MAAM,IAAI3b,UAAU,kBAItBsF,KAAK24E,WAAWtiE,GAGhBrW,KAAK8sE,eAAeD,GAGpB7sE,KAAK44E,iBAuZT,OApZET,EAAA5nF,UAAAw9E,gBAAA,WACE,OAAO/tE,KAAK64E,kBAGdV,EAAA5nF,UAAAm9E,cAAA,WACE,OAAO1tE,KAAK84E,gBAGdX,EAAA5nF,UAAAknF,iBAAA,WACE,OAAOz3E,KAAK+4E,mBAGdZ,EAAA5nF,UAAAo+E,eAAA,WACE,OAAO3uE,KAAKg5E,iBAGdb,EAAA5nF,UAAA0wD,UAAA,WACE,OAAOjhD,KAAKi5E,UAGdd,EAAA5nF,UAAAq+E,SAAA,WACE,OAAO5uE,KAAKk5E,QAGNf,EAAA5nF,UAAAooF,WAAR,SAAmBtiE,+BACX8iE,EAAc,IAAIt4B,IACxB7gD,KAAKi5E,SAAW,GAEhBj5E,KAAK64E,iBAAmB,GACxB74E,KAAK84E,eAAiB,GAEtB94E,KAAK+4E,kBAAoB,GACzB/4E,KAAKg5E,gBAAkB,GAEvBh5E,KAAKk5E,OAAS,GAEd,IAAME,EAAe,IAAIv4B,IAGzB,IAAKxqC,EAAMtY,MACT,MAAM,IAAItI,MAAM,uCAElB,IAAM4jF,EAAkB,OACxB,IAAgB,IAAAC,EAAA1+E,EAAAyb,EAAMtY,OAAKw7E,EAAAD,EAAAx+E,QAAAy+E,EAAAx+E,KAAAw+E,EAAAD,EAAAx+E,OAAE,CAAxB,IAAMvM,EAACgrF,EAAA3pF,MACV,GAAIupF,EAAY7rE,IAAI/e,EAAEW,MACpB,MAAM,IAAIuG,MAAM,0BAA0BlH,EAAEW,MAE9C,IAAMsqF,EAAex5E,KAAKi5E,SAASn9E,KAAK,IAAIs8E,EAAM7pF,IAAM,EACxD4qF,EAAYhlF,IAAI5F,EAAEW,KAAOsqF,GACzBH,EAAgBv9E,KAAKvN,EAAEW,wGAIzB,IAAKmnB,EAAMM,YACT,MAAM,IAAIlhB,MAAM,iDAElB,IAAgB,IAAAgkF,EAAA7+E,EAAAyb,EAAMM,aAAW+iE,EAAAD,EAAA3+E,QAAA4+E,EAAA3+E,KAAA2+E,EAAAD,EAAA3+E,OAAE,CAAxBvM,EAACmrF,EAAA9pF,MAAP,IACCwD,EAAQ+lF,EAAY3pF,IAAIjB,EAAEW,MAC9B,QAAcgD,IAAVkB,EAAqB,CACvB,IAAMxD,EAAQ,IAAIwoF,EAClBxoF,EAAMsE,KAAO,CACXa,MAAO,CAAC1D,KAAMuO,EAAAtJ,UAAUkB,oBAAoBjJ,EAAE8C,OAC9C0G,WAAY6H,EAAAtJ,UAAUC,wBAAwBhI,EAAE0S,WAElD7N,EAAQ4M,KAAKi5E,SAASn9E,KAAKlM,GAAS,EACpCupF,EAAYhlF,IAAI5F,EAAEW,KAAOkE,GAE3B4M,KAAKi5E,SAAS7lF,GAAOilF,OAAS,EAC9Br4E,KAAKi5E,SAAS7lF,GAAO0lB,OAAShoB,EAAAmD,OAAO8M,UAAUxS,qGAIjD,IAASA,EAAI,EAAGA,EAAIyR,KAAKi5E,SAAS7nF,OAAQ7C,IACnCyR,KAAKi5E,SAAS1qF,GAAGuqB,SACpB9Y,KAAK64E,iBAAiB/8E,KAAKvN,GAC3ByR,KAAK84E,eAAeh9E,KAAKu9E,EAAgB9qF,KAK7C,IAAK8nB,EAAMjS,OACT,MAAM,IAAI3O,MAAM,4CAElB,IAAgB,IAAAkkF,EAAA/+E,EAAAyb,EAAMjS,QAAMw1E,EAAAD,EAAA7+E,QAAA8+E,EAAA7+E,KAAA6+E,EAAAD,EAAA7+E,OAAE,CAAnBvM,EAACqrF,EAAAhqF,MACV,GAAIupF,EAAY7rE,IAAI/e,EAAEW,MACpB,MAAM,IAAIuG,MAAM,2BAA2BlH,EAAEW,MAEzCsqF,EAAex5E,KAAKi5E,SAASn9E,KAAK,IAAIs8E,EAAM7pF,IAAM,EACxD4qF,EAAYhlF,IAAI5F,EAAEW,KAAOsqF,GACzBx5E,KAAK+4E,kBAAkBj9E,KAAK09E,GAC5Bx5E,KAAKg5E,gBAAgBl9E,KAAKvN,EAAEW,wGAI9B,IAAKmnB,EAAM1J,KACT,MAAM,IAAIlX,MAAM,0CAElB,IAAwB,IAAAokF,EAAAj/E,EAAAyb,EAAM1J,MAAImtE,EAAAD,EAAA/+E,QAAAg/E,EAAA/+E,KAAA++E,EAAAD,EAAA/+E,OAAE,CAClC,KADSi/E,EAASD,EAAAlqF,OACHV,KAEb,IAAK,IAAI8qF,EAAO,GAAIA,IAAQ,CAC1B,IAAMzlB,EAAO,WAAWwlB,EAAUnkE,OAAM,IAAIokE,EAC5C,IAAKZ,EAAa9rE,IAAIinD,GAAO,CAC3BwlB,EAAU7qF,KAAOqlE,EACjB,OAKN,GAAI6kB,EAAa9rE,IAAIysE,EAAU7qF,MAC7B,MAAM,IAAIuG,MAAM,yBAAyBskF,EAAU7qF,MAE/CsqF,EAAex5E,KAAKk5E,OAAOp9E,KAAK,IAAIy8E,EAAKwB,IAAc,EAC7DX,EAAajlF,IAAI4lF,EAAU7qF,KAAMsqF,qGAInC,IAASjrF,EAAI,EAAGA,EAAIyR,KAAKk5E,OAAO9nF,OAAQ7C,IAAK,CAC3C,IAAMoe,EAAO3M,KAAKk5E,OAAO3qF,GAEzB,KADMwrF,EAAY1jE,EAAM1J,KAAKpe,IACd6V,OACb,MAAM,IAAI3O,MAAM,4BAA4BskF,EAAU7qF,UAExD,IAAqB,IAAA+qF,GAAAC,OAAA,EAAAt/E,EAAAm/E,EAAU31E,SAAM+1E,EAAAF,EAAAn/E,QAAAq/E,EAAAp/E,KAAAo/E,EAAAF,EAAAn/E,OAAE,CAAlC,IAAMsJ,EAAM+1E,EAAAvqF,MAQf,QANyB,KADrBwqF,EAAYjB,EAAY3pF,IAAI4U,MAE9Bg2E,EAAYp6E,KAAKi5E,SAASn9E,KAAK,IAAIs8E,GAAW,EAC9Ce,EAAYhlF,IAAIiQ,EAAQg2E,IAE1BztE,EAAKk7C,QAAQ/rD,KAAKs+E,QAEqBloF,IAAnC8N,KAAKi5E,SAASmB,GAAW/B,MAC3B,MAAM,IAAI5iF,MAAM,4CAA4C2kF,GAM9D,GAJAp6E,KAAKi5E,SAASmB,GAAW/B,MAAQ9pF,EAIR,aAArBwrF,EAAUnkE,OAAuB,CACnC,IAAKmkE,EAAU/1E,WAA4C,IAA/B+1E,EAAU/1E,UAAU5S,SAAiB2oF,EAAU/1E,UAAU,GAAGnU,EACtF,MAAM,IAAI4F,MAAM,uFAElB,IAAKskF,EAAU31E,QAAsC,IAA5B21E,EAAU31E,OAAOhT,OACxC,MAAM,IAAIqE,MAAM,4EAElBkX,EAAKk7C,QAAQ91D,MACb4a,EAAK+rE,aAAc,EAEnB14E,KAAKi5E,SAASmB,GAAW/B,OAAS,EAClCr4E,KAAKi5E,SAASmB,GAAWthE,OAAShoB,EAAAmD,OAAO8M,UAAUg5E,EAAU/1E,UAAU,GAAGnU,uGAMhF,IAAStB,EAAI,EAAGA,EAAIyR,KAAKk5E,OAAO9nF,OAAQ7C,IAAK,CAC3C,IACMwrF,EADAptE,EAAO3M,KAAKk5E,OAAO3qF,GAGzB,KAFMwrF,EAAY1jE,EAAM1J,KAAKpe,IAEdwP,MACb,MAAM,IAAItI,MAAM,2BAA2BskF,EAAU7qF,UAEvD,IAAoB,IAAAmrF,GAAAC,OAAA,EAAA1/E,EAAAm/E,EAAUh8E,QAAKw8E,EAAAF,EAAAv/E,QAAAy/E,EAAAx/E,KAAAw/E,EAAAF,EAAAv/E,OAAE,CAAhC,IACGs/E,EADGr8E,EAAKw8E,EAAA3qF,MAEd,QAAyB,KADnBwqF,EAAYjB,EAAY3pF,IAAIuO,IAEhC,MAAM,IAAItI,MAAM,uBAAuBsI,EAAK,eAAeg8E,EAAU7qF,MAEvEyd,EAAK3b,OAAO8K,KAAKs+E,GAEjBp6E,KAAKi5E,SAASmB,GAAW9B,IAAIx8E,KAAKvN,sGAItC,OAAO,GAGD4pF,EAAA5nF,UAAAqoF,eAAR,eAAAlwE,EAAA1I,KAEQw6E,EAAwB,IAAIxtE,IAClChN,KAAK64E,iBAAiBv7E,QAAQ,SAAA/O,GACfma,EAAKuwE,SAAS1qF,GACtB+pF,IAAIh7E,QAAQ,SAAA1I,GACf4lF,EAASjtE,IAAI3Y,OAQjB,IAHA,IAAM6lF,EAAa3nF,MAAMuO,KAAKm5E,GACxBE,EAAa,IAAI5nF,MAAckN,KAAKk5E,OAAO9nF,QAAQ4K,KAAK,sBAG5D,IAAM2+E,EAAYF,EAAW1oF,MAEC,SAA1B2oF,EAAWC,GACbD,EAAWC,GAAa,SAGxBF,EAAW3+E,KAAK6+E,GAChBD,EAAWC,GAAa,OAExB5D,EAAKmC,OAAOyB,GAAW9yB,QAAQvqD,QAAQ,SAACs9E,GACtC,IAAM/8E,EAAO6K,EAAKuwE,SAAS2B,GAC3B,QAA2B,IAAhB/8E,EAAKib,OACd,MAAM,IAAIrjB,MAAM,0CAElB,GAAIoI,EAAKw6E,QAAUsC,EACjB,MAAM,IAAIllF,MAAM,iFAElBoI,EAAKy6E,IAAIh7E,QAAQ,SAACu9E,GAEhB,GAAwC,SAApCH,EAAWG,GACb,MAAM,IAAIplF,MAAM,yBAG2B,UAApCilF,EAAWG,IAClBJ,EAAW3+E,KAAK++E,gBAzBnBJ,EAAWrpF,OAAS,QAiCrB+mF,EAAA5nF,UAAAu8E,eAAR,SAAuBD,GAErB7sE,KAAK86E,yBACL96E,KAAK+6E,wBAGDlO,GACFA,EAAiBC,eAAe9sE,MAIlCA,KAAKg7E,iBASP7C,EAAA5nF,UAAAyqF,cAAA,WAGE,IAHF,MAAAtyE,EAAA1I,KACMtK,EAAS,aAEJnH,GACP,IAAK0sF,EAAK/B,OAAO3qF,GAAGmqF,mBAElBhjF,IAEAulF,EAAK/B,OAAO3qF,GAAGs5D,QAAQvqD,QAAQ,SAAAC,GAC7BmL,EAAKuwE,SAAS17E,GAAK86E,OAAS,IAE9B4C,EAAK/B,OAAOpnF,OAAOvD,EAAG,OACtBA,EATM,WAYJmH,EAAS,IAEXulF,EAAK/B,OAAO3qF,GAAGyC,OAAOsM,QAAQ,SAAA1N,GAC5B,IAAM2N,EAAMmL,EAAKuwE,SAASrpF,GAAO0oF,IAAIz8E,QAAQtN,EAAImH,IACpC,IAAT6H,IACFmL,EAAKuwE,SAASrpF,GAAO0oF,IAAI/6E,GAAOhP,KAGpC0sF,EAAK/B,OAAO3qF,GAAGs5D,QAAQvqD,QAAQ,SAAA1N,GACzB8Y,EAAKuwE,SAASrpF,GAAOyoF,OAAS3vE,EAAKuwE,SAASrpF,GAAOyoF,QAAW9pF,EAAImH,IACpEgT,EAAKuwE,SAASrpF,GAAOyoF,MAAS9pF,QAtB7BA,YAAI,EAAGA,EAAIyR,KAAKk5E,OAAO9nF,OAAQ7C,MAA/BA,KAAC2sF,EA2BVxlF,EAAS,mBAEAnH,GAEP,IAA+B,IAA3B4sF,EAAKlC,SAAS1qF,GAAG8S,OAA+D,IAAhD85E,EAAKpC,kBAAkBl9E,QAAQtN,EAAImH,UACrEA,IACAylF,EAAKlC,SAASnnF,OAAOvD,EAAG,OACxBA,EALM,WAQR,GAAImH,EAAS,EAAG,CACd,IAAI0lF,GAAO,OAGmBlpF,IAA1BipF,EAAKlC,SAAS1qF,GAAG8S,OAAiD,IAA3B85E,EAAKlC,SAAS1qF,GAAG8S,MAE7C,KADb+5E,EAAMD,EAAKjC,OAAOiC,EAAKlC,SAAS1qF,GAAG8S,MAAMwmD,QAAQhsD,QAAQtN,EAAImH,MAE3DylF,EAAKjC,OAAOiC,EAAKlC,SAAS1qF,GAAG8S,MAAMwmD,QAAQuzB,GAAO7sF,IAKvC,KADb6sF,EAAMD,EAAKtC,iBAAiBh9E,QAAQtN,EAAImH,MAEtCylF,EAAKtC,iBAAiBuC,GAAO7sF,GAKjC4sF,EAAKlC,SAAS1qF,GAAG+tD,GAAGh/C,QAAQ,SAAAqP,IAEb,KADbyuE,EAAM1yE,EAAKwwE,OAAOvsE,GAAM3b,OAAO6K,QAAQtN,EAAImH,MAEzCgT,EAAKwwE,OAAOvsE,GAAM3b,OAAOoqF,GAAO7sF,KAGD,IAA/B4sF,EAAKlC,SAAS1qF,GAAG+tD,GAAGlrD,SAGT,KADbgqF,EAAMD,EAAKpC,kBAAkBl9E,QAAQtN,EAAImH,MAEvCylF,EAAKpC,kBAAkBqC,GAAO7sF,KApC7BA,UAAT,IAASA,EAAI,EAAGA,EAAIyR,KAAKi5E,SAAS7nF,OAAQ7C,MAAjCA,KAAC8sF,GA+CJlD,EAAA5nF,UAAA+qF,WAAR,SAAmBX,WACXhuE,EAAO3M,KAAKk5E,OAAOyB,GACzB,GAAIhuE,EAAK3b,OAAOI,OAAS,EACvB,MAAM,IAAIqE,MAAM,yDAElB,GAAIkX,EAAKk7C,QAAQz2D,OAAS,EACxB,IAAK,IAAI7C,EAAI,EAAGA,EAAIoe,EAAKk7C,QAAQz2D,OAAQ7C,IACvC,GAAIyR,KAAKi5E,SAAStsE,EAAKk7C,QAAQt5D,IAAI+tD,GAAGlrD,OAAS,EAC7C,MAAM,IAAIqE,MAAM,uFAMtBkX,EAAK+rE,aAAc,EACnB,IAAM6C,EAAkB5uE,EAAK3b,OAAO,GAC9BwqF,EAAmB7uE,EAAKk7C,QAAQ,GAChC4zB,EAAuBz7E,KAAKi5E,SAASuC,GAAkBl/B,GAGvDo/B,EAAW17E,KAAKi5E,SAASsC,GAAiBj/B,GAAGzgD,QAAQ8+E,GAE3D,IAAkB,IAAde,EACF,MAAM,IAAIjmF,MAAM,yEAElBuK,KAAKi5E,SAASsC,GAAiBj/B,GAAGxqD,OAAO4pF,EAAU,GAGnD17E,KAAKi5E,SAASuC,GAAkBlD,IAAM,GAGtC,IAAMllF,EAAQ4M,KAAK+4E,kBAAkBl9E,QAAQ2/E,GAM7C,IALe,IAAXpoF,IACF4M,KAAK+4E,kBAAkB3lF,GAASmoF,GAI9BE,GAAwBA,EAAqBrqF,OAAS,MACxD,IAAwB,IAAAuqF,EAAA/gF,EAAA6gF,GAAoBG,EAAAD,EAAA7gF,QAAA8gF,EAAA7gF,KAAA6gF,EAAAD,EAAA7gF,OAAE,CAAzC,IAAM+gF,EAASD,EAAAhsF,MACZksF,EAAe97E,KAAKk5E,OAAO2C,GAAW7qF,OAAO6K,QAAQ2/E,GAE3D,IAAsB,IAAlBM,EACF,MAAM,IAAIrmF,MAAM,4EAElBuK,KAAKk5E,OAAO2C,GAAW7qF,OAAO8qF,GAAgBP,EAC9Cv7E,KAAKi5E,SAASsC,GAAiBj/B,GAAGxgD,KAAK+/E,uGAK7C1D,EAAA5nF,UAAAwqF,sBAAA,mBACMJ,EAAY,MAChB,IAAmB,IAAA/5E,EAAAhG,EAAAoF,KAAKk5E,QAAM5C,EAAA11E,EAAA9F,QAAAw7E,EAAAv7E,KAAAu7E,EAAA11E,EAAA9F,OAAE,CAA3B,IAAM6R,EAAI2pE,EAAA1mF,MAEb,GAAoB,YAAhB+c,EAAKiJ,OAAsB,CAE7B,GAA2B,IAAvBjJ,EAAK3b,OAAOI,OACd,MAAM,IAAIqE,MAAM,iDAElB,GAA4B,IAAxBkX,EAAKk7C,QAAQz2D,QAAwC,IAAxBub,EAAKk7C,QAAQz2D,OAC5C,MAAM,IAAIqE,MAAM,wDAGlB,GAA4B,IAAxBkX,EAAKk7C,QAAQz2D,QAA8D,IAA9C4O,KAAKi5E,SAAStsE,EAAKk7C,QAAQ,IAAIywB,IAAIlnF,OAClE,MAAM,IAAIqE,MAAM,yEAElBuK,KAAKs7E,WAAWX,GAElBA,wGAIJxC,EAAA5nF,UAAAuqF,uBAAA,mBACMH,EAAY,MAChB,IAAmB,IAAA/5E,EAAAhG,EAAAoF,KAAKk5E,QAAM5C,EAAA11E,EAAA9F,QAAAw7E,EAAAv7E,KAAAu7E,EAAA11E,EAAA9F,OAAE,CAEV,aAFPw7E,EAAA1mF,MAEJgmB,QACP5V,KAAKs7E,WAAWX,GAElBA,wGAGNxC,EA9aA,iXCtHA,IAAAxnF,EAAAC,EAAAlC,EAAA,KACAmC,EAAAnC,EAAA,GAEAoC,EAAApC,EAAA,GACAkR,EAAAlR,EAAA,GAqBA+pF,EAAA,WACE,SAAAA,EAAY5sD,WAEV,GADA7rB,KAAK+7E,YAAc,IAAIl7B,IACnBh1B,QAAiD,KACnD,IAAmB,IAAAmwD,EAAAphF,EAAAixB,GAAUowD,EAAAD,EAAAlhF,QAAAmhF,EAAAlhF,KAAAkhF,EAAAD,EAAAlhF,OAAE,CAA1B,IAAMohF,EAAID,EAAArsF,MACboQ,KAAK+7E,YAAY5nF,IAAI+nF,EAAKhtF,KAAO,CAACupF,EAAU0D,SAASD,GAAOzD,EAAU2D,QAAQF,uGAGhF,GAAIl8E,KAAK+7E,YAAY/nF,KAAO63B,EAAWz6B,OACrC,MAAM,IAAIqE,MAAM,+BAkKxB,OA7JEgjF,EAAAloF,UAAA4D,IAAA,SAAIjE,EAAagE,EAA0BtE,GACzCoQ,KAAK+7E,YAAY5nF,IAAIjE,EAAK,CAACN,EAAOsE,KAEpCukF,EAAAloF,UAAAid,OAAA,SAAOtd,GACL8P,KAAK+7E,YAAYvuE,OAAOtd,IAE1BuoF,EAAAloF,UAAAw7B,SAAA,SAAS77B,EAAamsF,GACpB,OAAOr8E,KAAKxQ,IAAIU,EAAK,QAASmsF,IAGhC5D,EAAAloF,UAAA27B,OAAA,SAAOh8B,EAAamsF,GAClB,OAAOr8E,KAAKxQ,IAAIU,EAAK,MAAOmsF,IAG9B5D,EAAAloF,UAAAs8B,UAAA,SAAU38B,EAAamsF,GACrB,OAAOr8E,KAAKxQ,IAAIU,EAAK,SAAUmsF,IAGjC5D,EAAAloF,UAAA+rF,UAAA,SAAUpsF,EAAamsF,GACrB,OAAOr8E,KAAKxQ,IAAIU,EAAK,SAAUmsF,IAGjC5D,EAAAloF,UAAA8pC,UAAA,SAAUnqC,EAAamsF,GACrB,OAAOr8E,KAAKxQ,IAAIU,EAAK,SAAUmsF,IAGjC5D,EAAAloF,UAAAu8B,QAAA,SAAQ58B,EAAamsF,GACnB,OAAOr8E,KAAKxQ,IAAIU,EAAK,OAAQmsF,IAG/B5D,EAAAloF,UAAAgsF,WAAA,SAAWrsF,EAAamsF,GACtB,OAAOr8E,KAAKxQ,IAAIU,EAAK,UAAWmsF,IAGlC5D,EAAAloF,UAAAisF,WAAA,SAAWtsF,EAAamsF,GACtB,OAAOr8E,KAAKxQ,IAAIU,EAAK,UAAWmsF,IAG1B5D,EAAAloF,UAAAf,IAAR,SACIU,EAAagE,EAA0BmoF,GACzC,IAAMI,EAAez8E,KAAK+7E,YAAYvsF,IAAIU,GAC1C,QAAqBgC,IAAjBuqF,EAA4B,CAC9B,QAAqBvqF,IAAjBmqF,EACF,OAAOA,EAET,MAAM,IAAI5mF,MAAM,iCAAiCvF,GAEnD,GAAIusF,EAAa,KAAOvoF,EACtB,MAAM,IAAIuB,MAAM,2BAA2BvB,EAAI,YAAYuoF,EAAa,IAE1E,OAAOA,EAAa,IAGPhE,EAAA2D,QAAf,SAAuBF,GACrB,OAAQA,EAAKhoF,MACX,KAAKrD,EAAA4F,KAAKyc,eAAeqC,cAAcpe,MACrC,MAAO,QACT,KAAKtG,EAAA4F,KAAKyc,eAAeqC,cAAcmnE,IACrC,MAAO,MACT,KAAK7rF,EAAA4F,KAAKyc,eAAeqC,cAAcle,OACrC,MAAO,SACT,KAAKxG,EAAA4F,KAAKyc,eAAeqC,cAAconE,OACrC,MAAO,SACT,KAAK9rF,EAAA4F,KAAKyc,eAAeqC,cAAcqnE,OACrC,MAAO,SACT,KAAK/rF,EAAA4F,KAAKyc,eAAeqC,cAAcsnE,KACrC,MAAO,OACT,KAAKhsF,EAAA4F,KAAKyc,eAAeqC,cAAcunE,QACrC,MAAO,UACT,KAAKjsF,EAAA4F,KAAKyc,eAAeqC,cAAcwnE,QACrC,MAAO,UACT,QACE,MAAM,IAAItnF,MAAM,wCAAwC5E,EAAA4F,KAAKyc,eAAeqC,cAAc2mE,EAAKhoF,SAItFukF,EAAA0D,SAAf,SAAwBD,GACtB,GAAIA,EAAKhoF,OAASrD,EAAA4F,KAAKyc,eAAeqC,cAAcynE,OAChDd,EAAKhoF,OAASrD,EAAA4F,KAAKyc,eAAeqC,cAAc0nE,OAClD,MAAM,IAAIxnF,MAAM,wCAGlB,IAAM7F,EAAQoQ,KAAKk9E,gBAAgBhB,GAGnC,GAAIA,EAAKhoF,OAASrD,EAAA4F,KAAKyc,eAAeqC,cAAcmnE,KAAO/rF,EAAA+G,QAAKC,OAAO/H,GACrE,OAAQA,EAAegI,WAIzB,GAAIskF,EAAKhoF,OAASrD,EAAA4F,KAAKyc,eAAeqC,cAAcsnE,KAAM,CAIxD,IAHA,IAAM9gE,EAAOnsB,EACPutF,EAAwB,IAAIrqF,MAAcipB,EAAI3qB,QAE3C7C,EAAI,EAAGA,EAAIwtB,EAAI3qB,OAAQ7C,IAAK,CACnC,IAAM6uF,EAAYrhE,EAAIxtB,GACtB4uF,EAAY5uF,GAAKqR,EAAAzH,SAASC,aAAaglF,GAGzC,OAAOD,EAIT,GAAIjB,EAAKhoF,OAASrD,EAAA4F,KAAKyc,eAAeqC,cAAconE,OAClD,OAAO7rF,EAAAmD,OAAO8M,UAAUnR,GAI1B,GAAIssF,EAAKhoF,OAASrD,EAAA4F,KAAKyc,eAAeqC,cAAcwnE,QAElD,OADqBntF,EACD6H,IAAI,SAAA7H,GAAS,OAAAkB,EAAAmD,OAAO8M,UAAUnR,KAIpD,GAAIssF,EAAKhoF,OAASrD,EAAA4F,KAAKyc,eAAeqC,cAAcle,OAAQ,CAC1D,IAAMgmF,EAAaztF,EACnB,OAAOwR,EAAOC,KAAKg8E,EAAW/7E,OAAQ+7E,EAAW97E,WAAY87E,EAAW77E,YAAYC,WAItF,OAAIy6E,EAAKhoF,OAASrD,EAAA4F,KAAKyc,eAAeqC,cAAcunE,QAC9BltF,EACD6H,IACf,SAAA4lF,GAAc,OAAAj8E,EAAOC,KAAKg8E,EAAW/7E,OAAQ+7E,EAAW97E,WAAY87E,EAAW77E,YAAYC,aAG1F7R,GAGM6oF,EAAAyE,gBAAf,SAA+BhB,GAC7B,OAAQA,EAAKhoF,MACX,KAAKrD,EAAA4F,KAAKyc,eAAeqC,cAAcpe,MACrC,OAAO+kF,EAAKxoE,EACd,KAAK7iB,EAAA4F,KAAKyc,eAAeqC,cAAcmnE,IACrC,OAAOR,EAAK3tF,EACd,KAAKsC,EAAA4F,KAAKyc,eAAeqC,cAAcle,OACrC,OAAO6kF,EAAKxrF,EACd,KAAKG,EAAA4F,KAAKyc,eAAeqC,cAAconE,OACrC,OAAOT,EAAKrsF,EACd,KAAKgB,EAAA4F,KAAKyc,eAAeqC,cAAcynE,MACrC,OAAOd,EAAK7pE,EACd,KAAKxhB,EAAA4F,KAAKyc,eAAeqC,cAAcqnE,OACrC,OAAOV,EAAK/oE,OACd,KAAKtiB,EAAA4F,KAAKyc,eAAeqC,cAAcsnE,KACrC,OAAOX,EAAK9oE,KACd,KAAKviB,EAAA4F,KAAKyc,eAAeqC,cAAcunE,QACrC,OAAOZ,EAAK7oE,QACd,KAAKxiB,EAAA4F,KAAKyc,eAAeqC,cAAcwnE,QACrC,OAAOb,EAAK5oE,QACd,KAAKziB,EAAA4F,KAAKyc,eAAeqC,cAAc0nE,OACrC,OAAOf,EAAK3oE,OACd,QACE,MAAM,IAAI9d,MAAM,+BAA+B5E,EAAA4F,KAAKyc,eAAeqC,cAAc2mE,EAAKhoF,SAK9FukF,EA3KA,GAAavqF,EAAAuqF","file":"onnx.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {Tensor} from './tensor';\r\n\r\n// check the inputs shape before running an OP.\r\n// return true when the inputs pass the check\r\n// return false when the inputs do not fit the requirement\r\n// throw exception when fatal error or not implemented\r\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\r\n  if (!inputs || inputs.length !== expectedDimensions.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < inputs.length; i++) {\r\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Fix the input shapes for MatMul operation if they need fixing\r\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\r\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\r\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\r\n   */\r\n  static preprocessInputShapes(dimsA: ReadonlyArray<number>, dimsB: ReadonlyArray<number>):\r\n      [ReadonlyArray<number>, ReadonlyArray<number>] {\r\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\r\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\r\n    // removed.\r\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\r\n\r\n    // If the second argument is 1-D, it is promoted to a matrix by appending\r\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\r\n    // removed.\r\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\r\n\r\n    return [a, b];\r\n  }\r\n\r\n  /**\r\n   * Fix the output shape computed for MatMul operation if it needs fixing\r\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\r\n   * This will be mutated.\r\n   * @param aRank The rank of tensor A.\r\n   * @param bRank The rank of tensor B.\r\n   */\r\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\r\n    // Remove prepended dimension if first input is 1d\r\n    if (aRank === 1) {\r\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\r\n      outputShape.splice(outputShape.length - 2, 1);\r\n    }\r\n    // Remove appended dimension if second input is 1d\r\n    if (bRank === 1) {\r\n      outputShape.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: ReadonlyArray<number>, bdims: ReadonlyArray<number>, isMatMul = false):\r\n      ReadonlyArray<number>|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcas\r\n   * @returns The calculated indices that maps to the original tensor.\r\n   */\r\n  static index(broadcastedIndices: ReadonlyArray<number>, originalShape: ReadonlyArray<number>): number[] {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\r\n    // length as the broadcasted shape, and for each dimension the index should\r\n    // not be out of range.\r\n    const originalIndices = new Array(originalShape.length);\r\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\r\n    return originalIndices;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcast\r\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\r\n   *     mutated).\r\n   */\r\n  static fillIndex(\r\n      broadcastedIndices: ReadonlyArray<number>, originalShape: ReadonlyArray<number>, originalIndices: number[]) {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\r\n    // broadcasted shape, and for each dimension the index should not be out of range.\r\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\r\n    const dimOffset = broadcastedIndices.length - originalShape.length;\r\n    for (let i = 0; i < originalShape.length; i++) {\r\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the broadcasting operation on the specific operator\r\n   * @param a The input tensor A\r\n   * @param b The input tensor B\r\n   * @param op The operator lambda function\r\n   * @param inplace Whether to write the result back to A.\r\n   * @returns The result tensor, or undefined if input not broadcastable.\r\n   */\r\n  static calc(\r\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\r\n      resultType?: Tensor.DataType): Tensor|undefined {\r\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\r\n\r\n    if (outputShape) {\r\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\r\n        // B is not broadcastable to A, failed to calculate inplace.\r\n        return undefined;\r\n      }\r\n\r\n      const size = ShapeUtil.size(outputShape);\r\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\r\n\r\n      // both inputs are scalars\r\n      if (outputShape.length === 0) {\r\n        c.set([], op(a.get([]), b.get([])));\r\n      }\r\n\r\n      // atleast one input is a non-scalar\r\n      else {\r\n        const outputIndices = new Array<number>(outputShape.length);\r\n        const originalIndicesA = new Array(a.dims.length);\r\n        const originalIndicesB = new Array(b.dims.length);\r\n        let valA: string|number = 0;\r\n        let valB: string|number = 0;\r\n        let isAScalar = false;\r\n        let isBScalar = false;\r\n        if (a.dims.length === 0) {\r\n          valA = a.get([]);\r\n          isAScalar = true;\r\n        }\r\n        if (b.dims.length === 0) {\r\n          valB = b.get([]);\r\n          isBScalar = true;\r\n        }\r\n        let rest: number;\r\n        for (let i = 0; i < size; i++) {\r\n          // traversal indices\r\n          rest = i;\r\n          for (let j = outputShape.length - 1; j >= 0; j--) {\r\n            outputIndices[j] = rest % outputShape[j];\r\n            rest = Math.floor(rest / outputShape[j]);\r\n          }\r\n\r\n          if (!isAScalar) {\r\n            // map outputIndices (which is actually broadcasted) to the originalIndices\r\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\r\n            valA = a.get(originalIndicesA);\r\n          }\r\n          if (!isBScalar) {\r\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\r\n            valB = b.get(originalIndicesB);\r\n          }\r\n\r\n          c.set(outputIndices, op(valA, valB));\r\n        }\r\n      }\r\n\r\n      return c;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: ReadonlyArray<number>, finalShape: ReadonlyArray<number>): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// copy array helper\r\n// mimics memcpy as much as possible\r\nexport function arrayCopyHelper(\r\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n    blockSize: number) {\r\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n    throw new Error(`sourceIndex out of bounds`);\r\n  }\r\n  if (targetIndex < 0 || targetIndex >= target.length) {\r\n    throw new Error(`targetIndex out of bounds`);\r\n  }\r\n  if (sourceIndex + blockSize > source.length) {\r\n    throw new Error(`source indices to be copied are outside bounds`);\r\n  }\r\n  if (targetIndex + blockSize > target.length) {\r\n    throw new Error(`target array is too small to hold result`);\r\n  }\r\n\r\n  for (let offset = 0; offset < blockSize; offset++) {\r\n    target[targetIndex + offset] = source[sourceIndex + offset];\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: ReadonlyArray<number>, transLeft: boolean, rightShape: ReadonlyArray<number>, transRight: boolean,\r\n      biasShape: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error(`shape need to be of size 2`);\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error(`dimension mismatch`);\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error(`invalid shape specified`);\r\n    }\r\n\r\n    if (!BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error(`gemm: invalid bias shape for broadcast`);\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\nexport class ProtoUtil {\r\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType): Tensor.DataType {\r\n    switch (typeProto) {\r\n      case onnx.TensorProto.DataType.INT8:\r\n        return 'int8';\r\n      case onnx.TensorProto.DataType.UINT8:\r\n        return 'uint8';\r\n      case onnx.TensorProto.DataType.BOOL:\r\n        return 'bool';\r\n      case onnx.TensorProto.DataType.INT16:\r\n        return 'int16';\r\n      case onnx.TensorProto.DataType.UINT16:\r\n        return 'uint16';\r\n      case onnx.TensorProto.DataType.INT32:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT32:\r\n        return 'uint32';\r\n      case onnx.TensorProto.DataType.FLOAT:\r\n        return 'float32';\r\n      case onnx.TensorProto.DataType.DOUBLE:\r\n        return 'float64';\r\n      case onnx.TensorProto.DataType.STRING:\r\n        return 'string';\r\n\r\n      // For INT64/UINT64, reduce their value to 32-bits.\r\n      // Should throw exception when overflow\r\n      case onnx.TensorProto.DataType.INT64:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT64:\r\n        return 'uint32';\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n    }\r\n  }\r\n\r\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\r\n    // get rid of Long type for dims\r\n    return dims.map(d => Long.isLong(d) ? (d as Long).toNumber() : d as number);\r\n  }\r\n\r\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\r\n    return {\r\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\r\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\r\n    };\r\n  }\r\n}\r\n\r\nexport class LongUtil {\r\n  static longToNumber(n: Long|number) {\r\n    if (Long.isLong(n)) {\r\n      return (n as Long).toNumber();\r\n    }\r\n    return n as number;\r\n  }\r\n}\r\n\r\nexport class ShapeUtil {\r\n  static size(dims: ReadonlyArray<number>): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  // `axis` inclusive\r\n  static sizeFromDimension(dims: ReadonlyArray<number>, axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  // `axis` exclusive\r\n  static sizeToDimension(dims: ReadonlyArray<number>, axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  static getSizeFromDimensionRange(dims: ReadonlyArray<number>, start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be 0 or negative.\r\n      if (dims[i] <= 0) {\r\n        throw new Error(\r\n            // tslint:disable-next-line:max-line-length\r\n            `cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.`);\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  static transpose(dims: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const copy = dims.slice();\r\n    return copy.reverse();\r\n  }\r\n\r\n  static indicesToOffset(indices: ReadonlyArray<number>, strides: ReadonlyArray<number>, axis?: number): number {\r\n    if (axis === undefined) {\r\n      axis = indices.length;\r\n    }\r\n    let offset = 0;\r\n    for (let i = 0; i < axis; ++i) {\r\n      offset += strides[i] * indices[i];\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  static offsetToIndices(offset: number, strides: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const rank = strides.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [offset * strides[0]];\r\n    }\r\n    const indices: number[] = new Array(strides.length);\r\n    for (let i = 0; i < indices.length - 1; ++i) {\r\n      indices[i] = Math.floor(offset / strides[i]);\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[indices.length - 1] = offset;\r\n    return indices;\r\n  }\r\n\r\n  static parseAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  // Increment an index into a tensor (in lexicographic\r\n  // ordering), wrapping around the specified upper_bound.\r\n  /**\r\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\r\n   * @param index Given index to increment (Will be mutated)\r\n   * @param dims The dimensions of the tensor for which the given index corresponds to\r\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\r\n   */\r\n  static incrementIndex(index: number[], dims: ReadonlyArray<number>, axisToIncrementOn?: number) {\r\n    if (dims.length === 0 || index.length === 0) {\r\n      throw new Error(`Index incrementing unsupported for scalar Tensor`);\r\n    }\r\n    if (axisToIncrementOn === undefined) {\r\n      axisToIncrementOn = dims.length;\r\n    } else {\r\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\r\n        throw new Error(`Incorrect axis to increment on`);\r\n      }\r\n    }\r\n\r\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\r\n      index[k]++;\r\n      if (index[k] < dims[k]) {\r\n        break;\r\n      }\r\n      index[k] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\r\n   * Used in Reshape\r\n   * @param originalDims Original Shape array\r\n   * @param shapeHints array containing values to compute the new dimensions\r\n   * For example:\r\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\r\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\r\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\r\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\r\n   */\r\n\r\n  static calculateReshapedDims(\r\n      originalDims: ReadonlyArray<number>,\r\n      shapeHints: number[]|ReadonlyArray<number>|Tensor.IntegerType): ReadonlyArray<number> {\r\n    // reshape to a Scalar Tensor\r\n    if (shapeHints.length === 0) {\r\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\r\n        return [];\r\n      } else {\r\n        throw new Error(`cannot reshape to a scalar Tensor`);\r\n      }\r\n    }\r\n\r\n    const nDims = shapeHints.length;\r\n    const reshapedDims = new Array<number>(nDims);\r\n    let unknownDimension = -1;\r\n    let newTensorSize = 1;\r\n    for (let i = 0; i < nDims; i++) {\r\n      if (shapeHints[i] < -1) {\r\n        throw new Error('a dimension in shape hints cannot be less than -1');\r\n      }\r\n      if (shapeHints[i] === -1) {\r\n        if (unknownDimension !== -1) {\r\n          throw new Error('at most one dimension in shape hints can be -1');\r\n        }\r\n        unknownDimension = i;\r\n      } else {\r\n        if (shapeHints[i] === 0) {\r\n          if (i >= originalDims.length) {\r\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\r\n          }\r\n          reshapedDims[i] = originalDims[i];\r\n        } else {\r\n          reshapedDims[i] = shapeHints[i];\r\n        }\r\n        newTensorSize *= reshapedDims[i];\r\n      }\r\n    }\r\n\r\n    const oldTensorSize = ShapeUtil.size(originalDims);\r\n    if (unknownDimension !== -1) {\r\n      if (oldTensorSize % newTensorSize !== 0) {\r\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\r\n            originalDims}] Output shape: [${shapeHints}]`);\r\n      }\r\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\r\n    }\r\n    // validate sizes from originalDims and reshapedDims match\r\n    else {\r\n      if (newTensorSize !== oldTensorSize) {\r\n        throw new Error(`reshapedDims and originalDims don't have matching sizes`);\r\n      }\r\n    }\r\n    return reshapedDims;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: ReadonlyArray<number>, perm?: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: ReadonlyArray<number>, pad: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: ReadonlyArray<number>, shape2: ReadonlyArray<number>): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n\r\n  /**\r\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\r\n   * @param dims - input `dims` that needs to be checked\r\n   */\r\n  static validateDimsAndCalcSize(dims: ReadonlyArray<number>): number {\r\n    if (dims.length > 6) {\r\n      throw new TypeError(`Only rank 0 to 6 is supported for tensor shape.`);\r\n    }\r\n    let size = 1;\r\n    for (const n of dims) {\r\n      if (!Number.isInteger(n)) {\r\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\r\n      }\r\n      if (n <= 0 || n > 2147483647) {\r\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\r\n      }\r\n      size *= n;\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = flatten(x, axis)\r\n   * @param dims - shape of input tensor\r\n   * @param axis - flatten axis\r\n   */\r\n  static flattenShape(dims: ReadonlyArray<number>, axis: number): ReadonlyArray<number> {\r\n    const total = dims.reduce((x, y) => x * y, 1);\r\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\r\n    const outputDims = [total / right, right];\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = squeeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - squeeze axes\r\n   */\r\n  static squeezeShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const outputDims = new Array<number>();\r\n\r\n    // sanity check\r\n    if (axes.some(axis => axis >= dims.length || axis < 0)) {\r\n      throw new Error(`'axes' has an out of range axis`);\r\n    }\r\n\r\n    for (let i = 0; i < dims.length; i++) {\r\n      const inSqueezeList = axes.indexOf(i) >= 0;\r\n      if (inSqueezeList && dims[i] !== 1) {\r\n        throw new Error(`squeeze an axis of size different than 1`);\r\n      }\r\n\r\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\r\n        outputDims.push(dims[i]);\r\n      }\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - unsqueeze axes\r\n   */\r\n  static unsqueezeShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const outputDims = new Array<number>(dims.length + axes.length);\r\n\r\n    // initialize the array elements to 0\r\n    outputDims.fill(0);\r\n\r\n    // set all axes indices to 1 in outputDims and check for duplicates\r\n    for (let i = 0; i < axes.length; i++) {\r\n      const axis = axes[i];\r\n      if (axis >= outputDims.length) {\r\n        throw new Error(`'axes' has an out of range axis`);\r\n      }\r\n      if (outputDims[axis] !== 0) {\r\n        throw new Error(`'axes' has a duplicate axis`);\r\n      }\r\n\r\n      outputDims[axis] = 1;\r\n    }\r\n\r\n    // fill in the zero entries of outputDims with the input tensor's shape\r\n    let inputDimsIterator = 0;\r\n    for (let i = 0; i < outputDims.length; i++) {\r\n      if (outputDims[i] === 0) {\r\n        outputDims[i] = dims[inputDimsIterator++];\r\n      }\r\n    }\r\n\r\n    // sanity check assertion. 'inputDimsIterator'\r\n    // should be equal to the length of 'dims'\r\n    if (inputDimsIterator !== dims.length) {\r\n      throw new Error('the unsqueezed dimension could not be established');\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n}\r\n\r\n// bunch of helper methods that do a variety of math operations\r\nexport class MathUtil {\r\n  // y = (x*x) + y\r\n  static sqr(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error(`sourceIndex out of bounds`);\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error(`targetIndex out of bounds`);\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error(`source indices to be copied are outside bounds`);\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error(`target array is too small to hold result`);\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\r\n    }\r\n  }\r\n\r\n  // y = ax + y\r\n  static axpy(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, alpha: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error(`sourceIndex out of bounds`);\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error(`targetIndex out of bounds`);\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error(`source indices to be copied are outside bounds`);\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error(`target array is too small to hold result`);\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\r\n    }\r\n  }\r\n\r\n  // y = pow(x, b)\r\n  static powx(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, b: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error(`sourceIndex out of bounds`);\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error(`targetIndex out of bounds`);\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error(`source indices to be copied are outside bounds`);\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error(`target array is too small to hold result`);\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\r\n    }\r\n  }\r\n\r\n  // y = x * y\r\n  static mul(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error(`sourceIndex out of bounds`);\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error(`targetIndex out of bounds`);\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error(`source indices to be copied are outside bounds`);\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error(`target array is too small to hold result`);\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\r\n    }\r\n  }\r\n}\r\n\r\nexport class SplitUtil {\r\n  /**\r\n   * Calculates new Shapes from existing one and the splits given along the axis provides\r\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\r\n   * @param axis The dimension along which the Tensor will be split\r\n   * @param splits Offsets for the start of each split\r\n   */\r\n  static splitShape(dims: ReadonlyArray<number>, axis: number, split: number[], numOutputs?: number):\r\n      [number[][], number[]] {\r\n    if (split.length === 0) {\r\n      if (!numOutputs) {\r\n        throw new Error(`need to know number of outputs when the 'split' attribute is not specified`);\r\n      }\r\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\r\n    }\r\n\r\n    const shapes: number[][] = [];\r\n    const offsets = [0];\r\n    for (let i = 0; i < split.length; ++i) {\r\n      if (i !== 0) {\r\n        offsets.push(offsets[i - 1] + split[i - 1]);\r\n      }\r\n      const shape = dims.slice();\r\n      shape[axis] = split[i];\r\n      shapes.push(shape);\r\n    }\r\n    return [shapes, offsets];\r\n  }\r\n\r\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\r\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\r\n    if (numElementsAlongAxis % numOutputs !== 0) {\r\n      throw new Error(`cannot split tensor to equal sized parts`);\r\n    }\r\n    for (let i = 0; i < numOutputs; ++i) {\r\n      split.push(numElementsAlongAxis / numOutputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ReduceUtil {\r\n  /**\r\n   * Perform reduce operations on the specific operator\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduce(\r\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\r\n      op2: (a: number, b: number) => number): Tensor {\r\n    const dims = a.dims.slice(0);\r\n    // if axes is not set, perform reduce on all axes\r\n    if (axes.length === 0) {\r\n      dims.forEach((d, ind) => axes.push(ind));\r\n    }\r\n    // get a temporary broadcastable output shape\r\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\r\n\r\n    // loop through the output and calculate result one by one\r\n    const size = ShapeUtil.size(outputDims);\r\n    const y = new Tensor(outputDims, a.type);\r\n    const strides = ShapeUtil.computeStrides(outputDims);\r\n    const inputStrides = ShapeUtil.computeStrides(dims);\r\n    const indicesY = new Array(dims.length);\r\n    for (let i = 0; i < size; i++) {\r\n      const indices = ShapeUtil.offsetToIndices(i, strides);\r\n      // map index\r\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\r\n      y.set(\r\n          indices,\r\n          ReduceUtil.calcReduceByAxis(\r\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\r\n    }\r\n\r\n    if (keepdims) {\r\n      return y;\r\n    } else {\r\n      // keepdims == 0, calculate the expected shape\r\n      return new Tensor(\r\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform reduce operations on the specific operator on specific axes\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param dims The input dimension.\r\n   * @param curAxisInd Index in axes specifying the current dimension along\r\n   *      which the tensor will be reduced\r\n   * @param pos The current index of element to perform operation\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduceByAxis(\r\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\r\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\r\n    let res = 0;\r\n    if (curAxisInd >= axes.length) {\r\n      return op1(input[pos]);\r\n    }\r\n    const axis = axes[curAxisInd];\r\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\r\n    for (let i = 0; i < dims[axis]; i++) {\r\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\r\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\r\n      pos += step;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape of a reduce operation\r\n   * @param dims The input tensor dimension\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   */\r\n  static calcReduceShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>, keepDims: boolean): number[] {\r\n    const outputDims = dims.slice();\r\n    for (let i = 0; i < axes.length; i++) {\r\n      if (keepDims) {\r\n        outputDims[axes[i]] = 1;\r\n      } else {\r\n        outputDims[axes[i]] = 0;\r\n      }\r\n    }\r\n    return outputDims.filter(dim => dim !== 0);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, kernelShape: number[], strides: number[],\r\n      pads: number[]) {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error(`length of specified kernel shapes should be 2 less than length of input dimensions`);\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error(`strides should be greater than or equal to 1`);\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error(`pad should be greater than or equal to 1`);\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error(`kernel shapes need to be greater than 0`);\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error(`pads should be smaller than kernel`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: ReadonlyArray<number>, strides: number[], dilations: number[], kernelShape: number[], pads: number[],\r\n      autoPad?: string) {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n          autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, strides: number[], kernelShape: number[],\r\n      pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error(`input shape must be of size greater than 0`);\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    // TODO: support dilations for pool operators\r\n    const dilations = new Array<number>(kernelShape.length).fill(1);\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: ReadonlyArray<number>, filterDims: ReadonlyArray<number>, strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error(`invalid input tensor dims or invalid filter tensor dims`);\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, outputDims: number[], strides: ReadonlyArray<number>,\r\n      dilations: ReadonlyArray<number>, kernelShape: ReadonlyArray<number>, pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error(`Dilation not supported for SAME_UPPER or SAME_LOWER`);\r\n          }\r\n          const legacyTargetSize = (inSize + stride - 1) / stride;\r\n          const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n          pads[padHeadIndex] = (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n          pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n          return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n        default:\r\n          throw new Error(`Unsupported AutoPad type`);\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {ProtoUtil, ShapeUtil} from './util';\r\n\r\nexport declare namespace Tensor {\r\n  export interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    float64: Float64Array;\r\n    string: string[];\r\n    int8: Int8Array;\r\n    uint8: Uint8Array;\r\n    int16: Int16Array;\r\n    uint16: Uint16Array;\r\n    int32: Int32Array;\r\n    uint32: Uint32Array;\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n\r\n  export type StringType = Tensor.DataTypeMap['string'];\r\n  export type BooleanType = Tensor.DataTypeMap['bool'];\r\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\r\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\r\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\r\n  export type NumberType = BooleanType|IntegerType|FloatType;\r\n\r\n  export interface Id {\r\n    // this field helps typescript to perform type check, comparing to use `Id` as an alias of object.\r\n    _tensorDataId_unused?: never;\r\n  }\r\n}\r\n\r\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\r\n\r\ntype DataProvider = (id: Tensor.Id) => TensorData;\r\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\r\n\r\nexport class Tensor {\r\n  /**\r\n   * get the underlying tensor data\r\n   */\r\n  get data(): TensorData {\r\n    if (this.cache === undefined) {\r\n      const data = this.dataProvider!(this.dataId);\r\n      if (data.length !== this.size) {\r\n        throw new Error(`Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.`);\r\n      }\r\n      this.cache = data;\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the underlying string tensor data. Should only use when type is STRING\r\n   */\r\n  get stringData() {\r\n    if (this.type !== 'string') {\r\n      throw new TypeError(`data type is not string`);\r\n    }\r\n\r\n    return this.data as Tensor.StringType;\r\n  }\r\n\r\n  /**\r\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL)\r\n   */\r\n  get integerData() {\r\n    switch (this.type) {\r\n      case 'uint8':\r\n      case 'int8':\r\n      case 'uint16':\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint32':\r\n      case 'bool':\r\n        return this.data as Tensor.IntegerType;\r\n\r\n      default:\r\n        throw new TypeError(`data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\r\n   */\r\n  get floatData() {\r\n    switch (this.type) {\r\n      case 'float32':\r\n      case 'float64':\r\n        return this.data as Tensor.FloatType;\r\n\r\n      default:\r\n        throw new TypeError(`data type is not float (float32, float64)`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\r\n   */\r\n  get numberData() {\r\n    if (this.type !== 'string') {\r\n      return this.data as Tensor.NumberType;\r\n    }\r\n    throw new TypeError(`type cannot be non-number (string)`);\r\n  }\r\n\r\n  /**\r\n   * get value of an element at the given indices\r\n   */\r\n  get(indices: ReadonlyArray<number>): Tensor.DataTypeMap[Tensor.DataType][number] {\r\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\r\n  }\r\n\r\n  /**\r\n   * set value of an element at the given indices\r\n   */\r\n  set(indices: ReadonlyArray<number>, value: Tensor.DataTypeMap[Tensor.DataType][number]) {\r\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\r\n  }\r\n\r\n  /**\r\n   * get the underlying tensor data asynchronously\r\n   */\r\n  async getData(): Promise<TensorData> {\r\n    // TBD: This function is designed for usage when any backend data provider offers a way to retrieve data in an\r\n    //      asynchronous way. should implement this function when enabling webgl async read data.\r\n\r\n    if (this.cache === undefined) {\r\n      this.cache = await this.asyncDataProvider!(this.dataId);\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  public readonly size: number;\r\n\r\n  private _strides: ReadonlyArray<number>;\r\n  /**\r\n   * get the strides for each dimension\r\n   */\r\n  get strides(): ReadonlyArray<number> {\r\n    if (!this._strides) {\r\n      this._strides = ShapeUtil.computeStrides(this.dims);\r\n    }\r\n    return this._strides;\r\n  }\r\n\r\n  constructor(\r\n      /**\r\n       * get the dimensions of the tensor\r\n       */\r\n      public readonly dims: ReadonlyArray<number>,\r\n      /**\r\n       * get the type of the tensor\r\n       */\r\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\r\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\r\n      /**\r\n       * get the data ID that used to map to a tensor data\r\n       */\r\n      public readonly dataId: Tensor.Id = {}) {\r\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\r\n    const size = this.size;\r\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\r\n\r\n    if (cache !== undefined) {\r\n      if (cache.length !== size) {\r\n        throw new RangeError(`Input dims doesn't match data length.`);\r\n      }\r\n    }\r\n\r\n    if (type === 'string') {\r\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\r\n        throw new TypeError(`cache should be a string array`);\r\n      }\r\n\r\n      if (empty) {\r\n        cache = new Array<string>(size);\r\n      }\r\n    } else {\r\n      if (cache !== undefined) {\r\n        const constructor = dataviewConstructor(type);\r\n        if (!(cache instanceof constructor)) {\r\n          throw new TypeError(`cache should be type ${constructor.name}`);\r\n        }\r\n      }\r\n\r\n      if (empty) {\r\n        const buf = new ArrayBuffer(size * sizeof(type));\r\n        this.cache = createView(buf, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from a ONNX Tensor object\r\n   * @param tensorProto the ONNX Tensor\r\n   */\r\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\r\n    if (!tensorProto) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\r\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      tensorProto.stringData!.forEach((str, i) => {\r\n        const buf = Buffer.from(str.buffer, str.byteOffset, str.byteLength);\r\n        value.data[i] = buf.toString();\r\n      });\r\n\r\n    } else if (\r\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\r\n        tensorProto.rawData.byteLength > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource =\r\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\r\n      const elementSize = sizeofProto(tensorProto.dataType!);\r\n      const length = tensorProto.rawData.byteLength / elementSize;\r\n\r\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\r\n        throw new Error(`invalid buffer length`);\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error(`buffer length mismatch`);\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    } else {\r\n      // populate value from array\r\n      let array: Array<number|Long>;\r\n      switch (tensorProto.dataType) {\r\n        case onnx.TensorProto.DataType.FLOAT:\r\n          array = tensorProto.floatData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT32:\r\n        case onnx.TensorProto.DataType.INT16:\r\n        case onnx.TensorProto.DataType.UINT16:\r\n        case onnx.TensorProto.DataType.INT8:\r\n        case onnx.TensorProto.DataType.UINT8:\r\n        case onnx.TensorProto.DataType.BOOL:\r\n          array = tensorProto.int32Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT64:\r\n          array = tensorProto.int64Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.DOUBLE:\r\n          array = tensorProto.doubleData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.UINT32:\r\n        case onnx.TensorProto.DataType.UINT64:\r\n          array = tensorProto.uint64Data!;\r\n          break;\r\n        default:\r\n          // should never run here\r\n          throw new Error('unspecific error');\r\n      }\r\n\r\n      if (array === null || array === undefined) {\r\n        throw new Error('failed to populate data from a tensorproto value');\r\n      }\r\n\r\n      const data = value.data;\r\n      if (data.length !== array.length) {\r\n        throw new Error(`array length mismatch`);\r\n      }\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const element = array[i];\r\n        if (Long.isLong(element)) {\r\n          data[i] = longToNumber(element as Long, tensorProto.dataType);\r\n        } else {\r\n          data[i] = element as number;\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from raw data\r\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\r\n   * for other types of tensor.\r\n   * @param dims the dimensions of the tensor\r\n   * @param type the type of the tensor\r\n   */\r\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: ReadonlyArray<number>, type: Tensor.DataType) {\r\n    return new Tensor(dims, type, undefined, undefined, data);\r\n  }\r\n}\r\n\r\nfunction sizeof(type: Tensor.DataType): number {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'int8':\r\n    case 'uint8':\r\n      return 1;\r\n    case 'int16':\r\n    case 'uint16':\r\n      return 2;\r\n    case 'int32':\r\n    case 'uint32':\r\n    case 'float32':\r\n      return 4;\r\n    case 'float64':\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\r\n  }\r\n}\r\n\r\nfunction sizeofProto(type: onnx.TensorProto.DataType): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.UINT8:\r\n    case onnx.TensorProto.DataType.INT8:\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 1;\r\n    case onnx.TensorProto.DataType.UINT16:\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 2;\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n    case onnx.TensorProto.DataType.INT32:\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 4;\r\n    case onnx.TensorProto.DataType.INT64:\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n\r\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\r\n  return new (dataviewConstructor(type))(dataBuffer);\r\n}\r\n\r\nfunction dataviewConstructor(type: Tensor.DataType) {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'uint8':\r\n      return Uint8Array;\r\n    case 'int8':\r\n      return Int8Array;\r\n    case 'int16':\r\n      return Int16Array;\r\n    case 'uint16':\r\n      return Uint16Array;\r\n    case 'int32':\r\n      return Int32Array;\r\n    case 'uint32':\r\n      return Uint32Array;\r\n    case 'float32':\r\n      return Float32Array;\r\n    case 'float64':\r\n      return Float64Array;\r\n    default:\r\n      // should never run to here\r\n      throw new Error('unspecified error');\r\n  }\r\n}\r\n\r\n// convert a long number to a 32-bit integer (cast-down)\r\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType): number {\r\n  // INT64, UINT32, UINT64\r\n  if (type === onnx.TensorProto.DataType.INT64) {\r\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\r\n      throw new TypeError('int64 is not supported');\r\n    }\r\n  } else if (type === onnx.TensorProto.DataType.UINT32 || type === onnx.TensorProto.DataType.UINT64) {\r\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\r\n      throw new TypeError('uint64 is not supported');\r\n    }\r\n  } else {\r\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n\r\n  return i.toNumber();\r\n}\r\n\r\n// read one value from TensorProto\r\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType, byteOffset: number): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.BOOL:\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return view.getUint8(byteOffset);\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return view.getInt8(byteOffset);\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return view.getUint16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return view.getInt16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return view.getFloat32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return view.getInt32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return view.getUint32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return view.getFloat64(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\r\n    default:\r\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * represent a version irrelevant abstraction of for GLSL source code\r\n */\r\nexport interface Glsl {\r\n  readonly version: string;\r\n  readonly attribute: string;\r\n  readonly varyingVertex: string;\r\n  readonly varyingFrag: string;\r\n  readonly texture2D: string;\r\n  readonly output: string;\r\n  readonly outputDeclaration: string;\r\n}\r\n\r\nconst GLSL_ES_2_0: Glsl = {\r\n  version: '',\r\n  attribute: 'attribute',\r\n  varyingVertex: 'varying',\r\n  varyingFrag: 'varying',\r\n  texture2D: 'texture2D',\r\n  output: 'gl_FragColor',\r\n  outputDeclaration: '',\r\n};\r\nconst GLSL_ES_3_0: Glsl = {\r\n  version: '#version 300 es',\r\n  attribute: 'in',\r\n  varyingVertex: 'out',\r\n  varyingFrag: 'in',\r\n  texture2D: 'texture',\r\n  output: 'outputColor',\r\n  outputDeclaration: 'out vec4 outputColor;',\r\n};\r\n\r\nexport function getGlsl(version: 1|2) {\r\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\r\n}\r\n\r\nexport function getVertexShaderSource(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n      precision highp float;\r\n      ${glsl.attribute} vec3 position;\r\n      ${glsl.attribute} vec2 textureCoord;\r\n\r\n      ${glsl.varyingVertex} vec2 TexCoords;\r\n\r\n      void main()\r\n      {\r\n          gl_Position = vec4(position, 1.0);\r\n          TexCoords = textureCoord;\r\n      }`;\r\n}\r\n\r\nexport function getFragShaderPreamble(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n    precision highp float;\r\n    precision highp int;\r\n    precision highp sampler2D;\r\n    ${glsl.varyingFrag} vec2 TexCoords;\r\n    ${glsl.outputDeclaration}\r\n\r\n    `;\r\n}\r\n\r\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\r\n  const glsl = getGlsl(version);\r\n  return `\r\n  void main() {\r\n    int indices[${outputShapeLength}];\r\n    toVec(TexCoords, indices);\r\n    vec4 result = vec4(process(indices));\r\n    ${glsl.output} = result;\r\n  }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport declare namespace Logger {\r\n  export interface SeverityTypeMap {\r\n    verbose: 'v';\r\n    info: 'i';\r\n    warning: 'w';\r\n    error: 'e';\r\n  }\r\n\r\n  export type Severity = keyof SeverityTypeMap;\r\n\r\n  export type Provider = 'none'|'console';\r\n\r\n  /**\r\n   * Logging config that used to control the behavior of logger\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * Specify the logging provider. 'console' by default\r\n     */\r\n    provider?: Provider;\r\n    /**\r\n     * Specify the minimal logger serverity. 'info' by default\r\n     */\r\n    minimalSeverity?: Logger.Severity;\r\n    /**\r\n     * Whether to output date time in log. true by default\r\n     */\r\n    logDateTime?: boolean;\r\n    /**\r\n     * Whether to output source information (Not yet supported). false by default\r\n     */\r\n    logSourceLocation?: boolean;\r\n  }\r\n\r\n  export interface CategorizedLogger {\r\n    verbose(content: string): void;\r\n    info(content: string): void;\r\n    warning(content: string): void;\r\n    error(content: string): void;\r\n  }\r\n}\r\n\r\nexport interface Logger {\r\n  (category: string): Logger.CategorizedLogger;\r\n\r\n  verbose(content: string): void;\r\n  verbose(category: string, content: string): void;\r\n  info(content: string): void;\r\n  info(category: string, content: string): void;\r\n  warning(content: string): void;\r\n  warning(category: string, content: string): void;\r\n  error(content: string): void;\r\n  error(category: string, content: string): void;\r\n\r\n  /**\r\n   * Reset the logger configuration.\r\n   * @param config specify an optional default config\r\n   */\r\n  reset(config?: Logger.Config): void;\r\n  /**\r\n   * Set the logger's behavior on the given category\r\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\r\n   * '' is specified, the default behavior will be updated.\r\n   * @param config the config object to indicate the logger's behavior\r\n   */\r\n  set(category: string, config: Logger.Config): void;\r\n}\r\n\r\ninterface LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string): void;\r\n}\r\nclass NoOpLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    // do nothing\r\n  }\r\n}\r\nclass ConsoleLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\r\n  }\r\n\r\n  private color(severity: Logger.Severity) {\r\n    switch (severity) {\r\n      case 'verbose':\r\n        return '\\x1b[34;40mv\\x1b[0m';\r\n      case 'info':\r\n        return '\\x1b[32mi\\x1b[0m';\r\n      case 'warning':\r\n        return '\\x1b[30;43mw\\x1b[0m';\r\n      case 'error':\r\n        return '\\x1b[31;40me\\x1b[0m';\r\n      default:\r\n        throw new Error(`unsupported severity: ${severity}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst SEVERITY_VALUE = {\r\n  verbose: 1000,\r\n  info: 2000,\r\n  warning: 4000,\r\n  error: 5000\r\n};\r\n\r\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\r\n  ['none']: new NoOpLoggerProvider(),\r\n  ['console']: new ConsoleLoggerProvider()\r\n};\r\nconst LOGGER_DEFAULT_CONFIG = {\r\n  provider: 'console',\r\n  minimalSeverity: 'info',\r\n  logDateTime: true,\r\n  logSourceLocation: false\r\n};\r\nlet LOGGER_CONFIG_MAP:\r\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\r\n\r\nfunction log(category: string): Logger.CategorizedLogger;\r\nfunction log(severity: Logger.Severity, content: string): void;\r\nfunction log(severity: Logger.Severity, category: string, content: string): void;\r\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\r\nfunction log(\r\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\r\n  if (arg1 === undefined) {\r\n    // log(category: string): Logger.CategorizedLogger;\r\n    return createCategorizedLogger(arg0);\r\n  } else if (arg2 === undefined) {\r\n    // log(severity, content);\r\n    logInternal(arg0 as Logger.Severity, arg1, 1);\r\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\r\n    // log(severity, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\r\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\r\n    // log(severity, category, content)\r\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\r\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\r\n    // log(severity, category, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\r\n  } else {\r\n    throw new TypeError('input is valid');\r\n  }\r\n}\r\n\r\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\r\n  return {\r\n    verbose: log.verbose.bind(null, category),\r\n    info: log.info.bind(null, category),\r\n    warning: log.warning.bind(null, category),\r\n    error: log.error.bind(null, category)\r\n  };\r\n}\r\n\r\n// NOTE: argument 'category' is put the last parameter beacause typescript\r\n// doesn't allow optional argument put in front of required argument. This\r\n// order is different from a usual logging API.\r\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\r\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\r\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\r\n    return;\r\n  }\r\n\r\n  if (config.logDateTime) {\r\n    content = `${new Date().toISOString()}|${content}`;\r\n  }\r\n\r\n  if (config.logSourceLocation) {\r\n    // TODO: calculate source location from 'stack'\r\n  }\r\n\r\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\r\n}\r\n\r\n// tslint:disable-next-line:no-namespace\r\nnamespace log {\r\n  export function verbose(content: string): void;\r\n  export function verbose(category: string, content: string): void;\r\n  export function verbose(arg0: string, arg1?: string) {\r\n    log('verbose', arg0, arg1);\r\n  }\r\n  export function info(content: string): void;\r\n  export function info(category: string, content: string): void;\r\n  export function info(arg0: string, arg1?: string) {\r\n    log('info', arg0, arg1);\r\n  }\r\n  export function warning(content: string): void;\r\n  export function warning(category: string, content: string): void;\r\n  export function warning(arg0: string, arg1?: string) {\r\n    log('warning', arg0, arg1);\r\n  }\r\n  export function error(content: string): void;\r\n  export function error(category: string, content: string): void;\r\n  export function error(arg0: string, arg1?: string) {\r\n    log('error', arg0, arg1);\r\n  }\r\n\r\n  export function reset(config?: Logger.Config): void {\r\n    LOGGER_CONFIG_MAP = {};\r\n    // tslint:disable-next-line:no-backbone-get-set-outside-model\r\n    set('', config || {});\r\n  }\r\n  export function set(category: string, config: Logger.Config): void {\r\n    if (category === '*') {\r\n      reset(config);\r\n    } else {\r\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\r\n      LOGGER_CONFIG_MAP[category] = {\r\n        provider: config.provider || previousConfig.provider,\r\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\r\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\r\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\r\n                                                                      config.logSourceLocation\r\n      };\r\n    }\r\n\r\n    // TODO: we want to support wildcard or regex?\r\n  }\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const Logger: Logger = log;\r\n\r\nexport declare namespace Profiler {\r\n  export interface Config {\r\n    maxNumberEvents?: number;\r\n    flushBatchSize?: number;\r\n    flushIntervalInMilliseconds?: number;\r\n  }\r\n\r\n  export type EventCategory = 'session'|'node'|'op'|'backend';\r\n\r\n  export interface Event {\r\n    end(): void;\r\n  }\r\n}\r\n\r\nclass Event implements Profiler.Event {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\r\n      private endCallback: (e: Event) => void) {}\r\n\r\n  end() {\r\n    this.endCallback(this);\r\n  }\r\n}\r\n\r\nclass EventRecord {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\r\n}\r\n\r\nexport class Profiler {\r\n  static create(config?: Profiler.Config): Profiler {\r\n    if (config === undefined) {\r\n      return new this();\r\n    }\r\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\r\n  }\r\n\r\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\r\n    this._started = false;\r\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\r\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\r\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\r\n  }\r\n\r\n  // start profiling\r\n  start() {\r\n    this._started = true;\r\n    this._timingEvents = [];\r\n    this._flushTime = now();\r\n    this._flushPointer = 0;\r\n  }\r\n\r\n  // stop profiling\r\n  stop() {\r\n    this._started = false;\r\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\r\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n    }\r\n  }\r\n\r\n  // create an event scope for the specific function\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T): T;\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>): Promise<T>;\r\n\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>): T|Promise<T> {\r\n    const event = this._started ? this.begin(category, name) : undefined;\r\n    let isPromise = false;\r\n\r\n    try {\r\n      const res = func();\r\n\r\n      // we consider a then-able object is a promise\r\n      if (res && typeof (res as Promise<T>).then === 'function') {\r\n        isPromise = true;\r\n        return new Promise<T>((resolve, reject) => {\r\n          (res as Promise<T>)\r\n              .then(\r\n                  value => {  // fulfilled\r\n                    resolve(value);\r\n                    if (event) {\r\n                      event.end();\r\n                    }\r\n                  },\r\n                  reason => {  // rejected\r\n                    reject(reason);\r\n                    if (event) {\r\n                      event.end();\r\n                    }\r\n                  });\r\n        });\r\n      }\r\n\r\n      return res;\r\n\r\n    } finally {\r\n      if (!isPromise && event) {\r\n        event.end();\r\n      }\r\n    }\r\n  }\r\n\r\n  // begin an event\r\n  begin(category: Profiler.EventCategory, name: string): Event {\r\n    if (!this._started) {\r\n      throw new Error('profiler is not started yet');\r\n    }\r\n    const startTime = now();\r\n    this.flush(startTime);\r\n    return new Event(category, name, startTime, e => this.end(e));\r\n  }\r\n\r\n  // end the specific event\r\n  private end(event: Event) {\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      const endTime = now();\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private logOneEvent(event: EventRecord) {\r\n    Logger.verbose(\r\n        `Profiler.${event.category}`,\r\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\r\n  }\r\n\r\n  private flush(currentTime: number) {\r\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\r\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\r\n      // should flush when either batch size accumlated or interval elepsed\r\n\r\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\r\n           this._flushPointer < this._timingEvents.length;\r\n           this._flushPointer++) {\r\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n      }\r\n\r\n      this._flushTime = now();\r\n    }\r\n  }\r\n\r\n  get started() {\r\n    return this._started;\r\n  }\r\n  private _started = false;\r\n  private _timingEvents: EventRecord[];\r\n\r\n  private readonly _maxNumberEvents: number;\r\n\r\n  private readonly _flushBatchSize: number;\r\n  private readonly _flushIntervalInMilliseconds: number;\r\n\r\n  private _flushTime: number;\r\n  private _flushPointer = 0;\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from './instrument';\r\nimport * as bindingCore from './wasm-binding-core';\r\nimport {WasmCallArgument} from './wasm-binding-core';\r\n\r\nexport {WasmCallArgument} from './wasm-binding-core';\r\n\r\ninterface PerformanceData extends bindingCore.PerformanceData {\r\n  startTimeWorker?: number;\r\n  endTimeWorker?: number;\r\n}\r\n\r\nlet workers: Worker[];\r\nlet WORKER_NUMBER: number;\r\n\r\n// complete callback after\r\ntype CompleteCallbackType = (buffer: ArrayBuffer, perfData: PerformanceData) => void;\r\nlet completeCallbacks: CompleteCallbackType[][];\r\n\r\nlet initialized = false;\r\nlet initializing = false;\r\n\r\n/**\r\n * initialize the WASM instance.\r\n *\r\n * this function should be called before any other calls to methods in WasmBinding.\r\n */\r\nexport function init(numWorkers: number, initTimeout: number): Promise<void> {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error(`multiple calls to 'init()' detected.`);\r\n  }\r\n\r\n  initializing = true;\r\n  return new Promise<void>((resolve, reject) => {\r\n    // the timeout ID that used as a guard for rejecting binding init.\r\n    // we set the type of this variable to unknown because the return type of function 'setTimeout' is different\r\n    // in node.js (type Timeout) and browser (number)\r\n    let waitForBindingInitTimeoutId: unknown;\r\n    const clearWaitForBindingInit = () => {\r\n      if (waitForBindingInitTimeoutId !== undefined) {\r\n        // tslint:disable-next-line:no-any\r\n        clearTimeout(waitForBindingInitTimeoutId as any);\r\n        waitForBindingInitTimeoutId = undefined;\r\n      }\r\n    };\r\n\r\n    const onFulfilled = () => {\r\n      clearWaitForBindingInit();\r\n      resolve();\r\n      initializing = false;\r\n      initialized = true;\r\n    };\r\n    const onRejected = (err: unknown) => {\r\n      clearWaitForBindingInit();\r\n      reject(err);\r\n      initializing = false;\r\n    };\r\n\r\n    const bindingInitTask = bindingCore.init();\r\n    // a promise that gets rejected after 5s to work around the fact that\r\n    // there is an unrejected promise in the wasm glue logic file when\r\n    // it has some problem instantiating the wasm file\r\n    const rejectAfterTimeOutPromise = new Promise((resolve, reject) => {\r\n      waitForBindingInitTimeoutId = setTimeout(() => {\r\n        reject('Wasm init promise failed to be resolved within set timeout');\r\n      }, initTimeout);\r\n    });\r\n\r\n    // user requests positive number of workers\r\n    if (numWorkers > 0) {\r\n      Logger.verbose('WebAssembly-Workers', `User has requested ${numWorkers} Workers.`);\r\n      // check if environment supports usage of workers\r\n      if (areWebWorkersSupported()) {\r\n        Logger.verbose(\r\n            'WebAssembly-Workers', `Environment supports usage of Workers. Will spawn ${numWorkers} Workers`);\r\n        WORKER_NUMBER = numWorkers;\r\n      } else {\r\n        Logger.error('WebAssembly-Workers', 'Environment does not support usage of Workers. Will not spawn workers.');\r\n        WORKER_NUMBER = 0;\r\n      }\r\n    }\r\n\r\n    // user explicitly disables workers\r\n    else {\r\n      Logger.verbose('WebAssembly-Workers', 'User has disabled usage of Workers. Will not spawn workers.');\r\n      WORKER_NUMBER = 0;\r\n    }\r\n\r\n    const workerInitTasks = new Array<Promise<void>>(WORKER_NUMBER);\r\n    workers = new Array(WORKER_NUMBER);\r\n    completeCallbacks = new Array(WORKER_NUMBER);\r\n\r\n    for (let workerId = 0; workerId < WORKER_NUMBER; workerId++) {\r\n      const workerInitTask = new Promise<void>((resolveWorkerInit, rejectWorkerInit) => {\r\n        // tslint:disable-next-line\r\n        const worker = require('worker-loader?name=./onnx-worker.js!./worker/worker-main')() as Worker;\r\n        workers[workerId] = worker;\r\n        completeCallbacks[workerId] = [];\r\n        worker.onerror = e => {\r\n          Logger.error('WebAssembly-Workers', `worker-${workerId} ERR: ${e}`);\r\n          if (initialized) {\r\n            // TODO: we need error-handling logic\r\n          } else {\r\n            rejectWorkerInit();\r\n          }\r\n        };\r\n        worker.onmessage = e => {\r\n          if (e && e.data && e.data.type) {\r\n            if (e.data.type === 'init-success') {\r\n              resolveWorkerInit();\r\n            } else if (e.data.type === 'ccall') {\r\n              const perfData = e.data.perfData as PerformanceData;\r\n              completeCallbacks[workerId].shift()!(e.data.buffer as ArrayBuffer, perfData);\r\n            } else {\r\n              throw new Error(`unknown message type from worker: ${e.data.type}`);\r\n            }\r\n          } else {\r\n            throw new Error(`missing message type from worker`);\r\n          }\r\n        };\r\n      });\r\n      workerInitTasks[workerId] = workerInitTask;\r\n    }\r\n\r\n    // TODO: Fix this hack to work-around the fact that the Wasm binding instantiate promise\r\n    // is unrejected incase there is a fatal exception (missing wasm file for example)\r\n    // we impose a healthy timeout (should not affect core framework performance)\r\n    Promise.race([bindingInitTask, rejectAfterTimeOutPromise])\r\n        .then(\r\n            () => {\r\n              // Wasm init promise resolved\r\n              Promise.all(workerInitTasks)\r\n                  .then(\r\n                      // Wasm AND Web-worker init promises resolved. SUCCESS!!\r\n                      onFulfilled,\r\n                      // Wasm init promise resolved. Some (or all) web-worker init promises failed to be resolved.\r\n                      // PARTIAL SUCCESS. Use Wasm backend with no web-workers (best-effort).\r\n                      () => {\r\n                        Logger.warning(\r\n                            'WebAssembly-Workers',\r\n                            'Unable to get all requested workers initialized. Will use Wasm backend with 0 workers.');\r\n                        // TODO: need house-keeping logic to cull exisitng successfully initialized workers\r\n                        WORKER_NUMBER = 0;\r\n                        onFulfilled();\r\n                      });\r\n            },\r\n            // Wasm init promise failed to be resolved. COMPLETE FAILURE. Reject this init promise.\r\n            onRejected);\r\n  });\r\n}\r\n\r\n// Extending the WasmBinding class to deal with web-worker specific logic here\r\nexport class WasmBinding extends bindingCore.WasmBinding {\r\n  protected static instance?: WasmBinding;\r\n  static getInstance(): WasmBinding {\r\n    if (!WasmBinding.instance) {\r\n      WasmBinding.instance = new WasmBinding();\r\n    }\r\n    return WasmBinding.instance;\r\n  }\r\n  static get workerNumber() {\r\n    return WORKER_NUMBER;\r\n  }\r\n  ccallRemote(workerId: number, functionName: string, ...params: WasmCallArgument[]): Promise<PerformanceData> {\r\n    if (!initialized) {\r\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\r\n    }\r\n\r\n    if (workerId < 0 || workerId >= WORKER_NUMBER) {\r\n      throw new Error(`invalid worker ID ${workerId}. should be in range [0, ${WORKER_NUMBER})`);\r\n    }\r\n\r\n    const offset: number[] = [];\r\n    const size = WasmBinding.calculateOffsets(offset, params);\r\n    const buffer = new ArrayBuffer(size);\r\n    WasmBinding.ccallSerialize(new Uint8Array(buffer), offset, params);\r\n\r\n    const startTime = bindingCore.now();\r\n    workers[workerId].postMessage({type: 'ccall', func: functionName, buffer}, [buffer]);\r\n\r\n    return new Promise<PerformanceData>((resolve, reject) => {\r\n      completeCallbacks[workerId].push((buffer, perf) => {\r\n        perf.startTimeWorker = perf.startTime;\r\n        perf.endTimeWorker = perf.endTime;\r\n        perf.startTime = startTime;\r\n        perf.endTime = bindingCore.now();\r\n\r\n        WasmBinding.ccallDeserialize(new Uint8Array(buffer), offset, params);\r\n        resolve(perf);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nfunction areWebWorkersSupported(): boolean {\r\n  // very simplistic check to make sure the environment supports usage of workers\r\n  // tslint:disable-next-line:no-any\r\n  if (typeof window !== 'undefined' && typeof (window as any).Worker !== 'undefined') {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ProgramInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport enum FunctionType {\r\n  ValueBased,\r\n  Positional\r\n}\r\nexport interface GlslFunction<T extends FunctionType> {\r\n  body: string;\r\n  name: string;\r\n  type: T;\r\n}\r\nexport interface GlslValueFunction extends GlslFunction<FunctionType.ValueBased> {}\r\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\r\n  inputShape: ReadonlyArray<number>;\r\n  outputShape: ReadonlyArray<number>;\r\n}\r\n\r\nexport class GlslContext {\r\n  constructor(public glContext: WebGLContext, public programInfo: ProgramInfo) {}\r\n}\r\nexport abstract class GlslLib {\r\n  constructor(public context: GlslContext) {}\r\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\r\n  abstract getCustomTypes(): {[name: string]: string};\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies\r\nexport class GlslLibRoutine {\r\n  constructor(public routineBody: string, public dependencies?: string[]) {}\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\r\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\r\nexport class GlslLibRoutineNode {\r\n  dependencies: GlslLibRoutineNode[];\r\n  routineBody: string;\r\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\r\n    if (dependencies) {\r\n      this.dependencies = dependencies;\r\n    } else {\r\n      this.dependencies = [];\r\n    }\r\n\r\n    if (routineBody) {\r\n      this.routineBody = routineBody;\r\n    }\r\n  }\r\n  addDependency(node: GlslLibRoutineNode) {\r\n    if (node) {\r\n      this.dependencies.push(node);\r\n    }\r\n  }\r\n}\r\n\r\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\r\nexport class TopologicalSortGlslRoutines {\r\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\r\n    if (!nodes || nodes.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (nodes.length === 1) {\r\n      return nodes;\r\n    }\r\n\r\n    const cycleCheck = new Set<string>();\r\n    const alreadyTraversed = new Set<string>();\r\n    const result = new Array<GlslLibRoutineNode>();\r\n\r\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\r\n    return result;\r\n  }\r\n\r\n  private static createOrderedNodes(\r\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\r\n      result: GlslLibRoutineNode[]) {\r\n    for (let i = 0; i < graphNodes.length; ++i) {\r\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\r\n    }\r\n  }\r\n\r\n  private static dfsTraverse(\r\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\r\n    // if this root has already been traversed return\r\n    if (!root || alreadyTraversed.has(root.name)) {\r\n      return;\r\n    }\r\n\r\n    // cyclic dependency has been detected\r\n    if (cycleCheck.has(root.name)) {\r\n      throw new Error(`Cyclic dependency detected. Can't topologically sort routines needed for shader.`);\r\n    }\r\n\r\n    // hold this node to detect cycles if any\r\n    cycleCheck.add(root.name);\r\n\r\n    // traverse children in a dfs fashion\r\n    const dependencies = root.dependencies;\r\n    if (dependencies && dependencies.length > 0) {\r\n      for (let i = 0; i < dependencies.length; ++i) {\r\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\r\n      }\r\n    }\r\n\r\n    // add to result holder\r\n    result.push(root);\r\n\r\n    // mark this node as traversed so that we don't traverse from this again\r\n    alreadyTraversed.add(root.name);\r\n\r\n    // release the hold\r\n    cycleCheck.delete(root.name);\r\n  }\r\n}\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n// global object reference\r\nutil.global = typeof window !== \"undefined\" && window\r\n           || typeof global !== \"undefined\" && global\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from './attribute';\r\nimport {InferenceHandler} from './backend';\r\nimport {Tensor} from './tensor';\r\n\r\nexport interface Operator {\r\n  initialize(attributes: Attribute): void;\r\n  checkInputs(inputs: Tensor[]): boolean;\r\n  run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n}\r\n\r\nexport const NUMBER_TYPES: ReadonlyArray<Tensor.DataType> =\r\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const INT_TYPES: ReadonlyArray<Tensor.DataType> = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const FLOAT_TYPES: ReadonlyArray<Tensor.DataType> = ['float32', 'float64'];\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Reshape} from '../../../ops/reshape';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureLayout} from '../types';\r\nimport {getPackedShape} from '../utils';\r\n\r\nexport class WebGLReshape extends Reshape {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\r\n    const reshapedTensor = reshape(inferenceHandler, inputs[0], reshapedDims);\r\n    return [reshapedTensor];\r\n  }\r\n}\r\n\r\nexport function reshape(\r\n    inferenceHandler: WebGLInferenceHandler, input: Tensor, reshapedDims: ReadonlyArray<number>): Tensor {\r\n  const inputTD = inferenceHandler.getOrCreateTextureData(input);\r\n  let packedShape = reshapedDims;\r\n  if (inputTD.channels === 4) {\r\n    packedShape = getPackedShape(reshapedDims);\r\n  }\r\n  const newTextureLayout: TextureLayout = {\r\n    channels: inputTD.channels,\r\n    height: inputTD.height,\r\n    width: inputTD.width,\r\n    // handle reshaping into scalar Tensors\r\n    shape: packedShape.length !== 0 ? packedShape : [1],\r\n    strides: ShapeUtil.computeStrides(packedShape),\r\n    unpackedShape: reshapedDims,\r\n  };\r\n\r\n  const newTextureData =\r\n      inferenceHandler.createSharedTextureData(newTextureLayout, input.type, inputTD.texture, input.dataId);\r\n  return newTextureData.tensor;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\n\r\nexport interface OpSet {\r\n  domain: string;\r\n  version: number;\r\n}\r\n\r\nexport declare namespace OpSet {\r\n  interface OperatorConstructor {\r\n    (node: Graph.Node): Operator;\r\n  }\r\n\r\n  /**\r\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\r\n   */\r\n  type Domain = ''|'ai.onnx.ml';\r\n\r\n  /**\r\n   * A resolve rule consists of 4 items: opType, opSetDomain, versionSelector and operatorConstructor\r\n   */\r\n  type ResolveRule = [string, Domain, string, OperatorConstructor];\r\n}\r\n\r\nexport function resolveOperator(\r\n    node: Graph.Node, opsets: ReadonlyArray<OpSet>, rules: ReadonlyArray<OpSet.ResolveRule>) {\r\n  for (const rule of rules) {\r\n    const opType = rule[0];\r\n    const domain = rule[1];\r\n    const versionSelector = rule[2];\r\n    const opConstructor = rule[3];\r\n\r\n    if (node.opType === opType) {  // operator type matches\r\n      for (const opset of opsets) {\r\n        // opset '' and 'ai.onnx' are considered the same.\r\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\r\n          if (matchSelector(opset.version, versionSelector)) {\r\n            return opConstructor(node);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\r\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\r\n}\r\n\r\nfunction matchSelector(version: number, selector: string): boolean {\r\n  if (selector.endsWith('+')) {\r\n    // minimum version match ('7+' expects version>=7)\r\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\r\n    return !isNaN(rangeStart) && rangeStart <= version;\r\n  } else if (selector.split('-').length === 2) {\r\n    // range match ('6-8' expects 6<=version<=8)\r\n    const pair = selector.split('-');\r\n    const rangeStart = Number.parseInt(pair[0], 10);\r\n    const rangeEnd = Number.parseInt(pair[1], 10);\r\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\r\n  } else {\r\n    // exact match ('7' expects version===7)\r\n    return Number.parseInt(selector, 10) === version;\r\n  }\r\n}\r\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\n// currently this operator supports ONLY 'test' mode\r\n// inputs/outputs and parameters will reflect that\r\n// the operator implementation only supports test mode\r\nexport abstract class BatchNormalization implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\r\n    this.momentum = attributes.getFloat('momentum', 0.9);\r\n    this.spatial = attributes.getInt('spatial', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 5) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n    const mean = inputs[3];\r\n    const var_ = inputs[4];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs can have only one dimensions\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n        var_.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n        var_.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n        (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\r\n        (var_.type !== 'float32' && var_.type !== 'float64')) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected epsilon: number;\r\n  protected momentum: number;\r\n  protected spatial: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class BinaryOp implements Operator {\r\n  constructor(\r\n      protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected opType?: string,\r\n      protected resultType?: Tensor.DataType) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Conv implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.dilations = attributes.getInts('dilations', [1, 1]);\r\n    this.group = attributes.getInt('group', 1);\r\n    this.kernelShape = attributes.getInts('kernel_shape', []);\r\n    this.pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n    this.strides = attributes.getInts('strides', [1, 1]);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    // Refer to the below link for all input checks\r\n    // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\r\n    if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n      return false;\r\n    }\r\n\r\n    // TODO : Need to add support for multi-dimensional conv\r\n    // currently only support 2-dimensional conv\r\n    if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n      return false;\r\n    }\r\n\r\n    // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n    const dataChannel = inputs[0].dims[1];\r\n    const filterInChannel = inputs[1].dims[1] * this.group;\r\n    if (dataChannel !== filterInChannel) {\r\n      return false;\r\n    }\r\n\r\n    // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n    if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n      return false;\r\n    }\r\n\r\n    const spatialRank = inputs[0].dims.length - 2;\r\n    // wrong dilations dimension\r\n    if (this.dilations.length !== spatialRank) {\r\n      return false;\r\n    }\r\n\r\n    // Wrong strides dimension\r\n    if (this.strides.length !== spatialRank) {\r\n      return false;\r\n    }\r\n\r\n    // Wrong pads dimension\r\n    if (this.pads.length !== spatialRank * 2) {\r\n      return false;\r\n    }\r\n\r\n    // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n    // (the first 2 dims are batch_size and channels)\r\n    if (this.kernelShape.length !== 0 && this.kernelShape.length !== inputs[1].dims.length - 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO : Need to add support for float64\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected autoPad: string;\r\n  protected dilations: number[];\r\n  protected group: number;\r\n  protected kernelShape: number[];\r\n  protected pads: number[];\r\n  protected strides: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, MatMulUtil, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuMatMul extends MatMul {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = matMul(inputs[0], inputs[1]);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function matMul(a: Tensor, b: Tensor) {\r\n  const [dimsA, dimsB] = MatMulUtil.preprocessInputShapes(a.dims, b.dims);\r\n  const mat2dShape = [dimsA[dimsA.length - 2], dimsB[dimsB.length - 1]];\r\n  const shape = BroadcastUtil.calcShape(dimsA, dimsB, true);\r\n  if (!shape) {\r\n    // the inputs cannot broadcast or cannot multiply\r\n    throw new Error(`input dimensions do not match the requirement`);\r\n  }\r\n  const size = ShapeUtil.size(shape);\r\n  const num2dMatrices = size / (mat2dShape[0] * mat2dShape[1]);\r\n\r\n  const y = new Tensor(shape, a.type === 'float64' || b.type === 'float64' ? 'float64' : 'float32');\r\n  let offsetY = 0;\r\n  const indices = new Array<number>(shape.length);\r\n  const indicesA = new Array<number>(a.dims.length);\r\n  const indicesB = new Array<number>(b.dims.length);\r\n  for (let i = 0; i < num2dMatrices; i++) {\r\n    // traverse nd array at 2d level\r\n    indices[shape.length - 2] = 0;\r\n    indices[shape.length - 1] = 0;\r\n    let rest = i;\r\n    for (let j = shape.length - 3; j >= 0; j--) {\r\n      indices[j] = rest % shape[j];\r\n      rest = Math.floor(rest / shape[j]);\r\n    }\r\n    // map the \"broadcasted\" index to original index\r\n    BroadcastUtil.fillIndex(indices, a.dims, indicesA);\r\n    BroadcastUtil.fillIndex(indices, b.dims, indicesB);\r\n    // calculate subarrays offset for A and B\r\n    const offsetA = indicesA.length <= 2 ? 0 : ShapeUtil.indicesToOffset(indicesA, a.strides, shape.length - 2);\r\n    const offsetB = indicesB.length <= 2 ? 0 : ShapeUtil.indicesToOffset(indicesB, b.strides, shape.length - 2);\r\n    // multiply like conventional matrices\r\n    matMul2d(\r\n        a.floatData.subarray(offsetA), b.floatData.subarray(offsetB), y.floatData.subarray(offsetY), false, false, 1, 0,\r\n        mat2dShape[0], mat2dShape[1], dimsA[dimsA.length - 1]);\r\n    offsetY += mat2dShape[0] * mat2dShape[1];\r\n  }\r\n  return y;\r\n}\r\n\r\n/**\r\n * perform matrix multiply on C = alpha * A * B + beta * C\r\n * @param A data of tensor A, whose shape is [M,K] or [K,M] (if transA)\r\n * @param B data of tensor B, whose shape is [K,N] or [N,K] (if transB)\r\n * @param C data of tensor C, whose shape is [M,N]\r\n */\r\nexport function matMul2d(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, transA: boolean,\r\n    transB: boolean, alpha: number, beta: number, M: number, N: number, K: number) {\r\n  if (transA && transB) {\r\n    return matMul2d_tAtB(A, B, C, alpha, beta, M, N, K);\r\n  } else if (transA) {\r\n    return matMul2d_tA(A, B, C, alpha, beta, M, N, K);\r\n  } else if (transB) {\r\n    return matMul2d_tB(A, B, C, alpha, beta, M, N, K);\r\n  } else {\r\n    return matMul2d_(A, B, C, alpha, beta, M, N, K);\r\n  }\r\n}\r\n\r\nfunction matMul2d_(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\r\n    beta: number, M: number, N: number, K: number) {\r\n  let offsetA = 0, offsetB = 0, offsetC = 0;\r\n  for (let mm = 0; mm < M; mm++) {\r\n    for (let nn = 0; nn < N; nn++) {\r\n      let sum = 0;\r\n      for (let kk = 0; kk < K; kk++) {\r\n        sum += A[offsetA] * B[offsetB];\r\n        offsetA += 1;\r\n        offsetB += N;\r\n      }\r\n      offsetA -= K;\r\n      offsetB -= N * K;\r\n      C[offsetC] = alpha * sum + beta * C[offsetC];\r\n      offsetC++;\r\n      offsetB++;\r\n    }\r\n    offsetB -= N;\r\n    offsetA += K;\r\n  }\r\n}\r\n\r\nfunction matMul2d_tA(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\r\n    beta: number, M: number, N: number, K: number) {\r\n  let offsetA = 0, offsetB = 0, offsetC = 0;\r\n  for (let mm = 0; mm < M; mm++) {\r\n    for (let nn = 0; nn < N; nn++) {\r\n      let sum = 0;\r\n      for (let kk = 0; kk < K; kk++) {\r\n        sum += A[offsetA] * B[offsetB];\r\n        offsetA += M;\r\n        offsetB += N;\r\n      }\r\n      offsetA -= M * K;\r\n      offsetB -= N * K;\r\n      C[offsetC] = alpha * sum + beta * C[offsetC];\r\n      offsetC++;\r\n      offsetB++;\r\n    }\r\n    offsetB -= N;\r\n    offsetA++;\r\n  }\r\n}\r\n\r\nfunction matMul2d_tB(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\r\n    beta: number, M: number, N: number, K: number) {\r\n  let offsetA = 0, offsetB = 0, offsetC = 0;\r\n  for (let mm = 0; mm < M; mm++) {\r\n    for (let nn = 0; nn < N; nn++) {\r\n      let sum = 0;\r\n      for (let kk = 0; kk < K; kk++) {\r\n        sum += A[offsetA] * B[offsetB];\r\n        offsetA += 1;\r\n        offsetB += 1;\r\n      }\r\n      offsetA -= K;\r\n      offsetB -= K;\r\n      C[offsetC] = alpha * sum + beta * C[offsetC];\r\n      offsetC++;\r\n      offsetB += K;\r\n    }\r\n    offsetB -= N * K;\r\n    offsetA += K;\r\n  }\r\n}\r\n\r\nfunction matMul2d_tAtB(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\r\n    beta: number, M: number, N: number, K: number) {\r\n  let offsetA = 0, offsetB = 0, offsetC = 0;\r\n  for (let mm = 0; mm < M; mm++) {\r\n    for (let nn = 0; nn < N; nn++) {\r\n      let sum = 0;\r\n      for (let kk = 0; kk < K; kk++) {\r\n        sum += A[offsetA] * B[offsetB];\r\n        offsetA += M;\r\n        offsetB += 1;\r\n      }\r\n      offsetA -= M * K;\r\n      offsetB -= K;\r\n      C[offsetC] = alpha * sum + beta * C[offsetC];\r\n      offsetC++;\r\n      offsetB += K;\r\n    }\r\n    offsetB -= N * K;\r\n    offsetA++;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class MatMul implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Gemm implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.transA = attributes.getInt('transA', 0) !== 0;\r\n    this.transB = attributes.getInt('transB', 0) !== 0;\r\n    this.alpha = attributes.getFloat('alpha', 1);\r\n    this.beta = attributes.getFloat('beta', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 3) {\r\n      return false;\r\n    }\r\n\r\n    // 'C' can be of dimensionality 1 or 2 only\r\n    if (inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n        (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\r\n        (inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\r\n      return false;\r\n    }\r\n\r\n    if ((inputs[0].type !== inputs[1].type) || (inputs[0].type !== inputs[2].type)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected transA: boolean;\r\n  protected transB: boolean;\r\n  protected alpha: number;\r\n  protected beta: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nclass PoolBase {\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected autoPad: string;\r\n  protected ceilMode: number;\r\n  protected countIncludePad: boolean;\r\n  protected kernelShape: number[];\r\n  protected strides: number[];\r\n  protected pads: number[];\r\n}\r\n\r\nexport abstract class AveragePool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.kernelShape = attributes.getInts('kernel_shape');\r\n    this.strides = attributes.getInts('strides', []);\r\n    this.pads = attributes.getInts('pads', []);\r\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\r\n\r\n    // TODO: support attribute 'ceil_mode'\r\n    if (this.ceilMode !== 0) {\r\n      throw new Error(`using ceil() in shape computation is not yet supported for AveragePool`);\r\n    }\r\n  }\r\n}\r\n\r\nexport abstract class GlobalAveragePool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n  }\r\n}\r\n\r\nexport abstract class MaxPool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.kernelShape = attributes.getInts('kernel_shape');\r\n    this.strides = attributes.getInts('strides', []);\r\n    this.pads = attributes.getInts('pads', []);\r\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\r\n    this.storageOrder = attributes.getInt('storage_order', 0);\r\n\r\n    // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n    if (this.storageOrder !== 0) {\r\n      throw new Error(`column major storage order is not yet supported for MaxPool`);\r\n    }\r\n    if (this.ceilMode !== 0) {\r\n      throw new Error(`using ceil() in shape computation is not yet supported for MaxPool`);\r\n    }\r\n  }\r\n\r\n  protected storageOrder: number;\r\n}\r\n\r\nexport abstract class GlobalMaxPool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Softmax implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Sum implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    const length = inputs[0].dims.length;\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (length !== inputs[i].dims.length) {\r\n        return false;\r\n      }\r\n\r\n      for (let j = 0; j < length; j++) {\r\n        if (inputs[0].dims[j] !== inputs[i].dims[j]) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (inputs[0].type !== inputs[i].type) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import * as platform from 'platform';\r\n\r\nimport * as onnx from './api';\r\nimport {Backend, Environment, Onnx} from './api';\r\n\r\ninterface ENV extends Environment {\r\n  readonly onnx: Onnx;\r\n  readonly backend: Backend;\r\n  readonly platform: Platform;\r\n}\r\n\r\nclass EnvironmentImpl implements ENV {\r\n  public readonly onnx = onnx;\r\n  public readonly backend = onnx.backend;\r\n  public readonly platform = platform;\r\n\r\n  public debug = false;\r\n}\r\n\r\nexport const env: ENV = new EnvironmentImpl();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Onnx} from './onnx';\r\nimport * as onnxImpl from './onnx-impl';\r\n\r\n// get or create the onnx object in the global context\r\nconst onnxGlobal = ((typeof window !== 'undefined') ? window : global) as {onnx?: Onnx};\r\nconst onnx: Onnx = onnxImpl;\r\nonnxGlobal.onnx = onnx;\r\n\r\n// set module exported object to global.onnx\r\nexport = onnxImpl;\r\n\r\n// declaration of object global.onnx\r\ndeclare global {\r\n  /**\r\n   * the global onnxjs exported object\r\n   */\r\n  const onnx: Onnx;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {CpuArgMax} from './ops/argMax';\r\nimport {CpuBatchNormalization} from './ops/batch-normalization';\r\nimport {CpuBinaryOp} from './ops/binary-op';\r\nimport {CpuConcat} from './ops/concat';\r\nimport {CpuConv} from './ops/conv';\r\nimport {CpuDropout} from './ops/dropout';\r\nimport {CpuFlatten} from './ops/flatten';\r\nimport {CpuGather} from './ops/gather';\r\nimport {CpuGemm} from './ops/gemm';\r\nimport {CpuImageScaler} from './ops/image-scaler';\r\nimport {CpuInstanceNormalization} from './ops/instance-normalization';\r\nimport {CpuLrn} from './ops/lrn';\r\nimport {CpuMatMul} from './ops/matmul';\r\nimport {CpuAveragePool, CpuGlobalAveragePool, CpuGlobalMaxPool, CpuMaxPool} from './ops/pool';\r\nimport * as cpuReduce from './ops/reduce';\r\nimport {CpuReshape} from './ops/reshape';\r\nimport {CpuSlice, CpuSliceV10} from './ops/slice';\r\nimport {CpuSoftmax} from './ops/softmax';\r\nimport {CpuSqueeze} from './ops/squeeze';\r\nimport {CpuSum} from './ops/sum';\r\nimport {CpuTile} from './ops/tile';\r\nimport {CpuTranspose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {CpuUnaryOp} from './ops/unary-op';\r\nimport {CpuUnsqueeze} from './ops/unsqueeze';\r\n\r\nexport const CPU_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\r\n  ['Abs', '', '6+', () => new CpuUnaryOp(NUMBER_TYPES, unaryOps.abs)],\r\n  ['Acos', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.acos)],\r\n  ['Acosh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.acosh)],\r\n  ['Add', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 + e2))],\r\n  ['And', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 && e2))],\r\n  ['ArgMax', '', '1+', () => new CpuArgMax()],\r\n  ['Asin', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.asin)],\r\n  ['Asinh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.asinh)],\r\n  ['Atan', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.atan)],\r\n  ['Atanh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.atanh)],\r\n  ['AveragePool', '', '7+', () => new CpuAveragePool()],  // TODO: support new attributes for AveragePool-10\r\n  ['BatchNormalization', '', '7+', () => new CpuBatchNormalization()],\r\n  ['Ceil', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.ceil)],\r\n  ['Clip', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.clip, unaryOps.clipInitializer)],\r\n  ['Concat', '', '4+', () => new CpuConcat()],\r\n  ['Conv', '', '1+', () => new CpuConv()],\r\n  ['Cos', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.cos)],\r\n  ['Cosh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.cosh)],\r\n  ['Div', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 / e2))],\r\n  ['Dropout', '', '7+', () => new CpuDropout()],\r\n  ['Elu', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.elu, unaryOps.eluInitializer)],\r\n  ['Exp', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.exp)],\r\n  ['Flatten', '', '1+', () => new CpuFlatten()],\r\n  ['Floor', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.floor)],\r\n  ['Gather', '', '1+', () => new CpuGather()],\r\n  ['Gemm', '', '7+', () => new CpuGemm()],\r\n  ['GlobalAveragePool', '', '1+', () => new CpuGlobalAveragePool()],\r\n  ['GlobalMaxPool', '', '1+', () => new CpuGlobalMaxPool()],\r\n  ['ImageScaler', '', '1+', () => new CpuImageScaler()],\r\n  ['InstanceNormalization', '', '6+', () => new CpuInstanceNormalization()],\r\n  ['IsNaN', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.isNan, undefined, 'bool')],\r\n  ['LeakyRelu', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.leakyRelu, unaryOps.leakyReluInitializer)],\r\n  ['Log', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.log)],\r\n  ['LRN', '', '1+', () => new CpuLrn()],\r\n  ['MatMul', '', '1+', () => new CpuMatMul()],\r\n  ['MaxPool', '', '1+', () => new CpuMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['Mul', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 * e2))],\r\n  ['Neg', '', '6+', () => new CpuUnaryOp(NUMBER_TYPES, unaryOps.neg)],\r\n  ['Not', '', '1+', () => new CpuUnaryOp(['bool'], unaryOps.not, undefined, 'bool')],\r\n  ['Or', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 || e2))],\r\n  ['PRelu', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 >= 0 ? e1 : e1 * e2))],\r\n  ['Reciprocal', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.reciprocal)],\r\n  ['ReduceLogSum', '', '1+', () => new cpuReduce.CpuReduceLogSum()],\r\n  ['ReduceMax', '', '1+', () => new cpuReduce.CpuReduceMax()],\r\n  ['ReduceMean', '', '1+', () => new cpuReduce.CpuReduceMean()],\r\n  ['ReduceMin', '', '1+', () => new cpuReduce.CpuReduceMin()],\r\n  ['ReduceProd', '', '1+', () => new cpuReduce.CpuReduceProd()],\r\n  ['ReduceSum', '', '1+', () => new cpuReduce.CpuReduceSum()],\r\n  ['ReduceSumSquare', '', '1+', () => new cpuReduce.CpuReduceSumSquare()],\r\n  ['Relu', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.relu)],\r\n  ['Reshape', '', '5+', () => new CpuReshape()],\r\n  ['Sigmoid', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sigmoid)],\r\n  ['Sign', '', '9+', () => new CpuUnaryOp(NUMBER_TYPES, unaryOps.sign)],\r\n  ['Sin', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sin)],\r\n  ['Sinh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sinh)],\r\n  ['Slice', '', '10+', () => new CpuSliceV10()],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', () => new CpuSlice()],\r\n  ['Softmax', '', '1+', () => new CpuSoftmax()],\r\n  ['Sqrt', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sqrt)],\r\n  ['Squeeze', '', '1+', () => new CpuSqueeze()],\r\n  ['Sub', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 - e2))],\r\n  ['Sum', '', '6+', () => new CpuSum()],  // TODO: support multidirectional broadcast for Sum-8\r\n  ['Tan', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.tan)],\r\n  ['Tanh', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.tanh)],\r\n  ['Tile', '', '6+', () => new CpuTile()],\r\n  ['Transpose', '', '1+', () => new CpuTranspose()],\r\n  ['Unsqueeze', '', '1+', () => new CpuUnsqueeze()],\r\n  ['Xor', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 ^ e2))],\r\n];\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Concat implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length < 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const inputType = inputs[0].type;\r\n    const inputDimensionality = inputs[0].dims.length;\r\n\r\n    // TODO: Support string concat\r\n    if (inputType === 'string') {\r\n      return false;\r\n    }\r\n\r\n    for (const input of inputs) {\r\n      // make sure types of all inputs match\r\n      if (input.type !== inputType) {\r\n        return false;\r\n      }\r\n\r\n      // make sure the dimensionality of all inputs are the same\r\n      if (input.dims.length !== inputDimensionality) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Dropout implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.ratio = attributes.getFloat('ratio', 0.5);\r\n    this.testMode = true;  // this is a hack to reflect that test mode is hardcoded\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected ratio: number;\r\n  protected testMode: boolean;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Flatten implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 1);  // default axis is 1\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims.length === 0) {\r\n      return false;  // scalar tensor is not supported\r\n    }\r\n\r\n    if (this.axis < 0 || this.axis > inputs[0].dims.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Gather implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n    const tensorRank = inputs[0].dims.length;\r\n    if (tensorRank < 1) {\r\n      return false;\r\n    }\r\n    if (this.axis < -tensorRank || this.axis > tensorRank - 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ImageScaler implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.scale = attributes.getFloat('scale');\r\n    this.bias = attributes.getFloats('bias');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims.length !== 4) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected scale: number;\r\n  protected bias: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class InstanceNormalization implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 3) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs can have only one dimensions\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n        (B.type !== 'float32' && B.type !== 'float64')) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected epsilon: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ReduceBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes', []);\r\n    this.keepDims = attributes.getInt('keepdims', 1) === 1;\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n  protected keepDims: boolean;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Reshape implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2 || inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[1].type !== 'int32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Slice implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.starts = attributes.getInts('starts');\r\n    this.ends = attributes.getInts('ends');\r\n    this.axes = attributes.getInts('axes', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n  protected ends: number[];\r\n  protected starts: number[];\r\n}\r\n\r\nexport abstract class SliceV10 implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length < 3 || inputs.length > 5) {\r\n      return false;\r\n    }\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\r\n      return false;\r\n    }\r\n    if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Squeeze implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Tile implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n    if (inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].dims[0] !== inputs[0].dims.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Transpose implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.perm = attributes.getInts('perm', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected perm: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {UnaryOp} from '../../../ops/unary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\ntype UnaryOpCoreFunction<T> = (input: Tensor.NumberType, output: Tensor.NumberType, attributes?: T) => void;\r\n\r\nexport class CpuUnaryOp<T = unknown> extends UnaryOp {\r\n  private attributes?: T;\r\n\r\n  constructor(\r\n      typeConstraint: ReadonlyArray<Tensor.DataType>, private func: UnaryOpCoreFunction<T>,\r\n      private attributesInitializer?: (attributes: Attribute) => T, resultType?: Tensor.DataType) {\r\n    super(typeConstraint, resultType);\r\n  }\r\n\r\n  initialize(attributes: Attribute) {\r\n    if (this.attributesInitializer) {\r\n      this.attributes = this.attributesInitializer(attributes);\r\n    }\r\n  }\r\n\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    // TODO:  use webpack + ts-loader + CustomTransformer\r\n    // tslint:disable-next-line:max-line-length\r\n    // https://github.com/TypeStrong/ts-loader#getcustomtransformers-----before-transformerfactory-after-transformerfactory--\r\n    const output = unaryOp(inputs[0], this.func, this.attributes, this.resultType);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function unaryOp<T>(\r\n    x: Tensor, func: UnaryOpCoreFunction<T>, attributes: T, resultType?: Tensor.DataType): Tensor {\r\n  const output = new Tensor(x.dims, resultType ? resultType : x.type);\r\n  const inputNumberData = x.data as Tensor.NumberType;\r\n  const outputNumberData = output.data as Tensor.NumberType;\r\n  func(inputNumberData, outputNumberData, attributes);\r\n  return output;\r\n}\r\n\r\n// specific implementations pertaining to each unary-op.\r\n// although this can be accomplished with an op lambda\r\n// that approach was found to be detrimental to performance\r\n// so we use this approach which involves slight code duplication\r\n\r\nexport function abs(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.abs(input[i]);\r\n  }\r\n}\r\n\r\nexport function acos(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.acos(input[i]);\r\n  }\r\n}\r\n\r\nexport function acosh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.acosh(input[i]);\r\n  }\r\n}\r\n\r\nexport function asin(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.asin(input[i]);\r\n  }\r\n}\r\n\r\nexport function asinh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.asinh(input[i]);\r\n  }\r\n}\r\n\r\nexport function atan(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.atan(input[i]);\r\n  }\r\n}\r\n\r\nexport function atanh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.atanh(input[i]);\r\n  }\r\n}\r\n\r\nexport function ceil(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.ceil(input[i]);\r\n  }\r\n}\r\n\r\nexport function clipInitializer(attributes: Attribute) {\r\n  return {\r\n    min: attributes.getFloat('min', -3.4028234663852886e+38),\r\n    max: attributes.getFloat('max', 3.4028234663852886e+38)\r\n  };\r\n}\r\n\r\nexport function clip(input: Tensor.NumberType, output: Tensor.NumberType, attributes: {min: number, max: number}) {\r\n  const min = attributes.min;\r\n  const max = attributes.max;\r\n  for (let i = 0; i < input.length; i++) {\r\n    const value = input[i];\r\n    output[i] = (value < min) ? min : (value > max) ? max : value;\r\n  }\r\n}\r\n\r\nexport function cos(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.cos(input[i]);\r\n  }\r\n}\r\n\r\nexport function cosh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.cosh(input[i]);\r\n  }\r\n}\r\n\r\nexport function eluInitializer(attributes: Attribute) {\r\n  return attributes.getFloat('alpha', 1.0);\r\n}\r\n\r\nexport function elu(input: Tensor.NumberType, output: Tensor.NumberType, attributes: number) {\r\n  const alpha = attributes;\r\n  for (let i = 0; i < input.length; i++) {\r\n    const value = input[i];\r\n    output[i] = value >= 0 ? value : alpha * (Math.exp(value) - 1.0);\r\n  }\r\n}\r\n\r\nexport function exp(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.exp(input[i]);\r\n  }\r\n}\r\n\r\nexport function floor(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.floor(input[i]);\r\n  }\r\n}\r\n\r\nexport function isNan(input: Tensor.NumberType, output: Tensor.BooleanType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Number.isNaN(input[i]) ? 1 : 0;\r\n  }\r\n}\r\n\r\nexport function leakyReluInitializer(attributes: Attribute) {\r\n  return attributes.getFloat('alpha', 0.01);\r\n}\r\n\r\nexport function leakyRelu(input: Tensor.NumberType, output: Tensor.NumberType, attributes: number) {\r\n  const alpha = attributes;\r\n  for (let i = 0; i < input.length; i++) {\r\n    const value = input[i];\r\n    output[i] = value >= 0 ? value : alpha * value;\r\n  }\r\n}\r\n\r\nexport function log(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.log(input[i]);\r\n  }\r\n}\r\n\r\nexport function neg(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = -input[i];\r\n  }\r\n}\r\n\r\nexport function not(input: Tensor.BooleanType, output: Tensor.BooleanType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = input[i] ? 0 : 1;\r\n  }\r\n}\r\n\r\nexport function reciprocal(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = 1.0 / input[i];\r\n  }\r\n}\r\n\r\nexport function relu(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.max(0, input[i]);\r\n  }\r\n}\r\n\r\nexport function sigmoid(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = (1 / (1 + Math.exp(-input[i])));\r\n  }\r\n}\r\n\r\nexport function sign(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = input[i] > 0 ? 1 : input[i] < 0 ? -1 : 0;\r\n  }\r\n}\r\n\r\nexport function sin(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.sin(input[i]);\r\n  }\r\n}\r\n\r\nexport function sinh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.sinh(input[i]);\r\n  }\r\n}\r\n\r\nexport function sqrt(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.sqrt(input[i]);\r\n  }\r\n}\r\n\r\nexport function tan(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.tan(input[i]);\r\n  }\r\n}\r\n\r\nexport function tanh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.tanh(input[i]);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class UnaryOp implements Operator {\r\n  constructor(protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected resultType?: Tensor.DataType) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Unsqueeze implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Clip implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.min = attributes.getFloat('min', -3.4028234663852886e+38);\r\n    this.max = attributes.getFloat('max', 3.4028234663852886e+38);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected min: number;\r\n  protected max: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Given a non RGBA shape calculate the R version\r\n * It is assumed that the dimensions are multiples of given channels\r\n * NOTE: it is always the last dim that gets packed.\r\n * @param unpackedShape original shape to create a packed version from\r\n */\r\nexport function getPackedShape(unpackedShape: ReadonlyArray<number>): ReadonlyArray<number> {\r\n  const len = unpackedShape.length;\r\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:use-named-parameter\r\n\r\nimport {Tensor as InternalTensor} from '../tensor';\r\nimport {Tensor as TensorInterface} from './tensor';\r\n\r\nimport * as Utils from './tensor-impl-utils';\r\n\r\ntype DataType = TensorInterface.DataType;\r\ntype Type = TensorInterface.Type;\r\ntype ElementType = TensorInterface.ElementType;\r\n\r\nexport class Tensor implements TensorInterface {\r\n  internalTensor: InternalTensor;\r\n  constructor(data: DataType|number[]|boolean[], type: Type, dims?: ReadonlyArray<number>) {\r\n    const inferredDims = dims ? dims : [data.length];\r\n    if (data.length === 0) {\r\n      throw new RangeError(`Tensor data should contain at least one element.`);\r\n    }\r\n    // convert regular arrays to typeArrays\r\n    if (Array.isArray(data) && type !== 'string') {\r\n      if (type === 'float32') {\r\n        // convert number[] to Float32Array\r\n        this.data = Float32Array.from(data as number[]);\r\n      } else if (type === 'bool') {\r\n        // convert boolean[] to Uint8Array\r\n        this.data = Uint8Array.from(data as number[]);\r\n      } else if (type === 'int32') {\r\n        // convert number[] to Int32Array\r\n        this.data = Int32Array.from(data as number[]);\r\n      }\r\n    } else {\r\n      this.data = data as DataType;\r\n    }\r\n\r\n    this.dims = inferredDims;\r\n    this.type = type;\r\n    this.internalTensor = new InternalTensor(this.dims, this.type, undefined, undefined, this.data);\r\n    this.size = this.internalTensor.size;\r\n  }\r\n\r\n  dims: ReadonlyArray<number>;\r\n  type: Type;\r\n  size: number;\r\n  data: DataType;\r\n  get(...indices: number[]): ElementType;\r\n  get(indices: ReadonlyArray<number>): ElementType;\r\n  get(indices?: ReadonlyArray<number>|number, ...rest: number[]): ElementType {\r\n    let indexArray: ReadonlyArray<number> = [];\r\n    if (typeof indices === 'number') {\r\n      indexArray = [indices, ...rest];\r\n    } else if (indices) {\r\n      indexArray = indices;\r\n    } else {\r\n      throw new Error(`Input index array is undefined. `);\r\n    }\r\n    // check dims\r\n    Utils.validateIndices(indexArray);\r\n    if (indexArray.length !== this.dims.length) {\r\n      throw new RangeError(`Input index array dims don't match the tensor dims.`);\r\n    }\r\n    // compute the flattened index\r\n    indexArray.forEach((dim: number, idx: number) => {\r\n      if (dim >= this.dims[idx]) {\r\n        throw new RangeError(`Input index array dims don't match the tensor dims.`);\r\n      }\r\n    });\r\n    const value = this.internalTensor.get(indexArray);\r\n    if (this.type === 'bool') {\r\n      return value === 1 ? true : false;\r\n    }\r\n    return value;\r\n  }\r\n  set(value: ElementType, ...indices: number[]): void;\r\n  set(value: ElementType, indices: ReadonlyArray<number>): void;\r\n  set(value: ElementType, indices?: ReadonlyArray<number>|number, ...rest: number[]) {\r\n    Utils.matchElementType(this.type, value);\r\n    let indexArray: ReadonlyArray<number> = [];\r\n    if (typeof indices === 'number') {\r\n      indexArray = [indices, ...rest];\r\n    } else if (indices) {\r\n      indexArray = indices;\r\n    } else {\r\n      throw new Error(`Input index array is undefined.`);\r\n    }\r\n    // check dims\r\n    Utils.validateIndices(indexArray);\r\n    if (indexArray.length !== this.dims.length) {\r\n      throw new RangeError(`Input index array dims don't match the tensor dims.`);\r\n    }\r\n    // compute the flattened index\r\n    indexArray.forEach((dim: number, idx: number) => {\r\n      if (dim >= this.dims[idx]) {\r\n        throw new RangeError(`Input index array dims don't match the tensor dims.`);\r\n      }\r\n    });\r\n\r\n    if (typeof value === 'boolean') {\r\n      this.internalTensor.set(indexArray, value ? 1 : 0);\r\n    } else {\r\n      this.internalTensor.set(indexArray, value);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Tensor as InternalTensor} from '../tensor';\r\nimport {Tensor as TensorInterface} from './tensor';\r\nimport {Tensor as ApiTensor} from './tensor-impl';\r\n\r\nexport function fromInternalTensor(internalTensor: InternalTensor): ApiTensor {\r\n  switch (internalTensor.type) {\r\n    case 'bool':\r\n      return new ApiTensor(new Uint8Array(internalTensor.integerData), 'bool', internalTensor.dims);\r\n    case 'float32':\r\n      return new ApiTensor(internalTensor.floatData as Float32Array, 'float32', internalTensor.dims);\r\n    case 'float64':\r\n      return new ApiTensor(new Float32Array(internalTensor.floatData), 'float32', internalTensor.dims);\r\n    case 'string':\r\n      return new ApiTensor(internalTensor.stringData, 'string', internalTensor.dims);\r\n    case 'int8' || 'uint8' || 'int16' || 'uint16' || 'uint32':\r\n      return new ApiTensor(new Int32Array(internalTensor.integerData), 'int32', internalTensor.dims);\r\n    case 'int32':\r\n      return new ApiTensor(internalTensor.integerData as Int32Array, 'int32', internalTensor.dims);\r\n    default:\r\n      throw new TypeError('Tensor type is not supported. ');\r\n  }\r\n}\r\n\r\nexport function toInternalTensor(tensor: ApiTensor): InternalTensor {\r\n  return new InternalTensor(tensor.dims, tensor.type, undefined, undefined, tensor.data);\r\n}\r\n\r\nexport function matchElementType(type: TensorInterface.Type, element: TensorInterface.ElementType) {\r\n  switch (typeof element) {\r\n    case 'string':\r\n      if (type !== 'string') {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      break;\r\n    case 'number':\r\n      if (type !== 'float32' && type !== 'int32') {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      if (type === 'float32' && Number.isInteger(element)) {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      if (type === 'int32' && !Number.isInteger(element)) {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      break;\r\n    case 'boolean':\r\n      if (type !== 'bool') {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      break;\r\n    default:\r\n      throw new TypeError(`The new element type is not supported.`);\r\n  }\r\n}\r\n\r\nexport function validateIndices(indices: ReadonlyArray<number>) {\r\n  if (indices.length < 0 || indices.length > 6) {\r\n    throw new RangeError(`Only rank 0 to 6 is supported for tensor shape.`);\r\n  }\r\n  for (const n of indices) {\r\n    if (!Number.isInteger(n)) {\r\n      throw new TypeError(`Invalid index: ${n} is not an integer`);\r\n    }\r\n    if (n < 0 || n > 2147483647) {\r\n      throw new TypeError(`Invalid index: length ${n} is not allowed`);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {CpuBackend} from '../backends/backend-cpu';\r\nimport {WasmBackend} from '../backends/backend-wasm';\r\nimport {WebGLBackend} from '../backends/backend-webgl';\r\n\r\nimport {Environment} from './env';\r\nimport {envImpl} from './env-impl';\r\nimport {Backend} from './onnx';\r\n\r\nexport * from './env';\r\nexport * from './onnx';\r\nexport * from './tensor';\r\nexport * from './inference-session';\r\n\r\nexport const backend: Backend = {\r\n  cpu: new CpuBackend(),\r\n  wasm: new WasmBackend(),\r\n  webgl: new WebGLBackend()\r\n};\r\n\r\nexport const ENV: Environment = envImpl;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend as BackendInterface} from '../api/onnx';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Session} from '../session';\r\n\r\nimport {CpuSessionHandler} from './cpu/session-handler';\r\n\r\ntype CpuOptions = BackendInterface.CpuOptions;\r\n\r\nexport class CpuBackend implements Backend, CpuOptions {\r\n  disabled?: boolean;\r\n\r\n  initialize(): boolean {\r\n    return true;\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new CpuSessionHandler(this, context);\r\n  }\r\n  dispose(): void {}\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend, InferenceHandler, SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\n\r\nimport {CpuInferenceHandler} from './inference-handler';\r\nimport {CPU_OP_RESOLVE_RULES} from './op-resolve-rules';\r\n\r\nexport class CpuSessionHandler implements SessionHandler {\r\n  constructor(readonly backend: Backend, readonly context: Session.Context) {}\r\n\r\n  createInferenceHandler(): InferenceHandler {\r\n    return new CpuInferenceHandler(this, this.context.profiler);\r\n  }\r\n\r\n  dispose(): void {}\r\n\r\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>): Operator {\r\n    const op = resolveOperator(node, opsets, CPU_OP_RESOLVE_RULES);\r\n    op.initialize(node.attributes);\r\n    return op;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Profiler} from '../../instrument';\r\n\r\nimport {CpuSessionHandler} from './session-handler';\r\n\r\nexport class CpuInferenceHandler implements InferenceHandler {\r\n  constructor(public readonly session: CpuSessionHandler, public readonly profiler?: Readonly<Profiler>) {}\r\n\r\n  dispose(): void {}\r\n}\r\n","import {ArgMax} from '../../../ops/argMax';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ReduceUtil, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuArgMax extends ArgMax {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = argMax(inputs[0], this.axis, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function argMax(x: Tensor, axis: number, keepdims: boolean): Tensor {\r\n  const rank = x.dims ? x.dims.length : 1;\r\n  axis = ShapeUtil.parseAxis(axis, rank);\r\n  const outputDims = ReduceUtil.calcReduceShape(x.dims, [axis], true);\r\n  const X = x.data;\r\n  const Y = new Int32Array(ShapeUtil.size(outputDims));\r\n  const blockSize = ShapeUtil.sizeFromDimension(x.dims, axis + 1);\r\n  const strides = ShapeUtil.computeStrides(outputDims);\r\n  const inputStrides = ShapeUtil.computeStrides(x.dims);\r\n  const indicesY = new Array(x.dims.length);\r\n  for (let i = 0; i < Y.length; i++) {\r\n    const indices = ShapeUtil.offsetToIndices(i, strides);\r\n    // map index\r\n    BroadcastUtil.fillIndex(indices, x.dims, indicesY);\r\n    const offset = ShapeUtil.indicesToOffset(indicesY, inputStrides);\r\n    let max = x.data[offset];\r\n    let index = 0;\r\n    for (let j = 0; j < x.dims[axis]; ++j) {\r\n      const value = X[offset + j * blockSize];\r\n      if (value > max) {\r\n        max = value;\r\n        index = j;\r\n      }\r\n    }\r\n    Y[i] = index;\r\n  }\r\n\r\n  return new Tensor(\r\n      keepdims ? outputDims : ReduceUtil.calcReduceShape(x.dims, [axis], keepdims), 'int32', undefined, undefined, Y);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ArgMax implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n    this.keepDims = attributes.getInt('keepdims', 1) === 1;\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n  protected keepDims: boolean;\r\n}\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// minimal library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index-minimal\");\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.roots        = require(\"./roots\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BatchNormalization} from '../../../ops/batch-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuBatchNormalization extends BatchNormalization {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = batchNormalization(\r\n        inputs[0], inputs[1], inputs[2], inputs[3], inputs[4], this.epsilon, this.momentum, this.spatial);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function batchNormalization(\r\n    x: Tensor, scale: Tensor, b: Tensor, mean: Tensor, variance: Tensor, epsilon: number, momentum: number,\r\n    spatial: number) {\r\n  const inputDimensions = x.dims;\r\n  const N = inputDimensions[0];\r\n  const C = inputDimensions[1];\r\n\r\n  // calculate channel size (i.e.) data points per channel\r\n  let channelSize = 1;\r\n  for (let i = 2; i < inputDimensions.length; i++) {\r\n    channelSize *= inputDimensions[i];\r\n  }\r\n\r\n  const output = new Tensor(x.dims, x.type);\r\n\r\n  const X = x.floatData;\r\n  const Y = output.floatData;\r\n  const scaleData = scale.numberData;\r\n  const bData = b.numberData;\r\n  const meanData = mean.numberData;\r\n  const varianceData = variance.numberData;\r\n\r\n  for (let nc = 0; nc < N * C; nc++) {\r\n    const offset = nc * channelSize;\r\n    for (let i = 0; i < channelSize; i++) {\r\n      Y[offset + i] =\r\n          scaleData[nc % C] * ((X[offset + i] - meanData[nc % C]) / Math.sqrt(varianceData[nc % C] + epsilon)) +\r\n          bData[nc % C];\r\n    }\r\n  }\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {BinaryOp} from '../../../ops/binary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuBinaryOp extends BinaryOp {\r\n  constructor(\r\n      typeConstraint: ReadonlyArray<Tensor.DataType>, private opLambda?: (e1: number, e2: number) => number,\r\n      opType?: string, resultType?: Tensor.DataType) {\r\n    super(typeConstraint, opType, resultType);\r\n  }\r\n\r\n  // overriding the initialize() in the base class\r\n  initialize(attributes: Attribute): void {\r\n    if (!this.opType && !this.opLambda) {\r\n      throw new Error(`Both opType and opLambda cannot be missing for a binary op`);\r\n    }\r\n    // Expose functionality to construct opLambdas on the fly\r\n    // This is not costly as initialize() should be invoked only once after the model is resolved to a graph object\r\n    if (!this.opLambda) {\r\n      switch (this.opType) {\r\n        default:\r\n          throw new Error(`Binary op could not be initialized. Missing op lambda.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = binaryOp(inputs[0], inputs[1], this.opLambda!, false, this.resultType);\r\n    return [output];\r\n  }\r\n}\r\n\r\nfunction binaryOp(\r\n    x: Tensor, y: Tensor, opLambda: (e1: number, e2: number) => number, inplace: boolean,\r\n    resultType?: Tensor.DataType): Tensor {\r\n  const result = BroadcastUtil.calc(x, y, opLambda, inplace, resultType);\r\n  if (!result) {\r\n    throw new Error('not broadcastable');\r\n  }\r\n  return result;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Concat} from '../../../ops/concat';\r\nimport {Tensor} from '../../../tensor';\r\nimport * as Util from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuConcat extends Concat {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = concat(inputs, this.axis);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function concat(x: Tensor[], axis: number) {\r\n  const input0 = x[0];\r\n  const inputShape = input0.dims;\r\n\r\n  if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n    throw new Error(`axis specified for concat doesn't match input dimensionality`);\r\n  }\r\n\r\n  if (axis < 0) {\r\n    axis = inputShape.length + axis;\r\n  }\r\n\r\n  // ensure all of the non-concatenated axes match each other\r\n  // along the way, calculate the shape of the output tensor\r\n  let concatAxisSize = inputShape[axis];\r\n  const outputShape = new Array<number>(inputShape.length);\r\n\r\n  for (let i = 1; i < x.length; i++) {\r\n    const dataN = x[i];\r\n    const dataNShape = dataN.dims;\r\n\r\n    for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n      // add to the placeholder for computing output shape\r\n      if (axisIndex === axis) {\r\n        concatAxisSize += dataNShape[axisIndex];\r\n      }\r\n\r\n      // ensure all non-cancatenated axes match each other\r\n      else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n        throw new Error(`non concat dimensions must match`);\r\n      }\r\n\r\n      // fill the 'outputShape' array\r\n      outputShape[axisIndex] = dataNShape[axisIndex];\r\n    }\r\n  }\r\n\r\n  // complete the 'outputShape' array\r\n  outputShape[axis] = concatAxisSize;\r\n\r\n  // main logic\r\n  const output = new Tensor(outputShape, input0.type);\r\n  const Y = output.numberData;\r\n\r\n  // the axisPitch is the number of elements to add to move\r\n  // to the next split axis in the output\r\n  let axisPitch = 1;\r\n  for (let i = outputShape.length - 1; i >= axis; i--) {\r\n    axisPitch *= outputShape[i];\r\n  }\r\n\r\n  let outputBase = 0;\r\n  for (let inputIndex = 0; inputIndex < x.length; inputIndex++) {\r\n    const dataN = x[inputIndex];\r\n\r\n    // the inputAxisPitch is the number of elements to add\r\n    // to move to the next split axis in the input\r\n    let inputAxisPitch = 1;\r\n    for (let i = dataN.dims.length - 1; i >= axis; i--) {\r\n      inputAxisPitch *= dataN.dims[i];\r\n    }\r\n\r\n    const inputData = dataN.numberData;\r\n    const inputSize = Util.ShapeUtil.size(dataN.dims);\r\n\r\n    // copy the data across.\r\n    // for every 'inputAxisPitch' values copied, we move over by\r\n    // the 'axisPitch'\r\n\r\n    let outputOffset = outputBase;\r\n\r\n    for (let i = 0, j = 0; i < inputSize; i++) {\r\n      Y[outputOffset + i] = inputData[i];\r\n      if (++j === inputAxisPitch) {\r\n        // subtract inputAxisPitch because output is being indexed by 'i'\r\n        outputOffset += (axisPitch - inputAxisPitch);\r\n        j = 0;\r\n      }\r\n    }\r\n    outputBase += inputAxisPitch;\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nimport {matMul2d} from './matmul';\r\n\r\nexport class CpuConv extends Conv {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const x = inputs[0];\r\n    const w = inputs[1];\r\n    const b = inputs.length === 3 ? inputs[2] : undefined;\r\n\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      const wDims = inputs[1].dims;\r\n      for (let i = 2; i < wDims.length; ++i) {\r\n        this.kernelShape.push(wDims[i]);\r\n      }\r\n    }\r\n\r\n    // create output Tensor after determining output size (after adjusting pads based on 'autoPad' attribute)\r\n    const outputDims = PoolConvUtil.computeConvOutputShape(\r\n        x.dims, w.dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    const y = new Tensor(outputDims, x.type);\r\n\r\n    conv2d(y, x, w, b, this.dilations, this.group, this.pads, this.strides);\r\n    return [y];\r\n  }\r\n}\r\n\r\n// tslint:disable: variable-name\r\nexport function conv2d(\r\n    Y: Tensor, X: Tensor, W: Tensor, B: Tensor|undefined, dilations: ReadonlyArray<number>, group: number,\r\n    pads: ReadonlyArray<number>, strides: ReadonlyArray<number>): void {\r\n  const input_num = X.dims[0];\r\n  const input_channels = X.dims[1];\r\n  const input_height = X.dims[2];\r\n  const input_width = X.dims[3];\r\n\r\n  const filter_num = W.dims[0];\r\n  const filter_channels = W.dims[1];\r\n  const filter_height = W.dims[2];\r\n  const filter_width = W.dims[3];\r\n  const filter_size = filter_num * filter_channels * filter_height * filter_width;\r\n  const kernel_shape = [filter_height, filter_width];\r\n\r\n  const output_num = Y.dims[0];\r\n  const output_channels = Y.dims[1];\r\n  const output_height = Y.dims[2];\r\n  const output_width = Y.dims[3];\r\n  const output_size = output_num * output_channels * output_height * output_width;\r\n\r\n  const input_image_size = input_height * input_width;\r\n  const output_image_size = output_height * output_width;\r\n  const kernel_size = kernel_shape[0] * kernel_shape[1];\r\n  const X_offset = input_channels / group * input_image_size;\r\n  const Y_offset = output_size / output_num / group;\r\n  const W_offset = filter_size / group;\r\n  const kernel_dim = input_channels / group * kernel_size;\r\n  const col_buffer_size = kernel_dim * output_image_size;\r\n\r\n  const col_buffer_data = new Float32Array(col_buffer_size);\r\n\r\n  for (let image_id = 0; image_id < input_num; ++image_id) {\r\n    let X_image_offset = 0;\r\n    let Y_image_offset = 0;\r\n    for (let group_id = 0; group_id < group; ++group_id) {\r\n      im2col(\r\n          X.floatData.subarray(X_image_offset + group_id * X_offset), col_buffer_data, input_channels / group,\r\n          input_height, input_width, kernel_shape[0], kernel_shape[1], dilations[0], dilations[1], pads[0], pads[1],\r\n          pads[2], pads[3], strides[0], strides[1]);\r\n\r\n      matMul2d(\r\n          W.floatData.subarray(group_id * W_offset), col_buffer_data,\r\n          Y.floatData.subarray(Y_image_offset + group_id * Y_offset), false, false, 1, 0, filter_num / group,\r\n          output_image_size, kernel_dim);\r\n    }\r\n\r\n    X_image_offset += X_offset * group;\r\n    Y_image_offset += Y_offset * group;\r\n  }\r\n\r\n  // Add bias if applicable\r\n  if (B) {\r\n    const biasData = B.floatData;\r\n    const outputData = Y.floatData;\r\n    const batchSize = Y.dims[0];\r\n    const outputChannels = Y.dims[1];\r\n    const channelSize = Y.dims[2] * Y.dims[3];\r\n    const dataSize = outputChannels * channelSize;\r\n    for (let batch = 0; batch < batchSize; ++batch) {\r\n      for (let channel = 0; channel < outputChannels; ++channel) {\r\n        const offset = batch * dataSize + channel * channelSize;\r\n        for (let index = 0; index < channelSize; ++index) {\r\n          outputData[offset + index] += biasData[channel];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction im2col(\r\n    data_im: Float32Array|Float64Array, data_col: Float32Array|Float64Array, channels: number, height: number,\r\n    width: number, kernel_h: number, kernel_w: number, dilation_h: number, dilation_w: number, pad_t: number,\r\n    pad_l: number, pad_b: number, pad_r: number, stride_h: number, stride_w: number) {\r\n  const output_h = ~~((height + pad_b + pad_t - (dilation_h * (kernel_h - 1) + 1)) / stride_h) + 1;\r\n  const output_w = ~~((width + pad_l + pad_r - (dilation_w * (kernel_w - 1) + 1)) / stride_w) + 1;\r\n\r\n  // Fast path for zero padding and no dilation\r\n  // From Torch, THNN_(unfolded_copy)\r\n  if (dilation_h === 1 && dilation_w === 1 && pad_l === 0 && pad_r === 0 && pad_t === 0 && pad_b === 0) {\r\n    for (let k = 0; k < channels * kernel_h * kernel_w; k++) {\r\n      const nip = ~~(k / (kernel_h * kernel_w));\r\n      const rest = k % (kernel_h * kernel_w);\r\n      const kh = ~~(rest / kernel_w);\r\n      const kw = rest % kernel_w;\r\n      const dst_offset = nip * (kernel_h * kernel_w * output_h * output_w) + kh * (kernel_w * output_h * output_w) +\r\n          kw * (output_h * output_w);\r\n      const src_offset = nip * (height * width);\r\n      for (let y = 0; y < output_h; y++) {\r\n        const iy = y * stride_h + kh;\r\n        const ix = kw;\r\n        if (stride_w === 1) {\r\n          data_col.set(\r\n              data_im.subarray(src_offset + iy * width + ix, src_offset + iy * width + ix + output_w),\r\n              dst_offset + y * output_w);\r\n        } else {\r\n          for (let x = 0; x < output_w; x++) {\r\n            data_col[dst_offset + (y * output_w + x)] = data_im[src_offset + (iy * width + ix + x * stride_w)];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Baseline\r\n  const dkernel_h = dilation_h * (kernel_h - 1) + 1;\r\n  const dkernel_w = dilation_w * (kernel_w - 1) + 1;\r\n\r\n  const height_col = ~~((height + pad_t + pad_b - dkernel_h) / stride_h) + 1;\r\n  const width_col = ~~((width + pad_l + pad_r - dkernel_w) / stride_w) + 1;\r\n\r\n  const channels_col = channels * kernel_h * kernel_w;\r\n  for (let c = 0; c < channels_col; ++c) {\r\n    const w_offset = c % kernel_w;\r\n    const h_offset = ~~(c / kernel_w) % kernel_h;\r\n    const c_im = ~~(c / (kernel_h * kernel_w));\r\n    for (let h = 0; h < height_col; ++h) {\r\n      for (let w = 0; w < width_col; ++w) {\r\n        const h_pad = h * stride_h - pad_t + h_offset * dilation_h;\r\n        const w_pad = w * stride_w - pad_l + w_offset * dilation_w;\r\n        if (h_pad >= 0 && h_pad < height && w_pad >= 0 && w_pad < width) {\r\n          data_col[(c * height_col + h) * width_col + w] = data_im[(c_im * height + h_pad) * width + w_pad];\r\n        } else {\r\n          data_col[(c * height_col + h) * width_col + w] = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Dropout} from '../../../ops/dropout';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuDropout extends Dropout {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = dropout(inputs[0], this.ratio, this.testMode);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function dropout(x: Tensor, ratio: number, isTestMode: boolean) {\r\n  if (!isTestMode) {\r\n    throw new Error('only test mode is supported');\r\n  }\r\n\r\n  const output = new Tensor(x.dims, x.type);\r\n  const X = x.floatData;\r\n  const Y = output.numberData;\r\n  Y.set(X);\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Flatten} from '../../../ops/flatten';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuFlatten extends Flatten {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = flatten(inputs[0], this.axis);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function flatten(x: Tensor, axis: number): Tensor {\r\n  const outputDims = ShapeUtil.flattenShape(x.dims, axis);\r\n  const output = new Tensor(outputDims, x.type);\r\n\r\n  const X = x.numberData;\r\n  const Y = output.numberData;\r\n\r\n  Y.set(X);\r\n\r\n  return output;\r\n}\r\n","import {Gather} from '../../../ops/gather';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuGather extends Gather {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = gather(inputs[0], inputs[1], this.axis);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function gather(x: Tensor, indices: Tensor, axis: number): Tensor {\r\n  axis = ShapeUtil.parseAxis(axis, x.dims.length);\r\n  const dims = x.dims.slice();\r\n  const newDims = dims.slice();\r\n  const indicesData = indices.data;\r\n  newDims[axis] = indicesData.length;\r\n  const dimsStrides = ShapeUtil.computeStrides(dims);\r\n  const newDimsStrides = ShapeUtil.computeStrides(newDims);\r\n  const output = new Tensor(newDims, x.type);\r\n  const Y = output.numberData;\r\n  const X = x.data;\r\n  for (let i = 0; i < Y.length; ++i) {\r\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStrides);\r\n    const oldLogicalIndex = newLogicalIndex.slice();\r\n    oldLogicalIndex[axis] = indicesData[newLogicalIndex[axis]] as number;\r\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, dimsStrides);\r\n    Y[i] = X[oldOffset] as number;\r\n  }\r\n  // calculate the output dims\r\n  const outputDims = dims.slice(0, axis).concat(indices.dims).concat(dims.slice(axis + 1));\r\n  return new Tensor(outputDims, x.type, undefined, undefined, Y);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Gemm} from '../../../ops/gemm';\r\nimport {Tensor} from '../../../tensor';\r\nimport * as util from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nimport {matMul2d} from './matmul';\r\n\r\nexport class CpuGemm extends Gemm {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = gemm(inputs[0], inputs[1], inputs[2], this.alpha, this.beta, this.transA, this.transB);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function gemm(a: Tensor, b: Tensor, c: Tensor, alpha: number, beta: number, transA: boolean, transB: boolean) {\r\n  const [M, N, K] = util.GemmUtil.getShapeOfGemmResult(a.dims, transA, b.dims, transB, c.dims);\r\n\r\n  // The result will always be of the shape [M,N]\r\n  const output = new Tensor([M, N], a.type);\r\n  // broadcast and assign value from C to output\r\n  if (util.BroadcastUtil.calc(output, c, (a, b) => b, true) !== output) {\r\n    throw new Error(`tensor C is not broadcastable to [M,N]`);\r\n  }\r\n\r\n  matMul2d(a.floatData, b.floatData, output.floatData, transA, transB, alpha, beta, M, N, K);\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ImageScaler} from '../../../ops/image-scaler';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuImageScaler extends ImageScaler {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = imageScaler(inputs[0], this.bias, this.scale);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function imageScaler(x: Tensor, bias: number[], scale: number): Tensor {\r\n  const [N, C, H, W] = x.dims;\r\n  const output = new Tensor([N, C, H, W], x.type);\r\n  const X = x.floatData;\r\n  const Y = output.floatData;\r\n  for (let nc = 0; nc < N * C; nc++) {\r\n    for (let hw = 0; hw < H * W; hw++) {\r\n      const index = nc * H * W + hw;\r\n      Y[index] = X[index] * scale + bias[nc % C];\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuInstanceNormalization extends InstanceNormalization {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = instanceNormalization(inputs[0], inputs[1], inputs[2], this.epsilon);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function instanceNormalization(x: Tensor, scale: Tensor, b: Tensor, epsilon: number) {\r\n  const inputDimensions = x.dims;\r\n  const N = inputDimensions[0];\r\n  const C = inputDimensions[1];\r\n\r\n  // calculate channel size (i.e.) data points per channel\r\n  let channelSize = 1;\r\n  for (let i = 2; i < inputDimensions.length; i++) {\r\n    channelSize *= inputDimensions[i];\r\n  }\r\n  const output = new Tensor(x.dims, x.type);\r\n\r\n  const X = x.floatData;\r\n  const Y = output.floatData;\r\n  const scaleData = scale.numberData;\r\n  const bData = b.numberData;\r\n\r\n  let temp: number;\r\n  let mean: number;\r\n  let variance: number;\r\n  let physicalOffset: number;\r\n  let iterEnd: number;\r\n  let currentChannel: number;\r\n\r\n  for (let nc = 0; nc < N * C; nc++) {\r\n    physicalOffset = nc * channelSize;\r\n    iterEnd = physicalOffset + channelSize;\r\n    currentChannel = nc % C;\r\n\r\n    // compute mean for this channel\r\n    temp = 0;\r\n    for (let i = physicalOffset; i < iterEnd; ++i) {\r\n      temp += X[i];\r\n    }\r\n    mean = temp / channelSize;\r\n\r\n    // compute variance for this channel\r\n    temp = 0;\r\n    for (let i = physicalOffset; i < iterEnd; ++i) {\r\n      temp += Math.pow(X[i] - mean, 2);\r\n    }\r\n    variance = temp / channelSize;\r\n\r\n    // compute normalized value for data in this channel\r\n    for (let i = physicalOffset; i < iterEnd; ++i) {\r\n      Y[i] = scaleData[currentChannel] * ((X[i] - mean) / Math.sqrt(variance + epsilon)) + bData[currentChannel];\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Lrn} from '../../../ops/lrn';\r\nimport {Tensor} from '../../../tensor';\r\nimport * as util from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuLrn extends Lrn {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = lrn(inputs[0], this.alpha, this.beta, this.bias, this.size);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function lrn(x: Tensor, alpha: number, beta: number, bias: number, size: number): Tensor {\r\n  const N = x.dims[0];\r\n  const C = x.dims[1];\r\n  const X = x.floatData;\r\n  let channelSize = 1;\r\n\r\n  for (let i = 2; i < x.dims.length; ++i) {\r\n    channelSize *= x.dims[i];\r\n  }\r\n\r\n  const tensorDataSize = channelSize * C;\r\n\r\n  // create new tensor to hold the result\r\n  const output = new Tensor(x.dims, x.type);\r\n  const Y: number[] = new Array(util.ShapeUtil.size(x.dims));\r\n\r\n  // update the output with just the bias to begin with\r\n  for (let i = 0; i < Y.length; ++i) {\r\n    Y[i] = bias;\r\n  }\r\n\r\n  // placeholder to store padded square (i.e.) intermediate data\r\n  const paddedSquareSize = (C + size - 1) * channelSize;\r\n  const paddedSquareData = new Float64Array(paddedSquareSize);\r\n\r\n  const alphaOverSize = alpha / size;\r\n  const prePad = (size - 1) / 2;\r\n\r\n  // go through the images\r\n  for (let n = 0; n < N; ++n) {\r\n    // compute the padded square\r\n    util.MathUtil.sqr(paddedSquareData, X, prePad * channelSize, tensorDataSize * n, tensorDataSize);\r\n\r\n    // create the first channel\r\n    for (let c = 0; c < size; ++c) {\r\n      util.MathUtil.axpy(Y, paddedSquareData, tensorDataSize * n, c * channelSize, channelSize, alphaOverSize);\r\n    }\r\n\r\n    for (let c = 1; c < C; ++c) {\r\n      const scaleSliceStart = n * tensorDataSize + c * channelSize;\r\n\r\n      // copy previous scale\r\n      util.arrayCopyHelper(Y, Y, scaleSliceStart, scaleSliceStart - channelSize, channelSize);\r\n\r\n      // add head\r\n      util.MathUtil.axpy(\r\n          Y, paddedSquareData, scaleSliceStart, (c + size - 1) * channelSize, channelSize, alphaOverSize);\r\n\r\n      // subtract tail\r\n      util.MathUtil.axpy(Y, paddedSquareData, scaleSliceStart, (c - 1) * channelSize, channelSize, -alphaOverSize);\r\n    }\r\n  }\r\n\r\n  util.MathUtil.powx(Y, Y, 0, 0, util.ShapeUtil.size(x.dims), -beta);\r\n\r\n  util.MathUtil.mul(Y, X, 0, 0, util.ShapeUtil.size(x.dims));\r\n\r\n  output.floatData.set(Y);\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Lrn implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 1E-4);\r\n    this.beta = attributes.getFloat('beta', 0.75);\r\n    this.bias = attributes.getFloat('bias', 1.0);\r\n    this.size = attributes.getInt('size');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    // input tensor must have atleast 3 dimensions\r\n    if (inputs[0].dims.length < 3) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n  protected beta: number;\r\n  protected bias: number;\r\n  protected size: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuAveragePool extends AveragePool {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output =\r\n        averagePool(inputs[0], this.autoPad, this.countIncludePad, this.kernelShape, this.pads, this.strides);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuGlobalAveragePool extends GlobalAveragePool {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = globalAveragePool(inputs[0]);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuMaxPool extends MaxPool {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = maxPool(inputs[0], this.autoPad, this.kernelShape, this.pads, this.strides);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuGlobalMaxPool extends GlobalMaxPool {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = globalMaxPool(inputs[0]);\r\n    return [output];\r\n  }\r\n}\r\n\r\n// Functions implementing specific pooling operations\r\nexport function averagePool(\r\n    input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[], pads: number[],\r\n    strides: number[]): Tensor {\r\n  return pool(\r\n      false, input, autoPad, countIncludePad, kernelShape, pads, strides, 0, (a, b) => (a + b), (a, b) => (a / b));\r\n}\r\n\r\nexport function globalAveragePool(input: Tensor): Tensor {\r\n  return pool(true, input, 'NOTSET', false, [], [], [], 0, (a, b) => (a + b), (a, b) => (a / b));\r\n}\r\n\r\nexport function maxPool(\r\n    input: Tensor, autoPad: string, kernelShape: number[], pads: number[], strides: number[]): Tensor {\r\n  return pool(\r\n      false, input, autoPad, false, kernelShape, pads, strides, Number.MIN_SAFE_INTEGER, (a, b) => (Math.max(a, b)),\r\n      (a, b) => a);\r\n}\r\n\r\nexport function globalMaxPool(input: Tensor): Tensor {\r\n  return pool(\r\n      true, input, 'NOTSET', false, [], [], [], Number.MIN_SAFE_INTEGER, (a, b) => (Math.max(a, b)), (a, b) => a);\r\n}\r\n\r\n/**\r\n * Perform pooling operations based on input\r\n * @param isGlobalOperator If true, perform global pooling.\r\n * @param input The input tensor.\r\n * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID\r\n * @param countIncludePad Whether include pad pixels when calculating values for the edges.\r\n * @param kernelShape The size of the kernel along each axis.\r\n * @param pads Padding for the beginning and ending along each axis. `pads` format should be as follow [x1_begin,\r\n *       x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and\r\n *       xi_end, the number of pixels added at the end of axis `i`.\r\n * @param strides Stride along each axis.\r\n * @param startVal The initial value to do pooling operations\r\n * @param processOp The operation to be performed on each element inside kernel\r\n * @param finalOp The operation to be performed over all elements inside kernel\r\n */\r\nexport function pool(\r\n    isGlobalOperator: boolean, input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[],\r\n    pads: number[], strides: number[], startVal: number, processOp: (a: number, b: number) => number,\r\n    finalOp: (a: number, b: number) => number): Tensor {\r\n  // adjust the shapes of input attributes\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, input.dims, kernelShape, strides, pads);\r\n\r\n  // calculate output shape based on input attributes.\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, input.dims, strides, kernelShape, pads, autoPad);\r\n\r\n  const kernelSize = ShapeUtil.size(kernelShape);\r\n  const kernelStrides = ShapeUtil.computeStrides(kernelShape);\r\n  const stridesRank = kernelStrides.length;\r\n  const rank = outputShape.length;\r\n\r\n  const outputSize = ShapeUtil.size(outputShape);\r\n  const output = new Tensor(outputShape, input.type);\r\n  const outputStride = ShapeUtil.computeStrides(outputShape);\r\n\r\n  for (let ind = 0; ind < outputSize; ind++) {\r\n    const curInd = ShapeUtil.offsetToIndices(ind, outputStride);\r\n    const startInd = curInd.slice(0);\r\n    const x = curInd.slice(0);\r\n    // calculate the start indices of kernel corresponding to current output indices\r\n    for (let i = 0; i < stridesRank; i++) {\r\n      startInd[rank - stridesRank + i] = curInd[rank - stridesRank + i] * strides[i];\r\n    }\r\n    let value = startVal;\r\n    let pad = 0;\r\n    let isPad = false;\r\n    // loop through elements within kernel\r\n    for (let i = 0; i < kernelSize; i++) {\r\n      const offset = ShapeUtil.offsetToIndices(i, kernelStrides);\r\n      isPad = false;\r\n      // \"Shift\" the kernel by the kernel start indices to loop through the kernel mapped to current output indices\r\n      for (let j = rank - stridesRank; j < rank; j++) {\r\n        x[j] = startInd[j] + offset[j - rank + stridesRank] - pads[j - 2];\r\n        // check if current indices fall in the padding area\r\n        if (x[j] >= input.dims[j] || x[j] < 0) {\r\n          pad++;\r\n          isPad = true;\r\n          break;\r\n        }\r\n      }\r\n      value = isPad ? value : processOp(value, input.get(x) as number);\r\n    }\r\n    value = countIncludePad ? finalOp(value, kernelSize) : finalOp(value, kernelSize - pad);\r\n    output.set(curInd, value);\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ReduceBase} from '../../../ops/reduce-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ReduceUtil, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuReduceSum extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = reduceSum(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceSumSquare extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceSumSquare(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceLogSum extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceLogSum(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceMax extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceMax(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceMin extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceMin(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceMean extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceMean(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceProd extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceProd(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\n// Functions implementing specific reduce operations\r\nexport function reduceSum(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\r\n}\r\n\r\nexport function reduceSumSquare(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b * b, (a, b) => a + b);\r\n}\r\n\r\nexport function reduceLogSum(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  const output = ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\r\n  const length = output.floatData.length;\r\n  for (let i = 0; i < length; i++) {\r\n    output.floatData[i] = Math.log(output.floatData[i]);\r\n  }\r\n  return output;\r\n}\r\n\r\nexport function reduceMax(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => Math.max(a, b));\r\n}\r\n\r\nexport function reduceMin(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => Math.min(a, b));\r\n}\r\n\r\nexport function reduceMean(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  const output = ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\r\n  const outputDims = ReduceUtil.calcReduceShape(input.dims as number[], axes, keepDims);\r\n  const inputSize = ShapeUtil.size(input.dims);\r\n  const outputSize = ShapeUtil.size(outputDims);\r\n  const numItems = inputSize / outputSize;\r\n  const length = output.floatData.length;\r\n  for (let i = 0; i < length; i++) {\r\n    output.floatData[i] = output.floatData[i] / numItems;\r\n  }\r\n  return output;\r\n}\r\n\r\nexport function reduceProd(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a * b);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Reshape} from '../../../ops/reshape';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuReshape extends Reshape {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reshape(inputs[0], inputs[1]);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function reshape(x: Tensor, shape: Tensor): Tensor {\r\n  const reshapedDims = ShapeUtil.calculateReshapedDims(x.dims, shape.integerData);\r\n  const output = new Tensor(reshapedDims, x.type);\r\n  const Y = output.floatData;\r\n  Y.set(x.floatData);\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Slice, SliceV10} from '../../../ops/slice';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuSlice extends Slice {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = slice(inputs[0], this.starts, this.ends, this.axes);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuSliceV10 extends SliceV10 {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n      throw new Error(`currently non-1 steps is not supported for Slice`);\r\n    }\r\n    const starts = Array.from(inputs[1].integerData);\r\n    const ends = Array.from(inputs[2].integerData);\r\n    const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n    const output = slice(inputs[0], starts, ends, axes);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function slice(\r\n    x: Tensor, starts: ReadonlyArray<number>, ends: ReadonlyArray<number>, axes: ReadonlyArray<number>): Tensor {\r\n  if (axes.length === 0) {\r\n    axes = x.dims.map((val, ind) => ind);\r\n  }\r\n  axes = axes.map(axis => ShapeUtil.parseAxis(axis, x.dims.length));\r\n  starts = starts.map((start, ind) => {\r\n    if (start > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.parseAxis(start, x.dims[axes[ind]]);\r\n  });\r\n  ends = ends.map((end, ind) => {\r\n    if (end > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.parseAxis(end, x.dims[axes[ind]]);\r\n  });\r\n  const size: number[] = [];\r\n  const adjustedStarts: number[] = [];\r\n  axes.forEach((val, ind) => {\r\n    size[val] = ends[ind] - starts[ind];\r\n    adjustedStarts[val] = starts[ind];\r\n  });\r\n  for (let i = 0; i < x.dims.length; i++) {\r\n    size[i] = size[i] || x.dims[i];\r\n    adjustedStarts[i] = adjustedStarts[i] || 0;\r\n  }\r\n\r\n  const newDimsStride = ShapeUtil.computeStrides(size);\r\n  const oldDimsStride = ShapeUtil.computeStrides(x.dims ? x.dims : [x.data.length]);\r\n  const X = x.data;\r\n  const output = new Tensor(size, x.type);\r\n  const Y = output.data;\r\n  for (let i = 0; i < Y.length; ++i) {\r\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStride);\r\n    const oldLogicalIndex = newLogicalIndex.map((idx, j) => idx + adjustedStarts[j]);\r\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, oldDimsStride);\r\n    Y[i] = X[oldOffset];\r\n  }\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Softmax} from '../../../ops/softmax';\r\nimport {Tensor} from '../../../tensor';\r\nimport * as util from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuSoftmax extends Softmax {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = softmax(inputs[0], this.axis);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function softmax(x: Tensor, axis: number): Tensor {\r\n  const inputDimensions = x.dims;\r\n  const inputRank = inputDimensions.length;\r\n\r\n  const axisCorrected = util.ShapeUtil.parseAxis(axis, inputRank);\r\n  const N = util.ShapeUtil.sizeToDimension(inputDimensions, axisCorrected);\r\n  const D = util.ShapeUtil.sizeFromDimension(inputDimensions, axisCorrected);\r\n\r\n  const X = x.numberData;\r\n\r\n  const output = new Tensor(x.dims, x.type);\r\n  const Y = output.numberData;\r\n\r\n  for (let i = 0; i < N; i++) {\r\n    // find row offset\r\n    const offset = i * D;\r\n\r\n    // find max of each logical row\r\n    let max = Number.MIN_VALUE;\r\n    for (let j = 0; j < D; j++) {\r\n      if (X[offset + j] > max) {\r\n        max = X[offset + j];\r\n      }\r\n    }\r\n\r\n    // find normalization scale per row\r\n    let scale = 0;\r\n    for (let j = 0; j < D; j++) {\r\n      const value = X[offset + j] - max;\r\n      Y[offset + j] = Math.exp(value);\r\n      scale += Math.exp(value);\r\n    }\r\n\r\n    // perform the softmax normalization\r\n    for (let j = 0; j < D; j++) {\r\n      if (scale === 0) {\r\n        Y[offset + j] = 0;\r\n      } else {\r\n        Y[offset + j] /= scale;\r\n      }\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Squeeze} from '../../../ops/squeeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuSqueeze extends Squeeze {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = squeeze(inputs[0], this.axes);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function squeeze(x: Tensor, axes: number[]): Tensor {\r\n  const outputDims = ShapeUtil.squeezeShape(x.dims, axes);\r\n  const output = new Tensor(outputDims, x.type);\r\n\r\n  const X = x.numberData;\r\n  const Y = output.numberData;\r\n\r\n  Y.set(X);\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Sum} from '../../../ops/sum';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuSum extends Sum {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = sum(inputs);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function sum(x: Tensor[]): Tensor {\r\n  const output = new Tensor(x[0].dims, x[0].type);\r\n  const size = x[0].floatData.length;\r\n  const Y = output.floatData;\r\n  for (let i = 0; i < x.length; i++) {\r\n    const arr = x[i].floatData;\r\n    for (let j = 0; j < size; ++j) {\r\n      Y[j] += arr[j];\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","import {Tile} from '../../../ops/tile';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuTile extends Tile {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = tile(inputs[0], inputs[1]);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function tile(x: Tensor, repeats: Tensor): Tensor {\r\n  const dims = x.dims ? x.dims : [x.data.length];\r\n  const rank = dims.length;\r\n  const newDims = new Array(rank);\r\n  for (let i = 0; i < rank; i++) {\r\n    newDims[i] = dims[i] * repeats.numberData[i];\r\n  }\r\n  const dimsStrides = ShapeUtil.computeStrides(dims);\r\n  const newDimsStrides = ShapeUtil.computeStrides(newDims);\r\n  const output = new Tensor(newDims, x.type);\r\n  const Y = output.numberData;\r\n  // TensorTransformUtils.createTypedArray(x.type, ShapeUtil.size(newDims));\r\n  const X = x.data;\r\n  for (let i = 0; i < Y.length; ++i) {\r\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStrides);\r\n    const oldLogicalIndex = new Array(rank);\r\n    for (let j = 0; j < rank; ++j) {\r\n      oldLogicalIndex[j] = newLogicalIndex[j] % x.dims[j];\r\n    }\r\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, dimsStrides);\r\n    Y[i] = X[oldOffset] as number;\r\n  }\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Transpose} from '../../../ops/transpose';\r\nimport {Tensor} from '../../../tensor';\r\nimport {arrayCopyHelper, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuTranspose extends Transpose {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = transpose(inputs[0], this.perm);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function transpose(x: Tensor, perm: number[]): Tensor {\r\n  const inputDims = x.dims;\r\n  const rank = inputDims.length;\r\n\r\n  // determine permutation to use\r\n  // if no permutation was specified in the attributes,\r\n  // the default is [rank-1, ..., 0]\r\n  let finalPerm = new Array<number>(rank);\r\n  if (perm.length === rank) {\r\n    finalPerm = perm;\r\n  } else {\r\n    for (let i = 0; i < rank; i++) {\r\n      finalPerm[i] = rank - i - 1;\r\n    }\r\n  }\r\n\r\n  const outputDims = new Array<number>(rank);\r\n  const stride = new Array<number>(rank);\r\n\r\n  // determine shape of output, as well as stride to be used\r\n  // stride[i] indicates the stride for the input-tensor dimension\r\n  // corresponding to the i-th dimension of the output\r\n  for (let i = 0; i < rank; i++) {\r\n    const inpDim = finalPerm[i];\r\n    outputDims[i] = inputDims[inpDim];\r\n    if (inpDim + 1 < rank) {\r\n      stride[i] = ShapeUtil.sizeFromDimension(inputDims, inpDim + 1);\r\n    } else {\r\n      stride[i] = 1;\r\n    }\r\n  }\r\n\r\n  const output = new Tensor(outputDims, x.type);\r\n\r\n  const X = x.floatData;\r\n  const Y = output.floatData;\r\n\r\n  // partition the permutation into a prefix and the largest suffix such that\r\n  // every axis i in the suffix is mapped to i.\r\n  let numAxesInPrefix = 0;  // number of axes in prefix\r\n  let suffixBlocksize = 1;  // product of dimensions in the suffix\r\n  let prefixBlocksize = 1;  // product of dimensions in the prefix\r\n  let isSuffix = true;\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    const inpAxis = finalPerm[i];\r\n    if (isSuffix && (inpAxis === i)) {\r\n      suffixBlocksize *= inputDims[inpAxis];\r\n    } else {\r\n      isSuffix = false;\r\n      prefixBlocksize *= inputDims[inpAxis];\r\n      ++numAxesInPrefix;\r\n    }\r\n  }\r\n\r\n  if (prefixBlocksize === 1) {\r\n    doTransposeSingleBlock(suffixBlocksize, Y, X);\r\n  } else if (suffixBlocksize === 1) {\r\n    doTransposeEltWise(numAxesInPrefix, outputDims, prefixBlocksize, stride, Y, X);\r\n  } else {\r\n    doTranspose(numAxesInPrefix, outputDims, prefixBlocksize, suffixBlocksize, stride, Y, X);\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\n// doTranspose: copies source tensor to target, transposing elements.\r\n// the stride vector indicates the transposition.\r\nfunction doTranspose(\r\n    numAxes: number, targetDims: number[], numBlocks: number, numElementsInBlock: number, stride: number[],\r\n    target: Tensor.FloatType, source: Tensor.FloatType) {\r\n  const targetIndex = new Array<number>(numAxes).fill(0);\r\n\r\n  const startSourceIndex = 0;\r\n  let startTargetIndex = 0;\r\n\r\n  for (let i = 0; i < numBlocks; ++i) {\r\n    const sizeOffset = ShapeUtil.indicesToOffset(targetIndex, stride, numAxes);\r\n    arrayCopyHelper(target, source, startTargetIndex, startSourceIndex + sizeOffset, numElementsInBlock);\r\n\r\n    ShapeUtil.incrementIndex(targetIndex, targetDims, numAxes);\r\n    startTargetIndex += numElementsInBlock;\r\n  }\r\n}\r\n\r\n// doTransposeEltWise: specialization of DoTranspose for the\r\n// num_elts_in_block=1 case. copies source tensor to target, transposing\r\n// elements. The stride vector indicates the transposition.\r\nfunction doTransposeEltWise(\r\n    numAxes: number, targetDims: number[], numBlocks: number, stride: number[], target: Tensor.FloatType,\r\n    source: Tensor.FloatType) {\r\n  const targetIndex = new Array<number>(numAxes).fill(0);\r\n\r\n  let startTargetIndex = 0;\r\n\r\n  for (let i = 0; i < numBlocks; ++i) {\r\n    const sourceOffset = ShapeUtil.indicesToOffset(targetIndex, stride, numAxes);\r\n    target[startTargetIndex++] = source[sourceOffset];\r\n    ShapeUtil.incrementIndex(targetIndex, targetDims, numAxes);\r\n  }\r\n}\r\n\r\n// doTransposeSingleBlock: specialization of DoTranspose for the num_blocks=1\r\n// case. copies source tensor to target, transposing elements. The stride\r\n// vector indicates the transposition.\r\nfunction doTransposeSingleBlock(numElementsInBlock: number, target: Tensor.FloatType, source: Tensor.FloatType) {\r\n  arrayCopyHelper(target, source, 0, 0, numElementsInBlock);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Unsqueeze} from '../../../ops/unsqueeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuUnsqueeze extends Unsqueeze {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = unsqueeze(inputs[0], this.axes);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function unsqueeze(x: Tensor, axes: number[]): Tensor {\r\n  const outputDims = ShapeUtil.unsqueezeShape(x.dims, axes);\r\n  const output = new Tensor(outputDims, x.type);\r\n\r\n  const X = x.numberData;\r\n  const Y = output.numberData;\r\n\r\n  Y.set(X);\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend as BackendInterface} from '../api/onnx';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\nimport * as wasmBinding from '../wasm-binding';\r\n\r\nimport {WasmSessionHandler} from './wasm/session-handler';\r\n\r\nexport let bindingInitPromise: Promise<void>|undefined;\r\n\r\ntype WasmOptions = BackendInterface.WasmOptions;\r\n\r\nexport class WasmBackend implements Backend, WasmOptions {\r\n  disabled?: boolean;\r\n  worker: number;\r\n  cpuFallback: boolean;\r\n  initTimeout: number;\r\n  constructor() {\r\n    // default parameters that users can override using the onnx global object\r\n\r\n    // by default fallback to pure JS cpu ops if not resolved in wasm backend\r\n    this.cpuFallback = true;\r\n\r\n    // by default use 3 workers\r\n    // TODO: Have logic to determing optimal fallback worker numbers based on CPU cores\r\n    this.worker = 3;\r\n\r\n    this.initTimeout = 5000;\r\n  }\r\n  async initialize(): Promise<boolean> {\r\n    this.checkIfNumWorkersIsValid();\r\n    const init = await this.isWasmSupported();\r\n    if (!init) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WasmSessionHandler(this, context, this.cpuFallback);\r\n  }\r\n  dispose(): void {}\r\n  checkIfNumWorkersIsValid() {\r\n    if (!Number.isFinite(this.worker) || Number.isNaN(this.worker)) {\r\n      throw new Error(`${this.worker} is not valid number of workers`);\r\n    }\r\n    if (!Number.isInteger(this.worker)) {\r\n      throw new Error(`${this.worker} is not an integer and hence not valid number of workers`);\r\n    }\r\n  }\r\n  async isWasmSupported(): Promise<boolean> {\r\n    try {\r\n      await wasmBinding.init(this.worker, this.initTimeout);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebAssembly', `Unable to initialize WebAssembly backend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ndeclare interface OnnxWasmBindingJs {\r\n  (self: OnnxWasmBindingJs): Promise<void>;\r\n\r\n  _malloc: (ptr: number) => number;\r\n  _free: (ptr: number) => void;\r\n\r\n  buffer: ArrayBuffer;\r\n\r\n  HEAP8: Int8Array;\r\n  HEAP16: Int16Array;\r\n  HEAP32: Int32Array;\r\n  HEAPU8: Uint8Array;\r\n  HEAPU16: Uint16Array;\r\n  HEAPU32: Uint32Array;\r\n  HEAPF32: Float32Array;\r\n  HEAPF64: Float64Array;\r\n}\r\n\r\n// an interface to define argument handling\r\nexport interface WasmCallArgumentTypeMap {\r\n  bool: boolean;\r\n  int32: number;\r\n  float32: number;\r\n  float64: number;\r\n  boolptr: ReadonlyArray<boolean>|Uint8Array;\r\n  int32ptr: ReadonlyArray<number>|Uint32Array|Int32Array|null;\r\n  float32ptr: ReadonlyArray<number>|Int32Array|Uint32Array|Float32Array|null;\r\n  float64ptr: ReadonlyArray<number>|Float64Array|null;\r\n}\r\n\r\n// some types related to arguments\r\nexport type WasmCallArgumentType = keyof WasmCallArgumentTypeMap;\r\nexport type WasmCallArgumentDataType = WasmCallArgumentTypeMap[WasmCallArgumentType];\r\n\r\nexport type WasmCallArgumentPass = 'in'|'out'|'inout';\r\n\r\nexport type WasmCallArgument = [WasmCallArgumentDataType, WasmCallArgumentType, WasmCallArgumentPass?];\r\n\r\n// an interface to deal with performance data related to Wasm function calls\r\nexport interface PerformanceData {\r\n  startTime?: number;\r\n  endTime?: number;\r\n\r\n  startTimeFunc?: number;\r\n  endTimeFunc?: number;\r\n}\r\n\r\n// some global parameters to deal with wasm binding initialization\r\nlet binding: OnnxWasmBindingJs|undefined;\r\nlet initialized = false;\r\nlet initializing = false;\r\n\r\n/**\r\n * initialize the WASM instance.\r\n *\r\n * this function should be called before any other calls to the WASM binding.\r\n */\r\nexport function init(): Promise<void> {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error(`multiple calls to 'init()' detected.`);\r\n  }\r\n\r\n  initializing = true;\r\n\r\n  return new Promise<void>((resolve, reject) => {\r\n    // tslint:disable-next-line:no-require-imports\r\n    binding = require('../dist/onnx-wasm') as OnnxWasmBindingJs;\r\n    binding(binding).then(\r\n        () => {\r\n          // resolve init() promise\r\n          resolve();\r\n          initializing = false;\r\n          initialized = true;\r\n        },\r\n        err => {\r\n          initializing = false;\r\n          reject(err);\r\n        });\r\n  });\r\n}\r\n\r\n// class that deals with Wasm data interop and method calling\r\nexport class WasmBinding {\r\n  protected ptr8: number;\r\n  protected numBytesAllocated: number;\r\n  protected constructor() {\r\n    this.ptr8 = 0;\r\n    this.numBytesAllocated = 0;\r\n  }\r\n\r\n  /**\r\n   * ccall in current thread\r\n   * @param functionName\r\n   * @param params\r\n   */\r\n  ccall(functionName: string, ...params: WasmCallArgument[]): PerformanceData {\r\n    if (!initialized) {\r\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\r\n    }\r\n    const startTime = now();\r\n\r\n    const offset: number[] = [];\r\n    const size = WasmBinding.calculateOffsets(offset, params);\r\n    if (size > this.numBytesAllocated) {\r\n      this.expandMemory(size);\r\n    }\r\n    WasmBinding.ccallSerialize(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size), offset, params);\r\n\r\n    const startTimeFunc = now();\r\n    this.func(functionName, this.ptr8);\r\n    const endTimeFunc = now();\r\n\r\n    WasmBinding.ccallDeserialize(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size), offset, params);\r\n    const endTime = now();\r\n\r\n    return {startTime, endTime, startTimeFunc, endTimeFunc};\r\n  }\r\n\r\n  // raw ccall method  without invoking ccallSerialize() and ccallDeserialize()\r\n  // user by ccallRemote() in the web-worker\r\n  ccallRaw(functionName: string, data: Uint8Array): PerformanceData {\r\n    if (!initialized) {\r\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\r\n    }\r\n    const startTime = now();\r\n\r\n    const size = data.byteLength;\r\n    if (size > this.numBytesAllocated) {\r\n      this.expandMemory(size);\r\n    }\r\n\r\n    // copy input memory (data) to WASM heap\r\n    binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size).set(data);\r\n\r\n    const startTimeFunc = now();\r\n    this.func(functionName, this.ptr8);\r\n    const endTimeFunc = now();\r\n\r\n    // copy Wasm heap to output memory (data)\r\n    data.set(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size));\r\n    const endTime = now();\r\n\r\n    return {startTime, endTime, startTimeFunc, endTimeFunc};\r\n  }\r\n\r\n  protected func(functionName: string, ptr8: number): void {\r\n    // tslint:disable-next-line:no-any\r\n    const func = (binding as any)[functionName] as (data: number) => void;\r\n    func(ptr8);\r\n  }\r\n\r\n  static calculateOffsets(offset: number[], params: WasmCallArgument[]): number {\r\n    // calculate size and offset\r\n    let size = 4 + 4 * params.length;\r\n    for (let i = 0; i < params.length; i++) {\r\n      const param = params[i];\r\n      const paramData = param[0];\r\n      const paramType = param[1];\r\n      const paramPass = param[2];\r\n\r\n      let len = 0;\r\n      switch (paramType) {\r\n        case 'bool':\r\n        case 'int32':\r\n        case 'float32':\r\n          len = 4;\r\n          break;\r\n        case 'float64':\r\n          len = 8;\r\n          break;\r\n        case 'boolptr':\r\n          if (!paramData) {\r\n            // deal with nullptr\r\n            offset.push(0);\r\n            continue;\r\n          } else if (Array.isArray(paramData) || ArrayBuffer.isView(paramData)) {\r\n            len = 4 * Math.ceil(paramData.length / 4);\r\n          } else {\r\n            throw new Error(`boolptr requires boolean array or Uint8Array`);\r\n          }\r\n          break;\r\n        case 'int32ptr':\r\n        case 'float32ptr':\r\n          if (!paramData) {\r\n            // deal with nullptr\r\n            offset.push(0);\r\n            continue;\r\n          } else if (Array.isArray(paramData)) {\r\n            if (paramPass === 'inout' || paramPass === 'out') {\r\n              throw new TypeError(`inout/out parameters must be ArrayBufferView for ptr types.`);\r\n            }\r\n            len = paramData.length * 4;\r\n          } else if (ArrayBuffer.isView(paramData)) {\r\n            len = paramData.byteLength;\r\n          } else {\r\n            throw new TypeError(`unsupported data type in 'ccall()'`);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`not supported parameter type: ${paramType}`);\r\n      }\r\n\r\n      offset.push(size);\r\n      size += len;\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  // tranfer data parameters (in/inout) to emscripten heap for ccall()\r\n  static ccallSerialize(heapU8: Uint8Array, offset: number[], params: WasmCallArgument[]) {\r\n    const heap32 = new Int32Array(heapU8.buffer, heapU8.byteOffset);\r\n    const heapU32 = new Uint32Array(heapU8.buffer, heapU8.byteOffset);\r\n    const heapF32 = new Float32Array(heapU8.buffer, heapU8.byteOffset);\r\n\r\n    heapU32[0] = params.length;\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      const param = params[i];\r\n      const paramData = param[0];\r\n      const paramType = param[1];\r\n      const paramPass = param[2];\r\n      const offset8 = offset[i];\r\n      const offset32 = offset8 >> 2;\r\n\r\n      heapU32[i + 1] = offset8;\r\n\r\n      if (paramPass === 'out' || offset8 === 0) {\r\n        continue;\r\n      }\r\n\r\n      switch (paramType) {\r\n        case 'bool':\r\n          heapU8[offset8] = (paramData as WasmCallArgumentTypeMap['bool']) === true ? 1 : 0;\r\n          break;\r\n        case 'int32':\r\n          heap32[offset32] = paramData as number;\r\n          break;\r\n        case 'float32':\r\n          heapF32[offset32] = paramData as number;\r\n          break;\r\n        case 'boolptr':\r\n          const boolArray = paramData as WasmCallArgumentTypeMap['boolptr'];\r\n          // This will work for both Uint8Array as well as ReadonlyArray<boolean>\r\n          heapU8.subarray(offset8, offset8 + boolArray.length).set(paramData as Uint8Array);\r\n          break;\r\n        case 'int32ptr':\r\n          const int32Array = (paramData as WasmCallArgumentTypeMap['int32ptr'])!;\r\n          heap32.subarray(offset32, offset32 + int32Array.length).set(int32Array);\r\n          break;\r\n        case 'float32ptr':\r\n          const float32Array = (paramData as WasmCallArgumentTypeMap['float32ptr'])!;\r\n          heapF32.subarray(offset32, offset32 + float32Array.length).set(float32Array);\r\n          break;\r\n        default:\r\n          throw new Error(`not supported parameter type: ${paramType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // retrieve data parameters (in/inout) from emscripten heap after ccall()\r\n  static ccallDeserialize(buffer: Uint8Array, offset: number[], params: WasmCallArgument[]) {\r\n    const heapF32 = new Float32Array(buffer.buffer, buffer.byteOffset);\r\n    const heapU8 = new Uint8Array(buffer.buffer, buffer.byteOffset);\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      const param = params[i];\r\n      const paramData = param[0];\r\n      const paramType = param[1];\r\n      const paramPass = param[2];\r\n      const offset8 = offset[i];\r\n      // const offset16 = offset8 >> 1;\r\n      const offset32 = offset8 >> 2;\r\n      // const offset64 = offset8 >> 3;\r\n\r\n      if (paramPass !== 'out' && paramPass !== 'inout') {\r\n        continue;\r\n      }\r\n\r\n      switch (paramType) {\r\n        case 'float32ptr':\r\n          const float32Array = (paramData as Float32Array);\r\n          float32Array.set(heapF32.subarray(offset32, offset32 + float32Array.length));\r\n          break;\r\n        case 'boolptr':\r\n          const boolArray = (paramData as Uint8Array);\r\n          boolArray.set(heapU8.subarray(offset8, offset8 + boolArray.length));\r\n          break;\r\n        default:\r\n          throw new Error(`not supported parameter type: ${paramType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // function for defining memory allocation strategy\r\n  private expandMemory(minBytesRequired: number) {\r\n    // free already held memory if applicable\r\n    if (this.ptr8 !== 0) {\r\n      binding!._free(this.ptr8);\r\n    }\r\n    // current simplistic strategy is to allocate 2 times the minimum bytes requested\r\n    this.numBytesAllocated = 2 * minBytesRequired;\r\n    this.ptr8 = binding!._malloc(this.numBytesAllocated);\r\n    if (this.ptr8 === 0) {\r\n      throw new Error('Unable to allocate requested amount of memory. Failing.');\r\n    }\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!initialized) {\r\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\r\n    }\r\n    if (this.ptr8 !== 0) {\r\n      binding!._free(this.ptr8);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","\r\nvar Module = (function() {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  return (\r\nfunction(Module) {\r\n  Module = Module || {};\r\n\r\nvar Module=typeof Module!==\"undefined\"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}Module[\"arguments\"]=[];Module[\"thisProgram\"]=\"./this.program\";Module[\"quit\"]=function(status,toThrow){throw toThrow};Module[\"preRun\"]=[];Module[\"postRun\"]=[];var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof require===\"function\"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}else{return scriptDirectory+path}}if(ENVIRONMENT_IS_NODE){scriptDirectory=__dirname+\"/\";var nodeFS;var nodePath;Module[\"read\"]=function shell_read(filename,binary){var ret;if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);ret=nodeFS[\"readFileSync\"](filename);return binary?ret:ret.toString()};Module[\"readBinary\"]=function readBinary(filename){var ret=Module[\"read\"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){Module[\"thisProgram\"]=process[\"argv\"][1].replace(/\\\\/g,\"/\")}Module[\"arguments\"]=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",abort);Module[\"quit\"]=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){Module[\"read\"]=function shell_read(f){return read(f)}}Module[\"readBinary\"]=function readBinary(f){var data;if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){Module[\"arguments\"]=scriptArgs}else if(typeof arguments!=\"undefined\"){Module[\"arguments\"]=arguments}if(typeof quit===\"function\"){Module[\"quit\"]=function(status){quit(status)}}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}Module[\"read\"]=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){Module[\"readBinary\"]=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}Module[\"readAsync\"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)};Module[\"setWindowTitle\"]=function(title){document.title=title}}else{}var out=Module[\"print\"]||(typeof console!==\"undefined\"?console.log.bind(console):typeof print!==\"undefined\"?print:null);var err=Module[\"printErr\"]||(typeof printErr!==\"undefined\"?printErr:typeof console!==\"undefined\"&&console.warn.bind(console)||out);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var STACK_ALIGN=16;function dynamicAlloc(size){var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;if(end<=_emscripten_get_heap_size()){HEAP32[DYNAMICTOP_PTR>>2]=end}else{var success=_emscripten_resize_heap(end);if(!success)return 0}return ret}function getNativeTypeSize(type){switch(type){case\"i1\":case\"i8\":return 1;case\"i16\":return 2;case\"i32\":return 4;case\"i64\":return 8;case\"float\":return 4;case\"double\":return 8;default:{if(type[type.length-1]===\"*\"){return 4}else if(type[0]===\"i\"){var bits=parseInt(type.substr(1));assert(bits%8===0,\"getNativeTypeSize invalid bits \"+bits+\", type \"+type);return bits/8}else{return 0}}}}function warnOnce(text){if(!warnOnce.shown)warnOnce.shown={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}}var asm2wasmImports={\"f64-rem\":function(x,y){return x%y},\"debugger\":function(){debugger}};var jsCallStartIndex=1;var functionPointers=new Array(0);function convertJsFunctionToWasm(func,sig){var typeSection=[1,0,1,96];var sigRet=sig.slice(0,1);var sigParam=sig.slice(1);var typeCodes={\"i\":127,\"j\":126,\"f\":125,\"d\":124};typeSection.push(sigParam.length);for(var i=0;i<sigParam.length;++i){typeSection.push(typeCodes[sigParam[i]])}if(sigRet==\"v\"){typeSection.push(0)}else{typeSection=typeSection.concat([1,typeCodes[sigRet]])}typeSection[1]=typeSection.length-2;var bytes=new Uint8Array([0,97,115,109,1,0,0,0].concat(typeSection,[2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0]));var module=new WebAssembly.Module(bytes);var instance=new WebAssembly.Instance(module,{e:{f:func}});var wrappedFunc=instance.exports.f;return wrappedFunc}var funcWrappers={};function dynCall(sig,ptr,args){if(args&&args.length){return Module[\"dynCall_\"+sig].apply(null,[ptr].concat(args))}else{return Module[\"dynCall_\"+sig].call(null,ptr)}}var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var getTempRet0=function(){return tempRet0};if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable;var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}function getCFunc(ident){var func=Module[\"_\"+ident];assert(func,\"Cannot call unknown function \"+ident+\", make sure it is exported\");return func}function ccall(ident,returnType,argTypes,args,opts){var toC={\"string\":function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret},\"array\":function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType===\"string\")return UTF8ToString(ret);if(returnType===\"boolean\")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}function setValue(ptr,value,type,noSafe){type=type||\"i8\";if(type.charAt(type.length-1)===\"*\")type=\"i32\";switch(type){case\"i1\":HEAP8[ptr>>0]=value;break;case\"i8\":HEAP8[ptr>>0]=value;break;case\"i16\":HEAP16[ptr>>1]=value;break;case\"i32\":HEAP32[ptr>>2]=value;break;case\"i64\":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case\"float\":HEAPF32[ptr>>2]=value;break;case\"double\":HEAPF64[ptr>>3]=value;break;default:abort(\"invalid type for setValue: \"+type)}}var ALLOC_NONE=3;var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(u8Array,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(u8Array[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=u8Array[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|u8Array[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}function demangle(func){return func}function demangleAll(text){var regex=/__Z[\\w\\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+\" [\"+x+\"]\"})}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return\"(no stack trace available)\"}}return err.stack.toString()}var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferViews(){Module[\"HEAP8\"]=HEAP8=new Int8Array(buffer);Module[\"HEAP16\"]=HEAP16=new Int16Array(buffer);Module[\"HEAP32\"]=HEAP32=new Int32Array(buffer);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buffer);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buffer);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buffer);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buffer);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buffer)}var STACK_BASE=6352,DYNAMIC_BASE=5249232,DYNAMICTOP_PTR=6096;var TOTAL_STACK=5242880;var INITIAL_TOTAL_MEMORY=Module[\"TOTAL_MEMORY\"]||16777216;if(INITIAL_TOTAL_MEMORY<TOTAL_STACK)err(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \"+INITIAL_TOTAL_MEMORY+\"! (TOTAL_STACK=\"+TOTAL_STACK+\")\");if(Module[\"buffer\"]){buffer=Module[\"buffer\"]}else{if(typeof WebAssembly===\"object\"&&typeof WebAssembly.Memory===\"function\"){wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_TOTAL_MEMORY/WASM_PAGE_SIZE});buffer=wasmMemory.buffer}else{buffer=new ArrayBuffer(INITIAL_TOTAL_MEMORY)}}updateGlobalBufferViews();HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback();continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}var wasmBinaryFile=\"onnx-wasm.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(Module[\"wasmBinary\"]){return new Uint8Array(Module[\"wasmBinary\"])}if(Module[\"readBinary\"]){return Module[\"readBinary\"](wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!Module[\"wasmBinary\"]&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(env){var info={\"env\":env,\"global\":{\"NaN\":NaN,Infinity:Infinity},\"global.Math\":Math,\"asm2wasm\":asm2wasmImports};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");if(Module[\"instantiateWasm\"]){try{return Module[\"instantiateWasm\"](info,receiveInstance)}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}if(!Module[\"wasmBinary\"]&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){WebAssembly.instantiateStreaming(fetch(wasmBinaryFile,{credentials:\"same-origin\"}),info).then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");instantiateArrayBuffer(receiveInstantiatedSource)})}else{instantiateArrayBuffer(receiveInstantiatedSource)}return{}}Module[\"asm\"]=function(global,env,providedBuffer){env[\"memory\"]=wasmMemory;env[\"table\"]=wasmTable=new WebAssembly.Table({\"initial\":41,\"maximum\":41,\"element\":\"anyfunc\"});env[\"__memory_base\"]=1024;env[\"__table_base\"]=0;var exports=createWasm(env);return exports};var tempDoublePtr=6336;function ___assert_fail(condition,filename,line,func){abort(\"Assertion failed: \"+UTF8ToString(condition)+\", at: \"+[filename?UTF8ToString(filename):\"unknown filename\",line,func?UTF8ToString(func):\"unknown function\"])}function ___cxa_allocate_exception(size){return _malloc(size)}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}function ___cxa_free_exception(ptr){try{return _free(ptr)}catch(e){}}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var key in EXCEPTIONS.infos){var ptr=+key;var adj=EXCEPTIONS.infos[ptr].adjusted;var len=adj.length;for(var i=0;i<len;i++){if(adj[i]===adjusted){return ptr}}}return adjusted},addRef:function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++},decRef:function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0&&!info.rethrown){if(info.destructor){Module[\"dynCall_vi\"](info.destructor,ptr)}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}},clearRef:function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0}};function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}throw ptr}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(setTempRet0(0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(setTempRet0(0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module[\"___cxa_is_pointer_type\"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module[\"___cxa_can_catch\"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted.push(thrown);return(setTempRet0(typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(setTempRet0(throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:[ptr],type:type,destructor:destructor,refcount:0,caught:false,rethrown:false};EXCEPTIONS.last=ptr;if(!(\"uncaught_exception\"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr}function ___gxx_personality_v0(){}function ___lock(){}var SYSCALLS={buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:0,get:function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(){var ret=UTF8ToString(SYSCALLS.get());return ret},get64:function(){var low=SYSCALLS.get(),high=SYSCALLS.get();return low},getZero:function(){SYSCALLS.get()}};function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function flush_NO_FILESYSTEM(){var fflush=Module[\"_fflush\"];if(fflush)fflush(0);var buffers=SYSCALLS.buffers;if(buffers[1].length)SYSCALLS.printChar(1,10);if(buffers[2].length)SYSCALLS.printChar(2,10)}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(stream,HEAPU8[ptr+j])}ret+=len}return ret}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___unlock(){}function _abort(){Module[\"abort\"]()}function _emscripten_get_heap_size(){return HEAP8.length}function abortOnCannotGrowMemory(requestedSize){abort(\"OOM\")}function emscripten_realloc_buffer(size){var PAGE_MULTIPLE=65536;size=alignUp(size,PAGE_MULTIPLE);var oldSize=buffer.byteLength;try{var result=wasmMemory.grow((size-oldSize)/65536);if(result!==(-1|0)){return buffer=wasmMemory.buffer}else{return null}}catch(e){return null}}function _emscripten_resize_heap(requestedSize){var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var LIMIT=2147483648-PAGE_MULTIPLE;if(requestedSize>LIMIT){return false}var MIN_TOTAL_MEMORY=16777216;var newSize=Math.max(oldSize,MIN_TOTAL_MEMORY);while(newSize<requestedSize){if(newSize<=536870912){newSize=alignUp(2*newSize,PAGE_MULTIPLE)}else{newSize=Math.min(alignUp((3*newSize+2147483648)/4,PAGE_MULTIPLE),LIMIT)}}var replacement=emscripten_realloc_buffer(newSize);if(!replacement||replacement.byteLength!=newSize){return false}updateGlobalBufferViews();return true}function _llvm_trap(){abort(\"trap!\")}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest)}function ___setErrNo(value){if(Module[\"___errno_location\"])HEAP32[Module[\"___errno_location\"]()>>2]=value;return value}__ATEXIT__.push(flush_NO_FILESYSTEM);var ASSERTIONS=false;var asmGlobalArg={};var asmLibraryArg={\"abort\":abort,\"setTempRet0\":setTempRet0,\"getTempRet0\":getTempRet0,\"__ZSt18uncaught_exceptionv\":__ZSt18uncaught_exceptionv,\"___assert_fail\":___assert_fail,\"___cxa_allocate_exception\":___cxa_allocate_exception,\"___cxa_find_matching_catch\":___cxa_find_matching_catch,\"___cxa_free_exception\":___cxa_free_exception,\"___cxa_throw\":___cxa_throw,\"___gxx_personality_v0\":___gxx_personality_v0,\"___lock\":___lock,\"___resumeException\":___resumeException,\"___setErrNo\":___setErrNo,\"___syscall140\":___syscall140,\"___syscall146\":___syscall146,\"___syscall54\":___syscall54,\"___syscall6\":___syscall6,\"___unlock\":___unlock,\"_abort\":_abort,\"_emscripten_get_heap_size\":_emscripten_get_heap_size,\"_emscripten_memcpy_big\":_emscripten_memcpy_big,\"_emscripten_resize_heap\":_emscripten_resize_heap,\"_llvm_trap\":_llvm_trap,\"abortOnCannotGrowMemory\":abortOnCannotGrowMemory,\"emscripten_realloc_buffer\":emscripten_realloc_buffer,\"flush_NO_FILESYSTEM\":flush_NO_FILESYSTEM,\"tempDoublePtr\":tempDoublePtr,\"DYNAMICTOP_PTR\":DYNAMICTOP_PTR};var asm=Module[\"asm\"](asmGlobalArg,asmLibraryArg,buffer);Module[\"asm\"]=asm;var ___errno_location=Module[\"___errno_location\"]=function(){return Module[\"asm\"][\"___errno_location\"].apply(null,arguments)};var _add_f32=Module[\"_add_f32\"]=function(){return Module[\"asm\"][\"_add_f32\"].apply(null,arguments)};var _and_u8=Module[\"_and_u8\"]=function(){return Module[\"asm\"][\"_and_u8\"].apply(null,arguments)};var _average_pool_f32=Module[\"_average_pool_f32\"]=function(){return Module[\"asm\"][\"_average_pool_f32\"].apply(null,arguments)};var _batch_normalization_f32=Module[\"_batch_normalization_f32\"]=function(){return Module[\"asm\"][\"_batch_normalization_f32\"].apply(null,arguments)};var _clip_f32=Module[\"_clip_f32\"]=function(){return Module[\"asm\"][\"_clip_f32\"].apply(null,arguments)};var _conv_f32=Module[\"_conv_f32\"]=function(){return Module[\"asm\"][\"_conv_f32\"].apply(null,arguments)};var _div_f32=Module[\"_div_f32\"]=function(){return Module[\"asm\"][\"_div_f32\"].apply(null,arguments)};var _emscripten_replace_memory=Module[\"_emscripten_replace_memory\"]=function(){return Module[\"asm\"][\"_emscripten_replace_memory\"].apply(null,arguments)};var _fflush=Module[\"_fflush\"]=function(){return Module[\"asm\"][\"_fflush\"].apply(null,arguments)};var _free=Module[\"_free\"]=function(){return Module[\"asm\"][\"_free\"].apply(null,arguments)};var _gemm_f32=Module[\"_gemm_f32\"]=function(){return Module[\"asm\"][\"_gemm_f32\"].apply(null,arguments)};var _instance_normalization_f32=Module[\"_instance_normalization_f32\"]=function(){return Module[\"asm\"][\"_instance_normalization_f32\"].apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return Module[\"asm\"][\"_malloc\"].apply(null,arguments)};var _matmul_f32=Module[\"_matmul_f32\"]=function(){return Module[\"asm\"][\"_matmul_f32\"].apply(null,arguments)};var _max_pool_f32=Module[\"_max_pool_f32\"]=function(){return Module[\"asm\"][\"_max_pool_f32\"].apply(null,arguments)};var _memcpy=Module[\"_memcpy\"]=function(){return Module[\"asm\"][\"_memcpy\"].apply(null,arguments)};var _memset=Module[\"_memset\"]=function(){return Module[\"asm\"][\"_memset\"].apply(null,arguments)};var _mul_f32=Module[\"_mul_f32\"]=function(){return Module[\"asm\"][\"_mul_f32\"].apply(null,arguments)};var _or_u8=Module[\"_or_u8\"]=function(){return Module[\"asm\"][\"_or_u8\"].apply(null,arguments)};var _prelu_f32=Module[\"_prelu_f32\"]=function(){return Module[\"asm\"][\"_prelu_f32\"].apply(null,arguments)};var _sbrk=Module[\"_sbrk\"]=function(){return Module[\"asm\"][\"_sbrk\"].apply(null,arguments)};var _softmax_f32=Module[\"_softmax_f32\"]=function(){return Module[\"asm\"][\"_softmax_f32\"].apply(null,arguments)};var _sub_f32=Module[\"_sub_f32\"]=function(){return Module[\"asm\"][\"_sub_f32\"].apply(null,arguments)};var _sum_f32=Module[\"_sum_f32\"]=function(){return Module[\"asm\"][\"_sum_f32\"].apply(null,arguments)};var _xor_u8=Module[\"_xor_u8\"]=function(){return Module[\"asm\"][\"_xor_u8\"].apply(null,arguments)};var establishStackSpace=Module[\"establishStackSpace\"]=function(){return Module[\"asm\"][\"establishStackSpace\"].apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return Module[\"asm\"][\"stackAlloc\"].apply(null,arguments)};var stackRestore=Module[\"stackRestore\"]=function(){return Module[\"asm\"][\"stackRestore\"].apply(null,arguments)};var stackSave=Module[\"stackSave\"]=function(){return Module[\"asm\"][\"stackSave\"].apply(null,arguments)};var dynCall_ii=Module[\"dynCall_ii\"]=function(){return Module[\"asm\"][\"dynCall_ii\"].apply(null,arguments)};var dynCall_iiii=Module[\"dynCall_iiii\"]=function(){return Module[\"asm\"][\"dynCall_iiii\"].apply(null,arguments)};var dynCall_v=Module[\"dynCall_v\"]=function(){return Module[\"asm\"][\"dynCall_v\"].apply(null,arguments)};var dynCall_vi=Module[\"dynCall_vi\"]=function(){return Module[\"asm\"][\"dynCall_vi\"].apply(null,arguments)};var dynCall_viiii=Module[\"dynCall_viiii\"]=function(){return Module[\"asm\"][\"dynCall_viiii\"].apply(null,arguments)};var dynCall_viiiii=Module[\"dynCall_viiiii\"]=function(){return Module[\"asm\"][\"dynCall_viiiii\"].apply(null,arguments)};var dynCall_viiiiii=Module[\"dynCall_viiiiii\"]=function(){return Module[\"asm\"][\"dynCall_viiiiii\"].apply(null,arguments)};Module[\"asm\"]=asm;Module[\"then\"]=function(func){if(Module[\"calledRun\"]){func(Module)}else{var old=Module[\"onRuntimeInitialized\"];Module[\"onRuntimeInitialized\"]=function(){if(old)old();func(Module)}}return Module};function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;dependenciesFulfilled=function runCaller(){if(!Module[\"calledRun\"])run();if(!Module[\"calledRun\"])dependenciesFulfilled=runCaller};function run(args){args=args||Module[\"arguments\"];if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module[\"calledRun\"])return;function doRun(){if(Module[\"calledRun\"])return;Module[\"calledRun\"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}if(what!==undefined){out(what);err(what);what=JSON.stringify(what)}else{what=\"\"}ABORT=true;EXITSTATUS=1;throw\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\"}Module[\"abort\"]=abort;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\r\n\r\n\r\n  return Module\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n      module.exports = Module;\r\n    else if (typeof define === 'function' && define['amd'])\r\n      define([], function() { return Module; });\r\n    else if (typeof exports === 'object')\r\n      exports[\"Module\"] = Module;\r\n    ","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"./onnx-worker.js\");\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend, InferenceHandler, SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {CPU_OP_RESOLVE_RULES} from '../cpu/op-resolve-rules';\r\n\r\nimport {WasmInferenceHandler} from './inference-handler';\r\nimport {WASM_OP_RESOLVE_RULES} from './op-resolve-rules';\r\n\r\nexport class WasmSessionHandler implements SessionHandler {\r\n  private opResolveRules: ReadonlyArray<OpSet.ResolveRule>;\r\n  constructor(readonly backend: Backend, readonly context: Session.Context, fallbackToCpuOps: boolean) {\r\n    this.opResolveRules = fallbackToCpuOps ? WASM_OP_RESOLVE_RULES.concat(CPU_OP_RESOLVE_RULES) : WASM_OP_RESOLVE_RULES;\r\n  }\r\n\r\n  createInferenceHandler(): InferenceHandler {\r\n    return new WasmInferenceHandler(this, this.context.profiler);\r\n  }\r\n\r\n  dispose(): void {}\r\n\r\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>): Operator {\r\n    const op = resolveOperator(node, opsets, this.opResolveRules);\r\n    op.initialize(node.attributes);\r\n    return op;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Profiler} from '../../instrument';\r\n\r\nimport {WasmSessionHandler} from './session-handler';\r\n\r\nexport class WasmInferenceHandler implements InferenceHandler {\r\n  constructor(public readonly session: WasmSessionHandler, public readonly profiler?: Readonly<Profiler>) {}\r\n\r\n  dispose(): void {}\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {WasmBatchNormalization} from './ops/batch-normalization';\r\nimport {WasmBinaryOp} from './ops/binary-op';\r\nimport {WasmClip} from './ops/clip';\r\nimport {WasmConv} from './ops/conv';\r\nimport {WasmGemm} from './ops/gemm';\r\nimport {WasmInstanceNormalization} from './ops/instance-normalization';\r\nimport {WasmMatMul} from './ops/matmul';\r\nimport {WasmAveragePool, WasmGlobalAveragePool, WasmGlobalMaxPool, WasmMaxPool} from './ops/pool';\r\nimport {WasmSoftmax} from './ops/softmax';\r\nimport {WasmSum} from './ops/sum';\r\n\r\nexport const WASM_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\r\n  ['Add', '', '7+', () => new WasmBinaryOp(['float32'], 'Add')],\r\n  ['And', '', '7+', () => new WasmBinaryOp(['bool'], 'And')],\r\n  ['AveragePool', '', '7+', () => new WasmAveragePool()],  // TODO: support new attributes for AveragePool-10\r\n  ['BatchNormalization', '', '7+', () => new WasmBatchNormalization()],\r\n  ['Clip', '', '6+', () => new WasmClip()],\r\n  ['Conv', '', '1+', () => new WasmConv()],\r\n  ['Div', '', '7+', () => new WasmBinaryOp(['float32'], 'Div')],\r\n  ['Gemm', '', '7+', () => new WasmGemm()],\r\n  ['GlobalAveragePool', '', '1+', () => new WasmGlobalAveragePool()],\r\n  ['GlobalMaxPool', '', '1+', () => new WasmGlobalMaxPool()],\r\n  ['InstanceNormalization', '', '6+', () => new WasmInstanceNormalization()],\r\n  ['MatMul', '', '1+', () => new WasmMatMul()],\r\n  ['MaxPool', '', '1+', () => new WasmMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['Mul', '', '7+', () => new WasmBinaryOp(['float32'], 'Mul')],\r\n  ['Or', '', '7+', () => new WasmBinaryOp(['bool'], 'Or')],\r\n  ['PRelu', '', '7+', () => new WasmBinaryOp(['float32'], 'PRelu')],\r\n  ['Softmax', '', '1+', () => new WasmSoftmax()],\r\n  ['Sub', '', '7+', () => new WasmBinaryOp(['float32'], 'Sub')],\r\n  ['Sum', '', '6+', () => new WasmSum()],  // TODO: support multidirectional broadcast for Sum-8\r\n  ['Xor', '', '7+', () => new WasmBinaryOp(['bool'], 'Xor')],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BatchNormalization} from '../../../ops/batch-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmBatchNormalization extends BatchNormalization {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const x = inputs[0];\r\n    const scale = inputs[1];\r\n    const b = inputs[2];\r\n    const mean = inputs[3];\r\n    const variance = inputs[4];\r\n\r\n    // calculate channel size (i.e.) data points per channel\r\n    let channelSize = 1;\r\n    for (let i = 2; i < x.dims.length; i++) {\r\n      channelSize *= x.dims[i];\r\n    }\r\n\r\n    // create output Tensor after determining output size\r\n    const y = new Tensor(x.dims, x.type);\r\n    WasmBinding.getInstance().ccall(\r\n        '_batch_normalization_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'],\r\n        [x.dims[0], 'int32'], [x.dims[1], 'int32'], [channelSize, 'int32'], [scale.floatData, 'float32ptr'],\r\n        [b.floatData, 'float32ptr'], [mean.floatData, 'float32ptr'], [variance.floatData, 'float32ptr'],\r\n        [this.epsilon, 'float32']);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n    const mean = inputs[3];\r\n    const var_ = inputs[4];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs need to be one dimensional\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n        var_.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n        var_.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (X.type !== 'float32' || scale.type !== 'float32' || B.type !== 'float32' || mean.type !== 'float32' ||\r\n        var_.type !== 'float32') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BinaryOp} from '../../../ops/binary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmBinaryOp extends BinaryOp {\r\n  constructor(typeConstraint: ReadonlyArray<Tensor.DataType>, opType: string, resultType?: Tensor.DataType) {\r\n    super(typeConstraint, opType, resultType);\r\n  }\r\n\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n    if (!outputShape) {\r\n      throw new Error('not broadcastable');\r\n    }\r\n    let fun = '';\r\n    // TODO: Explore better ways to deal with types than current `binaryOpType` approach\r\n    let binaryOpType = '';\r\n    switch (this.opType) {\r\n      case 'Add':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_add_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        }\r\n        break;\r\n      case 'Sub':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_sub_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        }\r\n        break;\r\n      case 'Mul':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_mul_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        }\r\n        break;\r\n      case 'Div':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_div_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        }\r\n        break;\r\n      case 'PRelu':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_prelu_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        }\r\n        break;\r\n      case 'Xor':\r\n        fun = '_xor_u8';\r\n        binaryOpType = 'boolInBoolOut';\r\n        break;\r\n      case 'Or':\r\n        fun = '_or_u8';\r\n        binaryOpType = 'boolInBoolOut';\r\n        break;\r\n      case 'And':\r\n        fun = '_and_u8';\r\n        binaryOpType = 'boolInBoolOut';\r\n        break;\r\n      default:\r\n        throw Error(`unsupported binary op by the Wasm backend`);\r\n    }\r\n    let result: Tensor;\r\n    if (binaryOpType === 'float32InFloat32Out') {\r\n      result = new Tensor(outputShape, 'float32');\r\n      WasmBinding.getInstance().ccall(\r\n          fun, [inputs[0].floatData, 'float32ptr'], [inputs[0].dims.length, 'int32'], [inputs[0].dims, 'int32ptr'],\r\n          [inputs[1].floatData, 'float32ptr'], [inputs[1].dims.length, 'int32'], [inputs[1].dims, 'int32ptr'],\r\n          [result.floatData, 'float32ptr', 'out'], [result.floatData.length, 'int32'], [outputShape.length, 'int32'],\r\n          [outputShape, 'int32ptr']);\r\n    } else if (binaryOpType === 'boolInBoolOut') {\r\n      result = new Tensor(outputShape, 'bool');\r\n      WasmBinding.getInstance().ccall(\r\n          fun, [inputs[0].integerData as Uint8Array, 'boolptr'], [inputs[0].dims.length, 'int32'],\r\n          [inputs[0].dims, 'int32ptr'], [inputs[1].integerData as Uint8Array, 'boolptr'],\r\n          [inputs[1].dims.length, 'int32'], [inputs[1].dims, 'int32ptr'],\r\n          [result.integerData as Uint8Array, 'boolptr', 'out'], [result.integerData.length, 'int32'],\r\n          [outputShape.length, 'int32'], [outputShape, 'int32ptr']);\r\n    } else {\r\n      throw new Error(`Unsupported binary op format. Probably unsupported data types.`);\r\n    }\r\n    return [result];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Clip} from '../../../ops/clip';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmClip extends Clip {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const result = new Tensor(inputs[0].dims, inputs[0].type);\r\n    const size = result.floatData.length;\r\n    if (inputs[0].type === 'float32') {\r\n      WasmBinding.getInstance().ccall(\r\n          '_clip_f32', [inputs[0].floatData, 'float32ptr'], [result.floatData, 'float32ptr', 'out'], [size, 'int32'],\r\n          [this.min, 'float32'], [this.max, 'float32']);\r\n    }\r\n    // Expand for differnt types supported for this specific kernel of Clip\r\n    else {\r\n      throw new Error(`Unsupported input type for Clip operator.`);\r\n    }\r\n    return [result];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {PerformanceData} from '../../../wasm-binding-core';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmConv extends Conv {\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    const x = inputs[0];\r\n    const w = inputs[1];\r\n    const b = inputs.length === 3 ? inputs[2] : undefined;\r\n\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      const wDims = inputs[1].dims;\r\n      for (let i = 2; i < wDims.length; ++i) {\r\n        this.kernelShape.push(wDims[i]);\r\n      }\r\n    }\r\n\r\n    // create output Tensor after determining output size (after adjusting pads based on 'autoPad' attribute)\r\n    const outputDims = PoolConvUtil.computeConvOutputShape(\r\n        x.dims, w.dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    const y = new Tensor(outputDims, x.type);\r\n\r\n    // determine number of threads needed to process\r\n    const numThreads = determineNumThreads(x.dims[0], this.group, w.dims[0], WasmBinding.workerNumber);\r\n\r\n    // no multi-threading\r\n    if (numThreads === 1) {\r\n      WasmBinding.getInstance().ccall(\r\n          '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [w.floatData, 'float32ptr'],\r\n          [w.dims, 'int32ptr'], [y.floatData, 'float32ptr', 'out'], [y.dims, 'int32ptr'],\r\n          [b ? b.floatData : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\r\n          [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\r\n      return [y];\r\n    }\r\n\r\n    // multi-threaded using web-workers\r\n    else {\r\n      // data pre-processing\r\n      const wDimsSp = w.dims.slice(0);\r\n      wDimsSp[0] = Math.floor(w.dims[0] / numThreads);\r\n      const wSizeSp = wDimsSp[0] * wDimsSp[1] * wDimsSp[2] * wDimsSp[3];\r\n\r\n      const wDimsFinal = w.dims.slice(0);\r\n      wDimsFinal[0] = w.dims[0] - (numThreads - 1) * wDimsSp[0];\r\n\r\n      const yDimsSp = [1, wDimsSp[0], outputDims[2], outputDims[3]];\r\n      const ySizeSp = wDimsSp[0] * outputDims[2] * outputDims[3];\r\n\r\n      const yDimsFinal = [1, wDimsFinal[0], outputDims[2], outputDims[3]];\r\n\r\n      const wArray = new Array<Float32Array>(numThreads);\r\n      const yArray = new Array<Float32Array>(numThreads);\r\n      const bArray = new Array<Float32Array>(numThreads);\r\n      const workerTasks = new Array<Promise<PerformanceData>>(numThreads - 1);\r\n\r\n      // function calls\r\n      for (let i = 0; i < numThreads; ++i) {\r\n        if (i !== numThreads - 1) {\r\n          wArray[i] = w.floatData.subarray(i * wSizeSp, (i + 1) * wSizeSp) as Float32Array;\r\n          yArray[i] = y.floatData.subarray(i * ySizeSp, (i + 1) * ySizeSp) as Float32Array;\r\n          if (b) {\r\n            bArray[i] = b.floatData.subarray(i * wDimsSp[0], (i + 1) * wDimsSp[0]) as Float32Array;\r\n          }\r\n          workerTasks[i] = WasmBinding.getInstance().ccallRemote(\r\n              i, '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [wArray[i], 'float32ptr'],\r\n              [wDimsSp, 'int32ptr'], [yArray[i], 'float32ptr', 'out'], [yDimsSp, 'int32ptr'],\r\n              [bArray.length > 0 ? bArray[i] : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\r\n              [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\r\n        } else {\r\n          wArray[i] = w.floatData.subarray(i * wSizeSp) as Float32Array;\r\n          yArray[i] = y.floatData.subarray(i * ySizeSp) as Float32Array;\r\n          if (b) {\r\n            bArray[i] = b.floatData.subarray(i * wDimsSp[0]) as Float32Array;\r\n          }\r\n          WasmBinding.getInstance().ccall(\r\n              '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [wArray[i], 'float32ptr'],\r\n              [wDimsFinal, 'int32ptr'], [yArray[i], 'float32ptr', 'out'], [yDimsFinal, 'int32ptr'],\r\n              [bArray.length > 0 ? bArray[i] : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\r\n              [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\r\n        }\r\n      }\r\n\r\n      await Promise.all(workerTasks);\r\n      return [y];\r\n    }\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n// This function will determine the number of threads\r\n// The strategy to parallelize is to parallelize on number of filter maps in the kernel\r\n// (i.e.) number of output channels\r\nfunction determineNumThreads(batchSize: number, group: number, numFilterMaps: number, numWebWorkers: number): number {\r\n  // single threaded if:\r\n  // 1) batch size is not 1 (data splitting logic across threads is specific to batch size being 1)\r\n  // 2) multi-threading not supported yet for mulitple groups\r\n  // 3) if number of filter maps is 1\r\n  // 4) number of web workers is 0\r\n  if (batchSize !== 1 || group !== 1 || numFilterMaps === 1 || numWebWorkers <= 0) {\r\n    return 1;\r\n  }\r\n\r\n  // multi-threaded:\r\n  // determine number of threads\r\n  return Math.min(numFilterMaps, numWebWorkers + 1);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Gemm} from '../../../ops/gemm';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, GemmUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmGemm extends Gemm {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const a = inputs[0];\r\n    const b = inputs[1];\r\n    const c = inputs[2];\r\n\r\n    const [M, N] = GemmUtil.getShapeOfGemmResult(a.dims, this.transA, b.dims, this.transB, c.dims);\r\n    const y = new Tensor([M, N], a.type);\r\n    if (!BroadcastUtil.calc(y, c, (a, b) => (b), true)) {\r\n      throw new Error(`c is not broadcastable to the shape of the result of the Gemm operator`);\r\n    }\r\n    WasmBinding.getInstance().ccall(\r\n        '_gemm_f32', [this.transA, 'bool'], [this.transB, 'bool'], [this.transA ? a.dims[1] : a.dims[0], 'int32'],\r\n        [this.transB ? b.dims[0] : b.dims[1], 'int32'], [this.transA ? a.dims[0] : a.dims[1], 'int32'],\r\n        [this.alpha, 'float32'], [a.floatData, 'float32ptr'], [b.floatData, 'float32ptr'], [this.beta, 'float32'],\r\n        [y.floatData, 'float32ptr', 'inout']);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32' || inputs[2].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if ((inputs[0].type !== inputs[1].type) || (inputs[0].type !== inputs[2].type)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmInstanceNormalization extends InstanceNormalization {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const x = inputs[0];\r\n    const scale = inputs[1];\r\n    const b = inputs[2];\r\n\r\n    // calculate channel size (i.e.) data points per channel\r\n    let channelSize = 1;\r\n    for (let i = 2; i < x.dims.length; i++) {\r\n      channelSize *= x.dims[i];\r\n    }\r\n\r\n    // create output Tensor after determining output size\r\n    const y = new Tensor(x.dims, x.type);\r\n    WasmBinding.getInstance().ccall(\r\n        '_instance_normalization_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'],\r\n        [x.dims[0], 'int32'], [x.dims[1], 'int32'], [channelSize, 'int32'], [scale.floatData, 'float32ptr'],\r\n        [b.floatData, 'float32ptr'], [this.epsilon, 'float32']);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs need to be one dimensional\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (X.type !== 'float32' || scale.type !== 'float32' || B.type !== 'float32') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, MatMulUtil, ShapeUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmMatMul extends MatMul {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const [dimsA, dimsB] = MatMulUtil.preprocessInputShapes(inputs[0].dims, inputs[1].dims);\r\n    const outputShape = BroadcastUtil.calcShape(dimsA, dimsB, true);\r\n    if (!outputShape) {\r\n      // the inputs cannot broadcast or cannot multiply\r\n      throw new Error(`input dimensions do not match the requirement`);\r\n    }\r\n\r\n    const outputSize = ShapeUtil.size(outputShape);\r\n    const resultData = new Float32Array(outputSize);\r\n    WasmBinding.getInstance().ccall(\r\n        '_matmul_f32', [inputs[0].floatData, 'float32ptr'], [inputs[0].dims, 'int32ptr'],\r\n        [inputs[0].dims.length, 'int32'], [inputs[1].floatData, 'float32ptr'], [inputs[1].dims, 'int32ptr'],\r\n        [inputs[1].dims.length, 'int32'], [resultData, 'float32ptr', 'out'], [resultData.length, 'int32'],\r\n        [outputShape, 'int32ptr'], [outputShape.length, 'int32']);\r\n    MatMulUtil.postprocessOutputShape(outputShape as number[], inputs[0].dims.length, inputs[1].dims.length);\r\n    const result = new Tensor(outputShape, inputs[0].type);\r\n    result.floatData.set(resultData);\r\n    return [result];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {PerformanceData} from '../../../wasm-binding-core';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmAveragePool extends AveragePool {\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    return checkInputTypes(inputs);\r\n  }\r\n\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    return averagePool(inputs[0], this.autoPad, this.countIncludePad, this.kernelShape, this.pads, this.strides);\r\n  }\r\n}\r\n\r\nexport class WasmGlobalAveragePool extends GlobalAveragePool {\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    return checkInputTypes(inputs);\r\n  }\r\n\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    return globalAveragePool(inputs[0]);\r\n  }\r\n}\r\n\r\nexport class WasmMaxPool extends MaxPool {\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    return checkInputTypes(inputs);\r\n  }\r\n\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    return maxPool(inputs[0], this.autoPad, this.kernelShape, this.pads, this.strides);\r\n  }\r\n}\r\n\r\nexport class WasmGlobalMaxPool extends GlobalMaxPool {\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    return checkInputTypes(inputs);\r\n  }\r\n\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    return globalMaxPool(inputs[0]);\r\n  }\r\n}\r\n\r\n// type check function\r\nfunction checkInputTypes(inputs: Tensor[]): boolean {\r\n  // currently Wasm backend only supports 'float32' input type\r\n  if (inputs[0].type !== 'float32') {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// functions implementing specific pooling operations\r\nasync function averagePool(\r\n    input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[], pads: number[],\r\n    strides: number[]): Promise<Tensor[]> {\r\n  return pool(false, 1, input, autoPad, countIncludePad, kernelShape, pads, strides);\r\n}\r\n\r\nasync function globalAveragePool(input: Tensor): Promise<Tensor[]> {\r\n  return pool(true, 1, input, 'NOTSET', false, [], [], []);\r\n}\r\n\r\nasync function maxPool(\r\n    input: Tensor, autoPad: string, kernelShape: number[], pads: number[], strides: number[]): Promise<Tensor[]> {\r\n  return pool(false, 2, input, autoPad, false, kernelShape, pads, strides);\r\n}\r\n\r\nasync function globalMaxPool(input: Tensor): Promise<Tensor[]> {\r\n  return pool(true, 2, input, 'NOTSET', false, [], [], []);\r\n}\r\n\r\n/**\r\n * Perform pooling operations based on input\r\n * @param isGlobalOperator If true, perform global pooling.\r\n * @param poolType 1 if averagepool, 2 for maxpool.\r\n * @param input The input tensor.\r\n * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID\r\n * @param countIncludePad Whether include pad pixels when calculating values for the edges.\r\n * @param kernelShape The size of the kernel along each axis.\r\n * @param pads Padding for the beginning and ending along each axis. `pads` format should be as follow [x1_begin,\r\n *       x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and\r\n *       xi_end, the number of pixels added at the end of axis `i`.\r\n * @param strides Stride along each axis.\r\n */\r\nasync function pool(\r\n    isGlobalOperator: boolean, poolType: number, input: Tensor, autoPad: string, countIncludePad: boolean,\r\n    kernelShape: number[], pads: number[], strides: number[]): Promise<Tensor[]> {\r\n  // determine pool function name in wasm\r\n  let poolFunc = '';\r\n  switch (poolType) {\r\n    case 1:\r\n      poolFunc = '_average_pool_f32';\r\n      break;\r\n    case 2:\r\n      poolFunc = '_max_pool_f32';\r\n      break;\r\n    default:\r\n      throw new Error(`unknown pool type`);\r\n  }\r\n  // adjust the shapes of input attributes\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, input.dims, kernelShape, strides, pads);\r\n\r\n  // calculate output shape based on input attributes\r\n  const outputDims =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, input.dims, strides, kernelShape, pads, autoPad);\r\n\r\n  // create output\r\n  const y = new Tensor(outputDims, input.type);\r\n\r\n  // determine number of threads needed to process\r\n  const numThreads = determineNumThreads(input.dims[0], input.dims[1], WasmBinding.workerNumber);\r\n\r\n  // no multi-threading\r\n  if (numThreads === 1) {\r\n    WasmBinding.getInstance().ccall(\r\n        poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'], [input.floatData, 'float32ptr'],\r\n        [input.dims, 'int32ptr'], [y.floatData, 'float32ptr', 'out'], [y.dims, 'int32ptr'], [kernelShape, 'int32ptr'],\r\n        [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\r\n  }\r\n\r\n  // multi-threaded using web-workers\r\n  else {\r\n    // data pre-processing\r\n    const xDimsSp = input.dims.slice(0);\r\n    xDimsSp[1] = Math.floor(input.dims[1] / numThreads);\r\n    const xSizeSp = ShapeUtil.size(xDimsSp);\r\n\r\n    const xDimsFinal = input.dims.slice(0);\r\n    xDimsFinal[1] = input.dims[1] - (numThreads - 1) * xDimsSp[1];\r\n\r\n    const yDimsSp = outputDims.slice(0);\r\n    yDimsSp[1] = xDimsSp[1];\r\n    const ySizeSp = ShapeUtil.size(yDimsSp);\r\n\r\n    const yDimsFinal = outputDims.slice(0);\r\n    yDimsFinal[1] = xDimsFinal[1];\r\n\r\n    const workerTasks = new Array<Promise<PerformanceData>>(numThreads - 1);\r\n\r\n    const X = input.floatData;\r\n    const Y = y.floatData;\r\n\r\n    // function calls\r\n    for (let i = 0; i < numThreads; ++i) {\r\n      if (i !== numThreads - 1) {\r\n        workerTasks[i] = WasmBinding.getInstance().ccallRemote(\r\n            i, poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'],\r\n            [X.subarray(i * xSizeSp, (i + 1) * xSizeSp), 'float32ptr'], [xDimsSp, 'int32ptr'],\r\n            [Y.subarray(i * ySizeSp, (i + 1) * ySizeSp), 'float32ptr', 'out'], [yDimsSp, 'int32ptr'],\r\n            [kernelShape, 'int32ptr'], [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\r\n      } else {\r\n        WasmBinding.getInstance().ccall(\r\n            poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'],\r\n            [X.subarray((numThreads - 1) * xSizeSp), 'float32ptr'], [xDimsFinal, 'int32ptr'],\r\n            [Y.subarray((numThreads - 1) * ySizeSp), 'float32ptr', 'out'], [yDimsFinal, 'int32ptr'],\r\n            [kernelShape, 'int32ptr'], [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\r\n      }\r\n    }\r\n\r\n    await Promise.all(workerTasks);\r\n  }\r\n\r\n  return [y];\r\n}\r\n\r\n// this function will determine the number of threads\r\n// the strategy to parallelize is to parallelize on number of data channels\r\nfunction determineNumThreads(batchSize: number, numChannels: number, numWebWorkers: number): number {\r\n  // single threaded if:\r\n  // 1) batch size is not 1 (data splitting logic across threads is specific to batch size being 1)\r\n  // 2) if number of channels is 1\r\n  // 3) number of web workers is 0\r\n  if (batchSize !== 1 || numChannels === 1 || numWebWorkers <= 0) {\r\n    return 1;\r\n  }\r\n\r\n  // multi-threaded:\r\n  // determine number of threads\r\n  return Math.min(numChannels, numWebWorkers + 1);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Softmax} from '../../../ops/softmax';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmSoftmax extends Softmax {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const x = inputs[0];\r\n    const axisCorrected = ShapeUtil.parseAxis(this.axis, x.dims.length);\r\n    const N = ShapeUtil.sizeToDimension(x.dims, axisCorrected);\r\n    const D = ShapeUtil.sizeFromDimension(x.dims, axisCorrected);\r\n    const y = new Tensor(x.dims, x.type);\r\n    WasmBinding.getInstance().ccall(\r\n        '_softmax_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'], [N, 'int32'], [D, 'int32']);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Sum} from '../../../ops/sum';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WasmBinding, WasmCallArgument} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmSum extends Sum {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const y = new Tensor(inputs[0].dims, inputs[0].type);\r\n    const size = inputs[0].floatData.length;\r\n    const input = new Array<WasmCallArgument>(inputs.length);\r\n    for (let i = 0; i < inputs.length; i++) {\r\n      input[i] = [inputs[i].floatData, 'float32ptr'];\r\n    }\r\n    WasmBinding.getInstance().ccall(\r\n        '_sum_f32', [inputs.length, 'int32'], [size, 'int32'], [y.floatData, 'float32ptr', 'inout'], ...input);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32') {\r\n      return false;\r\n    }\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (inputs[0].type !== inputs[i].type) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend as BackendInterface} from '../api/onnx';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\n\r\nimport {WebGLSessionHandler} from './webgl/session-handler';\r\nimport {WebGLContext} from './webgl/webgl-context';\r\nimport {createWebGLContext} from './webgl/webgl-context-factory';\r\n\r\ntype WebGLOptions = BackendInterface.WebGLOptions;\r\n\r\n/**\r\n * WebGLBackend is the entry point for all WebGL opeartions\r\n * When it starts it created the WebGLRenderingContext\r\n * and other main framework components such as Program and Texture Managers\r\n */\r\nexport class WebGLBackend implements Backend, WebGLOptions {\r\n  disabled?: boolean;\r\n  glContext: WebGLContext;\r\n  contextId?: 'webgl'|'webgl2';\r\n  matmulMaxBatchSize?: number;\r\n  textureCacheMode?: 'initializerOnly'|'full';\r\n\r\n  initialize(): boolean {\r\n    try {\r\n      this.glContext = createWebGLContext(this.contextId);\r\n      if (typeof this.matmulMaxBatchSize !== 'number') {\r\n        this.matmulMaxBatchSize = 16;\r\n      }\r\n      if (typeof this.textureCacheMode !== 'string') {\r\n        this.textureCacheMode = 'full';\r\n      }\r\n      Logger.verbose('WebGLBackend', `Created WebGLContext: ${typeof this.glContext}`);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WebGLSessionHandler(this, context);\r\n  }\r\n  dispose(): void {\r\n    this.glContext.dispose();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Logger} from '../../instrument';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {Tensor} from '../../tensor';\r\nimport {WebGLBackend} from '../backend-webgl';\r\n\r\nimport {WebGLInferenceHandler} from './inference-handler';\r\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\r\nimport {ProgramManager} from './program-manager';\r\nimport {AlwaysKeepOriginalSizeStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureManager} from './texture-manager';\r\nimport {TextureData} from './types';\r\n\r\nexport class WebGLSessionHandler implements SessionHandler {\r\n  programManager: ProgramManager;\r\n  textureManager: TextureManager;\r\n  layoutStrategy: TextureLayoutStrategy;\r\n  textureDataCache: Map<Tensor.Id, TextureData>;\r\n  initializers: Set<Tensor.Id>;\r\n\r\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\r\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext);\r\n    this.layoutStrategy = new AlwaysKeepOriginalSizeStrategy(backend.glContext.maxTextureSize);\r\n    this.textureManager = new TextureManager(\r\n        backend.glContext, this.layoutStrategy, this.context.profiler,\r\n        {reuseTextures: backend.textureCacheMode === 'full'});\r\n    this.textureDataCache = new Map();\r\n  }\r\n\r\n  createInferenceHandler() {\r\n    return new WebGLInferenceHandler(this);\r\n  }\r\n  onGraphInitialized(graph: Graph): void {\r\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\r\n    this.initializers = new Set(initializers);\r\n  }\r\n  isInitializer(tensorId: Tensor.Id): boolean {\r\n    return this.initializers ? this.initializers.has(tensorId) : false;\r\n  }\r\n  getTextureData(tensorId: Tensor.Id): TextureData|undefined {\r\n    return this.textureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData): void {\r\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\r\n    this.textureDataCache.set(tensorId, textureData);\r\n  }\r\n  dispose(): void {\r\n    this.programManager.dispose();\r\n    this.textureManager.clearActiveTextures();\r\n    this.textureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.textureDataCache = new Map();\r\n  }\r\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>): Operator {\r\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\r\n    op.initialize(node.attributes);\r\n    return op;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Logger} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\n\r\nimport {WebGLUint8Encode} from './ops/uint8-encode';\r\nimport {WebGLSessionHandler} from './session-handler';\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {WidthHeightPrefs} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout, WebGLOperator} from './types';\r\nimport {getPackedShape} from './utils';\r\n\r\nexport class WebGLInferenceHandler implements InferenceHandler {\r\n  private textureDataCache: Map<Tensor.Id, TextureData>;\r\n  constructor(public session: WebGLSessionHandler) {\r\n    this.textureDataCache = new Map();\r\n  }\r\n\r\n  run(op: WebGLOperator, inputs: Tensor[]): Tensor[] {\r\n    let artifact = this.session.programManager.getArtifact(op);\r\n    if (!artifact) {\r\n      const programInfo = op.createProgramInfo(this, inputs);\r\n      artifact = this.session.programManager.build(programInfo);\r\n      this.session.programManager.setArtifact(op, artifact);\r\n    }\r\n    const runData = op.createRunData(this, artifact.programInfo, inputs);\r\n    this.session.programManager.run(artifact, runData);\r\n    return [runData.outputTextureData.tensor];\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from a tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * If a related texture data is found in cache, returns it;\r\n   * Otherwise:\r\n   *   Creates a new texture layout if not provided;\r\n   *   Creates WebGLTexture with the layout;\r\n   *   Upload tensor data to the texture;\r\n   *   Creates a texture data object associated with the given tensor.\r\n   * @param tensor the tensor with data to upload\r\n   */\r\n  getOrCreateTextureData(tensor: Tensor, layout?: TextureLayout) {\r\n    let td = this.getTextureData(tensor.dataId);\r\n    if (!td) {\r\n      Logger.verbose('InferenceHandler', `Creating new TextureData for dims: [${tensor.dims}]`);\r\n      if (!layout) {\r\n        layout = this.createTextureLayoutFromShape(tensor.dims.slice());\r\n      }\r\n      // graph inputs or initializers\r\n      td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n    } else {\r\n      Logger.verbose('InferenceHandler', `Retrieving TextureData from cache: [${tensor.dims}]`);\r\n    }\r\n    return td;\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from the given data type and texture layout.\r\n   * Usage = Encoder.Usage.Default.\r\n   * @param dataType the tensor data type\r\n   */\r\n  createTextureDataFromLayout(layout: TextureLayout, dataType: Tensor.DataType): TextureData {\r\n    return this.createTextureData(layout, dataType);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object using the given data and bind to the given tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\r\n   * implementation by Graph.Transformer\r\n   * @param dataType the tensor data type\r\n   * @param data the actual data to upload\r\n   * @param tensor the tensor to bind. tensor's data is ignored.\r\n   */\r\n  createTextureDataFromLayoutBindTensor(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\r\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\r\n  }\r\n\r\n  private createTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\r\n      usage?: Encoder.Usage): TextureData {\r\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\r\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object, using the given texture.\r\n   * This function does not create new texture. Usually used in scenarios using texture sharing. (eg. Reshape)\r\n   * @param dataType the tensor data type\r\n   * @param texture the WebGLTexture object to share\r\n   * @param tensorId the tensor ID of the shared tensor data\r\n   */\r\n  createSharedTextureData(layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensorId: Tensor.Id):\r\n      TextureData {\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, undefined, tensorId);\r\n  }\r\n\r\n  private createTextureDataFromTexture(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\r\n    const textureData: TextureData = {\r\n      ...layout,\r\n      tensor: tensor ||\r\n          new Tensor(\r\n                  layout.unpackedShape, dataType,\r\n                  (id: Tensor.Id) => {\r\n                    return this.readTexture(textureData);\r\n                  },\r\n                  undefined, undefined, tensorId),\r\n      texture\r\n    };\r\n    this.setTextureData(textureData.tensor.dataId, textureData);\r\n    return textureData;\r\n  }\r\n\r\n  getTextureData(tensorId: Tensor.Id): TextureData|undefined {\r\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId) :\r\n                                                  this.textureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, td: TextureData): void {\r\n    if (this.session.isInitializer(tensorId)) {\r\n      this.session.setTextureData(tensorId, td);\r\n    } else {\r\n      this.textureDataCache.set(tensorId, td);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a TextureLayout object from a tensor. If a related texture data is found, returns the cached texture layout.\r\n   */\r\n  getOrCreateTextureLayout(tensor: Tensor, channels: 1|2|3|4 = 1, unpackedShape?: ReadonlyArray<number>):\r\n      TextureLayout {\r\n    const td = this.getTextureData(tensor.dataId);\r\n    if (td) {\r\n      return td;\r\n    }\r\n    return this.createTextureLayoutFromShape(\r\n        channels === 1 ? tensor.dims.slice() : getPackedShape(tensor.dims.slice()), channels, unpackedShape);\r\n  }\r\n  /**\r\n   * Create a TextureLayout object from shape.\r\n   */\r\n  createTextureLayoutFromShape(\r\n      shape: ReadonlyArray<number>, channels: 1|2|3|4 = 1, unpackedShape?: ReadonlyArray<number>,\r\n      prefs?: WidthHeightPrefs): TextureLayout {\r\n    const [width, height] = this.session.layoutStrategy.computeTextureWH(shape, prefs);\r\n    let inferredDims = shape;\r\n    if (shape.length === 0) {\r\n      inferredDims = [1];\r\n    }\r\n    if (channels === 1) {\r\n      // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\r\n      unpackedShape = shape;\r\n    } else if (!unpackedShape) {\r\n      throw new Error('Unpacked shape is needed when using channels > 1');\r\n    }\r\n    return {\r\n      width,\r\n      height,\r\n      channels: channels ? channels : 1,\r\n      shape: inferredDims,\r\n      strides: ShapeUtil.computeStrides(inferredDims),\r\n      unpackedShape\r\n    };\r\n  }\r\n\r\n  dispose(): void {\r\n    this.session.textureManager.clearActiveTextures();\r\n    this.textureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.textureDataCache = new Map();\r\n  }\r\n\r\n  readTexture(textureData: TextureData): Tensor.NumberType {\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      const op = new WebGLUint8Encode();\r\n      const uint8TD = op.runInternal(this, textureData);\r\n      return this.session.textureManager.readUint8TextureAsFloat(uint8TD);\r\n    }\r\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureData, TextureLayout} from '../types';\r\n\r\nexport class WebGLUint8Encode {\r\n  runInternal(inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData {\r\n    const outputShape = input.shape;\r\n    const [width, height] = inferenceHandler.session.layoutStrategy.computeTextureWH(input.shape);\r\n    const outputLayout: TextureLayout = {\r\n      width,\r\n      height,\r\n      channels: 4,\r\n      shape: outputShape,\r\n      strides: ShapeUtil.computeStrides(outputShape),\r\n      unpackedShape: outputShape\r\n    };\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    // TODO: remove this special script. Use graph transformer instead.\r\n    /**\r\n     * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\r\n     */\r\n    const shaderSource = `\r\n      const float FLOAT_MAX = 1.70141184e38;\r\n      const float FLOAT_MIN = 1.17549435e-38;\r\n\r\n      bool isNaN(float val) {\r\n        return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\r\n      }\r\n\r\n      highp vec4 encodeAsUint8(highp float v) {\r\n        if (isNaN(v)) {\r\n          return vec4(255, 255, 255, 255);\r\n        }\r\n\r\n        highp float av = abs(v);\r\n\r\n        if(av < FLOAT_MIN) {\r\n          return vec4(0.0, 0.0, 0.0, 0.0);\r\n        } else if(v > FLOAT_MAX) {\r\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\r\n        } else if(v < -FLOAT_MAX) {\r\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\r\n        }\r\n\r\n        highp vec4 c = vec4(0,0,0,0);\r\n\r\n        highp float e = floor(log2(av));\r\n        highp float m = exp2(fract(log2(av))) - 1.0;\r\n\r\n        c[2] = floor(128.0 * m);\r\n        m -= c[2] / 128.0;\r\n        c[1] = floor(32768.0 * m);\r\n        m -= c[1] / 32768.0;\r\n        c[0] = floor(8388608.0 * m);\r\n\r\n        highp float ebias = e + 127.0;\r\n        c[3] = floor(ebias / 2.0);\r\n        ebias -= c[3] * 2.0;\r\n        c[2] += floor(ebias) * 128.0;\r\n\r\n        c[3] += 128.0 * step(0.0, -v);\r\n\r\n        return c / 255.0;\r\n      }\r\n\r\n      void main() {\r\n        float value = ${glsl.texture2D}(X,TexCoords).r;\r\n        ${glsl.output} = encodeAsUint8(value);\r\n      }`;\r\n    const programInfo = {inputLayouts: [input], outputLayout, samplers: ['X'], shaderSource, hasMain: true};\r\n    const artifact = inferenceHandler.session.programManager.build(programInfo);\r\n\r\n    const encoder = inferenceHandler.session.backend.glContext.getEncoder('byte', 4);\r\n    const texture =\r\n        inferenceHandler.session.backend.glContext.allocateTexture(outputLayout.width, outputLayout.height, encoder);\r\n    const outputTextureData = inferenceHandler.createSharedTextureData(outputLayout, 'uint8', texture, {});\r\n    const runData = {inputTextureDatas: [input], outputTextureData, uniformData: {}};\r\n\r\n    inferenceHandler.session.programManager.run(artifact, runData);\r\n    return runData.outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {WebGLBatchNormalization} from './ops/batch-normalization';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {WebGLClip} from './ops/clip';\r\nimport {WebGLConcat} from './ops/concat';\r\nimport {WebGLConv} from './ops/conv';\r\nimport {WebGLDropout} from './ops/dropout';\r\nimport {WebGLElu} from './ops/elu';\r\nimport {WebGLFlatten} from './ops/flatten';\r\nimport {WebGLGather} from './ops/gather';\r\nimport {WebGLGemm} from './ops/gemm';\r\nimport {WebGLImageScaler} from './ops/image-scaler';\r\nimport {WebGLLeakyRelu} from './ops/leaky-relu';\r\nimport {WebGLMatMul} from './ops/matmul';\r\nimport {WebGLPad} from './ops/pad';\r\nimport {WebGLAveragePool, WebGLGlobalAveragePool, WebGLGlobalMaxPool, WebGLMaxPool} from './ops/pool';\r\nimport * as reduceOps from './ops/reduce';\r\nimport {WebGLReshape} from './ops/reshape';\r\nimport {WebGLSlice, WebGLSliceV10} from './ops/slice';\r\nimport {WebGLSoftmax} from './ops/softmax';\r\nimport {WebGLSplit} from './ops/split';\r\nimport {WebGLSqueeze} from './ops/squeeze';\r\nimport {WebGLSum} from './ops/sum';\r\nimport {WebGLTile} from './ops/tile';\r\nimport {WebGLTranspose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {WebGLUnsqueeze} from './ops/unsqueeze';\r\n\r\nexport const WEBGL_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\r\n  ['Abs', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslAbs())],\r\n  ['Acos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAcos())],\r\n  ['Add', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslAdd())],\r\n  ['And', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslAnd())],\r\n  ['Asin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAsin())],\r\n  ['Atan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAtan())],\r\n  ['AveragePool', '', '7+', () => new WebGLAveragePool()],  // TODO: support new attributes for AveragePool-10\r\n  ['BatchNormalization', '', '7+', () => new WebGLBatchNormalization()],\r\n  ['Ceil', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCeil())],\r\n  ['Clip', '', '6+', () => new WebGLClip()],\r\n  ['Concat', '', '4+', () => new WebGLConcat()],\r\n  ['Conv', '', '1+', () => new WebGLConv()],\r\n  ['Cos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCos())],\r\n  ['Div', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslDiv())],\r\n  ['Dropout', '', '7+', () => new WebGLDropout()],\r\n  ['Equal', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslEqual(), undefined, 'bool')],\r\n  ['Elu', '', '6+', () => new WebGLElu()],\r\n  ['Exp', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslExp())],\r\n  ['Flatten', '', '1+', () => new WebGLFlatten()],\r\n  ['Floor', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslFloor())],\r\n  ['Gather', '', '1+', () => new WebGLGather()],\r\n  ['Gemm', '', '7+', () => new WebGLGemm()],\r\n  ['GlobalAveragePool', '', '1+', () => new WebGLGlobalAveragePool()],\r\n  ['GlobalMaxPool', '', '1+', () => new WebGLGlobalMaxPool()],\r\n  ['Greater', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslGreater(), undefined, 'bool')],\r\n  ['Identity', '', '1+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslIdentity())],\r\n  ['ImageScaler', '', '1+', () => new WebGLImageScaler()],\r\n  ['LeakyRelu', '', '6+', () => new WebGLLeakyRelu()],\r\n  ['Less', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslLess(), undefined, 'bool')],\r\n  ['Log', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslLog())],\r\n  ['MatMul', '', '1+', () => new WebGLMatMul()],\r\n  ['MaxPool', '', '1+', () => new WebGLMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['Mul', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslMul())],\r\n  ['Neg', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslNeg())],\r\n  ['Not', '', '1+', () => new unaryOps.WebGLUnaryOp(['bool'], unaryOps.glslNot())],\r\n  ['Or', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslOr())],\r\n  ['Pad', '', '2+', () => new WebGLPad()],\r\n  ['Pow', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPow())],\r\n  ['PRelu', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPRelu())],\r\n  ['ReduceLogSum', '', '1+', () => new reduceOps.WebGLReduceLogSum()],\r\n  ['ReduceMax', '', '1+', () => new reduceOps.WebGLReduceMax()],\r\n  ['ReduceMean', '', '1+', () => new reduceOps.WebGLReduceMean()],\r\n  ['ReduceMin', '', '1+', () => new reduceOps.WebGLReduceMin()],\r\n  ['ReduceProd', '', '1+', () => new reduceOps.WebGLReduceProd()],\r\n  ['ReduceSum', '', '1+', () => new reduceOps.WebGLReduceSum()],\r\n  ['ReduceSumSquare', '', '1+', () => new reduceOps.WebGLReduceSumSquare()],\r\n  ['Relu', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslRelu())],\r\n  ['Reshape', '', '5+', () => new WebGLReshape()],\r\n  ['Sigmoid', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSigmoid())],\r\n  ['Sin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSin())],\r\n  ['Slice', '', '10+', () => new WebGLSliceV10()],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', () => new WebGLSlice()],\r\n  ['Softmax', '', '1+', () => new WebGLSoftmax()],\r\n  // 'Split' operator has an optional attribute 'split'\r\n  // this attribute determines how the specified axis of input data\r\n  // is split. When the attribute is missing, we need the count of number of outputs\r\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\r\n  ['Split', '', '2+', (node) => new WebGLSplit(node.outputs.length)],\r\n  ['Sqrt', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSqrt())],\r\n  ['Squeeze', '', '1+', () => new WebGLSqueeze()],\r\n  ['Sub', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslSub())],\r\n  ['Sum', '', '6+', () => new WebGLSum()],  // TODO: support multidirectional broadcast for Sum-8\r\n  ['Tan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTan())],\r\n  ['Tanh', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTanh())],\r\n  ['Tile', '', '6+', () => new WebGLTile()],\r\n  ['Transpose', '', '1+', () => new WebGLTranspose()],\r\n  ['Unsqueeze', '', '1+', () => new WebGLUnsqueeze()],\r\n  ['Xor', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslXor())],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BatchNormalization} from '../../../ops/batch-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData} from '../types';\r\n\r\nexport class WebGLBatchNormalization extends BatchNormalization {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\r\n    const outputShape = inputs[0].dims.slice();\r\n    const rank = outputShape.length;\r\n    const scale = inputLayouts[1];\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        vec2 position = offsetToCoords(indices[1], ${scale.width}, ${scale.height});\r\n        float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\r\n        float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\r\n        float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\r\n        float b = getColorAsFloat(${glsl.texture2D}(B, position));\r\n\r\n        return scale * ( (_A(indices) - mean) / sqrt(variance + float(${this.epsilon})) ) + b;\r\n      }`;\r\n    return {\r\n      inputLayouts,\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Scale', 'B', 'Mean', 'Variance'],\r\n      shaderSource\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    inputs.slice(1).forEach(t => inputTDs.push(handler.getOrCreateTextureData(t)));\r\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type);\r\n    return {inputTextureDatas: inputTDs, outputTextureData: outputTD, uniformData: {}};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BinaryOp} from '../../../ops/binary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLBinaryOp extends BinaryOp implements WebGLOperator {\r\n  constructor(\r\n      typeConstraint: ReadonlyArray<Tensor.DataType>, protected glslFunc: GlslValueFunction, opType?: string,\r\n      resultType?: Tensor.DataType) {\r\n    super(typeConstraint, opType, resultType);\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\r\n    const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n    if (isBroadcast) {\r\n      const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n      if (!outputShape) {\r\n        throw new Error(`Can't perform binary op on the given tensors`);\r\n      }\r\n      const outputRank = outputShape.length;\r\n      const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\r\n      const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\r\n      const aBcast = inputs[0].dims.length !== 0 ? `bcastIndices_A(indices, aindices);` : `aindices[0] = 0;`;\r\n      const bBcast = inputs[1].dims.length !== 0 ? `bcastIndices_B(indices, bindices);` : `bindices[0] = 0;`;\r\n      const shaderSource = `\r\n      ${this.glslFunc.body}\r\n      float process(int indices[${outputRank}]) {\r\n        int aindices[${aRank}];\r\n        int bindices[${bRank}];\r\n        ${aBcast}\r\n        ${bBcast}\r\n        return ${this.glslFunc.name}(_A(aindices), _B(bindices));\r\n    }`;\r\n      return {\r\n        inputLayouts,\r\n        outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n        samplers: ['A', 'B'],\r\n        shaderSource,\r\n      };\r\n    }\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    ${this.glslFunc.body}\r\n    void main() {\r\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\r\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\r\n      vec4 result = ${this.glslFunc.name}(v1, v2);\r\n      ${glsl.output} = result;\r\n    }\r\n    `;\r\n    return {\r\n      hasMain: true,\r\n      inputLayouts,\r\n      outputLayout: handler.createTextureLayoutFromShape(inputs[0].dims),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(\r\n          programInfo.outputLayout, this.resultType ? this.resultType : inputs[0].type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport function glslAdd(): GlslValueFunction {\r\n  const name = `add_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a + b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 + v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslDiv(): GlslValueFunction {\r\n  const name = `div_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a / b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 / v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslMul(): GlslValueFunction {\r\n  const name = `mul_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a * b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 * v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSub(): GlslValueFunction {\r\n  const name = `sub_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a - b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 - v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslEqual(): GlslValueFunction {\r\n  const name = `equal_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a == b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1 == v2 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslGreater(): GlslValueFunction {\r\n  const name = `greater_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a > b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r > v2.r ,\r\n      v1.g > v2.g,\r\n      v1.b > v2.b,\r\n      v1.a > v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLess(): GlslValueFunction {\r\n  const name = `less_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a < b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r < v2.r ,\r\n                v1.g < v2.g,\r\n                v1.b < v2.b,\r\n                v1.a < v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslAnd(): GlslValueFunction {\r\n  const name = `and_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) && bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r && b2.r ,\r\n                b1.g && b2.g,\r\n                b1.b && b2.b,\r\n                b1.a && b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslOr(): GlslValueFunction {\r\n  const name = `or_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) || bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r || b2.r ,\r\n                b1.g || b2.g,\r\n                b1.b || b2.b,\r\n                b1.a || b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslXor(): GlslValueFunction {\r\n  const name = `xor_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) ^^ bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r ^^ b2.r ,\r\n                b1.g ^^ b2.g,\r\n                b1.b ^^ b2.b,\r\n                b1.a ^^ b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslPow(): GlslValueFunction {\r\n  return glslBuiltinBinary('pow');\r\n}\r\nexport function glslPRelu(): GlslValueFunction {\r\n  const name = `prelu_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a < 0.0 ? a * b: a;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(\r\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\r\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\r\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\r\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\r\n      );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return ${fname}(a, b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return ${fname}(v1, v2);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Clip} from '../../../ops/clip';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLClip extends Clip implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      const float min = float(${this.min});\r\n      const float max = float(${this.max});\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(clamp(v, min, max));\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Concat} from '../../../ops/concat';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLConcat extends Concat implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\r\n      throw new Error(`axis specified for concat doesn't match input dimensionality`);\r\n    }\r\n    if (this.axis < 0) {\r\n      this.axis = inputShape.length + this.axis;\r\n    }\r\n    // ensure all of the non-concatenated axes match each other\r\n    // calculate the shape of the output tensor while we do that\r\n    const outputShape = inputShape.slice(0);\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      const dataNShape = inputs[i].dims.slice();\r\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n        // add to the placeholder for computing output shape\r\n        if (axisIndex === this.axis) {\r\n          outputShape[this.axis] += dataNShape[axisIndex];\r\n        }\r\n        // ensure all non-cancatenated axes match each other\r\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n          throw new Error(`non concat dimensions must match`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const rank = outputShape.length;\r\n\r\n    let getTextureIndexWhereDataResidesMethod = ``;\r\n    // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\r\n    if (inputs.length < 5) {\r\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesLinearSearch(inputs.length);\r\n    } else {\r\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesBinarySearch(inputs.length);\r\n    }\r\n\r\n    const fetchDataFromCorrectTextureMethod = this.fetchDataFromCorrectTextureMethod(inputs.length, rank);\r\n    const getValueFromArrayIndexMethod = this.getValueFromArrayIndexMethod(inputs.length);\r\n    const samplers = inputs.map((v, i) => `X${i}`);\r\n    const shaderSource = `\r\n      ${fetchDataFromCorrectTextureMethod}\r\n      ${getValueFromArrayIndexMethod}\r\n      ${getTextureIndexWhereDataResidesMethod}\r\n      float process(int indices[${rank}]) {\r\n        int textureIndex = getTextureWhereDataResides (indices[${this.axis}]);\r\n\r\n        if(textureIndex != 0) {\r\n          indices[${this.axis}] = indices[${\r\n        this.axis}] - int(getValueFromArrayIndex(sizeInConcatAxis, textureIndex-int(1)));\r\n        }\r\n\r\n        return fetchDataFromCorrectTexture(textureIndex, indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers,\r\n      variables: [{name: 'sizeInConcatAxis', type: 'int', arrayLength: inputs.length}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    const sizeInConcatAxis = new Array<number>(programInfo.inputLayouts.length);\r\n    let previousSum = 0;\r\n    for (let i = 0; i < programInfo.inputLayouts.length; ++i) {\r\n      previousSum += programInfo.inputLayouts[i].shape[this.axis];\r\n      sizeInConcatAxis[i] = previousSum;\r\n    }\r\n    const uniformData = {'sizeInConcatAxis': sizeInConcatAxis};\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData\r\n    };\r\n  }\r\n  private getTextureIndexWhereDataResidesLinearSearch(numberOfTensors: number): string {\r\n    return `int getTextureWhereDataResides(int index) {\r\n      for(int i=0; i<${numberOfTensors}; i++) {\r\n          if(index < int(sizeInConcatAxis[i])){\r\n              return i;\r\n          }\r\n        }\r\n      }`;\r\n  }\r\n\r\n  // TODO: Implement BinarySearch in GLSL\r\n  private getTextureIndexWhereDataResidesBinarySearch(numberOfTensors: number): string {\r\n    return this.getTextureIndexWhereDataResidesLinearSearch(numberOfTensors);\r\n  }\r\n\r\n  private fetchDataFromCorrectTextureMethod(numberOfTensors: number, tensorRank: number) {\r\n    const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\r\n    for (let i = 0; i < numberOfTensors; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n      } else if (i === numberOfTensors - 1) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else { return _X${i}(indices); }`);\r\n      } else {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        `\\t` +\r\n        `}`);\r\n    return codeLines.join('\\n');\r\n  }\r\n\r\n  private getValueFromArrayIndexMethod(arrayRank: number): string {\r\n    const codeLines: string[] = [`int getValueFromArrayIndex(int arr[${arrayRank}], int index) {`];\r\n    for (let i = 0; i < arrayRank; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `if (index == ${i}) { return arr[${i}]; }`);\r\n      } else if (i === arrayRank - 1) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else { return arr[${i}]; }`);\r\n      } else {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else if (index == ${i}) { return arr[${i}]; }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        `\\t` +\r\n        `}`);\r\n\r\n    return codeLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from '../../../instrument';\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\r\nimport {WebGLContext} from '../webgl-context';\r\n\r\nexport class WebGLConv extends Conv {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const programManager = inferenceHandler.session.programManager;\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\r\n      for (let i = 0; i < programInfos.length; ++i) {\r\n        const artifact = inferenceHandler.session.programManager.build(programInfos[i]);\r\n        this.artifacts.push(artifact);\r\n      }\r\n    }\r\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    programManager.run(this.artifacts[0], runDatas[0]);\r\n    programManager.run(this.artifacts[1], runDatas[1]);\r\n    return [runDatas[1].outputTextureData.tensor];\r\n  }\r\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      const wDims = inputs[1].dims;\r\n      for (let i = 2; i < wDims.length; ++i) {\r\n        this.kernelShape.push(wDims[i]);\r\n      }\r\n    }\r\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    Logger.verbose(\r\n        'Conv',\r\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\r\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\r\n    const outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\r\n    const im2colProgramInfo = this.createIm2ColProgramInfo(inferenceHandler, inputs, outputShape);\r\n    const dotProductProgramInfo =\r\n        this.createDotProductProgramInfo(inferenceHandler, im2colProgramInfo.outputLayout, inputs, outputShape);\r\n    return [im2colProgramInfo, dotProductProgramInfo];\r\n  }\r\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\r\n    const k = inputs[1];\r\n    const b = inputs.length >= 3 ? inputs[2] : undefined;\r\n    let kTD = inferenceHandler.getTextureData(k.dataId);\r\n    if (!kTD) {\r\n      Logger.verbose('Conv', 'Did not find the adjustedKernel texture in the cache. Creating rew.');\r\n      const newKernelData =\r\n          WebGLConv.prepKernelForDotProduct(k.dims.slice(), this.group, 4, k.floatData as Float32Array);\r\n      // hack: should use graph transformer to rewrite initializer K\r\n      kTD = inferenceHandler.createTextureDataFromLayoutBindTensor(\r\n          programInfos[1].inputLayouts[1], k.type, newKernelData, k);\r\n    }\r\n    const runtDataIm2Col = {\r\n      inputTextureDatas: [inferenceHandler.getOrCreateTextureData(inputs[0])],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, inputs[0].type),\r\n      uniformData: {}\r\n    };\r\n    const inputTDs = [runtDataIm2Col.outputTextureData, kTD];\r\n    if (b) {\r\n      inputTDs.push(inferenceHandler.getOrCreateTextureData(b));\r\n    }\r\n    const outputTD = inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, inputs[0].type);\r\n    const runDataDotProduct = {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: outputTD,\r\n      uniformData: {},\r\n      draw: (glContext: WebGLContext, artifact: Artifact) => {\r\n        const gl = glContext.gl;\r\n        const sharedDim = artifact.programInfo.params!.sharedDim as number;\r\n        const sharedDimReadSize = artifact.programInfo.params!.sharedDimReadSize as number;\r\n        const sharedDimOffsetLocation = artifact.uniformLocations.find(l => l.name === 'sharedDimOffset')!.location;\r\n        let blend = false;\r\n        for (let k = 0; k < sharedDim; k += sharedDimReadSize) {\r\n          Logger.verbose('MatMul2D', `k = ${k}, sharedDim: ${sharedDim}, readSize = ${sharedDimReadSize}`);\r\n\r\n          if (k === sharedDimReadSize) {\r\n            blend = true;\r\n            gl.enable(gl.BLEND);\r\n            glContext.checkError();\r\n            gl.blendEquation(gl.FUNC_ADD);\r\n            glContext.checkError();\r\n            gl.blendFunc(gl.ONE, gl.ONE);\r\n            glContext.checkError();\r\n          }\r\n\r\n          gl.uniform1i(sharedDimOffsetLocation, k);\r\n          glContext.checkError();\r\n          glContext.draw();\r\n        }\r\n\r\n        if (blend) {\r\n          gl.disable(gl.BLEND);\r\n          glContext.checkError();\r\n        }\r\n      }\r\n    };\r\n    return [runtDataIm2Col, runDataDotProduct];\r\n  }\r\n  createIm2ColProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], outputShape: number[]):\r\n      ProgramInfo {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n\r\n    const rank = outputShape.length;\r\n    const im2colDims = WebGLConv.calcIm2ColDims(xshape, kshape, outputShape, 4);\r\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(\r\n        im2colDims, 4, [im2colDims[0], im2colDims[1], im2colDims[2], im2colDims[3] * 4], {breakAxis: 3});\r\n    const shaderSource = `\r\n      const int XC = ${xshape[1]};\r\n      const int XH = ${xshape[2]};\r\n      const int XW = ${xshape[3]};\r\n      const int KH = ${this.kernelShape[0]};\r\n      const int KW = ${this.kernelShape[1]};\r\n      const int dilationH = ${this.dilations[0]};\r\n      const int dilationW = ${this.dilations[1]};\r\n      const int strideH = ${this.strides[0]};\r\n      const int strideW = ${this.strides[1]};\r\n      const int padH = ${this.pads[0]};\r\n      const int padW = ${this.pads[1]};\r\n      const int KHKW = KH*KW;\r\n      const int XCKHKW = XC * KHKW;\r\n      const int outputChannels = 4;\r\n\r\n      vec4 process(int indices[${rank}]) {\r\n        int b  = indices[0]; // batch size\r\n        int oh = indices[1] * strideH - padH; //output height\r\n        int ow = indices[2] * strideW - padW; //output width\r\n        int p = indices[3] * outputChannels; //patch\r\n        vec4 v = vec4(0.0);\r\n        for(int i=0; i < outputChannels; ++i) {\r\n          if(p < XCKHKW) {\r\n            int patchC = p / KHKW;\r\n            int patchH = (p - patchC*KHKW) / KW;\r\n            int patchW = (p - patchC*KHKW) - patchH * KW;\r\n            int xh2 = oh + patchH * dilationH;\r\n            int xw2 = ow + patchW * dilationW;\r\n            int x[${xshape.length}];\r\n            x[0] = b;\r\n            x[1] = patchC;\r\n            x[2] = xh2;\r\n            x[3] = xw2;\r\n            if(xh2 >= 0 &&\r\n                xh2 < XH &&\r\n                xw2 >= 0 &&\r\n                xw2 < XW) {\r\n              v[i] = _X(x);\r\n            }\r\n          }\r\n          ++p;\r\n        }\r\n        return v;\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [inferenceHandler.createTextureLayoutFromShape(xshape)],\r\n      outputLayout,\r\n      samplers: ['X'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createDotProductProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, im2colLayout: TextureLayout, inputs: Tensor[],\r\n      outputShape: number[]): ProgramInfo {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n    const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\r\n    const kLayout = inferenceHandler.createTextureLayoutFromShape(\r\n        adjustedKernelShape, 4, [adjustedKernelShape[0], adjustedKernelShape[1] * 4], {breakAxis: 1});\r\n\r\n    let bLayout: TextureLayout|undefined;\r\n    const rank = outputShape.length;\r\n\r\n    const inputLayouts = [im2colLayout, kLayout];\r\n    if (inputs.length === 3) {\r\n      bLayout = inferenceHandler.createTextureLayoutFromShape(inputs[2].dims.slice());\r\n      inputLayouts.push(bLayout);\r\n    }\r\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(outputShape);\r\n    const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\r\n    const sharedDim = im2colLayout.shape[3];\r\n    const blendEnabled = inferenceHandler.session.backend.glContext.isBlendSupported;\r\n    const sharedDimReadSize = blendEnabled && inferenceHandler.session.backend.matmulMaxBatchSize ?\r\n        this.calcSharedDimReadSize(inferenceHandler.session.backend.matmulMaxBatchSize, sharedDim) :\r\n        sharedDim;\r\n    const samplers = ['Im2Col', 'K'];\r\n    if (inputs.length === 3) {\r\n      samplers.push('B');\r\n    }\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    float process(int indices[${rank}]) {\r\n      int b[1];\r\n      b[0] = indices[1];\r\n      int im2col[${im2colLayout.shape.length}];\r\n      im2col[0] = indices[0];\r\n      im2col[1] = indices[2];\r\n      im2col[2] = indices[3];\r\n      int im2colOffset = im2col[0] * ${im2colLayout.strides[0]} + im2col[1] * ${\r\n        im2colLayout.strides[1]} + im2col[2] * ${im2colLayout.strides[2]} + sharedDimOffset;\r\n      int kernelOffset = indices[1] * ${kLayout.strides[0]} + sharedDimOffset;\r\n      float sum = sharedDimOffset == 0 ? ${initValue} : 0.0;\r\n      for (int i = 0; i < ${sharedDimReadSize}; ++i) {\r\n        vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colLayout.width}, ${im2colLayout.height});\r\n        vec2 kernelCoords = offsetToCoords(kernelOffset, ${kLayout.width}, ${kLayout.height});\r\n        sum += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\r\n        ++im2colOffset;\r\n        ++kernelOffset;\r\n      }\r\n      return sum;\r\n    }`;\r\n    return {\r\n      inputLayouts: inputs.length === 3 ? [im2colLayout, kLayout, bLayout!] : [im2colLayout, kLayout],\r\n      outputLayout,\r\n      shaderSource,\r\n      samplers,\r\n      variables: [{name: 'sharedDimOffset', type: 'int'}],\r\n      params: {'sharedDim': sharedDim, 'sharedDimReadSize': sharedDimReadSize}\r\n    };\r\n  }\r\n  static prepKernelForDotProduct(shape: number[], group: number, channels: number, kernel: Float32Array): Float32Array {\r\n    if (group === 1 && (channels === 1 || (shape[2] * shape[3]) % channels === 0)) {\r\n      return kernel;\r\n    }\r\n    const strides = ShapeUtil.computeStrides(shape);\r\n    const oldRowSize = shape[1] * shape[2] * shape[3];\r\n    const newRowSize = Math.ceil(oldRowSize / channels) * channels;\r\n    const newSize = shape[0] * newRowSize;\r\n    const buffer = new Float32Array(newSize);\r\n\r\n    const rowbuf = new Float32Array(newRowSize);\r\n    for (let f = 0; f < shape[0]; ++f) {\r\n      const oldOffset = f * strides[0];\r\n      rowbuf.set(kernel.slice(oldOffset, oldOffset + oldRowSize), 0);\r\n      const newOffset = f * newRowSize;\r\n      buffer.set(rowbuf, newOffset);\r\n    }\r\n    return buffer;\r\n  }\r\n  static calcIm2ColDims(inputShape: number[], kernelShape: number[], outputShape: number[], channels = 1): number[] {\r\n    return [\r\n      outputShape[0], outputShape[2], outputShape[3],\r\n      Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)\r\n    ];\r\n  }\r\n  static calcOutputShape(\r\n      inputShape: number[], kernelShape: number[], dilations: number[], adjustPads: number[],\r\n      strides: number[]): number[] {\r\n    const batchSize = inputShape[0];\r\n    const inputSpatialShape = inputShape.slice(2);\r\n    const spatialRank = inputSpatialShape.length;\r\n    const outChannels = kernelShape[0];\r\n    const kernelSpatialShape = kernelShape.slice(2);\r\n    const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n    const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n    const outputSpatialShape =\r\n        inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n    const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\r\n    return outputShape;\r\n  }\r\n  protected calcSharedDimReadSize(preferredBatchSize: number, sharedDim: number): number {\r\n    if (preferredBatchSize <= 0 || sharedDim < preferredBatchSize || sharedDim % preferredBatchSize !== 0) {\r\n      return sharedDim;\r\n    }\r\n    return preferredBatchSize;\r\n  }\r\n  protected calcBlockSize(outputLayout: TextureLayout): [number, number]|undefined {\r\n    const preferredRowCount = 64;\r\n    const preferredColCount = 64;\r\n    if (outputLayout.height < preferredRowCount) {\r\n      return undefined;\r\n    }\r\n    return [preferredColCount, preferredRowCount];\r\n  }\r\n  protected artifacts: Artifact[];\r\n  protected readSize = 8;\r\n  protected blockSize = 64;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Dropout} from '../../../ops/dropout';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLDropout extends Dropout implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (this.testMode) {\r\n      return [inputs[0]];\r\n    }\r\n    throw new Error(`Non test mode Dropout is not implemented yet`);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    throw new Error(`Non test mode Dropout is not implemented yet`);\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    throw new Error(`Non test mode Dropout is not implemented yet`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Elu} from '../../../ops/elu';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLElu extends Elu implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(v >= 0.0 ? v: (exp(v) - 1.0) * ${this.alpha.toExponential()}); /* float number format */\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Elu implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 1.0);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Flatten} from '../../../ops/flatten';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLFlatten extends Flatten {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.flattenShape(inputs[0].dims, this.axis);\r\n\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Licensed under the MIT license.\r\n\r\nimport {Gather} from '../../../ops/gather';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGather extends Gather implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const indexDataShape = inputs[1].dims.slice();\r\n    const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\r\n\r\n    if (outputShape.length === 0) {\r\n      throw Error('A scalar tensor output has not been supported');\r\n    }\r\n\r\n    const indexCopyOps: string[] = [];\r\n    for (let i = 0; i < outputShape.length; i++) {\r\n      // outputShape is divided into three parts: A, B, C\r\n      // |0         this.axis|           this.axis + indexDataShape.length|          end|\r\n      // |     A             |                     B                      |      C      |\r\n      //\r\n      // inputIdx: [A, inputs[1][B], C]\r\n      if (i < this.axis) {  // A\r\n        outputShape[i] = inputShape[i];\r\n        indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\r\n      } else {\r\n        if (i < this.axis + indexDataShape.length) {  // B\r\n          outputShape[i] = indexDataShape[i - this.axis];\r\n          indexCopyOps.push(`indexDataIdx[${i - this.axis}] = outputIdx[${i}];`);\r\n        } else {                                                       // C\r\n          outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for this.axis\r\n          indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const orank = outputShape.length;\r\n    const irank = inputShape.length;\r\n    const iDrank = indexDataShape.length;\r\n    const shaderSource = `\r\n      float process(int outputIdx[${orank}]) {\r\n        int inputIdx[${irank}];\r\n        int indexDataIdx[${iDrank}];\r\n        ${indexCopyOps.join('\\n        ')}\r\n        inputIdx[${this.axis}] = int(_B(indexDataIdx));\r\n        return _A(inputIdx);\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Gemm} from '../../../ops/gemm';\r\nimport {Tensor} from '../../../tensor';\r\nimport {GemmUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGemm extends Gemm implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const aShape = inputs[0].dims.slice();\r\n    const bShape = inputs[1].dims.slice();\r\n    const cShape = inputs[2].dims.slice();\r\n    const [M, N] = GemmUtil.getShapeOfGemmResult(aShape, this.transA, bShape, this.transB, cShape);\r\n    const oShape = [M, N];\r\n    if (!oShape) {\r\n      throw new Error('Can\\'t use gemm on the given tensors');\r\n    }\r\n    let sharedDim = aShape[aShape.length - 1];\r\n    let line = '';\r\n    if (this.transA) {\r\n      sharedDim = aShape[0];\r\n    }\r\n    if (this.transA && this.transB) {\r\n      line = `value += _A_T(a) * _B_T(b);`;\r\n    } else if (this.transA && !this.transB) {\r\n      line = `value += _A_T(a) * _B(b);`;\r\n    } else if (!this.transA && this.transB) {\r\n      line = `value += _A(a) * _B_T(b);`;\r\n    } else if (!this.transA && !this.transB) {\r\n      line = `value += _A(a) * _B(b);`;\r\n    }\r\n    const rank = oShape.length;\r\n    const cRank = cShape.length;\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${rank}];\r\n          int b[${rank}];\r\n          int c[${cRank}];\r\n\r\n          copyVec(indices, a);\r\n          copyVec(indices, b);\r\n          bcastIndices_C(indices, c);\r\n\r\n          float value = 0.0;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${rank - 1}] = k;\r\n              b[${rank - 2}] = k;\r\n              ${line}\r\n          }\r\n\r\n          value = value * alpha;\r\n          value += beta * _C(c);\r\n          return value;\r\n      }`;\r\n    const inputLayouts = inputs.map(t => inferenceHandler.getOrCreateTextureLayout(t));\r\n    return {\r\n      inputLayouts,\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(oShape),\r\n      samplers: ['A', 'B', 'C'],\r\n      variables: [{name: 'alpha', type: 'float'}, {name: 'beta', type: 'float'}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => inferenceHandler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {'alpha': this.alpha, 'beta': this.beta}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ImageScaler} from '../../../ops/image-scaler';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLImageScaler extends ImageScaler implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const rank = outputShape.length;\r\n    const getBiasMethod = this.createGetBiasMethod(this.bias.length);\r\n    const shaderSource = `\r\n      ${getBiasMethod}\r\n      float process(int indices[${rank}]) {\r\n        return _X(indices) * scale + getBias(bias, indices[1]);\r\n      }`;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['X'],\r\n      variables: [{name: 'bias', type: 'float', arrayLength: this.bias.length}, {name: 'scale', type: 'float'}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {'bias': this.bias, 'scale': this.scale}\r\n    };\r\n  }\r\n  private createGetBiasMethod(numChannels: number): string {\r\n    const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\r\n    for (let i = 0; i < numChannels; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `if (channel == ${i}) { return bias[${i}]; }`);\r\n      } else if (i === numChannels - 1) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else { return bias[${i}]; }`);\r\n      } else {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else if (channel == ${i}) { return bias[${i}]; }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        `\\t` +\r\n        `}`);\r\n    return codeLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {LeakyRelu} from '../../../ops/leaky-relu';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLLeakyRelu extends LeakyRelu implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(v < 0.0 ? v * float(${this.alpha}) : v);\r\n      }\r\n      `;\r\n    return {\r\n      hasMain: true,\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class LeakyRelu implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 0.01);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLMatMul extends MatMul implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const aShape = inputs[0].dims;\r\n    const bShape = inputs[1].dims;\r\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n    if (!outputShape) {\r\n      throw new Error('Can\\'t use matmul on the given tensors');\r\n    }\r\n    const rank = outputShape.length;\r\n    const arank = aShape.length;\r\n    const brank = bShape.length;\r\n    const sharedDim = aShape[aShape.length - 1];\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${arank}];\r\n          int b[${brank}];\r\n          bcastMatmulIndices_A(indices, a);\r\n          bcastMatmulIndices_B(indices, b);\r\n\r\n          float value;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${arank - 1}] = k;\r\n              b[${brank - 2}] = k;\r\n              value += _A(a) * _B(b);\r\n          }\r\n          return value;\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Pad} from '../../../ops/pad';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\n\r\nexport class WebGLPad extends Pad implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), this.pads);\r\n    const rank = outputShape.length;\r\n    const alayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n    const padFunction = getPadFunction(\r\n        getGlsl(inferenceHandler.session.backend.glContext.version), 'A', alayout, this.mode, this.pads, this.value);\r\n    const shaderSource = `\r\n      ${padFunction}\r\n      float process(int[${rank}] indices) {\r\n          return padA(indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: [alayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nexport function getPadFunction(\r\n    glsl: Glsl, name: string, inputLayout: TextureLayout, mode: string, pads: number[], value: number): string {\r\n  switch (mode) {\r\n    case 'constant':\r\n      return getPadConstant(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads, value);\r\n    case 'reflect':\r\n      return getPadReflect(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\r\n    case 'edge':\r\n      return getPadEdge(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\r\n    default:\r\n      throw new Error('Invalid mode');\r\n  }\r\n}\r\nfunction getPadConstant(\r\n    glsl: Glsl, name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number,\r\n    height: number, pads: number[], value: number) {\r\n  const rank = shape.length;\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n          k = m[${i}] - ${pads[i]};\r\n          if (k < 0)  return constant;\r\n          if (k >= ${shape[i]}) return constant;\r\n          offset += k * ${strides[i]};\r\n          `;\r\n  }\r\n  return `\r\n        float pad${name}(int m[${rank}]) {\r\n          const float constant = float(${value});\r\n          int offset = 0;\r\n          int k = 0;\r\n          ${block}\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n}\r\nfunction getPadReflect(\r\n    glsl: Glsl, name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number,\r\n    height: number, pads: number[]) {\r\n  const rank = shape.length;\r\n\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0) { k = -k; }\r\n        {\r\n          const int _2n_1 = ${2 * (shape[i] - 1)};\r\n          k = int( mod( float(k), float(_2n_1) ) ) ;\r\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\r\n        }\r\n        offset += k * ${strides[i]};\r\n        `;\r\n  }\r\n  return `\r\n      float pad${name}(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n        return value;\r\n      }\r\n      `;\r\n}\r\nfunction getPadEdge(\r\n    glsl: Glsl, name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number,\r\n    height: number, pads: number[]) {\r\n  const rank = shape.length;\r\n\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n      k = m[${i}] - ${pads[i]};\r\n      if (k < 0)  k = 0;\r\n      if (k >= ${shape[i]}) k = ${shape[i] - 1};\r\n      offset += k * ${strides[i]};\r\n      `;\r\n  }\r\n  return `\r\n    float pad${name}(int m[${rank}]) {\r\n      int offset = 0;\r\n      int k = 0;\r\n      ${block}\r\n      vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n      float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n      return value;\r\n    }\r\n    `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Pad implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.mode = attributes.getString('mode', 'constant');\r\n    this.value = attributes.getFloat('value', 0.0);\r\n    this.pads = attributes.getInts('pads');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected mode: string;\r\n  protected pads: number[];\r\n  protected value: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGlobalAveragePool extends GlobalAveragePool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createAveragePoolProgramInfo(\r\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLAveragePool extends AveragePool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createAveragePoolProgramInfo(\r\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nfunction createAveragePoolProgramInfo(\r\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\r\n    autoPad = '', strides: number[] = [], pads: number[] = [], countIncludePad: boolean): ProgramInfo {\r\n  const inputShape = inputs[0].dims.slice();\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\r\n  const kernelSize = ShapeUtil.size(kernelShape);\r\n  const op1 = `value += _X(x);`;\r\n  let op2 = ``;\r\n  if (countIncludePad) {\r\n    op2 += `value /= float(${kernelSize});`;\r\n  } else {\r\n    op2 += `value /= float(${kernelSize} - pad);`;\r\n  }\r\n  const inputLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n  const poolingCode = GeneratePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '0.0');\r\n  const shaderSource = `\r\n      ${poolingCode}\r\n    `;\r\n  return {\r\n    inputLayouts: [inputLayout],\r\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['X'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport class WebGLGlobalMaxPool extends GlobalMaxPool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createMaxPoolProgramInfo(\r\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLMaxPool extends MaxPool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createMaxPoolProgramInfo(\r\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nfunction createMaxPoolProgramInfo(\r\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\r\n    autoPad = '', strides: number[] = [], pads: number[] = []): ProgramInfo {\r\n  const inputShape = inputs[0].dims.slice();\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\r\n  const op1 = `\r\n              value = max(_X(x), value);\r\n      `;\r\n  const op2 = ``;\r\n  const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\r\n  const poolingCode = GeneratePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '-1e5');\r\n  const shaderSource = `\r\n    ${poolingCode}\r\n  `;\r\n  return {\r\n    inputLayouts: [inputLayout],\r\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['X'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function GeneratePoolingCode(\r\n    x: TextureLayout, kernelShape: number[], pads: number[], strides: number[], op1: string, op2: string,\r\n    startVal: string): string {\r\n  const inputDims = x.shape;\r\n  const rank = x.shape.length;\r\n  if (kernelShape.length <= 2) {\r\n    const kw = kernelShape[kernelShape.length - 1];\r\n    const sw = strides[strides.length - 1];\r\n    const pwStart = pads[pads.length / 2 - 1];\r\n    const pwEnd = pads[pads.length - 1];\r\n    const dimW = inputDims[rank - 1];\r\n    let codeW = ``;\r\n    let codeH = ``;\r\n    let codeHEnd = ``;\r\n    if (pwStart + pwEnd !== 0) {\r\n      codeW = `\r\n                for (int i = 0; i < ${kw}; i++) {\r\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n                  if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\r\n                    pad++;\r\n                    continue;\r\n                  }\r\n                  ${op1}\r\n                }`;\r\n    } else {\r\n      codeW = `\r\n                for (int i = 0; i < ${kw}; i++) {\r\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n                  ${op1}\r\n                }`;\r\n    }\r\n\r\n    if (kernelShape.length === 2) {\r\n      const kh = kernelShape[kernelShape.length - 2];\r\n      const sh = strides[strides.length - 2];\r\n      const phStart = pads[pads.length / 2 - 2];\r\n      const phEnd = pads[pads.length - 2];\r\n      const dimH = inputDims[rank - 2];\r\n      if (phStart + phEnd !== 0) {\r\n        codeH = `\r\n              for (int j = 0; j < ${kh}; j++) {\r\n                x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n                if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\r\n                  pad+= ${kw};\r\n                  continue;\r\n                }\r\n            `;\r\n      } else {\r\n        codeH = `\r\n                for (int j = 0; j < ${kh}; j++) {\r\n                  x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n                `;\r\n      }\r\n      codeHEnd = `\r\n              }\r\n            `;\r\n    }\r\n\r\n    const poolingCode = `\r\n            float process(int indices[${rank}]) {\r\n              int x[${rank}];\r\n              copyVec(indices, x);\r\n\r\n              float value = ${startVal};\r\n              int pad = 0;\r\n              ${codeH}\r\n              ${codeW}\r\n              ${codeHEnd}\r\n              ${op2}\r\n              return value;\r\n            }\r\n          `;\r\n    return poolingCode;\r\n  } else {\r\n    const kernelSize = ShapeUtil.size(kernelShape);\r\n    const kernelStrides = ShapeUtil.computeStrides(kernelShape);\r\n    const stridesRank = kernelStrides.length;\r\n    const padsRank = pads.length;\r\n    const offsetToIndicesFunction = offsetToIndices(stridesRank);\r\n    const copyInputDims = copyArray(inputDims, 'inputDims');\r\n    const copyPads = copyArray(pads, 'pads');\r\n    const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\r\n    const copyStrides = copyArray(strides, 'strides');\r\n    const hasPads = pads.reduce((sum, cur) => sum + cur);\r\n    let padCode = ``;\r\n    if (hasPads) {\r\n      padCode = `\r\n                if (x[j] >= inputDims[j] || x[j] < 0) {\r\n                  pad++;\r\n                  isPad = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!isPad) {\r\n                ${op1}\r\n              }`;\r\n    } else {\r\n      padCode = `\r\n                  }\r\n                  ${op1}`;\r\n    }\r\n    const poolingCode = `\r\n            ${offsetToIndicesFunction}\r\n            float process(int indices[${rank}]) {\r\n                int x[${rank}];\r\n                copyVec(indices, x);\r\n                int offset[${stridesRank}];\r\n                int pads[${padsRank}];\r\n                int inputDims[${rank}];\r\n                int kernelStrides[${stridesRank}];\r\n                int strides[${stridesRank}];\r\n                ${copyPads}\r\n                ${copyInputDims}\r\n                ${copyStrides}\r\n                ${copyKernelStrides}\r\n\r\n                float value = ${startVal};\r\n                int pad = 0;\r\n                bool isPad = false;\r\n                for (int i = 0; i < ${kernelSize}; i++) {\r\n                    offsetToIndices(i, kernelStrides, offset);\r\n                    isPad = false;\r\n                    for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\r\n                      x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\r\n                        + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\r\n                      ${padCode}\r\n                }\r\n                ${op2}\r\n\r\n                return value;\r\n            }`;\r\n    return poolingCode;\r\n  }\r\n}\r\n\r\nexport function copyArray(array: ReadonlyArray<number>, arrayName: string): string {\r\n  let block = ``;\r\n  for (let i = 0; i < array.length; i++) {\r\n    block += `\r\n      ${arrayName}[${i}] = ${array[i]};\r\n    `;\r\n  }\r\n  return block;\r\n}\r\n\r\nexport function offsetToIndices(rank: number): string {\r\n  return `\r\n    void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\r\n      if (${rank} == 0) {\r\n        return;\r\n      }\r\n      for (int i = 0; i < ${rank} - 1; ++i) {\r\n        indices[i] = offset / strides[i];\r\n        offset -= indices[i] * strides[i];\r\n      }\r\n      indices[${rank} - 1] = offset;\r\n    }`;\r\n}\r\n","// Licensed under the MIT license.\r\n\r\nimport {ReduceBase} from '../../../ops/reduce-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nabstract class WebGLGenericReduce extends ReduceBase implements WebGLOperator {\r\n  abstract getOps(inputs: Tensor[]): string[];\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape: number[] = [];\r\n    const iRank = inputs[0].dims.length || 1;\r\n\r\n    const idxCopy = [];  // copy output indexes to input indexes\r\n\r\n    const ops = this.getOps(inputs);  // [init ops, reduce ops, final ops]\r\n    let reduceOps = ops[1];\r\n\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      // if this axis is reduced\r\n      if (this.axes.indexOf(k) >= 0 || this.axes.length === 0) {\r\n        if (this.keepDims) {\r\n          outputShape.push(1);\r\n        }  // else { remove the axis from outputShape; }\r\n\r\n        // loop over the d-th axis\r\n        reduceOps = `\r\n        for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n          inputIdx[${k}] = j${k};\r\n          ${reduceOps}\r\n        }\r\n        `;\r\n      } else {\r\n        idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\r\n\r\n        outputShape.push(inputs[0].dims[k]);\r\n      }\r\n    }\r\n\r\n    const oRank = outputShape.length || 1;\r\n\r\n    const shaderSource = `\r\n      float process(int outputIdx[${oRank}]) {\r\n        float value;                 // final result\r\n        int inputIdx[${iRank}];      // addressing input data\r\n        ${idxCopy.join('\\n')}\r\n        ${ops[0]}       // init ops for reduce max/min\r\n        ${reduceOps}\r\n        ${ops[2]}       // final computation for reduce mean\r\n        return value;\r\n      }`;\r\n\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLReduceSum extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMean extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    let size = 1.0;\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (this.axes.indexOf(k) >= 0 || this.axes.length === 0) {\r\n        size *= inputs[0].dims[k];\r\n      }\r\n    }\r\n\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMax extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    const idxZero = [];\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (this.axes.indexOf(k) >= 0 || this.axes.length === 0) {\r\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n\r\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMin extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    const idxZero = [];\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (this.axes.indexOf(k) >= 0 || this.axes.length === 0) {\r\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n\r\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceProd extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    return ['value = 1.0;', 'value *= _A(inputIdx);', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceLogSum extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceSumSquare extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    return ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\r\n  }\r\n}\r\n","// Licensed under the MIT license.\r\n\r\nimport {Slice, SliceV10} from '../../../ops/slice';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLSlice extends Slice implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createProgramInfo(handler, inputs[0], this.starts, this.ends, this.axes);\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    return createRunData(handler, programInfo, inputs);\r\n  }\r\n}\r\n\r\nexport class WebGLSliceV10 extends SliceV10 implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId) ||\r\n        (inputs.length >= 4 && !handler.session.isInitializer(inputs[3].dataId)) ||\r\n        (inputs.length >= 5 && !handler.session.isInitializer(inputs[4].dataId))) {\r\n      throw new Error(`dynamic slice attributes are not allowed`);\r\n    }\r\n    if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n      throw new Error(`currently non-1 steps is not supported for Slice`);\r\n    }\r\n    const starts = Array.from(inputs[1].integerData);\r\n    const ends = Array.from(inputs[2].integerData);\r\n    const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n\r\n    return createProgramInfo(handler, inputs[0], starts, ends, axes);\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    return createRunData(handler, programInfo, inputs);\r\n  }\r\n}\r\n\r\nfunction createProgramInfo(\r\n    handler: WebGLInferenceHandler, x: Tensor, starts: ReadonlyArray<number>, ends: ReadonlyArray<number>,\r\n    axes: ReadonlyArray<number>): ProgramInfo {\r\n  if (axes.length === 0) {\r\n    axes = x.dims.slice(0).map((val, ind) => ind);\r\n  }\r\n  axes = axes.map(axis => ShapeUtil.parseAxis(axis, x.dims.length));\r\n  starts = starts.map((start, ind) => {\r\n    if (start > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.parseAxis(start, x.dims[axes[ind]]);\r\n  });\r\n  ends = ends.map((end, ind) => {\r\n    if (end > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.parseAxis(end, x.dims[axes[ind]]);\r\n  });\r\n\r\n  const outputShape = x.dims.slice();\r\n\r\n  const sliceOps: string[] = [];\r\n  for (let i = 0; i < axes.length; i++) {\r\n    outputShape[axes[i]] = ends[i] - starts[i];\r\n    if (starts[i] > 0) {\r\n      sliceOps.push(`outputIdx[${axes[i]}] += ${starts[i]};`);\r\n    }  // else { sliceOps.push(`outputIdx[${axes[i]}] += 0;`); }\r\n  }\r\n\r\n  const rank = outputShape.length;\r\n  const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        ${sliceOps.join('\\n      ')}\r\n        return _A(outputIdx);\r\n      }`;\r\n  return {\r\n    inputLayouts: [handler.getOrCreateTextureLayout(x)],\r\n    outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['A'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nfunction createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n  const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n  return {\r\n    inputTextureDatas: inputTDs,\r\n    outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n    uniformData: {}\r\n  };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Softmax} from '../../../ops/softmax';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\r\n\r\nexport class WebGLSoftmax extends Softmax {\r\n  constructor() {\r\n    super();\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\r\n      programInfos.forEach((pi, i) => {\r\n        const artifact = inferenceHandler.session.programManager.build(pi);\r\n        this.artifacts.push(artifact);\r\n      });\r\n    }\r\n\r\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\r\n    // return only the last output\r\n    return [runDatas[runDatas.length - 1].outputTextureData.tensor];\r\n  }\r\n  createSoftMaxProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, input: Tensor, N: number, D: number,\r\n      maxElementPerLogicalRow: TextureLayout, normalizationPerLogicalRow: TextureLayout): ProgramInfo {\r\n    const inputShape = input.dims.slice();\r\n    const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\r\n    const outputShape = inputShape;\r\n    const rank = outputShape.length;\r\n    const textureWidth = inputLayout.width;\r\n    const textureHeight = inputLayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape.length !== 1 || normalizationPerLogicalRow.shape.length !== 1) {\r\n      throw new Error(`Dimensionality of the intermediate results should be 1`);\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape[0] !== N || normalizationPerLogicalRow.shape[0] !== N) {\r\n      throw new Error(`Shape of the intermediate results should be equal to logical row count`);\r\n    }\r\n\r\n    const shaderSource = `\r\n    float process(int[${rank}] indices) {\r\n\r\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\r\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\r\n\r\n      //determine the logical row for this index\r\n      int logical_row_index[1];\r\n      logical_row_index[0] = offset / ${D};\r\n\r\n      float norm_factor = _Norm(logical_row_index);\r\n\r\n      // avoid possible division by 0\r\n      // if norm_facor is 0, all elements are zero\r\n      // if so, return 0\r\n      if(norm_factor == 0.0)\r\n        return 0.0;\r\n\r\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\r\n    }`;\r\n    return {\r\n      inputLayouts: [inputLayout, maxElementPerLogicalRow, normalizationPerLogicalRow],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Max', 'Norm'],\r\n      shaderSource,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a texture that contains the normalization factor for each of the 'N' rows\r\n   */\r\n  createComputScaleProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, maxElementPerLogicalRow: TextureLayout,\r\n      outputShape: number[]): ProgramInfo {\r\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\r\n    const rank = outputShape.length;\r\n    const textureWidth = xlayout.width;\r\n    const textureHeight = xlayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\r\n    }\r\n\r\n    if (outputShape.length !== 1) {\r\n      throw new Error(`Dimensionality of the output should be 1`);\r\n    }\r\n\r\n    if (outputShape[0] !== N) {\r\n      throw new Error(`Shape of the output should be equal to logical row count`);\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape.length !== 1) {\r\n      throw new Error(`Dimensionality of the intermediate results should be 1`);\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape[0] !== N) {\r\n      throw new Error(`Shape of the intermediate results should be equal to logical row count`);\r\n    }\r\n\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    float process(int[${rank}] indices) {\r\n\r\n      int logical_row_start_offset = indices[0] * ${D};\r\n\r\n      float norm_factor = 0.0;\r\n      float max = _Max(indices);\r\n      for(int i=0; i<${D}; ++i)\r\n      {\r\n        norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\r\n        textureWidth}, ${textureHeight}))) - max);\r\n      }\r\n\r\n      return norm_factor;\r\n    }`;\r\n    return {\r\n      inputLayouts: [xlayout, maxElementPerLogicalRow],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Max'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  /**\r\n   * Create a texture that contains the maximum value of each of the 'N' rows\r\n   */\r\n  createComputeMaxProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, outputShape: number[]): ProgramInfo {\r\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\r\n    const rank = outputShape.length;\r\n    const textureWidth = xlayout.width;\r\n    const textureHeight = xlayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\r\n    }\r\n\r\n    if (outputShape.length !== 1) {\r\n      throw new Error(`Dimensionality of the output should be 1`);\r\n    }\r\n\r\n    if (outputShape[0] !== N) {\r\n      throw new Error(`Shape of the output should be equal to logical row count`);\r\n    }\r\n\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n        float process(int[${rank}] indices) {\r\n\r\n          int logical_row_start_offset = indices[0] * ${D};\r\n\r\n          float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth}, ${\r\n        textureHeight} )));\r\n          for(int i=1; i<${D}; ++i)\r\n          {\r\n            float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\r\n        textureWidth}, ${textureHeight})));\r\n            if(current > max)\r\n              max = current;\r\n          }\r\n\r\n          return max;\r\n        }`;\r\n    return {\r\n      inputLayouts: [xlayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const axisCorrected = ShapeUtil.parseAxis(this.axis, inputShape.length);\r\n    const N = ShapeUtil.sizeToDimension(inputShape, axisCorrected);\r\n    const D = ShapeUtil.sizeFromDimension(inputShape, axisCorrected);\r\n    const computeMaxProgramInfo = this.createComputeMaxProgramInfo(inferenceHandler, inputs[0], N, D, [N]);\r\n    const computeScaleProgramInfo =\r\n        this.createComputScaleProgramInfo(inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, [N]);\r\n    const softMaxProgramInfo = this.createSoftMaxProgramInfo(\r\n        inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, computeScaleProgramInfo.outputLayout);\r\n\r\n    const programInfos: ProgramInfo[] = [computeMaxProgramInfo, computeScaleProgramInfo, softMaxProgramInfo];\r\n    return programInfos;\r\n  }\r\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\r\n    const dataType = inputs[0].type;\r\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\r\n    const runDatas: RunData[] = [];\r\n    runDatas.push({\r\n      inputTextureDatas: [inputTD],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\r\n      uniformData: {}\r\n    });\r\n    for (let i = 1; i < programInfos.length; ++i) {\r\n      runDatas.push({\r\n        inputTextureDatas: [...runDatas[i - 1].inputTextureDatas, runDatas[i - 1].outputTextureData],\r\n        outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[i].outputLayout, dataType),\r\n        uniformData: {}\r\n      });\r\n    }\r\n    return runDatas;\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Split} from '../../../ops/split';\r\nimport {Tensor} from '../../../tensor';\r\nimport {SplitUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData} from '../types';\r\n\r\nexport class WebGLSplit extends Split {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const count = this.getProgramCount(inferenceHandler, inputs);\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      for (let i = 0; i < count; ++i) {\r\n        const programInfo = this.createProgramInfo(inferenceHandler, inputs[0], i);\r\n        const artifact = inferenceHandler.session.programManager.build(programInfo);\r\n        this.artifacts.push(artifact);\r\n      }\r\n    }\r\n    const results: Tensor[] = [];\r\n\r\n    this.artifacts.forEach(artifact => {\r\n      const rundata = this.createRunData(inferenceHandler, artifact.programInfo, inputs);\r\n      inferenceHandler.session.programManager.run(artifact, rundata);\r\n      results.push(rundata.outputTextureData.tensor);\r\n    });\r\n    return results;\r\n  }\r\n  getProgramCount(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): number {\r\n    const [, offsets] = SplitUtil.splitShape(inputs[0].dims, this.axis, this.split, this.numOutputs);\r\n    return offsets.length;\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, input: Tensor, index: number): ProgramInfo {\r\n    const [shapes, offsets] = SplitUtil.splitShape(input.dims, this.axis, this.split, this.numOutputs);\r\n    const offset = offsets[index];\r\n    const outputShape = shapes[index];\r\n    const rank = outputShape.length;\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n        indices[${this.axis}] += ${offset};\r\n        return _A(indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(input)],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Split implements Operator {\r\n  constructor(protected numOutputs?: number) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n    this.split = attributes.getInts('split', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\r\n        inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\r\n        inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected split: number[];\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Squeeze} from '../../../ops/squeeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLSqueeze extends Squeeze {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.squeezeShape(inputs[0].dims, this.axes);\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Sum} from '../../../ops/sum';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLSum extends Sum implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const outputShape = inputs[0].dims.slice();\r\n    const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\r\n    const samplers = inputs.map((v, i) => `X${i}`);\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers,\r\n      shaderSource: `\r\n      void main() {\r\n        vec4 result = ${sumLine};\r\n        ${glsl.output} = result;\r\n      }`,\r\n      hasMain: true\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Licensed under the MIT license.\r\n\r\nimport {Tile} from '../../../ops/tile';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLTile extends Tile implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const outputShape = new Array(inputShape.length);  // inputs[0].dims.slice();\r\n\r\n    const tileOps: string[] = [];\r\n    for (let i = 0; i < inputShape.length; i++) {\r\n      outputShape[i] = inputShape[i] * inputs[1].numberData[i];\r\n      tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\r\n    }\r\n\r\n    const rank = outputShape.length;\r\n    const shaderSource = `\r\n    float process(int outputIdx[${rank}]) {\r\n      int inputIdx[${rank}];\r\n      ${tileOps.join('\\n')}\r\n      return _A(inputIdx);\r\n    }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Transpose} from '../../../ops/transpose';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslPositionalFunction} from '../glsl-definitions';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLTranspose extends Transpose implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  getOutputShape(inputShapes: Array<ReadonlyArray<number>>): ReadonlyArray<number> {\r\n    const perm = this.getAdjustedPerm(inputShapes[0]);\r\n    return ShapeUtil.sortBasedOnPerm(inputShapes[0], perm);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShapes = inputs.map(t => t.dims.slice());\r\n    const perm = this.getAdjustedPerm(inputShapes[0]);\r\n    const unpackedOutputShape = this.getOutputShape(inputShapes);\r\n    const rank = inputs[0].dims.length;\r\n    // A dims=[${inputs[0].dims.toString()}]\r\n    // out Dims=[${unpackedOutputShape.toString()}]\r\n    // based on perm=[${perm.toString()}]\r\n    const shaderSource = `\r\n      ${this.getPermFunctionBody('perm', perm, rank)}\r\n      float process(int indices[${rank}]) {\r\n        int a[${rank}];\r\n        perm(a, indices);\r\n        return _A(a);\r\n      }`;\r\n    const outputLayout = handler.createTextureLayoutFromShape(unpackedOutputShape, 1, unpackedOutputShape);\r\n    return {inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])], outputLayout, samplers: ['A'], shaderSource};\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n  getPositionalFunction(handler: WebGLInferenceHandler, inputShape: number[], name?: string): GlslPositionalFunction {\r\n    const outputShape = this.getOutputShape([inputShape]);\r\n    if (!name) {\r\n      name = 'perm';\r\n    }\r\n    return {\r\n      name,\r\n      body: this.getPermFunctionBody(name, this.getAdjustedPerm(inputShape), outputShape.length),\r\n      type: FunctionType.Positional,\r\n      inputShape,\r\n      outputShape\r\n    };\r\n  }\r\n  protected getAdjustedPerm(inputShape: ReadonlyArray<number>): number[] {\r\n    let perm = this.perm;\r\n    if (perm && perm.length !== inputShape.length) {\r\n      perm = [...(inputShape.keys())].reverse();\r\n    }\r\n    return perm;\r\n  }\r\n  protected getPermFunctionBody(name: string, perm: number[], rank: number): string {\r\n    const reverseFunc = [];\r\n    reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\r\n    for (let i = 0; i < rank; ++i) {\r\n      reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\r\n    }\r\n    reverseFunc.push('\\t}');\r\n    return reverseFunc.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {UnaryOp} from '../../../ops/unary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLUnaryOp extends UnaryOp implements WebGLOperator {\r\n  constructor(protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected glslFunc: GlslValueFunction) {\r\n    super(typeConstraint);\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0]);\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      ${this.glslFunc.body}\r\n      void main() {\r\n        vec4 v = ${glsl.texture2D}(A, TexCoords);\r\n        v = ${this.glslFunc.name}(v);\r\n        ${glsl.output} = v;\r\n      }\r\n      `;\r\n    const outputLayout = handler.createTextureLayoutFromShape(outputShape);\r\n    return {inputLayouts: [inputLayout], outputLayout, samplers: ['A'], shaderSource, hasMain: true};\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport function glslAbs(): GlslValueFunction {\r\n  return glslBuiltinUnary('abs');\r\n}\r\nexport function glslAcos(): GlslValueFunction {\r\n  return glslBuiltinUnary('acos');\r\n}\r\nexport function glslAsin(): GlslValueFunction {\r\n  return glslBuiltinUnary('asin');\r\n}\r\nexport function glslAtan(): GlslValueFunction {\r\n  return glslBuiltinUnary('atan');\r\n}\r\nexport function glslCeil(): GlslValueFunction {\r\n  return glslBuiltinUnary('ceil');\r\n}\r\nexport function glslCos(): GlslValueFunction {\r\n  return glslBuiltinUnary('cos');\r\n}\r\nexport function glslExp(): GlslValueFunction {\r\n  return glslBuiltinUnary('exp');\r\n}\r\nexport function glslFloor(): GlslValueFunction {\r\n  return glslBuiltinUnary('floor');\r\n}\r\nexport function glslIdentity(): GlslValueFunction {\r\n  const name = `indentity_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLog(): GlslValueFunction {\r\n  return glslBuiltinUnary('log');\r\n}\r\nexport function glslNeg(): GlslValueFunction {\r\n  const name = `neg_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return -a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return -v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslNot(): GlslValueFunction {\r\n  const name = `not_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return float( ! bool(a) );\r\n  }\r\n  bool ${name}(bool a) {\r\n    return !a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\r\n  }\r\n  bvec4 ${name}(bvec4 v) {\r\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSin(): GlslValueFunction {\r\n  return glslBuiltinUnary('sin');\r\n}\r\nexport function glslRelu(): GlslValueFunction {\r\n  const name = `relu_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return max( a, 0.0 );\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return max( v, 0.0 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSigmoid(): GlslValueFunction {\r\n  const name = `sigmoid_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return 1.0 / (1.0 + exp(-a));\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return 1.0 / (1.0 + exp(-v));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSqrt(): GlslValueFunction {\r\n  return glslBuiltinUnary('sqrt');\r\n}\r\nexport function glslTan(): GlslValueFunction {\r\n  return glslBuiltinUnary('tan');\r\n}\r\nexport function glslTanh(): GlslValueFunction {\r\n  const name = `tanh_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    a = clamp(a, -10., 10.);\r\n    a = exp(2.*a);\r\n    return (a - 1.) / (a + 1.);\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    v = clamp(v, -10., 10.);\r\n    v = exp(2.*v);\r\n    return (v - 1.) / (v + 1.);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nfunction glslBuiltinUnary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return ${fname}(a);\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return ${fname}(v);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Unsqueeze} from '../../../ops/unsqueeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLUnsqueeze extends Unsqueeze {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.unsqueezeShape(inputs[0].dims, this.axes);\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {env} from '../../env';\r\nimport {Logger, Profiler} from '../../instrument';\r\n\r\nimport {GlslPreprocessor} from './glsl-preprocessor';\r\nimport {getVertexShaderSource} from './glsl-source';\r\nimport {Artifact, ProgramInfo, RunData, TextureData, UniformData, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<{}, Artifact>;  // this should be per-session object\r\n  vertexShader: WebGLShader;\r\n  attributesBound: boolean;\r\n\r\n  constructor(public profiler: Readonly<Profiler>, public glContext: WebGLContext) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: {}): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: {}, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, runData: RunData): void {\r\n    this.profiler.event('backend', 'ProgramManager.run', () => {\r\n      const gl = this.glContext.gl;\r\n      const program = buildArtifact.program;\r\n      gl.useProgram(program);\r\n      try {\r\n        this.bindOutput(runData.outputTextureData);\r\n        if (!this.attributesBound) {\r\n          this.bindAttributes(buildArtifact.attribLocations);\r\n        }\r\n        this.bindUniforms(buildArtifact.uniformLocations, runData.uniformData, runData.inputTextureDatas);\r\n      } catch (err) {\r\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\r\n        throw err;\r\n      }\r\n      this.profiler.event('backend', 'GlContext.draw()', () => {\r\n        this.doDraw(buildArtifact, runData);\r\n        gl.flush();\r\n      });\r\n    });\r\n  }\r\n  dispose(): void {\r\n    if (this.vertexShader) {\r\n      this.glContext.deleteShader(this.vertexShader);\r\n    }\r\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo): Artifact {\r\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\r\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo);\r\n      const fragScript = preprocessor.preprocess();\r\n      const program = this.compile(fragScript);\r\n      const artifact = {\r\n        programInfo,\r\n        program,\r\n        uniformLocations: this.getUniformLocations(\r\n            program, preprocessor.context.programInfo.samplers, preprocessor.context.programInfo.variables),\r\n        attribLocations: this.getAttribLocations(program)\r\n      };\r\n      return artifact;\r\n    });\r\n  }\r\n  protected doDraw(artifact: Artifact, runData: RunData): void {\r\n    if (runData.draw) {\r\n      Logger.verbose('ProgramManager', 'Custom draw function');\r\n      runData.draw(this.glContext, artifact);\r\n    } else {\r\n      this.glContext.draw();\r\n    }\r\n  }\r\n  protected compile(fragShaderScript: string): WebGLProgram {\r\n    if (!this.vertexShader) {\r\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\r\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\r\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\r\n    }\r\n    if (env.debug) {\r\n      Logger.verbose('ProrgramManager', `FragShader:\r\n${fragShaderScript}\r\n`);\r\n    }\r\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\r\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\r\n    this.glContext.deleteShader(fragShader);\r\n    return program;\r\n  }\r\n  bindOutput(td: TextureData): void {\r\n    Logger.verbose(\r\n        'ProrgramManager',\r\n        `Binding output texture to Framebuffer: w/h=${td.width}/${td.height}, shape=${td.shape}, type=${\r\n            td.tensor.type}`);\r\n    this.glContext.attachFramebuffer(td.texture, td.width, td.height);\r\n  }\r\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\r\n    const positionHandle = attribLocations.position;\r\n    const textureCoordHandle = attribLocations.textureCoord;\r\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\r\n    this.attributesBound = true;\r\n  }\r\n  bindUniforms(uniformLocations: Artifact.UniformLocations, uniformData: UniformData, textures: TextureData[]): void {\r\n    const gl = this.glContext.gl;\r\n    let texturePosition = 0;\r\n    for (const {name, type, location, arrayLength} of uniformLocations) {\r\n      switch (type) {\r\n        case 'sampler2D':\r\n          this.bindTexture(textures[texturePosition], location, texturePosition);\r\n          texturePosition++;\r\n          break;\r\n        case 'float':\r\n          if (arrayLength) {\r\n            gl.uniform1fv(location, uniformData[name] as number[]);\r\n          } else {\r\n            gl.uniform1f(location, uniformData[name] as number);\r\n          }\r\n          break;\r\n        case 'int':\r\n          if (arrayLength) {\r\n            gl.uniform1iv(location, uniformData[name] as number[]);\r\n          } else {\r\n            gl.uniform1i(location, uniformData[name] as number);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Uniform not implemented: ${type}`);\r\n      }\r\n    }\r\n  }\r\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\r\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\r\n  }\r\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\r\n    return {\r\n      position: this.getAttribLocation(program, 'position'),\r\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\r\n    };\r\n  }\r\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\r\n      Artifact.UniformLocations {\r\n    const uniformLocations: Artifact.UniformLocations = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\r\n      }\r\n    }\r\n    return uniformLocations;\r\n  }\r\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\r\n    const gl = this.glContext.gl;\r\n    const reference = gl.getUniformLocation(program, name);\r\n    if (reference === null) {\r\n      throw new Error(`Uniform ${name} not found.`);\r\n    }\r\n    return reference;\r\n  }\r\n  getAttribLocation(program: WebGLProgram, name: string): number {\r\n    const gl = this.glContext.gl;\r\n    const attributeLocation: number = gl.getAttribLocation(program, name);\r\n    return attributeLocation;\r\n  }\r\n}\r\n","/*!\n * Platform.js <https://mths.be/platform>\n * Copyright 2014-2018 Benjamin Tan <https://bnjmnt4n.now.sh/>\n * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>\n * Available under MIT license <https://mths.be/mit>\n */\n;(function() {\n  'use strict';\n\n  /** Used to determine if values are of the language type `Object`. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object. */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Backup possible global object. */\n  var oldRoot = root;\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /**\n   * Used as the maximum length of an array-like object.\n   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\n   * for more details.\n   */\n  var maxSafeInteger = Math.pow(2, 53) - 1;\n\n  /** Regular expression to detect Opera. */\n  var reOpera = /\\bOpera/;\n\n  /** Possible global object. */\n  var thisBinding = this;\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check for own properties of an object. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /** Used to resolve the internal `[[Class]]` of values. */\n  var toString = objectProto.toString;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Capitalizes a string value.\n   *\n   * @private\n   * @param {string} string The string to capitalize.\n   * @returns {string} The capitalized string.\n   */\n  function capitalize(string) {\n    string = String(string);\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  /**\n   * A utility function to clean up the OS name.\n   *\n   * @private\n   * @param {string} os The OS name to clean up.\n   * @param {string} [pattern] A `RegExp` pattern matching the OS name.\n   * @param {string} [label] A label for the OS.\n   */\n  function cleanupOS(os, pattern, label) {\n    // Platform tokens are defined at:\n    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    var data = {\n      '10.0': '10',\n      '6.4':  '10 Technical Preview',\n      '6.3':  '8.1',\n      '6.2':  '8',\n      '6.1':  'Server 2008 R2 / 7',\n      '6.0':  'Server 2008 / Vista',\n      '5.2':  'Server 2003 / XP 64-bit',\n      '5.1':  'XP',\n      '5.01': '2000 SP1',\n      '5.0':  '2000',\n      '4.0':  'NT',\n      '4.90': 'ME'\n    };\n    // Detect Windows version from platform tokens.\n    if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) &&\n        (data = data[/[\\d.]+$/.exec(os)])) {\n      os = 'Windows ' + data;\n    }\n    // Correct character case and cleanup string.\n    os = String(os);\n\n    if (pattern && label) {\n      os = os.replace(RegExp(pattern, 'i'), label);\n    }\n\n    os = format(\n      os.replace(/ ce$/i, ' CE')\n        .replace(/\\bhpw/i, 'web')\n        .replace(/\\bMacintosh\\b/, 'Mac OS')\n        .replace(/_PowerPC\\b/i, ' OS')\n        .replace(/\\b(OS X) [^ \\d]+/i, '$1')\n        .replace(/\\bMac (OS X)\\b/, '$1')\n        .replace(/\\/(\\d)/, ' $1')\n        .replace(/_/g, '.')\n        .replace(/(?: BePC|[ .]*fc[ \\d.]+)$/i, '')\n        .replace(/\\bx86\\.64\\b/gi, 'x86_64')\n        .replace(/\\b(Windows Phone) OS\\b/, '$1')\n        .replace(/\\b(Chrome OS \\w+) [\\d.]+\\b/, '$1')\n        .split(' on ')[0]\n    );\n\n    return os;\n  }\n\n  /**\n   * An iteration utility for arrays and objects.\n   *\n   * @private\n   * @param {Array|Object} object The object to iterate over.\n   * @param {Function} callback The function called per iteration.\n   */\n  function each(object, callback) {\n    var index = -1,\n        length = object ? object.length : 0;\n\n    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {\n      while (++index < length) {\n        callback(object[index], index, object);\n      }\n    } else {\n      forOwn(object, callback);\n    }\n  }\n\n  /**\n   * Trim and conditionally capitalize string values.\n   *\n   * @private\n   * @param {string} string The string to format.\n   * @returns {string} The formatted string.\n   */\n  function format(string) {\n    string = trim(string);\n    return /^(?:webOS|i(?:OS|P))/.test(string)\n      ? string\n      : capitalize(string);\n  }\n\n  /**\n   * Iterates over an object's own properties, executing the `callback` for each.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} callback The function executed per own property.\n   */\n  function forOwn(object, callback) {\n    for (var key in object) {\n      if (hasOwnProperty.call(object, key)) {\n        callback(object[key], key, object);\n      }\n    }\n  }\n\n  /**\n   * Gets the internal `[[Class]]` of a value.\n   *\n   * @private\n   * @param {*} value The value.\n   * @returns {string} The `[[Class]]`.\n   */\n  function getClassOf(value) {\n    return value == null\n      ? capitalize(value)\n      : toString.call(value).slice(8, -1);\n  }\n\n  /**\n   * Host objects can return type values that are different from their actual\n   * data type. The objects we are concerned with usually return non-primitive\n   * types of \"object\", \"function\", or \"unknown\".\n   *\n   * @private\n   * @param {*} object The owner of the property.\n   * @param {string} property The property to check.\n   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n   */\n  function isHostType(object, property) {\n    var type = object != null ? typeof object[property] : 'number';\n    return !/^(?:boolean|number|string|undefined)$/.test(type) &&\n      (type == 'object' ? !!object[property] : true);\n  }\n\n  /**\n   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.\n   *\n   * @private\n   * @param {string} string The string to qualify.\n   * @returns {string} The qualified string.\n   */\n  function qualify(string) {\n    return String(string).replace(/([ -])(?!$)/g, '$1?');\n  }\n\n  /**\n   * A bare-bones `Array#reduce` like utility function.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @returns {*} The accumulated result.\n   */\n  function reduce(array, callback) {\n    var accumulator = null;\n    each(array, function(value, index) {\n      accumulator = callback(accumulator, value, index, array);\n    });\n    return accumulator;\n  }\n\n  /**\n   * Removes leading and trailing whitespace from a string.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} The trimmed string.\n   */\n  function trim(string) {\n    return String(string).replace(/^ +| +$/g, '');\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a new platform object.\n   *\n   * @memberOf platform\n   * @param {Object|string} [ua=navigator.userAgent] The user agent string or\n   *  context object.\n   * @returns {Object} A platform object.\n   */\n  function parse(ua) {\n\n    /** The environment context object. */\n    var context = root;\n\n    /** Used to flag when a custom context is provided. */\n    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';\n\n    // Juggle arguments.\n    if (isCustomContext) {\n      context = ua;\n      ua = null;\n    }\n\n    /** Browser navigator object. */\n    var nav = context.navigator || {};\n\n    /** Browser user agent string. */\n    var userAgent = nav.userAgent || '';\n\n    ua || (ua = userAgent);\n\n    /** Used to flag when `thisBinding` is the [ModuleScope]. */\n    var isModuleScope = isCustomContext || thisBinding == oldRoot;\n\n    /** Used to detect if browser is like Chrome. */\n    var likeChrome = isCustomContext\n      ? !!nav.likeChrome\n      : /\\bChrome\\b/.test(ua) && !/internal|\\n/i.test(toString.toString());\n\n    /** Internal `[[Class]]` value shortcuts. */\n    var objectClass = 'Object',\n        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',\n        enviroClass = isCustomContext ? objectClass : 'Environment',\n        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),\n        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';\n\n    /** Detect Java environments. */\n    var java = /\\bJava/.test(javaClass) && context.java;\n\n    /** Detect Rhino. */\n    var rhino = java && getClassOf(context.environment) == enviroClass;\n\n    /** A character to represent alpha. */\n    var alpha = java ? 'a' : '\\u03b1';\n\n    /** A character to represent beta. */\n    var beta = java ? 'b' : '\\u03b2';\n\n    /** Browser document object. */\n    var doc = context.document || {};\n\n    /**\n     * Detect Opera browser (Presto-based).\n     * http://www.howtocreate.co.uk/operaStuff/operaObject.html\n     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini\n     */\n    var opera = context.operamini || context.opera;\n\n    /** Opera `[[Class]]`. */\n    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))\n      ? operaClass\n      : (opera = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /** Temporary variable used over the script's lifetime. */\n    var data;\n\n    /** The CPU architecture. */\n    var arch = ua;\n\n    /** Platform description array. */\n    var description = [];\n\n    /** Platform alpha/beta indicator. */\n    var prerelease = null;\n\n    /** A flag to indicate that environment features should be used to resolve the platform. */\n    var useFeatures = ua == userAgent;\n\n    /** The browser/environment version. */\n    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();\n\n    /** A flag to indicate if the OS ends with \"/ Version\" */\n    var isSpecialCasedOS;\n\n    /* Detectable layout engines (order is important). */\n    var layout = getLayout([\n      { 'label': 'EdgeHTML', 'pattern': 'Edge' },\n      'Trident',\n      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },\n      'iCab',\n      'Presto',\n      'NetFront',\n      'Tasman',\n      'KHTML',\n      'Gecko'\n    ]);\n\n    /* Detectable browser names (order is important). */\n    var name = getName([\n      'Adobe AIR',\n      'Arora',\n      'Avant Browser',\n      'Breach',\n      'Camino',\n      'Electron',\n      'Epiphany',\n      'Fennec',\n      'Flock',\n      'Galeon',\n      'GreenBrowser',\n      'iCab',\n      'Iceweasel',\n      'K-Meleon',\n      'Konqueror',\n      'Lunascape',\n      'Maxthon',\n      { 'label': 'Microsoft Edge', 'pattern': 'Edge' },\n      'Midori',\n      'Nook Browser',\n      'PaleMoon',\n      'PhantomJS',\n      'Raven',\n      'Rekonq',\n      'RockMelt',\n      { 'label': 'Samsung Internet', 'pattern': 'SamsungBrowser' },\n      'SeaMonkey',\n      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Sleipnir',\n      'SlimBrowser',\n      { 'label': 'SRWare Iron', 'pattern': 'Iron' },\n      'Sunrise',\n      'Swiftfox',\n      'Waterfox',\n      'WebPositive',\n      'Opera Mini',\n      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },\n      'Opera',\n      { 'label': 'Opera', 'pattern': 'OPR' },\n      'Chrome',\n      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },\n      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },\n      { 'label': 'Firefox for iOS', 'pattern': 'FxiOS' },\n      { 'label': 'IE', 'pattern': 'IEMobile' },\n      { 'label': 'IE', 'pattern': 'MSIE' },\n      'Safari'\n    ]);\n\n    /* Detectable products (order is important). */\n    var product = getProduct([\n      { 'label': 'BlackBerry', 'pattern': 'BB10' },\n      'BlackBerry',\n      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },\n      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },\n      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },\n      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },\n      { 'label': 'Galaxy S5', 'pattern': 'SM-G900' },\n      { 'label': 'Galaxy S6', 'pattern': 'SM-G920' },\n      { 'label': 'Galaxy S6 Edge', 'pattern': 'SM-G925' },\n      { 'label': 'Galaxy S7', 'pattern': 'SM-G930' },\n      { 'label': 'Galaxy S7 Edge', 'pattern': 'SM-G935' },\n      'Google TV',\n      'Lumia',\n      'iPad',\n      'iPod',\n      'iPhone',\n      'Kindle',\n      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Nexus',\n      'Nook',\n      'PlayBook',\n      'PlayStation Vita',\n      'PlayStation',\n      'TouchPad',\n      'Transformer',\n      { 'label': 'Wii U', 'pattern': 'WiiU' },\n      'Wii',\n      'Xbox One',\n      { 'label': 'Xbox 360', 'pattern': 'Xbox' },\n      'Xoom'\n    ]);\n\n    /* Detectable manufacturers. */\n    var manufacturer = getManufacturer({\n      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },\n      'Archos': {},\n      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },\n      'Asus': { 'Transformer': 1 },\n      'Barnes & Noble': { 'Nook': 1 },\n      'BlackBerry': { 'PlayBook': 1 },\n      'Google': { 'Google TV': 1, 'Nexus': 1 },\n      'HP': { 'TouchPad': 1 },\n      'HTC': {},\n      'LG': {},\n      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },\n      'Motorola': { 'Xoom': 1 },\n      'Nintendo': { 'Wii U': 1,  'Wii': 1 },\n      'Nokia': { 'Lumia': 1 },\n      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },\n      'Sony': { 'PlayStation': 1, 'PlayStation Vita': 1 }\n    });\n\n    /* Detectable operating systems (order is important). */\n    var os = getOS([\n      'Windows Phone',\n      'Android',\n      'CentOS',\n      { 'label': 'Chrome OS', 'pattern': 'CrOS' },\n      'Debian',\n      'Fedora',\n      'FreeBSD',\n      'Gentoo',\n      'Haiku',\n      'Kubuntu',\n      'Linux Mint',\n      'OpenBSD',\n      'Red Hat',\n      'SuSE',\n      'Ubuntu',\n      'Xubuntu',\n      'Cygwin',\n      'Symbian OS',\n      'hpwOS',\n      'webOS ',\n      'webOS',\n      'Tablet OS',\n      'Tizen',\n      'Linux',\n      'Mac OS X',\n      'Macintosh',\n      'Mac',\n      'Windows 98;',\n      'Windows '\n    ]);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Picks the layout engine from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected layout engine.\n     */\n    function getLayout(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the manufacturer from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An object of guesses.\n     * @returns {null|string} The detected manufacturer.\n     */\n    function getManufacturer(guesses) {\n      return reduce(guesses, function(result, value, key) {\n        // Lookup the manufacturer by product or scan the UA for the manufacturer.\n        return result || (\n          value[product] ||\n          value[/^[a-z]+(?: +[a-z]+\\b)*/i.exec(product)] ||\n          RegExp('\\\\b' + qualify(key) + '(?:\\\\b|\\\\w*\\\\d)', 'i').exec(ua)\n        ) && key;\n      });\n    }\n\n    /**\n     * Picks the browser name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected browser name.\n     */\n    function getName(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the OS name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected OS name.\n     */\n    function getOS(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + '(?:/[\\\\d.]+|[ \\\\w.]*)', 'i').exec(ua)\n            )) {\n          result = cleanupOS(result, pattern, guess.label || guess);\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Picks the product name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected product name.\n     */\n    function getProduct(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + ' *\\\\d+[.\\\\w_]*', 'i').exec(ua) ||\n              RegExp('\\\\b' + pattern + ' *\\\\w+-[\\\\w]*', 'i').exec(ua) ||\n              RegExp('\\\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\\\d+|[^ ();-]*)', 'i').exec(ua)\n            )) {\n          // Split by forward slash and append product version if needed.\n          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\\d.]+/.test(result[0])) {\n            result[0] += ' ' + result[1];\n          }\n          // Correct character case and cleanup string.\n          guess = guess.label || guess;\n          result = format(result[0]\n            .replace(RegExp(pattern, 'i'), guess)\n            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')\n            .replace(RegExp('(' + guess + ')[-_.]?(\\\\w)', 'i'), '$1 $2'));\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Resolves the version using an array of UA patterns.\n     *\n     * @private\n     * @param {Array} patterns An array of UA patterns.\n     * @returns {null|string} The detected version.\n     */\n    function getVersion(patterns) {\n      return reduce(patterns, function(result, pattern) {\n        return result || (RegExp(pattern +\n          '(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;\n      });\n    }\n\n    /**\n     * Returns `platform.description` when the platform object is coerced to a string.\n     *\n     * @name toString\n     * @memberOf platform\n     * @returns {string} Returns `platform.description` if available, else an empty string.\n     */\n    function toStringPlatform() {\n      return this.description || '';\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Convert layout to an array so we can add extra details.\n    layout && (layout = [layout]);\n\n    // Detect product names that contain their manufacturer's name.\n    if (manufacturer && !product) {\n      product = getProduct([manufacturer]);\n    }\n    // Clean up Google TV.\n    if ((data = /\\bGoogle TV\\b/.exec(product))) {\n      product = data[0];\n    }\n    // Detect simulators.\n    if (/\\bSimulator\\b/i.test(ua)) {\n      product = (product ? product + ' ' : '') + 'Simulator';\n    }\n    // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.\n    if (name == 'Opera Mini' && /\\bOPiOS\\b/.test(ua)) {\n      description.push('running in Turbo/Uncompressed mode');\n    }\n    // Detect IE Mobile 11.\n    if (name == 'IE' && /\\blike iPhone OS\\b/.test(ua)) {\n      data = parse(ua.replace(/like iPhone OS/, ''));\n      manufacturer = data.manufacturer;\n      product = data.product;\n    }\n    // Detect iOS.\n    else if (/^iP/.test(product)) {\n      name || (name = 'Safari');\n      os = 'iOS' + ((data = / OS ([\\d_]+)/i.exec(ua))\n        ? ' ' + data[1].replace(/_/g, '.')\n        : '');\n    }\n    // Detect Kubuntu.\n    else if (name == 'Konqueror' && !/buntu/i.test(os)) {\n      os = 'Kubuntu';\n    }\n    // Detect Android browsers.\n    else if ((manufacturer && manufacturer != 'Google' &&\n        ((/Chrome/.test(name) && !/\\bMobile Safari\\b/i.test(ua)) || /\\bVita\\b/.test(product))) ||\n        (/\\bAndroid\\b/.test(os) && /^Chrome/.test(name) && /\\bVersion\\//i.test(ua))) {\n      name = 'Android Browser';\n      os = /\\bAndroid\\b/.test(os) ? os : 'Android';\n    }\n    // Detect Silk desktop/accelerated modes.\n    else if (name == 'Silk') {\n      if (!/\\bMobi/i.test(ua)) {\n        os = 'Android';\n        description.unshift('desktop mode');\n      }\n      if (/Accelerated *= *true/i.test(ua)) {\n        description.unshift('accelerated');\n      }\n    }\n    // Detect PaleMoon identifying as Firefox.\n    else if (name == 'PaleMoon' && (data = /\\bFirefox\\/([\\d.]+)\\b/.exec(ua))) {\n      description.push('identifying as Firefox ' + data[1]);\n    }\n    // Detect Firefox OS and products running Firefox.\n    else if (name == 'Firefox' && (data = /\\b(Mobile|Tablet|TV)\\b/i.exec(ua))) {\n      os || (os = 'Firefox OS');\n      product || (product = data[1]);\n    }\n    // Detect false positives for Firefox/Safari.\n    else if (!name || (data = !/\\bMinefield\\b/i.test(ua) && /\\b(?:Firefox|Safari)\\b/.exec(name))) {\n      // Escape the `/` for Firefox 1.\n      if (name && !product && /[\\/,]|^[^(]+?\\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {\n        // Clear name of false positives.\n        name = null;\n      }\n      // Reassign a generic name.\n      if ((data = product || manufacturer || os) &&\n          (product || manufacturer || /\\b(?:Android|Symbian OS|Tablet OS|webOS)\\b/.test(os))) {\n        name = /[a-z]+(?: Hat)?/i.exec(/\\bAndroid\\b/.test(os) ? os : data) + ' Browser';\n      }\n    }\n    // Add Chrome version to description for Electron.\n    else if (name == 'Electron' && (data = (/\\bChrome\\/([\\d.]+)\\b/.exec(ua) || 0)[1])) {\n      description.push('Chromium ' + data);\n    }\n    // Detect non-Opera (Presto-based) versions (order is important).\n    if (!version) {\n      version = getVersion([\n        '(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\\\d.]+$))',\n        'Version',\n        qualify(name),\n        '(?:Firefox|Minefield|NetFront)'\n      ]);\n    }\n    // Detect stubborn layout engines.\n    if ((data =\n          layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' ||\n          /\\bOpera\\b/.test(name) && (/\\bOPR\\b/.test(ua) ? 'Blink' : 'Presto') ||\n          /\\b(?:Midori|Nook|Safari)\\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' ||\n          !layout && /\\bMSIE\\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') ||\n          layout == 'WebKit' && /\\bPlayStation\\b(?! Vita\\b)/i.test(name) && 'NetFront'\n        )) {\n      layout = [data];\n    }\n    // Detect Windows Phone 7 desktop mode.\n    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\\d+)/i.exec(ua) || 0)[1])) {\n      name += ' Mobile';\n      os = 'Windows Phone ' + (/\\+$/.test(data) ? data : data + '.x');\n      description.unshift('desktop mode');\n    }\n    // Detect Windows Phone 8.x desktop mode.\n    else if (/\\bWPDesktop\\b/i.test(ua)) {\n      name = 'IE Mobile';\n      os = 'Windows Phone 8.x';\n      description.unshift('desktop mode');\n      version || (version = (/\\brv:([\\d.]+)/.exec(ua) || 0)[1]);\n    }\n    // Detect IE 11 identifying as other browsers.\n    else if (name != 'IE' && layout == 'Trident' && (data = /\\brv:([\\d.]+)/.exec(ua))) {\n      if (name) {\n        description.push('identifying as ' + name + (version ? ' ' + version : ''));\n      }\n      name = 'IE';\n      version = data[1];\n    }\n    // Leverage environment features.\n    if (useFeatures) {\n      // Detect server-side environments.\n      // Rhino has a global function while others have a global object.\n      if (isHostType(context, 'global')) {\n        if (java) {\n          data = java.lang.System;\n          arch = data.getProperty('os.arch');\n          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');\n        }\n        if (rhino) {\n          try {\n            version = context.require('ringo/engine').version.join('.');\n            name = 'RingoJS';\n          } catch(e) {\n            if ((data = context.system) && data.global.system == context.system) {\n              name = 'Narwhal';\n              os || (os = data[0].os || null);\n            }\n          }\n          if (!name) {\n            name = 'Rhino';\n          }\n        }\n        else if (\n          typeof context.process == 'object' && !context.process.browser &&\n          (data = context.process)\n        ) {\n          if (typeof data.versions == 'object') {\n            if (typeof data.versions.electron == 'string') {\n              description.push('Node ' + data.versions.node);\n              name = 'Electron';\n              version = data.versions.electron;\n            } else if (typeof data.versions.nw == 'string') {\n              description.push('Chromium ' + version, 'Node ' + data.versions.node);\n              name = 'NW.js';\n              version = data.versions.nw;\n            }\n          }\n          if (!name) {\n            name = 'Node.js';\n            arch = data.arch;\n            os = data.platform;\n            version = /[\\d.]+/.exec(data.version);\n            version = version ? version[0] : null;\n          }\n        }\n      }\n      // Detect Adobe AIR.\n      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {\n        name = 'Adobe AIR';\n        os = data.flash.system.Capabilities.os;\n      }\n      // Detect PhantomJS.\n      else if (getClassOf((data = context.phantom)) == phantomClass) {\n        name = 'PhantomJS';\n        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);\n      }\n      // Detect IE compatibility modes.\n      else if (typeof doc.documentMode == 'number' && (data = /\\bTrident\\/(\\d+)/i.exec(ua))) {\n        // We're in compatibility mode when the Trident version + 4 doesn't\n        // equal the document mode.\n        version = [version, doc.documentMode];\n        if ((data = +data[1] + 4) != version[1]) {\n          description.push('IE ' + version[1] + ' mode');\n          layout && (layout[1] = '');\n          version[1] = data;\n        }\n        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];\n      }\n      // Detect IE 11 masking as other browsers.\n      else if (typeof doc.documentMode == 'number' && /^(?:Chrome|Firefox)\\b/.test(name)) {\n        description.push('masking as ' + name + ' ' + version);\n        name = 'IE';\n        version = '11.0';\n        layout = ['Trident'];\n        os = 'Windows';\n      }\n      os = os && format(os);\n    }\n    // Detect prerelease phases.\n    if (version && (data =\n          /(?:[ab]|dp|pre|[ab]\\d+pre)(?:\\d+\\+?)?$/i.exec(version) ||\n          /(?:alpha|beta)(?: ?\\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||\n          /\\bMinefield\\b/i.test(ua) && 'a'\n        )) {\n      prerelease = /b/i.test(data) ? 'beta' : 'alpha';\n      version = version.replace(RegExp(data + '\\\\+?$'), '') +\n        (prerelease == 'beta' ? beta : alpha) + (/\\d+\\+?/.exec(data) || '');\n    }\n    // Detect Firefox Mobile.\n    if (name == 'Fennec' || name == 'Firefox' && /\\b(?:Android|Firefox OS)\\b/.test(os)) {\n      name = 'Firefox Mobile';\n    }\n    // Obscure Maxthon's unreliable version.\n    else if (name == 'Maxthon' && version) {\n      version = version.replace(/\\.[\\d.]+/, '.x');\n    }\n    // Detect Xbox 360 and Xbox One.\n    else if (/\\bXbox\\b/i.test(product)) {\n      if (product == 'Xbox 360') {\n        os = null;\n      }\n      if (product == 'Xbox 360' && /\\bIEMobile\\b/.test(ua)) {\n        description.unshift('mobile mode');\n      }\n    }\n    // Add mobile postfix.\n    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&\n        (os == 'Windows CE' || /Mobi/i.test(ua))) {\n      name += ' Mobile';\n    }\n    // Detect IE platform preview.\n    else if (name == 'IE' && useFeatures) {\n      try {\n        if (context.external === null) {\n          description.unshift('platform preview');\n        }\n      } catch(e) {\n        description.unshift('embedded');\n      }\n    }\n    // Detect BlackBerry OS version.\n    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp\n    else if ((/\\bBlackBerry\\b/.test(product) || /\\bBB10\\b/.test(ua)) && (data =\n          (RegExp(product.replace(/ +/g, ' *') + '/([.\\\\d]+)', 'i').exec(ua) || 0)[1] ||\n          version\n        )) {\n      data = [data, /BB10/.test(ua)];\n      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];\n      version = null;\n    }\n    // Detect Opera identifying/masking itself as another browser.\n    // http://www.opera.com/support/kb/view/843/\n    else if (this != forOwn && product != 'Wii' && (\n          (useFeatures && opera) ||\n          (/Opera/.test(name) && /\\b(?:MSIE|Firefox)\\b/i.test(ua)) ||\n          (name == 'Firefox' && /\\bOS X (?:\\d+\\.){2,}/.test(os)) ||\n          (name == 'IE' && (\n            (os && !/^Win/.test(os) && version > 5.5) ||\n            /\\bWindows XP\\b/.test(os) && version > 8 ||\n            version == 8 && !/\\bTrident\\b/.test(ua)\n          ))\n        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {\n      // When \"identifying\", the UA contains both Opera and the other browser's name.\n      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');\n      if (reOpera.test(name)) {\n        if (/\\bIE\\b/.test(data) && os == 'Mac OS') {\n          os = null;\n        }\n        data = 'identify' + data;\n      }\n      // When \"masking\", the UA contains only the other browser's name.\n      else {\n        data = 'mask' + data;\n        if (operaClass) {\n          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));\n        } else {\n          name = 'Opera';\n        }\n        if (/\\bIE\\b/.test(data)) {\n          os = null;\n        }\n        if (!useFeatures) {\n          version = null;\n        }\n      }\n      layout = ['Presto'];\n      description.push(data);\n    }\n    // Detect WebKit Nightly and approximate Chrome/Safari versions.\n    if ((data = (/\\bAppleWebKit\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n      // Correct build number for numeric comparison.\n      // (e.g. \"532.5\" becomes \"532.05\")\n      data = [parseFloat(data.replace(/\\.(\\d)$/, '.0$1')), data];\n      // Nightly builds are postfixed with a \"+\".\n      if (name == 'Safari' && data[1].slice(-1) == '+') {\n        name = 'WebKit Nightly';\n        prerelease = 'alpha';\n        version = data[1].slice(0, -1);\n      }\n      // Clear incorrect browser versions.\n      else if (version == data[1] ||\n          version == (data[2] = (/\\bSafari\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n        version = null;\n      }\n      // Use the full Chrome version when available.\n      data[1] = (/\\bChrome\\/([\\d.]+)/i.exec(ua) || 0)[1];\n      // Detect Blink layout engine.\n      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {\n        layout = ['Blink'];\n      }\n      // Detect JavaScriptCore.\n      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi\n      if (!useFeatures || (!likeChrome && !data[1])) {\n        layout && (layout[1] = 'like Safari');\n        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : '8');\n      } else {\n        layout && (layout[1] = 'like Chrome');\n        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');\n      }\n      // Add the postfix of \".x\" or \"+\" for approximate versions.\n      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));\n      // Obscure version for some Safari 1-2 releases.\n      if (name == 'Safari' && (!version || parseInt(version) > 45)) {\n        version = data;\n      }\n    }\n    // Detect Opera desktop modes.\n    if (name == 'Opera' &&  (data = /\\bzbov|zvav$/.exec(os))) {\n      name += ' ';\n      description.unshift('desktop mode');\n      if (data == 'zvav') {\n        name += 'Mini';\n        version = null;\n      } else {\n        name += 'Mobile';\n      }\n      os = os.replace(RegExp(' *' + data + '$'), '');\n    }\n    // Detect Chrome desktop mode.\n    else if (name == 'Safari' && /\\bChrome\\b/.exec(layout && layout[1])) {\n      description.unshift('desktop mode');\n      name = 'Chrome Mobile';\n      version = null;\n\n      if (/\\bOS X\\b/.test(os)) {\n        manufacturer = 'Apple';\n        os = 'iOS 4.3+';\n      } else {\n        os = null;\n      }\n    }\n    // Strip incorrect OS versions.\n    if (version && version.indexOf((data = /[\\d.]+$/.exec(os))) == 0 &&\n        ua.indexOf('/' + data + '-') > -1) {\n      os = trim(os.replace(data, ''));\n    }\n    // Add layout engine.\n    if (layout && !/\\b(?:Avant|Nook)\\b/.test(name) && (\n        /Browser|Lunascape|Maxthon/.test(name) ||\n        name != 'Safari' && /^iOS/.test(os) && /\\bSafari\\b/.test(layout[1]) ||\n        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|Web)/.test(name) && layout[1])) {\n      // Don't add layout details to description if they are falsey.\n      (data = layout[layout.length - 1]) && description.push(data);\n    }\n    // Combine contextual information.\n    if (description.length) {\n      description = ['(' + description.join('; ') + ')'];\n    }\n    // Append manufacturer to description.\n    if (manufacturer && product && product.indexOf(manufacturer) < 0) {\n      description.push('on ' + manufacturer);\n    }\n    // Append product to description.\n    if (product) {\n      description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);\n    }\n    // Parse the OS into an object.\n    if (os) {\n      data = / ([\\d.+]+)$/.exec(os);\n      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';\n      os = {\n        'architecture': 32,\n        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,\n        'version': data ? data[1] : null,\n        'toString': function() {\n          var version = this.version;\n          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');\n        }\n      };\n    }\n    // Add browser/OS architecture.\n    if ((data = /\\b(?:AMD|IA|Win|WOW|x86_|x)64\\b/i.exec(arch)) && !/\\bi686\\b/i.test(arch)) {\n      if (os) {\n        os.architecture = 64;\n        os.family = os.family.replace(RegExp(' *' + data), '');\n      }\n      if (\n          name && (/\\bWOW64\\b/i.test(ua) ||\n          (useFeatures && /\\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\\bWin64; x64\\b/i.test(ua)))\n      ) {\n        description.unshift('32-bit');\n      }\n    }\n    // Chrome 39 and above on OS X is always 64-bit.\n    else if (\n        os && /^OS X/.test(os.family) &&\n        name == 'Chrome' && parseFloat(version) >= 39\n    ) {\n      os.architecture = 64;\n    }\n\n    ua || (ua = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The platform object.\n     *\n     * @name platform\n     * @type Object\n     */\n    var platform = {};\n\n    /**\n     * The platform description.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.description = ua;\n\n    /**\n     * The name of the browser's layout engine.\n     *\n     * The list of common layout engines include:\n     * \"Blink\", \"EdgeHTML\", \"Gecko\", \"Trident\" and \"WebKit\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.layout = layout && layout[0];\n\n    /**\n     * The name of the product's manufacturer.\n     *\n     * The list of manufacturers include:\n     * \"Apple\", \"Archos\", \"Amazon\", \"Asus\", \"Barnes & Noble\", \"BlackBerry\",\n     * \"Google\", \"HP\", \"HTC\", \"LG\", \"Microsoft\", \"Motorola\", \"Nintendo\",\n     * \"Nokia\", \"Samsung\" and \"Sony\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.manufacturer = manufacturer;\n\n    /**\n     * The name of the browser/environment.\n     *\n     * The list of common browser names include:\n     * \"Chrome\", \"Electron\", \"Firefox\", \"Firefox for iOS\", \"IE\",\n     * \"Microsoft Edge\", \"PhantomJS\", \"Safari\", \"SeaMonkey\", \"Silk\",\n     * \"Opera Mini\" and \"Opera\"\n     *\n     * Mobile versions of some browsers have \"Mobile\" appended to their name:\n     * eg. \"Chrome Mobile\", \"Firefox Mobile\", \"IE Mobile\" and \"Opera Mobile\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.name = name;\n\n    /**\n     * The alpha/beta release indicator.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.prerelease = prerelease;\n\n    /**\n     * The name of the product hosting the browser.\n     *\n     * The list of common products include:\n     *\n     * \"BlackBerry\", \"Galaxy S4\", \"Lumia\", \"iPad\", \"iPod\", \"iPhone\", \"Kindle\",\n     * \"Kindle Fire\", \"Nexus\", \"Nook\", \"PlayBook\", \"TouchPad\" and \"Transformer\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.product = product;\n\n    /**\n     * The browser's user agent string.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.ua = ua;\n\n    /**\n     * The browser/environment version.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.version = name && version;\n\n    /**\n     * The name of the operating system.\n     *\n     * @memberOf platform\n     * @type Object\n     */\n    platform.os = os || {\n\n      /**\n       * The CPU architecture the OS is built for.\n       *\n       * @memberOf platform.os\n       * @type number|null\n       */\n      'architecture': null,\n\n      /**\n       * The family of the OS.\n       *\n       * Common values include:\n       * \"Windows\", \"Windows Server 2008 R2 / 7\", \"Windows Server 2008 / Vista\",\n       * \"Windows XP\", \"OS X\", \"Ubuntu\", \"Debian\", \"Fedora\", \"Red Hat\", \"SuSE\",\n       * \"Android\", \"iOS\" and \"Windows Phone\"\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'family': null,\n\n      /**\n       * The version of the OS.\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'version': null,\n\n      /**\n       * Returns the OS string.\n       *\n       * @memberOf platform.os\n       * @returns {string} The OS string.\n       */\n      'toString': function() { return 'null'; }\n    };\n\n    platform.parse = parse;\n    platform.toString = toStringPlatform;\n\n    if (platform.version) {\n      description.unshift(version);\n    }\n    if (platform.name) {\n      description.unshift(name);\n    }\n    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {\n      description.push(product ? '(' + os + ')' : 'on ' + os);\n    }\n    if (description.length) {\n      platform.description = description.join(' ');\n    }\n    return platform;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export platform.\n  var platform = parse();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose platform on the global object to prevent errors when platform is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    root.platform = platform;\n\n    // Define as an anonymous module so platform can be aliased through path mapping.\n    define(function() {\n      return platform;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && freeModule) {\n    // Export for CommonJS support.\n    forOwn(platform, function(value, key) {\n      freeExports[key] = value;\n    });\n  }\n  else {\n    // Export to the global object.\n    root.platform = platform;\n  }\n}.call(this));\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\r\nimport {replaceInlines} from './glsl-function-inliner';\r\nimport {glslRegistry} from './glsl-registered-libs';\r\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\r\nimport {ProgramInfo, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * Preprocessor for the additions to the GLSL language\r\n * It deals with:\r\n *  @include directives\r\n *  @inline\r\n *  Loop unrolling (not implemented)\r\n *  Macro resolution (not implemented)\r\n */\r\nexport class GlslPreprocessor {\r\n  readonly context: GlslContext;\r\n  readonly libs: {[name: string]: GlslLib} = {};\r\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\r\n\r\n  constructor(glContext: WebGLContext, programInfo: ProgramInfo) {\r\n    this.context = new GlslContext(glContext, programInfo);\r\n\r\n    // construct GlslLibs\r\n    Object.keys(glslRegistry).forEach((name: string) => {\r\n      const lib = new glslRegistry[name](this.context);\r\n      this.libs[name] = lib;\r\n    });\r\n\r\n    // construct GlslRoutineDependencyGraph\r\n    const map = this.glslLibRoutineDependencyGraph;\r\n    for (const libName in this.libs) {\r\n      const lib = this.libs[libName];\r\n      const routinesInLib = lib.getFunctions();\r\n      for (const routine in routinesInLib) {\r\n        const key = libName + '.' + routine;\r\n        let currentNode: GlslLibRoutineNode;\r\n        if (map[key]) {\r\n          currentNode = map[key];\r\n          currentNode.routineBody = routinesInLib[routine].routineBody;\r\n        } else {\r\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\r\n          map[key] = currentNode;\r\n        }\r\n        const dependencies = routinesInLib[routine].dependencies;\r\n        if (dependencies) {\r\n          for (let i = 0; i < dependencies.length; ++i) {\r\n            if (!map[dependencies[i]]) {\r\n              const node = new GlslLibRoutineNode(dependencies[i]);\r\n              map[dependencies[i]] = node;\r\n              currentNode.addDependency(node);\r\n            } else {\r\n              currentNode.addDependency(map[dependencies[i]]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  preprocess(): string {\r\n    const programInfo = this.context.programInfo;\r\n    let source = programInfo.shaderSource;\r\n\r\n    // append main() function\r\n    if (!this.context.programInfo.hasMain) {\r\n      source = `${source}\r\n      ${getDefaultFragShaderMain(this.context.glContext.version, programInfo.outputLayout.shape.length)}`;\r\n    }\r\n    // replace inlines\r\n    source = replaceInlines(source);\r\n\r\n    // concat final source string\r\n    return `${getFragShaderPreamble(this.context.glContext.version)}\r\n    ${this.getUniforms(programInfo.samplers, programInfo.variables)}\r\n    ${this.getImports(source)}\r\n    ${source}`;\r\n  }\r\n\r\n  protected getImports(script: string): string {\r\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\r\n\r\n    if (routinesIncluded.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    let routines = ``;\r\n    for (let i = 0; i < routinesIncluded.length; ++i) {\r\n      if (routinesIncluded[i].routineBody) {\r\n        routines += routinesIncluded[i].routineBody + `\\n`;\r\n      } else {\r\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\r\n      }\r\n    }\r\n\r\n    return routines;\r\n  }\r\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\r\n    const nodes: GlslLibRoutineNode[] = [];\r\n\r\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\r\n      const routine = classAndRoutine.split('.')[1];\r\n      if (script.indexOf(routine) !== -1) {\r\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\r\n      }\r\n    });\r\n\r\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\r\n  }\r\n\r\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\r\n    const uniformLines: string[] = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLines.push(`uniform sampler2D ${sampler};`);\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLines.push(\r\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\r\n      }\r\n    }\r\n    return uniformLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nconst INLINE_FUNC_DEF_REGEX: RegExp =\r\n    /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\r\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\r\n/**\r\n * GLSL preprocessor responsible for resolving @inline directives\r\n */\r\nexport function replaceInlines(script: string): string {\r\n  const inlineDefs: {[name: string]: {params: Array<{type: string, name: string}|null>, body: string}} = {};\r\n  let match;\r\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\r\n    const params = match[3]\r\n                       .split(',')\r\n                       .map(s => {\r\n                         const tokens = s.trim().split(' ');\r\n                         if (tokens && tokens.length === 2) {\r\n                           return {type: tokens[0], name: tokens[1]};\r\n                         }\r\n                         return null;\r\n                       })\r\n                       .filter(v => v !== null);\r\n    inlineDefs[match[2]] = {params, body: match[4]};\r\n  }\r\n  for (const name in inlineDefs) {\r\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\r\n    const regex = new RegExp(regexString, 'gm');\r\n    while ((match = regex.exec(script)) !== null) {\r\n      const type = match[1];\r\n      const variable = match[2];\r\n      const params = match[3].split(',');\r\n      const declLine = (type) ? `${type} ${variable};` : '';\r\n      let newBody: string = inlineDefs[name].body;\r\n      let paramRedecLine = '';\r\n      inlineDefs[name].params.forEach((v, i) => {\r\n        if (v) {\r\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\r\n        }\r\n      });\r\n      newBody = `${paramRedecLine}\\n ${newBody}`;\r\n      newBody = newBody.replace('return', `${variable} = `);\r\n      const replacement = `\r\n      ${declLine}\r\n      {\r\n        ${newBody}\r\n      }\r\n      `;\r\n      script = script.replace(match[0], replacement);\r\n    }\r\n  }\r\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\r\n  return script;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\r\nimport {GlslContext, GlslLib} from './glsl-definitions';\r\nimport {EncodingGlslLib} from './glsl-encoding-lib.';\r\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\r\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\r\nimport {VecGlslLib} from './glsl-vec-lib';\r\n\r\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\r\n  'encoding': EncodingGlslLib,\r\n  'fragcolor': FragColorGlslLib,\r\n  'vec': VecGlslLib,\r\n  'shapeUtils': ShapeUtilsGlslLib,\r\n  'coordinates': CoordsGlslLib,\r\n  //  'arrays': ArrayGlslSLib\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class CoordsGlslLib extends GlslLib {\r\n  returnType: string;\r\n\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {...this.offsetToCoords(), ...this.coordsToOffset(), ...this.toVec(), ...this.valueFrom()};\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = `offsetToCoords`;\r\n    return {\r\n      offsetToCoords: new GlslLibRoutine(`\r\n      vec2 ${funcName}(int offset, int width, int height) {\r\n        int t = offset / width;\r\n        int s = offset - t*width;\r\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\r\n        return coords;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = `coordsToOffset`;\r\n    return {\r\n      coordsToOffset: new GlslLibRoutine(`\r\n      int ${funcName}(vec2 coords, int width, int height) {\r\n        float s = coords.s * float(width);\r\n        float t = coords.t * float(height);\r\n        int offset = int(t) * width + int(s);\r\n        return offset;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n  /**\r\n   * This is the main function to map from the given texture coordiantes (s,t)\r\n   * to logical indices for the output\r\n   * There will only be one single variation of this\r\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\r\n   */\r\n  protected toVec(): {[name: string]: GlslLibRoutine;} {\r\n    const output = this.context.programInfo.outputLayout;\r\n    const rank = output.shape.length;\r\n    const strides = output.strides;\r\n    const xScale = output.width;\r\n    const yScale = output.height;\r\n\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n        c[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= c[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n        c[${rank - 1}] = offset;`);\r\n    const body = `\r\n      void toVec(vec2 texCoords, out int c[${rank}]) {\r\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\r\n        ${stridesBlock.join('')}\r\n      }\r\n      void toVec(int offset, out int c[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n    `;\r\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\r\n  }\r\n  /**\r\n   * These are value getter functions generated for each input\r\n   * Each function is hardwired to the name and dimensions of the input\r\n   * An '_T' variation is also produced which accesses values as if the\r\n   * input was transposed\r\n   */\r\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const layout = programInfo.inputLayouts[i];\r\n      const shape = layout.shape;\r\n      const rank = shape.length;\r\n      let funcName = `_${name}`;\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\r\n          [`shapeUtils.indicesToOffset${funcName}`, `coordinates.offsetToCoords`, `fragcolor.getColorAsFloat`]);\r\n      funcName = funcName + '_T';\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\r\n          [`shapeUtils.indicesToOffset${funcName}`, `coordinates.offsetToCoords`, `fragcolor.getColorAsFloat`]);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * Produces one value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        float ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset${name}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * This GLSL library handles routines converting\r\n * float32 to/from Unsigned byte or float 16\r\n */\r\nexport class EncodingGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string;} {\r\n    return {};\r\n  }\r\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\r\n        return vec4(f, 0.0, 0.0, 0.0);\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\r\n        return rgba.r;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      encode: new GlslLibRoutine(`\r\n      highp vec4 encode(highp float f) {\r\n        highp float F = abs(f);\r\n        highp float Sign = step(0.0,-f);\r\n        highp float Exponent = floor(log2(F));\r\n        highp float Mantissa = (exp2(- Exponent) * F);\r\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\r\n        highp vec4 rgba;\r\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\r\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\r\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\r\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\r\n        ${endianness}\r\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\r\n        return rgba;\r\n    }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode a vec4 of unsigned bytes to float32\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      decode: new GlslLibRoutine(`\r\n        highp float decode(highp vec4 rgba) {\r\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\r\n          ${endianness}\r\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\r\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\r\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\r\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\r\n          return Result;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * Determines if the machine is little endian or not\r\n   * @credit: https://gist.github.com/TooTallNate/4750953\r\n   */\r\n  static isLittleEndian(): boolean {\r\n    const b = new ArrayBuffer(4);\r\n    const a = new Uint32Array(b);\r\n    const c = new Uint8Array(b);\r\n    a[0] = 0xdeadbeef;\r\n    if (c[0] === 0xef) {\r\n      return true;\r\n    }\r\n    if (c[0] === 0xde) {\r\n      return false;\r\n    }\r\n    throw new Error('unknown endianness');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * This GLSL library handles routines around reading a texlet and writing to it\r\n * Reading and writing could be more than just dealing with one channel\r\n * It may require encoding/decoding to/from 4 channels into one\r\n */\r\nexport class FragColorGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string;} {\r\n    return {};\r\n  }\r\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return {\r\n      setFragColor: new GlslLibRoutine(\r\n          `\r\n        void setFragColor(float value) {\r\n            ${glsl.output} = encode(value);\r\n        }\r\n        `,\r\n          ['encoding.encode'])\r\n    };\r\n  }\r\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      getColorAsFloat: new GlslLibRoutine(\r\n          `\r\n        float getColorAsFloat(vec4 color) {\r\n            return decode(color);\r\n        }\r\n        `,\r\n          ['encoding.decode'])\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class ShapeUtilsGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {\r\n      ...this.bcastIndex(),\r\n      ...this.bcastMatmulIndex(),\r\n      ...this.offsetToIndices(),\r\n      ...this.indicesToOffset(),\r\n      ...this.incrementIndices()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  protected bcastIndex(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const outputRank = programInfo.outputLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      if (shape.length <= outputRank) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const outputRank = programInfo.outputLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      if (!(shape.length < 2 || shape.length > outputRank)) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastMatmulIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank - 2; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\r\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const strides = programInfo.inputLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `indicesToOffset_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\r\n      funcName = `indicesToOffset_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static indexToOffsetSingle(name: string, rank: number, strides: ReadonlyArray<number>): string {\r\n    let block = '';\r\n    for (let i = rank - 1; i >= 0; --i) {\r\n      block += `\r\n        offset += indices[${i}] * ${strides[i]};\r\n        `;\r\n    }\r\n    return `\r\n      int ${name}(int indices[${rank}]) {\r\n        int offset = 0;\r\n        ${block}\r\n        return offset;\r\n      }\r\n      `;\r\n  }\r\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const strides = programInfo.inputLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `offsetToIndices_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\r\n      funcName = `offsetToIndices_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static offsetToIndicesSingle(name: string, rank: number, strides: ReadonlyArray<number>): string {\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n      indices[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= indices[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n      indices[${rank - 1}] = offset;`);\r\n    return `\r\n      void ${name}(int offset, out int indices[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n      `;\r\n  }\r\n  protected incrementIndices(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const rank = shape.length;\r\n      const funcName = `incrementIndices_${name}`;\r\n      let shapeInit = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        shapeInit += `\r\n        shape[${i}] = ${shape[i]};`;\r\n      }\r\n      const body = `\r\n        void ${funcName}(int axis, out int indices[${rank}]) {\r\n          int shape[${rank}];\r\n          ${shapeInit};\r\n          for(int i = ${rank} -1 ; i >= 0; --i) {\r\n            if(i > axis) continue;\r\n            indices[i] += 1;\r\n            if(indices[i] < shape[i]) {\r\n              break;\r\n            }\r\n            indices[i] = 0;\r\n          }\r\n        }\r\n        `;\r\n      result[funcName] = new GlslLibRoutine(body);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for vec routines\r\n * Vec is an varible length int array. The length is fixed at the time of\r\n * generating the library functions from the dimensions of the output.\r\n */\r\nexport class VecGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getCustomTypes(): {[name: string]: string;} {\r\n    return {};\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\r\n  }\r\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    const nameOp: {[name: string]: string;} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\r\n    const result: {[name: string]: GlslLibRoutine;} = {};\r\n    for (const name in nameOp) {\r\n      const fname = `${name}Vec`;\r\n      let assignmentBlock = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        assignmentBlock += `\r\n          dest[${i}] ${nameOp[name]} src[${i}];\r\n          `;\r\n      }\r\n      const body = `\r\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\r\n          ${assignmentBlock}\r\n        }\r\n        `;\r\n      result[fname] = new GlslLibRoutine(body);\r\n    }\r\n\r\n    return result;\r\n  }\r\n  protected copyVec(): {[name: string]: GlslLibRoutine;} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let assignmentBlock = '';\r\n    for (let i = 0; i < rank; ++i) {\r\n      assignmentBlock += `\r\n        dest[${i}] = src[${i}];\r\n        `;\r\n    }\r\n    const body = `\r\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\r\n        ${assignmentBlock}\r\n      }\r\n      `;\r\n    return {copyVec: new GlslLibRoutine(body)};\r\n  }\r\n\r\n  protected setVecItem(): {[name: string]: GlslLibRoutine;} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index =${rank} + index;\r\n        if (index == 0)\r\n            m[0] = value;\r\n        `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            m[${i}] = value;\r\n            `;\r\n    }\r\n    block += `\r\n        else\r\n            m[${rank - 1}] = value;\r\n        `;\r\n    const body = `\r\n      void setVecItem(out int m[${rank}], int index, int value) {\r\n        ${block}\r\n      }\r\n        `;\r\n    return {setVecItem: new GlslLibRoutine(body)};\r\n  }\r\n  protected getVecItem(): {[name: string]: GlslLibRoutine;} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index = ${rank} + index;\r\n        if (index == 0)\r\n            return m[0];\r\n      `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            return m[${i}];\r\n      `;\r\n    }\r\n    block += `\r\n        else\r\n            return m[${rank - 1}];\r\n        `;\r\n    const body = `\r\n      int getVecItem(int m[${rank}], int index) {\r\n        ${block}\r\n      }\r\n    `;\r\n    return {getVecItem: new GlslLibRoutine(body)};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\n/** Layout preferences */\r\nexport interface WidthHeightPrefs {\r\n  breakAxis: number;\r\n}\r\n/**\r\n * TextureLayoutStrategy is an abstraction for different plans\r\n * for mapping n-dimensional arrays to 2D textures (and back)\r\n */\r\nexport interface TextureLayoutStrategy {\r\n  computeTextureWH(shape: ReadonlyArray<number>, prefs?: WidthHeightPrefs): [number, number];\r\n}\r\n\r\n/**\r\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\r\n */\r\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: ReadonlyArray<number>, prefs?: WidthHeightPrefs): [number, number] {\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return [1, 1];\r\n    }\r\n    const maxTextureSize = this.maxTextureSize;\r\n    if (prefs) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    const totalSize = shape.reduce((a, b) => a * b);\r\n\r\n    let width = Math.floor(Math.sqrt(totalSize));\r\n\r\n    for (; width < maxTextureSize && width < totalSize; width++) {\r\n      if (totalSize % width === 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (width >= maxTextureSize || totalSize % width !== 0) {\r\n      throw new Error(`The given dimensions are outside this GPU\\'s boundaries: ${shape}`);\r\n    }\r\n    return [width, totalSize / width];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\n\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport interface TextureManagerConfig {\r\n  reuseTextures?: boolean;\r\n}\r\n\r\n/**\r\n * TextureManager is the mainly responsible for caching Textures\r\n * Textures are cached in 2 levels:\r\n *   1. the texures which are associated with a dataId (from Tensor)\r\n *    Caching these is crucial to performance. These are In-use Textures\r\n *   2. textures which are not in use by any current ProgramInfo/Tensor\r\n *     These are called Free Textures\r\n * TextureManager is also used to help creating textures. For this it\r\n * uses WebGLContext and TextureLayoutStrategy\r\n */\r\nexport class TextureManager {\r\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\r\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\r\n  private readonly textureLookup: Map<WebGLTexture, string>;\r\n\r\n  constructor(\r\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\r\n      private config: TextureManagerConfig) {\r\n    if (config.reuseTextures) {\r\n      this.inUseTextures = new Map();\r\n      this.idleTextures = new Map();\r\n      this.textureLookup = new Map();\r\n    }\r\n  }\r\n  createTextureFromLayout(\r\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\r\n    const textureDataType = this.toEncoderType(dataType);\r\n\r\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\r\n\r\n    let key: string|undefined;\r\n    let inUseTextures: WebGLTexture[]|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = `${layout.width}x${layout.height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\r\n      inUseTextures = this.inUseTextures.get(key);\r\n      if (!inUseTextures) {\r\n        inUseTextures = [];\r\n        this.inUseTextures.set(key, inUseTextures);\r\n      }\r\n\r\n      const idleTextures = this.idleTextures.get(key);\r\n      if (idleTextures && idleTextures.length > 0) {\r\n        const texture = idleTextures.pop()!;\r\n        inUseTextures.push(texture);\r\n        if (usage === Encoder.Usage.UploadOnly) {\r\n          this.glContext.updateTexture(\r\n              texture, layout.width, layout.height, encoder, this.toTextureData(dataType, data)!);\r\n        }\r\n        return texture;\r\n      }\r\n    }\r\n\r\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\r\n    const texture =\r\n        this.glContext.allocateTexture(layout.width, layout.height, encoder, this.toTextureData(dataType, data));\r\n\r\n    if (this.config.reuseTextures) {\r\n      inUseTextures!.push(texture);\r\n      this.textureLookup.set(texture, key!);\r\n    }\r\n    return texture;\r\n  }\r\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      return this.toTensorData(dataType, data);\r\n    });\r\n  }\r\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\r\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b);\r\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\r\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\r\n    });\r\n  }\r\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\r\n    let key: string|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = this.textureLookup.get(textureData.texture);\r\n      if (key) {\r\n        if (deleteTexture) {\r\n          this.textureLookup.delete(key);\r\n        }\r\n        const inUseTextures = this.inUseTextures.get(key);\r\n        if (inUseTextures) {\r\n          const index = inUseTextures.indexOf(textureData.texture);\r\n          if (index !== -1) {\r\n            inUseTextures.splice(index, 1);\r\n            let idleTextures = this.idleTextures.get(key);\r\n            if (!idleTextures) {\r\n              idleTextures = [];\r\n              this.idleTextures.set(key, idleTextures);\r\n            }\r\n            idleTextures.push(textureData.texture);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!key || deleteTexture) {\r\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\r\n      this.glContext.deleteTexture(textureData.texture);\r\n    }\r\n  }\r\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\r\n    return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n        return new Int16Array(data);\r\n      case 'int32':\r\n        return new Int32Array(data);\r\n      case 'int8':\r\n        return new Int8Array(data);\r\n      case 'uint16':\r\n        return new Uint16Array(data);\r\n      case 'uint32':\r\n        return data as Uint32Array;\r\n      case 'uint8':\r\n      case 'bool':\r\n        return data as Uint8Array;\r\n      case 'float32':\r\n        return data as Float32Array;\r\n      case 'float64':\r\n        return new Float64Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\r\n    if (!data) {\r\n      return undefined;\r\n    }\r\n    return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint16':\r\n      case 'uint32':\r\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\r\n      case 'int8':\r\n      case 'uint8':\r\n      case 'bool':\r\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\r\n      case 'float32':\r\n      case 'float64':\r\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toEncoderType(dataType: Tensor.DataType): Encoder.DataType {\r\n    return 'float';\r\n    // switch (dataType) {\r\n    //   case 'int16':\r\n    //   case 'int32':\r\n    //   case 'uint16':\r\n    //   case 'uint32':\r\n    //     return 'int';\r\n    //   case 'uint8':\r\n    //   case 'bool':\r\n    //     return 'byte';\r\n    //   case 'float32':\r\n    //   case 'float64':\r\n    //     return 'float';\r\n    //   default:\r\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\r\n    // }\r\n  }\r\n  clearActiveTextures(): void {\r\n    this.glContext.clearActiveTextures();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nconst cache: {[contextId: string]: WebGLContext} = {};\r\n\r\n/**\r\n * This factory function creates proper WebGLRenderingContext based on\r\n * the current browsers capabilities\r\n * The order is from higher/most recent versions to most basic\r\n */\r\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  let context: WebGLContext|undefined;\r\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\r\n    context = cache.webgl2;\r\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\r\n    context = cache.webgl;\r\n  }\r\n\r\n  context = context || createNewWebGLContext(contextId);\r\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\r\n  const gl = context.gl;\r\n\r\n  cache[contextId] = context;\r\n\r\n  if (gl.isContextLost()) {\r\n    delete cache[contextId];\r\n    return createWebGLContext(contextId);\r\n  }\r\n\r\n  gl.disable(gl.DEPTH_TEST);\r\n  gl.disable(gl.STENCIL_TEST);\r\n  gl.disable(gl.BLEND);\r\n  gl.disable(gl.DITHER);\r\n  gl.disable(gl.POLYGON_OFFSET_FILL);\r\n  gl.disable(gl.SAMPLE_COVERAGE);\r\n  gl.enable(gl.SCISSOR_TEST);\r\n  gl.enable(gl.CULL_FACE);\r\n  gl.cullFace(gl.BACK);\r\n\r\n  return context;\r\n}\r\n\r\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  const canvas = createCanvas();\r\n  const contextAttributes: WebGLContextAttributes = {\r\n    alpha: false,\r\n    depth: false,\r\n    antialias: false,\r\n    stencil: false,\r\n    preserveDrawingBuffer: false,\r\n    premultipliedAlpha: false,\r\n    failIfMajorPerformanceCaveat: false\r\n  };\r\n  let gl: WebGLRenderingContext|null;\r\n  const ca = contextAttributes;\r\n  if (!contextId || contextId === 'webgl2') {\r\n    gl = canvas.getContext('webgl2', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 2);\r\n      } catch (err) {\r\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n  if (!contextId || contextId === 'webgl') {\r\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 1);\r\n      } catch (err) {\r\n        Logger.warning(\r\n            'GlContextFactory',\r\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('WebGL is not supported');\r\n}\r\n\r\nfunction createCanvas(): HTMLCanvasElement {\r\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  return canvas;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {env} from '../../env';\r\n\r\nimport * as DataEncoders from './texture-data-encoder';\r\nimport {DataEncoder, Encoder} from './texture-data-encoder';\r\n\r\n/**\r\n * Abstraction and wrapper around WebGLRenderingContext and its operations\r\n */\r\nexport class WebGLContext {\r\n  gl: WebGLRenderingContext;\r\n  version: 1|2;\r\n\r\n  private vertexbuffer: WebGLBuffer;\r\n  private framebuffer: WebGLFramebuffer;\r\n\r\n  // WebGL flags and vital parameters\r\n  private isFloatTextureAttachableToFrameBuffer: boolean;\r\n  isFloat32DownloadSupported: boolean;\r\n  isRenderFloat32Supported: boolean;\r\n  isBlendSupported: boolean;\r\n  maxTextureSize: number;\r\n  // private maxCombinedTextureImageUnits: number;\r\n  private maxTextureImageUnits: number;\r\n  // private maxCubeMapTextureSize: number;\r\n  // private shadingLanguageVersion: string;\r\n  // private webglVendor: string;\r\n  // private webglVersion: string;\r\n\r\n  // WebGL2 flags and vital parameters\r\n  // private max3DTextureSize: number;\r\n  // private maxArrayTextureLayers: number;\r\n  // private maxColorAttachments: number;\r\n  // private maxDrawBuffers: number;\r\n\r\n  // WebGL extensions\r\n  textureFloatExtension: OES_texture_float|null;\r\n  textureHalfFloatExtension: OES_texture_half_float|null;\r\n\r\n  // WebGL2 extensions\r\n  colorBufferFloatExtension: {}|null;\r\n\r\n  private disposed: boolean;\r\n  private frameBufferBound = false;\r\n\r\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\r\n    this.gl = gl;\r\n    this.version = version;\r\n\r\n    this.getExtensions();\r\n    this.vertexbuffer = this.createVertexbuffer();\r\n    this.framebuffer = this.createFramebuffer();\r\n    this.queryVitalParameters();\r\n  }\r\n\r\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\r\n    const gl = this.gl;\r\n    // create the texture\r\n    const texture = gl.createTexture();\r\n    // bind the texture so the following methods effect this texture.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    const buffer = data ? encoder.encode(data, width * height) : null;\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // Level of detail.\r\n        encoder.internalFormat, width, height,\r\n        0,  // Always 0 in OpenGL ES.\r\n        encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n    return texture as WebGLTexture;\r\n  }\r\n  updateTexture(\r\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\r\n    const gl = this.gl;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const buffer = encoder.encode(data, width * height);\r\n    gl.texSubImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // level\r\n        0,  // xoffset\r\n        0,  // yoffset\r\n        width, height, encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n  }\r\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\r\n    const gl = this.gl;\r\n    // Make it the target for framebuffer operations - including rendering.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    this.checkError();\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n  }\r\n  readTexture(\r\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\r\n      channels: number): Encoder.DataArrayType {\r\n    const gl = this.gl;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (!this.frameBufferBound) {\r\n      this.attachFramebuffer(texture, width, height);\r\n    }\r\n    const encoder = this.getEncoder(dataType, channels);\r\n    const buffer = encoder.allocate(width * height);\r\n    // bind texture to framebuffer\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    // TODO: Check if framebuffer is ready\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\r\n    this.checkError();\r\n    // unbind FB\r\n    return encoder.decode(buffer, dataSize);\r\n  }\r\n  isFramebufferReady(): boolean {\r\n    // TODO: Implement logic to check if the framebuffer is ready\r\n    return true;\r\n  }\r\n  getActiveTexture(): string {\r\n    const gl = this.gl;\r\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\r\n  }\r\n  getTextureBinding(): WebGLTexture {\r\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\r\n  }\r\n  getFramebufferBinding(): WebGLFramebuffer {\r\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n  }\r\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\r\n    const gl = this.gl;\r\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\r\n    gl.enableVertexAttribArray(positionHandle);\r\n    if (textureCoordHandle !== -1) {\r\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\r\n      gl.enableVertexAttribArray(textureCoordHandle);\r\n    }\r\n    this.checkError();\r\n  }\r\n  createProgram(\r\n      vertexShader: WebGLShader,\r\n      fragShader: WebGLShader,\r\n      ): WebGLProgram {\r\n    const gl = this.gl;\r\n    const program = gl.createProgram()!;\r\n\r\n    // the program consists of our shaders\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    return program;\r\n  }\r\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\r\n    const gl = this.gl;\r\n    const shader = gl.createShader(shaderType);\r\n    if (!shader) {\r\n      throw new Error(`createShader() returned null with type ${shaderType}`);\r\n    }\r\n\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}`);\r\n    }\r\n    return shader;\r\n  }\r\n  deleteShader(shader: WebGLShader): void {\r\n    this.gl.deleteShader(shader);\r\n  }\r\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\r\n    const gl = this.gl;\r\n    gl.activeTexture(gl.TEXTURE0 + position);\r\n    this.checkError();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    this.checkError();\r\n    gl.uniform1i(uniformHandle, position);\r\n    this.checkError();\r\n  }\r\n  draw(): void {\r\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    this.checkError();\r\n  }\r\n  checkError(): void {\r\n    if (env.debug) {\r\n      const gl = this.gl;\r\n      const error = gl.getError();\r\n      let label = '';\r\n      switch (error) {\r\n        case (gl.NO_ERROR):\r\n          return;\r\n        case (gl.INVALID_ENUM):\r\n          label = 'INVALID_ENUM';\r\n          break;\r\n        case (gl.INVALID_VALUE):\r\n          label = 'INVALID_VALUE';\r\n          break;\r\n        case (gl.INVALID_OPERATION):\r\n          label = 'INVALID_OPERATION';\r\n          break;\r\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\r\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\r\n          break;\r\n        case (gl.OUT_OF_MEMORY):\r\n          label = 'OUT_OF_MEMORY';\r\n          break;\r\n        case (gl.CONTEXT_LOST_WEBGL):\r\n          label = 'CONTEXT_LOST_WEBGL';\r\n          break;\r\n        default:\r\n          label = 'Unknown WebGL Error: ' + error.toString(16);\r\n      }\r\n      throw new Error(label);\r\n    }\r\n  }\r\n  deleteTexture(texture: WebGLTexture): void {\r\n    this.gl.deleteTexture(texture);\r\n  }\r\n  deleteProgram(program: WebGLProgram): void {\r\n    this.gl.deleteProgram(program);\r\n  }\r\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\r\n    if (this.version === 2) {\r\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\r\n    }\r\n\r\n    switch (dataType) {\r\n      case 'float':\r\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\r\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\r\n        } else {\r\n          return new DataEncoders.RGBAFloatDataEncoder(\r\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\r\n        }\r\n      case 'int':\r\n        throw new Error('not implemented');\r\n      case 'byte':\r\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\r\n      default:\r\n        throw new Error(`Invalid dataType: ${dataType}`);\r\n    }\r\n  }\r\n  clearActiveTextures(): void {\r\n    const gl = this.gl;\r\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\r\n      gl.activeTexture(gl.TEXTURE0 + unit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    const gl = this.gl;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteFramebuffer(this.framebuffer);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.deleteBuffer(this.vertexbuffer);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    gl.finish();\r\n    this.disposed = true;\r\n  }\r\n\r\n  private createDefaultGeometry(): Float32Array {\r\n    // Sets of x,y,z(=0),s,t coordinates.\r\n    return new Float32Array([\r\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\r\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\r\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\r\n      1.0,  -1.0, 0.0, 1.0, 0.0\r\n    ]);  // lower right\r\n  }\r\n  private createVertexbuffer(): WebGLBuffer {\r\n    const gl = this.gl;\r\n    const buffer = gl.createBuffer();\r\n    if (!buffer) {\r\n      throw new Error('createBuffer() returned null');\r\n    }\r\n    const geometry = this.createDefaultGeometry();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\r\n    this.checkError();\r\n    return buffer;\r\n  }\r\n  private createFramebuffer(): WebGLFramebuffer {\r\n    const fb = this.gl.createFramebuffer();\r\n    if (!fb) {\r\n      throw new Error('createFramebuffer returned null');\r\n    }\r\n    return fb;\r\n  }\r\n\r\n  private queryVitalParameters(): void {\r\n    const gl = this.gl;\r\n\r\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\r\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\r\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\r\n\r\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\r\n      throw new Error(`both float32 and float16 TextureType are not supported`);\r\n    }\r\n\r\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\r\n\r\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\r\n    // this.webglVersion = gl.getParameter(gl.VERSION);\r\n\r\n    if (this.version === 2) {\r\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\r\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\r\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\r\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\r\n    }\r\n  }\r\n  private getExtensions(): void {\r\n    if (this.version === 2) {\r\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\r\n    } else {\r\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\r\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\r\n    }\r\n  }\r\n\r\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\r\n    // test whether Float32 texture is supported:\r\n    // STEP.1 create a float texture\r\n    const gl = this.gl;\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n    // STEP.2 bind a frame buffer\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // STEP.3 attach texture to framebuffer\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    // STEP.4 test whether framebuffer is complete\r\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteTexture(texture);\r\n    gl.deleteFramebuffer(frameBuffer);\r\n    return isComplete;\r\n  }\r\n\r\n  private checkRenderFloat32(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  private checkFloat32Download(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  /**\r\n   * Check whether GL_BLEND is supported\r\n   */\r\n  private checkFloat32Blend(): boolean {\r\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\r\n    // https://github.com/microsoft/onnxjs/issues/145\r\n\r\n    const gl = this.gl;\r\n\r\n    let texture: WebGLTexture|null|undefined;\r\n    let frameBuffer: WebGLFramebuffer|null|undefined;\r\n    let vertexShader: WebGLShader|null|undefined;\r\n    let fragmentShader: WebGLShader|null|undefined;\r\n    let program: WebGLProgram|null|undefined;\r\n\r\n    try {\r\n      texture = gl.createTexture();\r\n      frameBuffer = gl.createFramebuffer();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n      gl.enable(gl.BLEND);\r\n\r\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      if (!vertexShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(vertexShader, 'void main(){}');\r\n      gl.compileShader(vertexShader);\r\n\r\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      if (!fragmentShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(fragmentShader, `precision highp float;void main(){gl_FragColor=vec4(0.5);}`);\r\n      gl.compileShader(fragmentShader);\r\n\r\n      program = gl.createProgram();\r\n      if (!program) {\r\n        return false;\r\n      }\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      gl.useProgram(program);\r\n\r\n      gl.drawArrays(gl.POINTS, 0, 1);\r\n      return gl.getError() === gl.NO_ERROR;\r\n\r\n    } finally {\r\n      gl.disable(gl.BLEND);\r\n\r\n      if (program) {\r\n        gl.deleteProgram(program);\r\n      }\r\n      if (vertexShader) {\r\n        gl.deleteShader(vertexShader);\r\n      }\r\n      if (fragmentShader) {\r\n        gl.deleteShader(fragmentShader);\r\n      }\r\n      if (frameBuffer) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(frameBuffer);\r\n      }\r\n      if (texture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(texture);\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nexport declare namespace Encoder {\r\n  export interface DataTypeMap {\r\n    float: Float32Array;\r\n    byte: Uint8Array;\r\n    int: Uint32Array;\r\n  }\r\n  export type DataType = keyof DataTypeMap;\r\n  type DataArrayType = DataTypeMap[DataType];\r\n\r\n  export const enum Usage {\r\n    Default = 0,\r\n    UploadOnly,\r\n    Download4BytesAsFloat32,\r\n  }\r\n}\r\n\r\n/**\r\n * Abstraction for mapping data types to texture texlets\r\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\r\n * Decoding means how a texlet's channels are mapped to a resulting Float32\r\n */\r\nexport interface DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\r\n  allocate(size: number): Encoder.DataArrayType;\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\r\n}\r\n/**\r\n * WebGL2 data encoder\r\n * Uses R32F as the format for texlet\r\n */\r\nexport class RedFloat32DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.R32F;\r\n      this.format = gl.RED;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA32F;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\r\n    let result: Float32Array;\r\n    let source: Float32Array;\r\n    if (src.constructor !== Float32Array) {\r\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\r\n      source = new Float32Array(src);\r\n    }\r\n    if (textureSize * this.channelSize > src.length) {\r\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\r\n      source = src as Float32Array;\r\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\r\n      source.forEach((v, i) => result[i] = v);\r\n    } else {\r\n      source = src as Float32Array;\r\n      result = source;\r\n    }\r\n    return result;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n/**\r\n * Data encoder for WebGL 1 with support for floating point texture\r\n */\r\nexport class RGBAFloatDataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\r\n    if (channels !== 1 && channels !== 4) {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n    this.internalFormat = gl.RGBA;\r\n    this.format = gl.RGBA;\r\n    this.channelSize = channels;\r\n    this.textureType = textureType || gl.FLOAT;\r\n  }\r\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\r\n    let dest = src;\r\n    if (this.channelSize === 1) {\r\n      Logger.verbose('Encoder', 'Exploding into a larger array');\r\n      dest = this.allocate(textureSize) as Float32Array;\r\n      src.forEach((v, i) => dest[i * 4] = v);\r\n    }\r\n    return dest;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n\r\nexport class Uint8DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize = 4;\r\n  constructor(gl: WebGLRenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.ALPHA;\r\n      this.format = gl.ALPHA;  // not tested\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Uint8Array, textureSize: number): Encoder.DataArrayType {\r\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Uint8Array(size * this.channelSize);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\r\n    if (buffer.constructor === Uint8Array) {\r\n      return buffer.subarray(0, dataSize) as Uint8Array;\r\n    }\r\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {env} from '../env';\r\n\r\nimport {Environment} from './env';\r\n\r\nclass ENV implements Environment {\r\n  public set debug(value: boolean) {\r\n    env.debug = value;\r\n  }\r\n  public get debug(): boolean {\r\n    return env.debug;\r\n  }\r\n}\r\n\r\nexport const envImpl = new ENV();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * represent a tensor with specified dimensions and data type.\r\n */\r\nexport interface Tensor {\r\n  /**\r\n   * get the dimensions of the tensor\r\n   */\r\n  readonly dims: ReadonlyArray<number>;\r\n\r\n  /**\r\n   * get the data type of the tensor\r\n   */\r\n  readonly type: Tensor.Type;\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  readonly size: number;\r\n\r\n  /**\r\n   * get the underlying data of the tensor\r\n   */\r\n  readonly data: Tensor.DataType;\r\n\r\n  /**\r\n   * get value of an element\r\n   * @param indices the indices to the element\r\n   * @returns value of the element\r\n   */\r\n  get(...indices: number[]): Tensor.ElementType;\r\n\r\n  /**\r\n   * get value of an element\r\n   * @param indices the indices to the element\r\n   * @returns value of the element\r\n   */\r\n  get(indices: ReadonlyArray<number>): Tensor.ElementType;\r\n\r\n  /**\r\n   * set value of an element\r\n   * @param value the value to set\r\n   * @param indices the indices to the element\r\n   */\r\n  set(value: Tensor.ElementType, ...indices: number[]): void;\r\n\r\n  /**\r\n   * set value of an element\r\n   * @param value the value to set\r\n   * @param indices the indices to the element\r\n   */\r\n  set(value: Tensor.ElementType, indices: ReadonlyArray<number>): void;\r\n}\r\n\r\nexport declare namespace Tensor {\r\n  interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    int32: Int32Array;\r\n    string: string[];\r\n  }\r\n\r\n  interface ElementTypeMap {\r\n    bool: boolean;\r\n    float32: number;\r\n    int32: number;\r\n    string: string;\r\n  }\r\n\r\n  type DataType = DataTypeMap[Type];\r\n  type ElementType = ElementTypeMap[Type];\r\n\r\n  /**\r\n   * represent the data type of a tensor\r\n   */\r\n  export type Type = keyof DataTypeMap;\r\n}\r\n\r\nexport interface TensorConstructor {\r\n  /**\r\n   * Create a Tensor with provided data, dimension, and type\r\n   * @param data The value of the tensor. It could a flat array or a TypedArray.\r\n   * @param type The data type. Should match the value of the tensor, else throw\r\n   *     TypeError exception.\r\n   * @param dims Optional. Should match the length of the value provided. If not\r\n   *     specified, dims will be inferred as a 1d tensor.\r\n   */\r\n  new(data: Tensor.DataType|boolean[]|number[], type: Tensor.Type, dims?: ReadonlyArray<number>): Tensor;\r\n}\r\n\r\nexport interface TensorConstructor {\r\n  // Tensor factory functions\r\n}\r\n\r\nexport interface Tensor {\r\n  // Tensor utilities\r\n}\r\n\r\nimport * as TensorImpl from './tensor-impl';\r\nexport const Tensor: TensorConstructor = TensorImpl.Tensor;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Tensor} from './tensor';\r\n\r\n/**\r\n * represent a runtime instance of an ONNX model\r\n */\r\nexport interface InferenceSession {\r\n  //#region loadModel\r\n\r\n  /**\r\n   * load an ONNX model asynchronously\r\n   * @param uri the URI of the model to load\r\n   */\r\n  loadModel(uri: string): Promise<void>;\r\n  /**\r\n   * load an ONNX model\r\n   * @param blob a Blob object representation of an ONNX model\r\n   */\r\n  loadModel(blob: Blob): Promise<void>;\r\n  /**\r\n   * load an ONNX model\r\n   * @param buffer an ArrayBuffer representation of an ONNX model\r\n   */\r\n  loadModel(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Promise<void>;\r\n  /**\r\n   * load an ONNX model\r\n   * @param buffer an Uint8Array representation of an ONNX model\r\n   */\r\n  loadModel(buffer: Uint8Array): Promise<void>;\r\n\r\n  //#endregion loadModel\r\n\r\n  /**\r\n   * execute the model asynchronously with the given inputs, output names and options\r\n   * @param inputs representation of the model input. It can be a string-to-tensor Map object or a plain object,\r\n   *     with all required inputs present with their names as keys; it can be a tensor array as well, with input\r\n   *     tensors inside in the order defined by the model.\r\n   * @param options Optional. A set of options that controls the behavior of model inference\r\n   * @returns a Promise object representing the result of the execution. Resolve to a string-to-tensor Map object\r\n   *     for the model output, or reject to any runtime error.\r\n   */\r\n  run(inputs: InferenceSession.InputType, options?: InferenceSession.RunOptions): Promise<InferenceSession.OutputType>;\r\n\r\n  /**\r\n   * start profiling for the session\r\n   */\r\n  startProfiling(): void;\r\n  /**\r\n   * end profiling for the session and flush data\r\n   */\r\n  endProfiling(): void;\r\n}\r\n\r\nexport declare namespace InferenceSession {\r\n  type TensorsMapType = ReadonlyMap<string, Tensor>;\r\n  type TensorsIndexType = {readonly [name: string]: Tensor};\r\n  type TensorsArrayType = ReadonlyArray<Tensor>;\r\n  type InputType = TensorsMapType|TensorsIndexType|TensorsArrayType;\r\n  type OutputType = TensorsMapType;\r\n\r\n  export namespace Config {\r\n    /**\r\n     * represent the configuration of the profiler that used in an inference session\r\n     */\r\n    export interface Profiler {\r\n      /**\r\n       * the max number of events to be recorded\r\n       */\r\n      maxNumberEvents?: number;\r\n      /**\r\n       * the maximum size of a batch to flush\r\n       */\r\n      flushBatchSize?: number;\r\n      /**\r\n       * the maximum interval in milliseconds to flush\r\n       */\r\n      flushIntervalInMilliseconds?: number;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * configuration for creating a new inference session\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * specify a hint of the preferred backend. If not set, the backend will be determined by the platform and\r\n     * environment.\r\n     */\r\n    backendHint?: string;\r\n\r\n    /**\r\n     * specify the configuration of the profiler that used in an inference session\r\n     */\r\n    profiler?: Config.Profiler;\r\n  }\r\n\r\n  /**\r\n   * options for running inference\r\n   */\r\n  export interface RunOptions {\r\n    /**\r\n     * represent a list of output names as an array of string. This must be a subset of the output list defined by the\r\n     * model. If not specified, use the model's output list.\r\n     */\r\n    outputNames?: ReadonlyArray<string>;\r\n  }\r\n}\r\n\r\nexport interface InferenceSessionConstructor {\r\n  /**\r\n   * construct a new inference session\r\n   * @param config specify configuration for creating a new inference session\r\n   */\r\n  new(config?: InferenceSession.Config): InferenceSession;\r\n}\r\n\r\nimport * as InferenceSessionImpl from './inference-session-impl';\r\nexport const InferenceSession: InferenceSessionConstructor = InferenceSessionImpl.InferenceSession;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Session} from '../session';\r\nimport {Tensor as InternalTensor} from '../tensor';\r\n\r\nimport {InferenceSession as InferenceSessionInterface} from './inference-session';\r\nimport * as TensorInterface from './tensor';\r\nimport {Tensor as ApiTensor} from './tensor-impl';\r\nimport * as tensorUtils from './tensor-impl-utils';\r\n\r\ntype InputType = InferenceSessionInterface.InputType;\r\ntype RunOptions = InferenceSessionInterface.RunOptions;\r\ntype OutputType = InferenceSessionInterface.OutputType;\r\n\r\nexport class InferenceSession implements InferenceSessionInterface {\r\n  session: Session;\r\n  constructor(config?: InferenceSessionInterface.Config) {\r\n    this.session = new Session(config);\r\n  }\r\n  loadModel(uri: string): Promise<void>;\r\n  loadModel(blob: Blob): Promise<void>;\r\n  loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  loadModel(buffer: Uint8Array): Promise<void>;\r\n  loadModel(arg0: string|Blob|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    if (typeof arg0 === 'string') {\r\n      return this.session.loadModel(arg0);\r\n    } else if (typeof Blob !== 'undefined' && (arg0 instanceof Blob)) {\r\n      // create a url from Blob\r\n      const url = URL.createObjectURL(arg0);\r\n      return this.session.loadModel(url);\r\n    } else if (arg0 instanceof ArrayBuffer) {\r\n      // load model from array buffer\r\n      return this.session.loadModel(arg0, byteOffset, length);\r\n    } else if (ArrayBuffer.isView(arg0)) {\r\n      // load model from Uint8array\r\n      return this.session.loadModel(arg0);\r\n    } else {\r\n      throw new Error('Model type is not supported.');\r\n    }\r\n  }\r\n\r\n  async run(inputFeed: InputType, options?: RunOptions): Promise<OutputType> {\r\n    let output = new Map<string, InternalTensor>();\r\n    if (inputFeed instanceof Map) {\r\n      const modelInputFeed = new Map<string, InternalTensor>();\r\n      inputFeed.forEach((value: ApiTensor, key: string) => {\r\n        modelInputFeed.set(key, value.internalTensor);\r\n      });\r\n      output = await this.session.run(modelInputFeed);\r\n    } else if (Array.isArray(inputFeed)) {\r\n      const modelInputFeed: InternalTensor[] = [];\r\n      inputFeed.forEach((value) => {\r\n        modelInputFeed.push(value.internalTensor);\r\n      });\r\n      output = await this.session.run(modelInputFeed);\r\n    } else {\r\n      const modelInputFeed = new Map<string, InternalTensor>();\r\n      for (const name in inputFeed) {\r\n        modelInputFeed.set(name, (inputFeed as {readonly [name: string]: ApiTensor})[name].internalTensor);\r\n      }\r\n    }\r\n    const convertedOutput: Map<string, TensorInterface.Tensor> = new Map<string, TensorInterface.Tensor>();\r\n    output.forEach((value, key) => {\r\n      convertedOutput.set(key, tensorUtils.fromInternalTensor(value));\r\n    });\r\n    return convertedOutput;\r\n  }\r\n  startProfiling(): void {\r\n    this.session.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.session.endProfiling();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {readFile} from 'fs';\r\nimport {promisify} from 'util';\r\n\r\nimport {Backend, SessionHandlerType} from './backend';\r\nimport {ExecutionPlan} from './execution-plan';\r\nimport {Graph} from './graph';\r\nimport {Profiler} from './instrument';\r\nimport {Model} from './model';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nexport declare namespace Session {\r\n  export interface Config {\r\n    backendHint?: string;\r\n    profiler?: Profiler.Config;\r\n  }\r\n\r\n  export interface Context {\r\n    profiler: Readonly<Profiler>;\r\n    graphInputTypes?: Tensor.DataType[];\r\n    graphInputDims?: Array<ReadonlyArray<number>>;\r\n  }\r\n}\r\n\r\nexport class Session {\r\n  constructor(config: Session.Config = {}) {\r\n    this._initialized = false;\r\n    this.backendHint = config.backendHint;\r\n    this.profiler = Profiler.create(config.profiler);\r\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\r\n  }\r\n\r\n  startProfiling() {\r\n    this.profiler.start();\r\n  }\r\n\r\n  endProfiling() {\r\n    this.profiler.stop();\r\n  }\r\n\r\n  async loadModel(uri: string): Promise<void>;\r\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  async loadModel(buffer: Uint8Array): Promise<void>;\r\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    await this.profiler.event('session', 'Session.loadModel', async () => {\r\n      // resolve backend and session handler\r\n      const backend = await Backend(this.backendHint);\r\n      this.sessionHandler = backend.createSessionHandler(this.context);\r\n\r\n      this._model = new Model();\r\n      if (typeof arg === 'string') {\r\n        if (typeof fetch === 'undefined') {\r\n          // node\r\n          const buf = await promisify(readFile)(arg);\r\n          this.initialize(Buffer.from(buf));\r\n        } else {\r\n          // browser\r\n          const response = await fetch(arg);\r\n          const buf = await response.arrayBuffer();\r\n          this.initialize(Buffer.from(buf));\r\n        }\r\n      } else if (!ArrayBuffer.isView(arg)) {\r\n        // load model from ArrayBuffer\r\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\r\n        this.initialize(Buffer.from(arr));\r\n      } else {\r\n        // load model from Uint8array\r\n        this.initialize(Buffer.from(arg));\r\n      }\r\n    });\r\n  }\r\n\r\n  private initialize(modelProtoBlob: Buffer): void {\r\n    if (this._initialized) {\r\n      throw new Error('already initialized');\r\n    }\r\n\r\n    this.profiler.event('session', 'Session.initialize', () => {\r\n      // load graph\r\n      const graphInitializer =\r\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\r\n      this._model.load(modelProtoBlob, graphInitializer);\r\n\r\n      // graph is completely initialzied at this stage , let the interested handlers know\r\n      if (this.sessionHandler.onGraphInitialized) {\r\n        this.sessionHandler.onGraphInitialized(this._model.graph);\r\n      }\r\n      // initialize each operator in the graph\r\n      this.initializeOps(this._model.graph);\r\n\r\n      // instantiate an ExecutionPlan object to be used by the Session object\r\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\r\n    });\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\r\n    if (!this._initialized) {\r\n      throw new Error('session not initialized yet');\r\n    }\r\n\r\n    return this.profiler.event('session', 'Session.run', async () => {\r\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\r\n\r\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\r\n\r\n      return this.createOutput(outputTensors);\r\n    });\r\n  }\r\n\r\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\r\n    const modelInputNames = this._model.graph.getInputNames();\r\n\r\n    // normalize inputs\r\n    // inputs: Tensor[]\r\n    if (Array.isArray(inputs)) {\r\n      if (inputs.length !== modelInputNames.length) {\r\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\r\n      }\r\n    }\r\n    // convert map to array\r\n    // inputs: Map<string, Tensor>\r\n    else {\r\n      if (inputs.size !== modelInputNames.length) {\r\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\r\n      }\r\n\r\n      const sortedInputs = new Array<Tensor>(inputs.size);\r\n      let sortedInputsIndex = 0;\r\n      for (let i = 0; i < modelInputNames.length; ++i) {\r\n        const tensor = inputs.get(modelInputNames[i]);\r\n        if (!tensor) {\r\n          throw new Error(`missing input tensor for: '${name}'`);\r\n        }\r\n        sortedInputs[sortedInputsIndex++] = tensor;\r\n      }\r\n\r\n      inputs = sortedInputs;\r\n    }\r\n\r\n    // validate dims requirements\r\n    // First session run - graph input data is not cached for the session\r\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\r\n        this.context.graphInputDims.length === 0) {\r\n      const modelInputIndices = this._model.graph.getInputIndices();\r\n      const modelValues = this._model.graph.getValues();\r\n\r\n      const graphInputDims = new Array<ReadonlyArray<number>>(modelInputIndices.length);\r\n\r\n      for (let i = 0; i < modelInputIndices.length; ++i) {\r\n        const graphInput = modelValues[modelInputIndices[i]];\r\n        graphInputDims[i] = graphInput.type!.shape.dims;\r\n\r\n        // cached for second and subsequent runs.\r\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\r\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\r\n        this.context.graphInputDims!.push(inputs[i].dims);\r\n      }\r\n\r\n      this.validateInputTensorDims(graphInputDims, inputs, true);\r\n    }\r\n\r\n    // Second and subsequent session runs - graph input data is cached for the session\r\n    else {\r\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\r\n    }\r\n\r\n    // validate types requirement\r\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\r\n\r\n    return inputs;\r\n  }\r\n\r\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedType = graphInputTypes[i];\r\n      const actualType = givenInputs[i].type;\r\n      if (expectedType !== actualType) {\r\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateInputTensorDims(\r\n      graphInputDims: Array<ReadonlyArray<number>>, givenInputs: Tensor[], noneDimSupported: boolean) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedDims = graphInputDims[i];\r\n      const actualDims = givenInputs[i].dims;\r\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\r\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\r\n            actualDims.join(',')}]`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private compareTensorDims(\r\n      expectedDims: ReadonlyArray<number>, actualDims: ReadonlyArray<number>, noneDimSupported: boolean): boolean {\r\n    if (expectedDims.length !== actualDims.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < expectedDims.length; ++i) {\r\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\r\n        // data shape mis-match AND not a 'None' dimension.\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\r\n    const modelOutputNames = this._model.graph.getOutputNames();\r\n    if (outputTensors.length !== modelOutputNames.length) {\r\n      throw new Error(`expected number of outputs do not match number of generated outputs`);\r\n    }\r\n\r\n    const output = new Map<string, Tensor>();\r\n    for (let i = 0; i < modelOutputNames.length; ++i) {\r\n      output.set(modelOutputNames[i], outputTensors[i]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  private initializeOps(graph: Graph): void {\r\n    const nodes = graph.getNodes();\r\n    this._ops = new Array(nodes.length);\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets);\r\n    }\r\n  }\r\n\r\n  private _model: Model;\r\n  private _initialized: boolean;\r\n\r\n  private _ops: Operator[];\r\n  private _executionPlan: ExecutionPlan;\r\n\r\n  private backendHint?: string;\r\n\r\n  private sessionHandler: SessionHandlerType;\r\n  private context: Session.Context;\r\n  private profiler: Readonly<Profiler>;\r\n}\r\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\nimport {OpSet} from './opset';\r\nimport {Session} from './session';\r\n\r\nexport interface InferenceHandler {\r\n  /**\r\n   * dispose the inference handler. it will be called as the last step in Session.run()\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\nexport interface SessionHandler {\r\n  /**\r\n   * transform the graph at initialization time\r\n   * @param graphTransformer the graph transformer to manipulate the model graph\r\n   */\r\n  transformGraph?(graphTransformer: Graph.Transformer): void;\r\n\r\n  /**\r\n   * create an instance of InferenceHandler to use in a Session.run() call\r\n   */\r\n  createInferenceHandler(): InferenceHandler;\r\n\r\n  /**\r\n   * dispose the session handler. it will be called when a session is being disposed explicitly\r\n   */\r\n  dispose(): void;\r\n\r\n  /**\r\n   * Resolves the operator from the name and opset version; backend specific\r\n   * @param node\r\n   * @param opsets\r\n   */\r\n\r\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>): Operator;\r\n  /**\r\n   * This method let's the sessionHandler know that the graph initialization is complete\r\n   * @param graph the completely initialized graph\r\n   */\r\n\r\n  onGraphInitialized?(graph: Graph): void;\r\n\r\n  /**\r\n   * a reference to the corresponding backend\r\n   */\r\n  readonly backend: Backend;\r\n\r\n  /**\r\n   * a reference to the session context\r\n   */\r\n  readonly context: Session.Context;\r\n}\r\n\r\nexport interface Backend {\r\n  /**\r\n   * initialize the backend. will be called only once, when the first time the\r\n   * backend it to be used\r\n   */\r\n  initialize(): boolean|Promise<boolean>;\r\n\r\n  /**\r\n   * create an instance of SessionHandler to use in a Session object's lifecycle\r\n   */\r\n  createSessionHandler(context: Session.Context): SessionHandler;\r\n\r\n  /**\r\n   * dispose the backend. currently this will not be called\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\n// caches all initialized backend instances\r\nconst backendsCache: Map<string, Backend> = new Map();\r\n\r\n/**\r\n * Resolve a reference to the backend. If a hint is specified, the corresponding\r\n * backend will be used.\r\n */\r\nexport async function Backend(hint?: string|ReadonlyArray<string>): Promise<Backend> {\r\n  if (!hint) {\r\n    return Backend(['webgl', 'wasm', 'cpu']);\r\n  } else {\r\n    const hints = typeof hint === 'string' ? [hint] : hint;\r\n\r\n    for (const backendHint of hints) {\r\n      const cache = backendsCache.get(backendHint);\r\n      if (cache) {\r\n        return cache;\r\n      }\r\n\r\n      const backend = await tryLoadBackend(backendHint);\r\n      if (backend) {\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('no available backend to use');\r\n}\r\n\r\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\r\n  const backendObj = onnx.backend;\r\n\r\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\r\n    if (!backendObj[backendHint].disabled) {\r\n      const backend = backendObj[backendHint] as Backend;\r\n      let init = backend.initialize();\r\n      if (typeof init === 'object' && 'then' in init) {\r\n        init = await init;\r\n      }\r\n      if (init) {\r\n        backendsCache.set(backendHint, backend);\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction isBackend(obj: unknown) {\r\n  // tslint:disable-next-line:no-any\r\n  const o = obj as any;\r\n\r\n  // check if an object is a Backend instance\r\n  if (\r\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\r\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\r\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport type BackendType = Backend;\r\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\r\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Logger, Profiler} from './instrument';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nclass KernelOp {\r\n  constructor(public op: Operator, public node: Graph.Node) {}\r\n}\r\n\r\nexport class ExecutionPlan {\r\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\r\n    this.initialize(ops);\r\n  }\r\n\r\n  initialize(ops: Operator[]) {\r\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\r\n      const graphNodes = this.graph.getNodes();\r\n      if (graphNodes.length !== ops.length) {\r\n        throw new Error('The size of nodes and OPs do not match.');\r\n      }\r\n\r\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\r\n      this.reset();\r\n\r\n      // look for starter node(s)\r\n      this._starter = [];\r\n      this._ops.forEach((op, i) => {\r\n        let resolved = true;\r\n        for (const input of op.node.inputs) {\r\n          if (\r\n              !this._values[input]                                   // not an initialized input\r\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\r\n          ) {\r\n            resolved = false;\r\n            break;\r\n          }\r\n        }\r\n        if (resolved) {\r\n          this._starter.push(i);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this._values = this.graph.getValues().map(i => i.tensor);\r\n  }\r\n\r\n  execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\r\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\r\n      // reset mediem result\r\n      this.reset();\r\n\r\n      // create inference handler\r\n      const inferenceHandler = sessionHandler.createInferenceHandler();\r\n\r\n      // populate inputs value\r\n      const graphInputs = this.graph.getInputIndices();\r\n      if (modelInputs.length !== graphInputs.length) {\r\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\r\n            modelInputs.length} expected: ${graphInputs.length}`);\r\n      }\r\n\r\n      modelInputs.forEach((input, i) => {\r\n        const index = graphInputs[i];\r\n        this._values[index] = input;\r\n      });\r\n\r\n      // prepare running sequence\r\n      const sequence: number[] = this._starter.slice(0);\r\n\r\n      // execution iterations\r\n      const graphValues = this.graph.getValues();\r\n      const graphNodes = this.graph.getNodes();\r\n\r\n      let rear = 0;\r\n      while (rear < sequence.length) {\r\n        const thisOpIndex = sequence[rear++];\r\n        const thisOp = this._ops[thisOpIndex];\r\n\r\n        // check input\r\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\r\n        if (inputList.indexOf(undefined) !== -1) {\r\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\r\n        }\r\n\r\n        // run\r\n        const inputTensors = inputList as Tensor[];\r\n        Logger.verbose(\r\n            'ExecPlan',\r\n            `Runing op:${thisOp.node.name} (${\r\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\r\n\r\n        const outputList = await this.profiler.event('node', thisOp.node.name, async () => {\r\n          const op = thisOp.op;\r\n          if (!op.checkInputs(inputTensors)) {\r\n            throw new Error(`invalid inputs detected; op: ${thisOp.node.name}`);\r\n          }\r\n\r\n          const result = op.run(inferenceHandler, inputTensors);\r\n\r\n          return result;\r\n        });\r\n\r\n        // check output\r\n        if (outputList.length !== thisOp.node.outputs.length) {\r\n          throw new Error('the size of output does not match model definition.');\r\n        }\r\n\r\n        // fill value\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          if (this._values[j]) {\r\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\r\n          }\r\n          this._values[j] = output;\r\n        });\r\n\r\n        // resolve downstream nodes\r\n        const downstreamNodes = new Set<number>();\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\r\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\r\n            let resolved = true;\r\n            for (const k of currentDownstreamNode.inputs) {\r\n              if (!this._values[k]) {\r\n                resolved = false;\r\n                break;\r\n              }\r\n            }\r\n            if (resolved) {\r\n              downstreamNodes.add(currentDownstreamNodeIndex);\r\n            }\r\n          }\r\n        });\r\n        sequence.push(...downstreamNodes);\r\n      }\r\n\r\n      const output: Tensor[] = [];\r\n      this.graph.getOutputIndices().forEach((outputIndex, i) => {\r\n        const thisValue = this._values[outputIndex];\r\n        if (thisValue === undefined) {\r\n          throw new Error(`required output [${outputIndex}] does not have value`);\r\n        }\r\n        // tslint:disable-next-line:no-unused-expression-chai\r\n        thisValue.data;\r\n        output.push(thisValue);\r\n      });\r\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\r\n      inferenceHandler.dispose();\r\n      return output;\r\n    });\r\n  }\r\n\r\n  _values: Array<Tensor|undefined>;\r\n  _ops: KernelOp[];\r\n  _starter: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {OpSet} from './opset';\r\nimport {LongUtil} from './util';\r\n\r\nexport class Model {\r\n  // empty model\r\n  constructor() {}\r\n\r\n  load(buf: Buffer, graphInitializer?: Graph.Initializer): void {\r\n    const modelProto = onnx.ModelProto.decode(buf);\r\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n\r\n    this._opsets = modelProto.opsetImport.map(i => {\r\n      return {domain: i.domain as string, version: LongUtil.longToNumber(i.version!)};\r\n    });\r\n\r\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\r\n  }\r\n\r\n  private _graph: Graph;\r\n  get graph(): Graph {\r\n    return this._graph;\r\n  }\r\n\r\n  private _opsets: OpSet[];\r\n  get opsets(): ReadonlyArray<OpSet> {\r\n    return this._opsets;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Attribute} from './attribute';\r\nimport {Tensor} from './tensor';\r\nimport {ProtoUtil} from './util';\r\n\r\nexport declare namespace Graph {\r\n  export interface Shape {\r\n    readonly dims: ReadonlyArray<number>;\r\n  }\r\n  export interface ValueType {\r\n    readonly tensorType: Tensor.DataType;\r\n    readonly shape: Shape;\r\n  }\r\n  export interface Value {\r\n    // the tensor data. empty for non-initialized inputs\r\n    readonly tensor?: Tensor;\r\n\r\n    // index to the Node where the value comes from. -1 for initializer.\r\n    readonly from: number;\r\n\r\n    // indices to the Nodes where the values go to.\r\n    readonly to: ReadonlyArray<number>;\r\n\r\n    // value type specification. empty for non-input values.\r\n    readonly type?: ValueType;\r\n  }\r\n  export interface Node {\r\n    // name of the node\r\n    readonly name: string;\r\n\r\n    // the operator type\r\n    readonly opType: string;\r\n\r\n    // indices to the Values where the inputs come from.\r\n    readonly inputs: ReadonlyArray<number>;\r\n\r\n    // indices to the Values where the outpus go to.\r\n    readonly outputs: ReadonlyArray<number>;\r\n\r\n    // the attributes that used by the operator\r\n    readonly attributes: Attribute;\r\n  }\r\n\r\n  /**\r\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\r\n   */\r\n  export interface Transformer {\r\n    removeAllIdentityNodes(): void;\r\n    removeAllDropoutNodes(): void;\r\n    // TODO: add generic functions to manipulate the graph\r\n  }\r\n\r\n  // an initializer can use transformer to transform the graph\r\n  export interface Initializer {\r\n    transformGraph(transformer: Transformer): void;\r\n  }\r\n}\r\n\r\nexport interface Graph {\r\n  getInputIndices(): ReadonlyArray<number>;\r\n  getInputNames(): ReadonlyArray<string>;\r\n  getOutputIndices(): ReadonlyArray<number>;\r\n  getOutputNames(): ReadonlyArray<string>;\r\n  getValues(): ReadonlyArray<Graph.Value>;\r\n  getNodes(): ReadonlyArray<Graph.Node>;\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const Graph = {\r\n  /**\r\n   * construct a graph from a graph protobuf type\r\n   */\r\n  from: (graphProto: onnx.IGraphProto, initializer?: Graph.Initializer) => new GraphImpl(graphProto, initializer)\r\n};\r\n\r\nclass Value implements Graph.Value {\r\n  constructor(valueInfo?: onnx.IValueInfoProto) {\r\n    this._from = undefined;\r\n    this._to = [];\r\n    this.tensor = undefined;\r\n    this.type = undefined;\r\n\r\n    if (valueInfo) {\r\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\r\n    }\r\n  }\r\n\r\n  _from?: number;  // -1 represent from initializer\r\n  get from() {\r\n    return this._from!;\r\n  }\r\n  _to: number[];\r\n  get to() {\r\n    return this._to;\r\n  }\r\n  type?: Graph.ValueType;\r\n  tensor?: Tensor;\r\n}\r\n\r\nclass Node implements Graph.Node {\r\n  constructor(_nodeProto: onnx.INodeProto) {\r\n    this.name = _nodeProto.name!;\r\n    this.opType = _nodeProto.opType!;\r\n    this.inputs = [];\r\n    this.outputs = [];\r\n    this.attributes = new Attribute(_nodeProto.attribute);\r\n    this.executeNode = true;\r\n  }\r\n\r\n  name: string;\r\n  opType: string;\r\n  inputs: number[];\r\n  outputs: number[];\r\n  attributes: Attribute;\r\n  executeNode: boolean;\r\n}\r\n\r\nclass GraphImpl implements Graph, Graph.Transformer {\r\n  private _allData: Value[];\r\n\r\n  private _allInputIndices: number[];\r\n  private _allInputNames: string[];\r\n\r\n  private _allOutputIndices: number[];\r\n  private _allOutputNames: string[];\r\n\r\n  private _nodes: Node[];\r\n\r\n  constructor(graph: onnx.IGraphProto, graphInitializer?: Graph.Initializer) {\r\n    if (!graph) {\r\n      throw new TypeError('graph is empty');\r\n    }\r\n\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    this.buildGraph(graph);\r\n\r\n    // execute any transformation logic for the graph (if applicable)\r\n    this.transformGraph(graphInitializer);\r\n\r\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\r\n    this.checkIsAcyclic();\r\n  }\r\n\r\n  getInputIndices(): ReadonlyArray<number> {\r\n    return this._allInputIndices;\r\n  }\r\n\r\n  getInputNames(): ReadonlyArray<string> {\r\n    return this._allInputNames;\r\n  }\r\n\r\n  getOutputIndices(): ReadonlyArray<number> {\r\n    return this._allOutputIndices;\r\n  }\r\n\r\n  getOutputNames(): ReadonlyArray<string> {\r\n    return this._allOutputNames;\r\n  }\r\n\r\n  getValues(): ReadonlyArray<Graph.Value> {\r\n    return this._allData;\r\n  }\r\n\r\n  getNodes(): ReadonlyArray<Graph.Node> {\r\n    return this._nodes;\r\n  }\r\n\r\n  private buildGraph(graph: onnx.IGraphProto) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    if (!graph.input) {\r\n      throw new Error('missing information in graph: input');\r\n    }\r\n    const inputValueNames = [];\r\n    for (const i of graph.input) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated input name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      inputValueNames.push(i.name!);\r\n    }\r\n\r\n    // scan all initializers\r\n    if (!graph.initializer) {\r\n      throw new Error('missing information in graph: initializer');\r\n    }\r\n    for (const i of graph.initializer) {\r\n      let index = dataIndices.get(i.name!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        value.type = {\r\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\r\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\r\n        };\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(i.name!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromProto(i);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    if (!graph.output) {\r\n      throw new Error('missing information in graph: output');\r\n    }\r\n    for (const i of graph.output) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated output name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(i.name!);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.node) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (const nodeProto of graph.node) {\r\n      if (!nodeProto.name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            nodeProto.name = name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(nodeProto.name)) {\r\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\r\n      nodesIndices.set(nodeProto.name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n      if (!nodeProto.output) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (const output of nodeProto.output) {\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType === 'Constant') {\r\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\r\n            throw new Error(`missing attributes or missing tensor value in attributes for this Constant operator`);\r\n          }\r\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\r\n            throw new Error(`missing output or incorrect number of outputs for this Constant operator`);\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n\r\n      if (!nodeProto.input) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (const input of nodeProto.input) {\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private checkIsAcyclic() {\r\n    // go through the graph and check for cycles or other fatal inconsistencies\r\n    const starters: Set<number> = new Set<number>();\r\n    this._allInputIndices.forEach(i => {\r\n      const data = this._allData[i];\r\n      data._to.forEach(j => {\r\n        starters.add(j);\r\n      });\r\n    });\r\n\r\n    // Iterative DFS to check for cycles\r\n    const nodesStack = Array.from(starters);\r\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\r\n\r\n    while (nodesStack.length > 0) {\r\n      const nodeIndex = nodesStack.pop()!;\r\n      // this node has now been processed completely. Mark this node 'black' to denote this.\r\n      if (nodesState[nodeIndex] === 'gray') {\r\n        nodesState[nodeIndex] = 'black';\r\n      } else {\r\n        // this node is under processing stage. mark this node 'gray' to denote this.\r\n        nodesStack.push(nodeIndex);\r\n        nodesState[nodeIndex] = 'gray';\r\n\r\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\r\n          const data = this._allData[outgoingEdgeIndex];\r\n          if (typeof data.tensor !== 'undefined') {\r\n            throw new Error(`node outputs should not be initialized`);\r\n          }\r\n          if (data._from !== nodeIndex) {\r\n            throw new Error(`from property of the Value object doesn't match index of Node being processed`);\r\n          }\r\n          data._to.forEach((downstreamNodeIndex) => {\r\n            // back edge found - cyclic\r\n            if (nodesState[downstreamNodeIndex] === 'gray') {\r\n              throw new Error(`model graph is cyclic`);\r\n            }\r\n            // tree edge found - continue processing by adding it to stack\r\n            else if (nodesState[downstreamNodeIndex] === 'white') {\r\n              nodesStack.push(downstreamNodeIndex);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\r\n    // apply common transform\r\n    this.removeAllIdentityNodes();\r\n    this.removeAllDropoutNodes();\r\n\r\n    // apply initializer specific transform\r\n    if (graphInitializer) {\r\n      graphInitializer.transformGraph(this);\r\n    }\r\n\r\n    // finalize graph\r\n    this.finalizeGraph();\r\n  }\r\n\r\n  /**\r\n   * finalize the graph.\r\n   *\r\n   * this function should be called after all the transformation completed.\r\n   * this function removes all unnecessary nodes and values from the graph\r\n   */\r\n  finalizeGraph() {\r\n    let offset = 0;\r\n    // delete all nodes that are not being executed\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      if (!this._nodes[i].executeNode) {\r\n        // delete this node and shift all subsequent nodes up\r\n        offset++;\r\n        // delete all output values\r\n        this._nodes[i].outputs.forEach(ind => {\r\n          this._allData[ind]._from = -2;\r\n        });\r\n        this._nodes.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        // update the value table\r\n        this._nodes[i].inputs.forEach(value => {\r\n          const ind = this._allData[value]._to.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allData[value]._to[ind] = i;\r\n          }\r\n        });\r\n        this._nodes[i].outputs.forEach(value => {\r\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\r\n            this._allData[value]._from! = i;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    offset = 0;\r\n    // delete all values that are not being referenced\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      // if current value is neither linked to next node, nor an output value, remove it.\r\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\r\n        offset++;\r\n        this._allData.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        let ind = -1;\r\n        // if current value is neither an input value nor an initializer, find the node it's\r\n        // coming from and update the corresponding node output\r\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\r\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[this._allData[i].from].outputs[ind] = i;\r\n          }\r\n        } else {\r\n          // if current value is an input value, update its reference in inputIndices\r\n          ind = this._allInputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allInputIndices[ind] = i;\r\n          }\r\n        }\r\n\r\n        // find the node that the current value is linking to and update its input reference\r\n        this._allData[i].to.forEach(node => {\r\n          ind = this._nodes[node].inputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[node].inputs[ind] = i;\r\n          }\r\n        });\r\n        if (this._allData[i].to.length === 0) {\r\n          // if current value is a graph output, update its reference in outputIndices\r\n          ind = this._allOutputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allOutputIndices[ind] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete the specifed node. Assume the node has only one input and the first output connected to other nodes\r\n   * @param nodeIndex The index of node to be deleted\r\n   */\r\n  private deleteNode(nodeIndex: number) {\r\n    const node = this._nodes[nodeIndex];\r\n    if (node.inputs.length > 1) {\r\n      throw new Error(`Node deletion with multiple inputs is not supported. `);\r\n    }\r\n    if (node.outputs.length > 1) {\r\n      for (let i = 1; i < node.outputs.length; i++) {\r\n        if (this._allData[node.outputs[i]].to.length > 0) {\r\n          throw new Error(`Node deletion with more than one output connected to other nodes is not supported. `);\r\n        }\r\n      }\r\n    }\r\n\r\n    // this node wil not be executed\r\n    node.executeNode = false;\r\n    const inputValueIndex = node.inputs[0];\r\n    const outputValueIndex = node.outputs[0];\r\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\r\n\r\n    // remove this node from the to property of the input Value\r\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\r\n    // should not happen\r\n    if (delIndex === -1) {\r\n      throw new Error(`The Value object doesn't have the current Node in it's 'to' property `);\r\n    }\r\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\r\n\r\n    // clear node indices consuming this output Value\r\n    this._allData[outputValueIndex]._to = [];\r\n\r\n    // if the output of this node is a graph output, adjust the index appropriately\r\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\r\n    if (index !== -1) {\r\n      this._allOutputIndices[index] = inputValueIndex;\r\n    }\r\n\r\n    // override the inputs for nodes consuming this node's output with the input to this node\r\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\r\n      for (const nodeIndex of nodesConsumingOutput) {\r\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\r\n        // should not happen\r\n        if (replaceIndex === -1) {\r\n          throw new Error(`The Node object doesn't have the output Value in it's 'inputs' property `);\r\n        }\r\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\r\n        this._allData[inputValueIndex].to.push(nodeIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeAllDropoutNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Dropout' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Dropout') {\r\n        // the node should have exactly 1 input and 1 or 2 outputs\r\n        if (node.inputs.length !== 1) {\r\n          throw new Error(`Dropout nodes should only contain one input. `);\r\n        }\r\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\r\n          throw new Error(`Dropout nodes should contain either 1 or 2 output(s)`);\r\n        }\r\n        // the second output should not be referenced by any other node\r\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\r\n          throw new Error(`Dropout nodes's second output should not be referenced by other nodes`);\r\n        }\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  removeAllIdentityNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Identity' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Identity') {\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil} from './util';\r\n\r\nexport declare namespace Attribute {\r\n  export interface DataTypeMap {\r\n    float: number;\r\n    int: number;\r\n    string: string;\r\n    tensor: Tensor;\r\n    floats: number[];\r\n    ints: number[];\r\n    strings: string[];\r\n    tensors: Tensor[];\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n}\r\n\r\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\r\n\r\ntype Value = [ValueTypes, Attribute.DataType];\r\n\r\nexport class Attribute {\r\n  constructor(attributes: onnx.IAttributeProto[]|null|undefined) {\r\n    this._attributes = new Map();\r\n    if (attributes !== null && attributes !== undefined) {\r\n      for (const attr of attributes) {\r\n        this._attributes.set(attr.name!, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n      }\r\n\r\n      if (this._attributes.size < attributes.length) {\r\n        throw new Error('duplicated attribute names');\r\n      }\r\n    }\r\n  }\r\n\r\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\r\n    this._attributes.set(key, [value, type]);\r\n  }\r\n  delete(key: string): void {\r\n    this._attributes.delete(key);\r\n  }\r\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\r\n    return this.get(key, 'float', defaultValue);\r\n  }\r\n\r\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\r\n    return this.get(key, 'int', defaultValue);\r\n  }\r\n\r\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\r\n    return this.get(key, 'string', defaultValue);\r\n  }\r\n\r\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\r\n    return this.get(key, 'tensor', defaultValue);\r\n  }\r\n\r\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\r\n    return this.get(key, 'floats', defaultValue);\r\n  }\r\n\r\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\r\n    return this.get(key, 'ints', defaultValue);\r\n  }\r\n\r\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\r\n    return this.get(key, 'strings', defaultValue);\r\n  }\r\n\r\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\r\n    return this.get(key, 'tensors', defaultValue);\r\n  }\r\n\r\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\r\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\r\n    const valueAndType = this._attributes.get(key);\r\n    if (valueAndType === undefined) {\r\n      if (defaultValue !== undefined) {\r\n        return defaultValue;\r\n      }\r\n      throw new Error(`required attribute not found: ${key}`);\r\n    }\r\n    if (valueAndType[1] !== type) {\r\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\r\n    }\r\n    return valueAndType[0] as V;\r\n  }\r\n\r\n  private static getType(attr: onnx.IAttributeProto): Attribute.DataType {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return 'float';\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return 'int';\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return 'string';\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return 'tensor';\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return 'floats';\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return 'ints';\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return 'strings';\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return 'tensors';\r\n      default:\r\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  private static getValue(attr: onnx.IAttributeProto) {\r\n    if (attr.type === onnx.AttributeProto.AttributeType.GRAPH ||\r\n        attr.type === onnx.AttributeProto.AttributeType.GRAPHS) {\r\n      throw new Error('graph attribute is not supported yet');\r\n    }\r\n\r\n    const value = this.getValueNoCheck(attr);\r\n\r\n    // cast LONG to number\r\n    if (attr.type === onnx.AttributeProto.AttributeType.INT && Long.isLong(value)) {\r\n      return (value as Long).toNumber();\r\n    }\r\n\r\n    // cast LONG[] to number[]\r\n    if (attr.type === onnx.AttributeProto.AttributeType.INTS) {\r\n      const arr = (value as Array<number|Long>);\r\n      const numberValue: number[] = new Array<number>(arr.length);\r\n\r\n      for (let i = 0; i < arr.length; i++) {\r\n        const maybeLong = arr[i];\r\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\r\n      }\r\n\r\n      return numberValue;\r\n    }\r\n\r\n    // cast onnx.TensorProto to onnxjs.Tensor\r\n    if (attr.type === onnx.AttributeProto.AttributeType.TENSOR) {\r\n      return Tensor.fromProto(value as onnx.ITensorProto);\r\n    }\r\n\r\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\r\n    if (attr.type === onnx.AttributeProto.AttributeType.TENSORS) {\r\n      const tensorProtos = value as onnx.ITensorProto[];\r\n      return tensorProtos.map(value => Tensor.fromProto(value));\r\n    }\r\n\r\n    // cast Uint8Array to string\r\n    if (attr.type === onnx.AttributeProto.AttributeType.STRING) {\r\n      const utf8String = value as Uint8Array;\r\n      return Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString();\r\n    }\r\n\r\n    // cast Uint8Array[] to string[]\r\n    if (attr.type === onnx.AttributeProto.AttributeType.STRINGS) {\r\n      const utf8Strings = value as Uint8Array[];\r\n      return utf8Strings.map(\r\n          utf8String => Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString());\r\n    }\r\n\r\n    return value as ValueTypes;\r\n  }\r\n\r\n  private static getValueNoCheck(attr: onnx.IAttributeProto) {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return attr.f;\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return attr.i;\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return attr.s;\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return attr.t;\r\n      case onnx.AttributeProto.AttributeType.GRAPH:\r\n        return attr.g;\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return attr.floats;\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return attr.ints;\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return attr.strings;\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return attr.tensors;\r\n      case onnx.AttributeProto.AttributeType.GRAPHS:\r\n        return attr.graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  protected _attributes: Map<string, Value>;\r\n}\r\n"],"sourceRoot":""}